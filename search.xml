<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Go语言入门笔记]]></title>
    <url>%2F2019%2F10%2F11%2FGo%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&#x8BFE;&#x7A0B;&#x5BFC;&#x8BBA; &#x7279;&#x70B9; &#x6CA1;&#x6709;&#x201C;&#x5BF9;&#x8C61;&#x201D;&#xFF0C;&#x6CA1;&#x6709;&#x7EE7;&#x627F;&#xFF0C;&#x6CA1;&#x6709;&#x6CDB;&#x578B;&#xFF0C;&#x6CA1;&#x6709; try/catch &#x6709;&#x63A5;&#x53E3;&#xFF0C;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;&#xFF0C;CSP &#x5E76;&#x53D1;&#x6A21;&#x578B;&#xFF08;goroutine + channel&#xFF09; &#x8BED;&#x6CD5;&#x7B80;&#x5355; &#x57FA;&#x672C;&#x8BED;&#x6CD5; &#x53D8;&#x91CF; &#x9009;&#x62E9;&#xFF0C;&#x5FAA;&#x73AF; &#x6307;&#x9488;&#xFF0C;&#x6570;&#x7EC4;&#xFF0C;&#x5BB9;&#x5668; &#x9762;&#x5411;&#x63A5;&#x53E3; &#x7ED3;&#x6784;&#x4F53; duck typing &#x7684;&#x6982;&#x5FF5; &#x7EC4;&#x5408;&#x7684;&#x601D;&#x60F3; &#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B; &#x95ED;&#x5305;&#x7684;&#x6982;&#x5FF5; &#x5DE5;&#x7A0B;&#x5316; &#x8D44;&#x6E90;&#x7BA1;&#x7406;&#xFF0C;&#x9519;&#x8BEF;&#x5904;&#x7406; &#x6D4B;&#x8BD5;&#x548C;&#x6587;&#x6863; &#x6027;&#x80FD;&#x8C03;&#x4F18; &#x5E76;&#x53D1;&#x7F16;&#x7A0B; goroutine &#x548C; channel &#x7406;&#x89E3;&#x8C03;&#x5EA6;&#x5668; &#x57FA;&#x672C;&#x8BED;&#x6CD5;HelloWorld1234567package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;Hello World!&quot;)} &#x53D8;&#x91CF;&#x5B9A;&#x4E49;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport &quot;fmt&quot;// &#x9ED8;&#x8BA4;&#x53D8;&#x91CF;&#x503C;func variableZeroValue() { var a int var s string fmt.Println(a, s)}// &#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#x503C;func variableInitialValue() { var a, b int = 3, 4 var s string = &quot;abc&quot; fmt.Println(a, b, s)}// &#x53D8;&#x91CF;&#x63A8;&#x65AD;func variableTypeDeduction() { var a, b, c = 1, &quot;abc&quot;, true fmt.Println(a, b, c)}// &#x53D8;&#x91CF;&#x63A8;&#x65AD;&#x7B80;&#x5199;func variableShorter() { a, b, c := 1, &quot;abc&quot;, true fmt.Println(a, b, c)}// &#x5168;&#x5C40;&#x53D8;&#x91CF;var a = 1// &#x5168;&#x5C40;&#x53D8;&#x91CF;&#x5B9A;&#x4E49;&#x4E0D;&#x80FD;&#x4F7F;&#x7528; :=// b := 2// &#x65B9;&#x4FBF;&#x5B9A;&#x4E49;&#x591A;&#x4E2A;var ( b = &quot;abc&quot; c = 1 d = true)func main() { variableZeroValue() variableInitialValue() variableTypeDeduction() variableShorter()} &#x5185;&#x5EFA;&#x53D8;&#x91CF;&#x7C7B;&#x578B; bool, stiring (u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr byte, rune float32, float64, complex64, complex128 &#x5E38;&#x91CF;&#x4E0E;&#x679A;&#x4E3E;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package mainimport ( &quot;fmt&quot; &quot;math&quot;)func tri() { a, b := 3, 4 var c int // &#x5148;&#x628A; int &#x8F6C; float64 &#x518D;&#x8F6C;&#x56DE; int c = int(math.Sqrt(float64(a*a + b*b))) fmt.Println(c)}// &#x5B9A;&#x4E49;&#x5E38;&#x91CF;func consts() { var c int // &#x6307;&#x5B9A;&#x7C7B;&#x578B;, &#x4E0B;&#x9762;&#x9700;&#x8981;&#x5F3A;&#x8F6C;&#x4E3A; float64 // const a, b int = 3, 4 // c = int(math.Sqrt(float64(a*a + b*b))) // &#x4E0D;&#x6307;&#x5B9A;&#x7C7B;&#x578B;, &#x4E0D;&#x9700;&#x8981;&#x5F3A;&#x8F6C;&#x4E3A; float64 const a, b = 3, 4 c = int(math.Sqrt(a*a + b*b)) fmt.Println(c)}// &#x5B9A;&#x4E49;&#x679A;&#x4E3E;func enums() { //const ( // cpp = 0 // java = 1 // python = 2 // golang = 3 //) // &#x4F7F;&#x7528; iota &#x81EA;&#x589E;&#x52A0;&#xFF0C;&#x4E0E;&#x4E0A;&#x9762;&#x4E00;&#x6837; const ( cpp = iota java python golang _ // &#x8DF3;&#x5F00; 4 javascript ) fmt.Println(cpp, java, python, golang, javascript) // 0 1 2 3 5 // b, kb, mb, gb, tb, pb const ( b = 1 &lt;&lt; (10 * iota) kb mb gb tb pb ) fmt.Println(b, kb, mb, gb, tb, pb) // 1 1024 1048576 1073741824 1099511627776 1125899906842624}func main() { tri() consts() enums()} &#x6761;&#x4EF6;&#x8BED;&#x53E5;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot;)// iffunc read() { const filename = &quot;abc.txt&quot; // &#x8BFB;&#x53D6;&#x6587;&#x4EF6; contents, err := ioutil.ReadFile(filename) if err != nil { fmt.Println(err) } else { fmt.Printf(&quot;%s\n&quot;, contents) } // &#x4E5F;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x5199; if contents, err := ioutil.ReadFile(filename); err != nil { fmt.Println(err) } else { fmt.Printf(&quot;%s\n&quot;, contents) }}// switchfunc eval(a, b int, op string) int { var result int // switch &#x4F1A;&#x81EA;&#x52A8; break, &#x9664;&#x975E;&#x4F7F;&#x7528; fallthrough switch op { case &quot;+&quot;: result = a + b case &quot;-&quot;: result = a - b case &quot;*&quot;: result = a * b case &quot;/&quot;: result = a / b default: panic(&quot;unsupported operator: &quot; + op) } return result}// switchfunc grade(score int) string { // switch &#x540E;&#x9762;&#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F; switch { case score &lt; 0 || score &gt; 100: panic(&quot;wrong score&quot;) case score &lt; 60: return &quot;E&quot; case score &lt; 70: return &quot;D&quot; case score &lt; 80: return &quot;C&quot; case score &lt; 90: return &quot;B&quot; case score &lt;= 100: return &quot;A&quot; } return &quot;&quot;}func main() { read() fmt.Println(eval(1, 2, &quot;+&quot;)) // 3 grade(100)} &#x5FAA;&#x73AF;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport ( &quot;bufio&quot; &quot;fmt&quot; &quot;os&quot; &quot;strconv&quot;)// &#x8F6C;&#x4E3A;&#x4E8C;&#x8FDB;&#x5236;func convertToBin(n int) string { res := &quot;&quot; for ; n &gt; 0; n /= 2 { lsb := n % 2 res = strconv.Itoa(lsb) + res } return res}// &#x6253;&#x5370;&#x6587;&#x4EF6;func printFile(fileName string) { file, err := os.Open(fileName) if err != nil { panic(err) } scanner := bufio.NewScanner(file) for scanner.Scan() { fmt.Println(scanner.Text()) }}// &#x6B7B;&#x5FAA;&#x73AF;func forever() { for { fmt.Println(&quot;forever&quot;) }}func main() { fmt.Println( convertToBin(5), convertToBin(13), ) printFile(&quot;abc.txt&quot;); forever()} &#x51FD;&#x6570;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package mainimport ( &quot;fmt&quot; &quot;math&quot;)// &#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x503C;func div(a, b int) (int, int) { return a / b, a % b}// &#x53EF;&#x4EE5;&#x5BF9;&#x8FD4;&#x56DE;&#x503C;&#x547D;&#x540D;func div2(a, b int) (q, r int) { return a / b, a % b}// &#x8FD4;&#x56DE; errorfunc eval(a, b int, op string) (int, error) { switch op { case &quot;+&quot;: return a + b, nil case &quot;-&quot;: return a - b, nil case &quot;*&quot;: return a * b, nil case &quot;/&quot;: return a / b, nil default: return 0, fmt.Errorf(&quot;unsupported opration: %s&quot;, op) }}// &#x4F7F;&#x7528;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;func apply(op func(int, int) int, a, b int) int { return op(a, b)}// &#x53EF;&#x53D8;&#x53C2;&#x6570;func sum(numbers ...int) int { sum := 0 for i := range numbers { sum += numbers[i] } return sum}func pow(a, b int) int { return int(math.Pow(float64(a), float64(b)))}func main() { i, i2 := div(5, 3) fmt.Println(i, i2) q, r := div2(5, 3) fmt.Println(q, r) res, err := eval(1, 2, &quot;&amp;&quot;) // unsupported opration: &amp; if err != nil { fmt.Println(err) } else { fmt.Println(res) } fmt.Println(apply(pow, 2, 2)) // 4 fmt.Println(sum(1, 2, 3, 4)) // 10} &#x6307;&#x9488;1234567891011121314151617181920212223package mainimport &quot;fmt&quot;// &#x4F7F;&#x7528;&#x6307;&#x9488;func swap(a *int, b *int) { *b, *a = *a, *b}func swap2(a, b int) (int, int) { return b, a}func main() { a, b := 3, 4 swap(&amp;a, &amp;b) fmt.Println(a, b) // 4 3 a, b = 3, 4 a, b = swap2(a, b) fmt.Println(a, b) // 4 3} &#x6570;&#x7EC4;&#x3001;&#x5207;&#x7247;&#x548C;&#x5BB9;&#x5668;&#x6570;&#x7EC4;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package mainimport &quot;fmt&quot;// &#x6570;&#x7EC4;&#x5B9A;&#x4E49;func defineArray() { // &#x5B9A;&#x4E49;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5; var arr1 [5]int arr2 := [3]int{1, 3, 5} arr3 := [...]int{2, 4, 6, 8} fmt.Println(arr1, arr2, arr3) // [0 0 0 0 0] [1 3 5] [2 4 6 8] // &#x5B9A;&#x4E49;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4; var grid [2][3]int fmt.Println(grid) // [[0 0 0] [0 0 0]]}// &#x904D;&#x5386;&#x6570;&#x7EC4;func printArray() { arr := [...]int{2, 4, 6, 8} for i := 0; i &lt; len(arr); i++ { fmt.Println(arr[i]) } // &#x901A;&#x8FC7; range &#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x4E0B;&#x6807; for i := range arr { fmt.Println(arr[i]) } // &#x83B7;&#x53D6;&#x4E0B;&#x6807;&#x548C;&#x503C; for i, v := range arr { fmt.Println(i, v) } // &#x53EA;&#x83B7;&#x53D6;&#x503C;, &#x53EF;&#x4EE5;&#x4F7F;&#x7528; _ &#x6765;&#x7701;&#x7565;&#x53D8;&#x91CF; for _, v := range arr { fmt.Println(v) }}// [3]int &#x548C; [5]int &#x662F;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;func printArray2(arr [5]int) { fmt.Println(arr)}// &#x6570;&#x7EC4;&#x662F;&#x503C;&#x7C7B;&#x578B;func printArray3(arr [5]int) { arr[0] = 100 fmt.Println(arr) // [100, 0, 0, 0, 0]}// &#x4F20;&#x9012;&#x6307;&#x9488;func printArray4(arr *[5]int) { arr[0] = 100 fmt.Println(*arr) // [100, 0, 0, 0, 0]}func main() { defineArray() printArray() var arr1 [5]int // arr2 := [3]int{1, 3, 5} // arr3 := [...]int{2, 4, 6, 8, 10} // [3]int &#x548C; [5]int &#x662F;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B; printArray2(arr1) // &#x5728;&#x51FD;&#x6570;&#x91CC;&#x9762;&#x6539;&#x53D8;&#x6570;&#x7EC4;&#x7684;&#x503C; // printArray2(arr2) // cannot use arr2 (type [3]int) as type [5]int in argument to printArray2 // &#x5728;&#x51FD;&#x6570;&#x91CC;&#x6539;&#x53D8;&#x4E86;&#x6570;&#x7EC4;&#x7B2C;&#x4E00;&#x4E2A;&#x503C;, &#x540E;&#x9762;&#x6253;&#x5370;&#x8FD8;&#x662F;&#x4E0D;&#x53D8;&#xFF0C;&#x6BCF;&#x6B21;&#x4F20;&#x9012;&#x6570;&#x7EC4;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x526F;&#x672C; printArray3(arr1) fmt.Println(arr1) // [0, 0, 0, 0, 0] // &#x4F20;&#x9012;&#x5730;&#x5740;&#x8FC7;&#x53BB;&#x5C31;&#x4F1A;&#x6539;&#x53D8; printArray4(&amp;arr1) fmt.Println(arr1) // [100, 0, 0, 0, 0]} &#x5207;&#x7247;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117package mainimport &quot;fmt&quot;// &#x5207;&#x7247;func mySlice() { arr := [...]int{0, 1, 2, 3, 4, 5, 6, 7} fmt.Println(&quot;arr[2:6] = &quot;, arr[2:6]) // arr[2:6] = [2 3 4 5] fmt.Println(&quot;arr[:6] = &quot;, arr[:6]) // arr[2:6] = [2 3 4 5] fmt.Println(&quot;arr[2:] = &quot;, arr[2:]) // arr[2:] = [2 3 4 5 6 7] fmt.Println(&quot;arr[:] = &quot;, arr[:]) // arr[:] = [0 1 2 3 4 5 6 7]}// &#x66F4;&#x65B0;func updateSlice(slice []int) { slice[0] = 2019}// &#x6269;&#x5C55;func extendSlice() { arr := [...]int{0, 1, 2, 3, 4, 5, 6, 7} // &#x6211;&#x4EEC;&#x77E5;&#x9053; s1 &#x53EA;&#x6709; 4 &#x4E2A;&#x5143;&#x7D20;, &#x4F46;&#x662F; s2 &#x8FD8;&#x662F;&#x80FD; s1 := arr[2:6] s2 := s1[3:5] fmt.Println(s1) // [2 3 4 5] fmt.Println(s2) // [5 6] fmt.Printf(&quot;len=%d, cap=%d&quot;, len(s1), cap(s1)) // len=4, cap=6}// &#x6DFB;&#x52A0;func appendSlice() { arr := [...]int{0, 1, 2, 3, 4, 5, 6, 7} // &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x5982;&#x679C;&#x8D85;&#x8FC7;&#x4E86; cap, &#x7CFB;&#x7EDF;&#x4F1A;&#x91CD;&#x65B0;&#x5206;&#x914D;&#x66F4;&#x5927;&#x7684;&#x5E95;&#x5C42;&#x6570;&#x7EC4; // &#x7531;&#x4E8E;&#x503C;&#x7684;&#x4F20;&#x9012;&#x5173;&#x7CFB;, &#x5FC5;&#x987B;&#x63A5;&#x53D7; append &#x7684;&#x8FD4;&#x56DE;&#x503C; s1 := arr[2:6] s2 := append(s1, 100) s3 := append(s2, 100) s4 := append(s3, 100) s5 := append(s4, 100) fmt.Println(s1, s2, s3, s4, s5) // [2 3 4 5] [2 3 4 5 100] [2 3 4 5 100 100] [2 3 4 5 100 100 100] [2 3 4 5 100 100 100 100]}// &#x521B;&#x5EFA; slicefunc createSlice() { // 0. &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7A7A;&#x7684; slice var s []int // &#x53D1;&#x73B0; cap &#x662F;&#x4ECE; 1 2 4 8 16 32... &#x6269;&#x5927; for i := 0; i &lt; 100; i++ { s = append(s, 1+2*i) printSlice(s) } // 1. &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5E26;&#x6709;&#x503C;&#x7684; slice s1 := []int{1, 2, 3, 4, 5} printSlice(s1) // len=5, cap=5, slice=[1 2 3 4 5] // 2. &#x521B;&#x5EFA;&#x4E00;&#x4E2A; cap = 16 s2 := make([]int, 16) printSlice(s2) // len=16, cap=16, slice=[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] // 3. &#x521B;&#x5EFA;&#x4E00;&#x4E2A; len = 10, cap = 32 s3 := make([]int, 10, 32) // len=10, cap=32, slice=[0 0 0 0 0 0 0 0 0 0] printSlice(s3)}// &#x590D;&#x5236;func copySlice() { src := []int{1, 2, 3} dst := make([]int, 16) fmt.Println(dst) // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] copy(dst, src) fmt.Println(dst) // [1 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0]}// &#x5220;&#x9664;func deleteSlice() { // &#x5220;&#x9664;&#x4E0B;&#x6807;&#x4E3A;3&#x7684;&#x5143;&#x7D20; s := []int{0, 1, 2, 3, 4, 5, 6, 7, 8} s = append(s[:3], s[4:]...) // s[4:]... &#x8F6C;&#x6362;&#x4E3A;&#x53EF;&#x53D8;&#x53C2;&#x6570; fmt.Println(s) // [0 1 2 4 5 6 7 8] // &#x5220;&#x9664;&#x7B2C;&#x4E00;&#x4E2A; s1 := []int{0, 1, 2, 3, 4, 5, 6, 7, 8} s1 = s1[1:] fmt.Println(s1) // [1 2 3 4 5 6 7 8] // &#x5220;&#x9664;&#x6700;&#x540E;&#x4E00;&#x4E2A; s2 := []int{0, 1, 2, 3, 4, 5, 6, 7, 8} s2 = s2[:len(s2) - 1] fmt.Println(s2) // [0 1 2 3 4 5 6 7]}func printSlice(s []int) { fmt.Printf(&quot;len=%d, cap=%d, slice=%v \n&quot;, len(s), cap(s), s)}func main() { mySlice() arr := [...]int{0, 1, 2, 3, 4, 5, 6, 7} slice1 := arr[:] fmt.Println(&quot;Before update: &quot;, slice1) // Before update: [0 1 2 3 4 5 6 7] updateSlice(slice1) fmt.Println(&quot;After update: &quot;, slice1) // After update: [2019 1 2 3 4 5 6 7] extendSlice() appendSlice() createSlice() copySlice() deleteSlice()} Map1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package mainimport &quot;fmt&quot;// &#x5B9A;&#x4E49; mapfunc defineMap() { // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5E26;&#x9ED8;&#x8BA4;&#x503C;&#x7684; map m1 := map[string]string{ &quot;a&quot;: &quot;A&quot;, &quot;b&quot;: &quot;B&quot;, } // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A; empty map m2 := make(map[string]string) // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A; nil map var m3 map[string]string fmt.Println(m1, m2, m3) // map[a:A b:B] map[] map[]}// &#x904D;&#x5386; mapfunc traversingMap() { m := map[string]string{ &quot;a&quot;: &quot;A&quot;, &quot;b&quot;: &quot;B&quot;, } // &#x6253;&#x5370; key value for k, v := range m { fmt.Println(k, v) } // &#x53EA;&#x6253;&#x5370; key for k := range m { fmt.Println(k) } // &#x53EA;&#x6253;&#x5370; value for _, v := range m { fmt.Println(v) }}// &#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;func containMap() { m := map[string]string{ &quot;a&quot;: &quot;A&quot;, &quot;b&quot;: &quot;B&quot;, } value, ok := m[&quot;c&quot;] if ok { fmt.Println(value) } else { fmt.Println(&quot;&#x4E0D;&#x5B58;&#x5728;&quot;) } if value, ok := m[&quot;b&quot;]; ok { fmt.Println(value) } else { fmt.Println(&quot;&#x4E0D;&#x5B58;&#x5728;&quot;) }}// &#x5220;&#x9664;&#x5143;&#x7D20;func deleteMap() { m := map[string]string{ &quot;a&quot;: &quot;A&quot;, &quot;b&quot;: &quot;B&quot;, } fmt.Println(m) // map[a:A b:B] delete(m, &quot;a&quot;) fmt.Println(m) // map[b:B]}func main() { defineMap() traversingMap() containMap() deleteMap()} &#x4F8B;&#x9898;&#xFF1A;&#x67E5;&#x627E;&#x6700;&#x957F;&#x4E0D;&#x91CD;&#x590D;&#x5B50;&#x4E32; 1234567891011121314151617181920212223242526272829package mainimport &quot;fmt&quot;// &#x67E5;&#x65E9;&#x6700;&#x957F;&#x4E0D;&#x91CD;&#x590D;&#x5B50;&#x4E32;func lengthOfSubString(s string) int { start := 0 maxLength := 0 lastOccuredMap := make(map[rune]int) for i, ru := range []rune(s) { if lastI, ok := lastOccuredMap[ru]; ok &amp;&amp; lastI &gt;= start { start = lastI + 1 } if i-start+1 &gt; maxLength { maxLength = i - start + 1 } lastOccuredMap[ru] = i } return maxLength}func main() { fmt.Println(lengthOfSubString(&quot;aaa&quot;)) fmt.Println(lengthOfSubString(&quot;abab&quot;)) fmt.Println(lengthOfSubString(&quot;abc&quot;)) fmt.Println(lengthOfSubString(&quot;abcabc&quot;))} &#x5B57;&#x7B26;&#x548C;&#x5B57;&#x7B26;&#x4E32;&#x5904;&#x7406;123456789101112131415161718192021222324252627282930313233343536package mainimport &quot;fmt&quot;func runeTest() { s := &quot;cuzz&#x662F;&#x6211;!&quot; for i, b := range []byte(s) { fmt.Printf(&quot;(%d %X %c) &quot;, i, b, b) } fmt.Println() for i, u := range s { fmt.Printf(&quot;(%d %X %c) &quot;, i, u, u) } fmt.Println() for i, r := range []rune(s) { fmt.Printf(&quot;(%d %X %c) &quot;, i, r, r) } // &#x8F93;&#x51FA; // (0 63 c) (1 75 u) (2 7A z) (3 7A z) (4 E6 &#xE6;) (5 98 ) (6 AF &#xAF;) (7 E6 &#xE6;) (8 88 ) (9 91 ) (10 21 !) // (0 63 c) (1 75 u) (2 7A z) (3 7A z) (4 662F &#x662F;) (7 6211 &#x6211;) (10 21 !) // (0 63 c) (1 75 u) (2 7A z) (3 7A z) (4 662F &#x662F;) (5 6211 &#x6211;) (6 21 !) // &#x8BF4;&#x660E; range s &#x4F7F;&#x7528;&#x7684; utf-8 &#x904D;&#x5386;, &#x4F46;&#x662F;&#x89C2;&#x5BDF;&#x4E0B;&#x6807;&#x53D1;&#x73B0;&#x4E0D;&#x662F;&#x8FDE;&#x7EED;&#x7684; // ascii &#x8F6C;&#x4E3A; utf-8 &#x5982;:(4 E6) (5 98) (6 AF) -&gt; (4 662F) // &#x4F7F;&#x7528; []rune() &#x8F6C;&#x6362;&#x53EF;&#x4EE5;&#x4F7F;&#x4E0B;&#x6807;&#x8FDE;&#x7EED;&#x8F93;&#x51FA;}func main() { runeTest()} &#x9762;&#x5411;&#x5BF9;&#x8C61; go &#x8BED;&#x8A00;&#x4EC5;&#x652F;&#x6301;&#x5C01;&#x88C5;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x7EE7;&#x627F;&#x548C;&#x591A;&#x6001; go &#x8BED;&#x8A00;&#x6CA1;&#x6709; class&#xFF0C;&#x53EA;&#x6709; struct &#x7ED3;&#x6784;&#x4F53;&#x548C;&#x65B9;&#x6CD5;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package mainimport ( &quot;fmt&quot;)// &#x5B9A;&#x4E49;&#x7ED3;&#x6784;&#x4F53;, &#x5C0F;&#x5199;&#x5BF9;&#x5916;&#x4E0D;&#x53EF;&#x89C1;type treeNode struct { value int left, right *treeNode}// setter, &#x9519;&#x8BEF;, &#x7531;&#x4E8E; go &#x662F;&#x4F20;&#x503C;, &#x4E0D;&#x4F1A;&#x6539;&#x53D8;func (node treeNode) setVal(value int) { node.value = value}func (node *treeNode) setValue(value int) { node.value = value}// &#x7ED9;&#x7ED3;&#x6784;&#x4F53;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5; node.print()func (node treeNode) print() { fmt.Println(node.value)}// &#x666E;&#x901A;&#x7684;&#x65B9;&#x6CD5; print(node)func print(node treeNode) { fmt.Println(node.value)}// &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;func createNode(value int) *treeNode { return &amp;treeNode{value: value}}// &#x904D;&#x5386;func (node *treeNode) traverse() { if node == nil { return } node.left.traverse() node.print() node.right.traverse()}func main() { // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x7ED3;&#x6784;&#x4F53; var node treeNode fmt.Println(node) // {0 &lt;nil&gt; &lt;nil&gt;} // &#x4F7F;&#x7528;&#x6784;&#x9020;&#x5668;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x4F53; node2 := treeNode{ value: 1, left: &amp;treeNode{}, // &#x53D6;&#x5730;&#x5740; right: new(treeNode), // new() &#x83B7;&#x53D6;&#x7684;&#x662F;&#x5730;&#x5740; } fmt.Println(node2) // {1 0xc00000c0c0 0xc00000c0a0} // &#x4F7F;&#x7528;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#x521B;&#x5EFA; node3 := treeNode{ value: 0, } node3.left = createNode(1) node3.right = createNode(2) fmt.Println(node3) // {0 0xc00008e0a0 0xc00008e0c0} // &#x533A;&#x522B; node.print() // 0 print(node) // 0 // &#x4E0D;&#x4F1A;&#x6539;&#x53D8;, go &#x662F;&#x4F20;&#x503C; node.setVal(1) node.print() // 0 // &#x4F1A;&#x6539;&#x53D8; node.setValue(1) node.print() // 1 fmt.Println() // &#x4E2D;&#x987A;&#x904D;&#x5386; 0 // 1 2 node3.traverse() // 1 0 2} &#x5305;&#x548C;&#x5C01;&#x88C5; &#x5305; &#x6BCF;&#x4E2A;&#x76EE;&#x5F55;&#x4E00;&#x4E2A;&#x5305; main &#x5305;&#x5305;&#x542B;&#x53EF;&#x6267;&#x884C;&#x5165;&#x53E3; &#x4E3A;&#x7ED3;&#x6784;&#x5B9A;&#x4E49;&#x7684;&#x65B9;&#x6CD5;&#x5FC5;&#x987B;&#x653E;&#x5728;&#x540C;&#x4E00;&#x5305;&#x5185; &#x53EF;&#x4EE5;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x4EF6; &#x5C01;&#x88C5; &#x4E00;&#x822C;&#x4F7F;&#x7528;&#x9A7C;&#x5CF0;&#x547D;&#x540D; &#x9996;&#x5B57;&#x6BCD;&#x5927;&#x5199;&#x8868;&#x793A; public &#x9996;&#x5B57;&#x6BCD;&#x5C0F;&#x5199;&#x8868;&#x793A; private Queue.go 123456789101112131415161718192021222324252627282930package queueimport &quot;fmt&quot;type Queue []intfunc (q *Queue) Push(v int) { *q = append(*q, v)}func (q *Queue) Pop() int { head := (*q)[0] *q = (*q)[1:] return head}func (q *Queue) Head() int { return (*q)[0]}func (q *Queue) IsEmpty() bool { return len(*q) == 0}func (q *Queue) Print() { for _, v := range *q { fmt.Print(v, &quot; &quot;) } fmt.Println()} test.go 12345678910111213141516171819202122232425package mainimport ( &quot;awesomeProject/queue&quot; &quot;fmt&quot;)func main() { // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6709;&#x9ED8;&#x8BA4;&#x503C;&#x7684;&#x961F;&#x5217; q := queue.Queue{1} q.Push(2) q.Push(3) q.Push(4) q.Print() // 1 2 3 4 fmt.Println(q.Pop()) // 1 q.Print() // 2 3 4 q.Pop() q.Pop() q.Pop() fmt.Println(q.IsEmpty()) // true} &#x9879;&#x76EE;&#x7ED3;&#x6784;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#xFF1A; GOROOT&#xFF1A;go&#x8BED;&#x8A00;&#x81EA;&#x5E26;&#x7684;&#x7C7B;&#x5E93; GOPATH&#xFF1A;&#x7528;&#x6237;&#x6E90;&#x4EE3;&#x7801;&#x76EE;&#x5F55; src&#xFF1A;&#x6E90;&#x6587;&#x4EF6; pkg&#xFF1A;build &#x7684;&#x4E4B;&#x540E;&#x7684;&#x4E2D;&#x95F4;&#x6587;&#x4EF6; bin&#xFF1A;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6; &#x63A5;&#x53E3;duck typing &#x201C;&#x50CF;&#x9E2D;&#x5B50;&#x8D70;&#x8DEF;&#xFF0C;&#x50CF;&#x9E2D;&#x5B50;&#x53EB;&#x2026;&#x201D;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x9E2D;&#x5B50; &#x63CF;&#x8FF0;&#x4E8B;&#x7269;&#x7684;&#x5916;&#x90E8;&#x884C;&#x4E3A;&#x800C;&#x975E;&#x5185;&#x90E8;&#x7ED3;&#x6784; &#x4E25;&#x683C;&#x8BF4; go &#x5C5E;&#x4E8E;&#x7ED3;&#x6784;&#x5316;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;&#x7C7B;&#x4F3C; duck typing &#x63A5;&#x53E3;&#x5B9A;&#x4E49;&#x548C;&#x5B9E;&#x73B0;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5047;&#x7684;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#xFF0C;&#x6709;&#x4E00;&#x4E2A; Get &#x65B9;&#x6CD5; 123456789package mocktype Retriever struct { Contents string}func (r Retriever) Get(url string) string { return url + &quot;hi, cuzz...&quot;} &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x771F;&#x6B63;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#xFF0C;&#x6709;&#x4E00;&#x4E2A; Get &#x65B9;&#x6CD5; 123456789101112131415161718192021222324252627package workimport ( &quot;net/http&quot; &quot;net/http/httputil&quot; &quot;time&quot;)type Retriever struct { UserAgent string TimeOut time.Duration}func (r Retriever) Get(url string) string { resp, err := http.Get(url) if err != nil { panic(err) } result, err := httputil.DumpResponse(resp, true) resp.Body.Close() if err != nil { panic(err) } return string(result)} &#x6D4B;&#x8BD5; 12345678910111213141516171819202122232425262728293031package mainimport ( &quot;awesomego/retriever/mock&quot; &quot;awesomego/retriever/work&quot; &quot;fmt&quot;)// &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;type Retriever interface { Get(url string) string}// &#x4F20;&#x5165;&#x63A5;&#x53E3;func download(r Retriever) string { return r.Get(&quot;http://blog.cuzz.site&quot;)}func main() { // &#x63A5;&#x53E3;&#x5B9A;&#x4E49; // var mockRetriever Retriever // mockRetriever = mock.Retriever{} mockRetriever := mock.Retriever{} fmt.Println(download(mockRetriever)) workRetriever := work.Retriever{} fmt.Println(download(workRetriever))} &#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728;&#x63A5;&#x53E3;&#x662F;&#x8C03;&#x7528;&#x653E;&#x5B9A;&#x4E49;&#x7684;&#xFF0C;&#x7ED3;&#x6784;&#x4F53;&#x4E2D;&#x7684;&#x63A5;&#x53E3;&#x4E5F;&#x662F;&#x9690;&#x5F0F;&#x7684;&#xFF0C;&#x7ED3;&#x6784;&#x4F53;&#x6EE1;&#x8DB3;&#x63A5;&#x53E3;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8BF4;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x4F53;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x3002; &#x63A5;&#x53E3;&#x7684;&#x503C;&#x7C7B;&#x578B;&#x5728;golang&#x4E2D;&#xFF0C;&#x63A5;&#x53E3;&#x503C;&#x662F;&#x7531;&#x4E24;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#x7684;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x8BE5;&#x7C7B;&#x578B;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x6211;&#x4EEC;&#x79F0;&#x5176;&#x4E3A;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x548C;&#x52A8;&#x6001;&#x503C;&#x3002; 12345678func main() { mockRetriever := mock.Retriever{} fmt.Printf(&quot;%T, %v\n&quot;, mockRetriever, mockRetriever) // mock.Retriever, {} workRetriever := work.Retriever{} fmt.Printf(&quot;%T, %v\n&quot;, workRetriever, workRetriever) // work.Retriever, { 0s}} &#x63A5;&#x53E3;&#x7EC4;&#x5408;12345678910111213141516171819202122package main// &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;type Retriever interface { Get(url string) string}// &#x5B9A;&#x4E49;&#x53E6;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;type Poster interface { Post(url string, params map[string]string)}// &#x63A5;&#x53E3;&#x7EC4;&#x5408;type RetrieverAndPoster interface { Retriever Poster // &#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x5176;&#x4ED6;&#x65B9;&#x6CD5; AnotherMethod()}func main() {} &#x5E38;&#x7528;&#x7CFB;&#x7EDF;&#x63A5;&#x53E3;1&#x3001;Stringer Stringer&#x63A5;&#x53E3;&#x4E2D;&#x7684; string &#x76F8;&#x5F53;&#x4E0E; Java #toString &#x65B9;&#x6CD5; 123456789101112131415package workimport ( &quot;fmt&quot; &quot;time&quot;)type Retriever struct { UserAgent string TimeOut time.Duration}func (r Retriever) String() string { return fmt.Sprintf(&quot;UserAgent: %v, TimeOut: %v&quot;, r.UserAgent, r.TimeOut)} &#x6D4B;&#x8BD5; 12345678910111213package mainimport ( &quot;awesomego/retriever/work&quot; &quot;fmt&quot; &quot;time&quot;)func main() { workRetriever := work.Retriever{&quot;Mozilla/5.0&quot;, time.Minute} fmt.Println(workRetriever) // UserAgent: Mozilla/5.0, TimeOut: 1m0s} 2&#x3001;Reader 123type Reader interface { Read(p []byte) (n int, err error)} 3&#x3001;Writer 123type Writer interface { Write(p []byte) (n int, err error)} &#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B; &#x51FD;&#x6570;&#x662F;&#x4E00;&#x7B49;&#x516C;&#x6C11;&#xFF1A;&#x53C2;&#x6570;&#xFF0C;&#x53D8;&#x91CF;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x90FD;&#x53EF;&#x4EE5;&#x662F;&#x51FD;&#x6570; &#x9AD8;&#x7EA7;&#x51FD;&#x6570; &#x95ED;&#x5305; 123456789101112131415161718192021222324252627282930313233343536package mainimport &quot;fmt&quot;// &#x5B9A;&#x4E49;&#x4E00;&#x4E2A; adder &#x51FD;&#x6570;, &#x6CA1;&#x6709;&#x53C2;&#x6570;, &#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;func adder() func(int) int { sum := 0 return func(v int) int { sum += v return sum }}// &#x5B9A;&#x4E49;&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;func fibonacci() func() int{ a, b := 0, 1 return func() int { a, b = b, a + b fmt.Println(a) return a }}func main() { a := adder() for i := 0; i &lt; 10; i++ { fmt.Printf(&quot;0 + 1 + ... + %d = %d\n&quot;, i, a(i)) } f := fibonacci() f() // 1 f() // 1 f() // 2 f() // 3 f() // 5} &#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x4E0E;&#x51FA;&#x9519;&#x5904;&#x7406;defer &#x8C03;&#x7528;&#x4F60;&#x53EF;&#x4EE5;&#x5728; Go &#x51FD;&#x6570;&#x4E2D;&#x6DFB;&#x52A0;&#x591A;&#x4E2A;defer&#x8BED;&#x53E5;&#xFF0C;&#x5F53;&#x51FD;&#x6570;&#x6267;&#x884C;&#x5230;&#x6700;&#x540E;&#x65F6;&#xFF0C;&#x8FD9;&#x4E9B; defer &#x8BED;&#x53E5;&#x4F1A;&#x6309;&#x7167;&#x9006;&#x5E8F;&#x6267;&#x884C;&#xFF08;&#x5373;&#x6700;&#x540E;&#x4E00;&#x4E2A;defer&#x8BED;&#x53E5;&#x5C06;&#x6700;&#x5148;&#x6267;&#x884C;&#xFF09;&#xFF0C;&#x6700;&#x540E;&#x8BE5;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x3002;&#x7279;&#x522B;&#x662F;&#x5F53;&#x4F60;&#x5728;&#x8FDB;&#x884C;&#x4E00;&#x4E9B;&#x6253;&#x5F00;&#x8D44;&#x6E90;&#x7684;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x9047;&#x5230;&#x9519;&#x8BEF;&#x9700;&#x8981;&#x63D0;&#x524D;&#x8FD4;&#x56DE;&#xFF0C;&#x5728;&#x8FD4;&#x56DE;&#x524D;&#x4F60;&#x9700;&#x8981;&#x5173;&#x95ED;&#x76F8;&#x5E94;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x4E0D;&#x7136;&#x5F88;&#x5BB9;&#x6613;&#x9020;&#x6210;&#x8D44;&#x6E90;&#x6CC4;&#x9732;&#x7B49;&#x95EE;&#x9898;&#x3002;&#x5982;&#x4E0B;&#x4EE3;&#x7801;&#x6240;&#x793A;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x5199;&#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#x662F;&#x8FD9;&#x6837;&#x64CD;&#x4F5C;&#x7684;&#xFF1A; 1234567891011121314151617func CopyFile(dst, src string) (w int64, err error) { srcFile, err := os.Open(src) if err != nil { return } defer srcFile.Close() dstFile, err := os.Create(dst) if err != nil { return } defer dstFile.Close() return io.Copy(dstFile, srcFile)} &#x9519;&#x8BEF;&#x5904;&#x7406;&#x9519;&#x8BEF;&#x5904;&#x7406;&#x662F;&#x4EFB;&#x4F55;&#x8BED;&#x8A00;&#x90FD;&#x9700;&#x8981;&#x8003;&#x8651;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x800C; Go &#x8BED;&#x8A00;&#x5728;&#x9519;&#x8BEF;&#x5904;&#x7406;&#x4E0A;&#x89E3;&#x51B3;&#x5F97;&#x66F4;&#x4E3A;&#x5B8C;&#x5584;&#xFF0C;&#x4F18;&#x96C5;&#x7684;&#x9519;&#x8BEF;&#x5904;&#x7406;&#x673A;&#x5236;&#x662F; Go &#x8BED;&#x8A00;&#x7684;&#x4E00;&#x5927;&#x7279;&#x70B9;&#x3002; 1&#x3001;error Go &#x8BED;&#x8A00;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x5904;&#x7406;&#x7684;&#x6807;&#x51C6;&#x6A21;&#x5F0F;&#xFF0C;&#x5373;error&#x63A5;&#x53E3;&#xFF0C;&#x8BE5;&#x63A5;&#x53E3;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; 123type error interface { Error() string} &#x5BF9;&#x4E8E;&#x5927;&#x591A;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x8FD4;&#x56DE;&#x9519;&#x8BEF;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;error&#x4F5C;&#x4E3A;&#x591A;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#xFF1A; 123func foo(param int)(ret int, err error) { ... } &#x8C03;&#x7528;&#x65F6;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 123456n, err := foo(0)if err != nil { // &#x9519;&#x8BEF;&#x5904;&#x7406;} else { // &#x4F7F;&#x7528;&#x8FD4;&#x56DE;&#x503C;n} 2&#x3001;panic &#x505C;&#x6B62;&#x5F53;&#x524D;&#x51FD;&#x6570;&#x6267;&#x884C; &#x4E00;&#x76F4;&#x5411;&#x4E0A;&#x8FD4;&#x56DE;&#xFF0C;&#x6267;&#x884C;&#x6BCF;&#x4E00;&#x5C42;&#x7684; defer &#x5982;&#x679C;&#x6CA1;&#x6709;&#x9047;&#x89C1; recover&#xFF0C;&#x7A0B;&#x5E8F;&#x9000;&#x51FA; 3&#x3001;recover &#x4EC5;&#x5728; defer &#x4E2D;&#x8C03;&#x7528; &#x83B7;&#x53D6; panic &#x7684;&#x503C; &#x5982;&#x679C;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#xFF0C;&#x53EF;&#x4EE5;&#x91CD;&#x65B0; panic 123456789101112131415161718192021222324252627282930313233package mainimport ( &quot;fmt&quot;)func tryRecover() { // &#x533F;&#x540D;&#x51FD;&#x6570;&#x91CC; defer func() { r := recover() if err, ok := r.(error); ok { fmt.Println(&quot;Error occurred: &quot;, err) } else { panic(fmt.Sprintf(&quot;I don&apos;t know what to do: %v&quot;, r)) } }() a := 1 b := 0 fmt.Println(a / b) // runtime error: integer divide by zero // panic(errors.New(&quot;this is an error&quot;)) // panic(123) // &#x5982;&#x679C;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x7684;&#x8BDD;&#x5C31;, &#x518D;&#x6B21; panic &#x51FA;&#x53BB;}func main() { tryRecover() } &#x5E76;&#x53D1;&#x7F16;&#x7A0B;goroutine1&#x3001;&#x534F;&#x7A0B; &#x8F7B;&#x91CF;&#x7EA7;&#x201C;&#x7EBF;&#x7A0B;&#x201D; &#x975E;&#x62A2;&#x5360;&#x5F0F;&#x591A;&#x4EFB;&#x52A1;&#x5904;&#x7406;&#xFF0C;&#x7531;&#x534F;&#x7A0B;&#x4E3B;&#x52A8;&#x4EA4;&#x51FA;&#x63A7;&#x5236;&#x6743; &#x7F16;&#x8BD1;&#x5668;/&#x89E3;&#x91CA;&#x5668;/&#x865A;&#x62DF;&#x5668;&#x5C42;&#x9762;&#x7684;&#x591A;&#x4EFB;&#x52A1; &#x591A;&#x4E2A;&#x534F;&#x7A0B;&#x53EF;&#x80FD;&#x5728;&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E0A;&#x8FD0;&#x884C; 123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( &quot;fmt&quot; &quot;time&quot;)func test() { // &#x6B64;&#x65F6;, &#x4E0D;&#x4F1A;&#x8F93;&#x51FA;, main &#x5148;&#x9000;&#x51FA;&#x4E86;, &#x5FC5;&#x987B;&#x8BA9; main sleep for i := 0; i &lt; 1000; i++ { // &#x533F;&#x540D;&#x51FD;&#x6570; go func(i int) { for { fmt.Printf(&quot;From %d\n&quot;, i) } }(i) } time.Sleep(time.Millisecond)}func test2() { // &#x6B64;&#x65F6;&#x4E0D;&#x4F1A;&#x9000;&#x51FA;, &#x56E0;&#x4E3A;&#x4E0D;&#x80FD;&#x4EA4;&#x51FA;&#x63A7;&#x5236;&#x6743; var arr [10]int for i := 0; i &lt; 10; i++ { // &#x533F;&#x540D;&#x51FD;&#x6570; go func(i int) { arr[i]++ }(i) } time.Sleep(time.Millisecond)}func main() { test() test2()} 2&#x3001;go &#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x8C03;&#x5EA6;&#x5668; &#x534F;&#x7A0B;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x901A;&#x4FE1; channelchannel&#x662F;goroutine&#x4E4B;&#x95F4;&#x4E92;&#x76F8;&#x901A;&#x8BAF;&#x7684;&#x4E1C;&#x897F;&#x3002;&#x7C7B;&#x4F3C;&#x6211;&#x4EEC; Unix &#x4E0A;&#x7684;&#x7BA1;&#x9053;&#xFF08;&#x53EF;&#x4EE5;&#x5728;&#x8FDB;&#x7A0B;&#x95F4;&#x4F20;&#x9012;&#x6D88;&#x606F;&#xFF09;&#xFF0C;&#x7528;&#x6765;goroutine&#x4E4B;&#x95F4;&#x53D1;&#x6D88;&#x606F;&#x548C;&#x63A5;&#x6536;&#x6D88;&#x606F;&#x3002;&#x5176;&#x5B9E;&#xFF0C;&#x5C31;&#x662F;&#x5728;&#x505A;goroutine&#x4E4B;&#x95F4;&#x7684;&#x5185;&#x5B58;&#x5171;&#x4EAB;&#x3002;channel&#x662F;&#x7C7B;&#x578B;&#x76F8;&#x5173;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E00;&#x4E2A;channel&#x53EA;&#x80FD;&#x4F20;&#x9012;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x9700;&#x8981;&#x5728;channel&#x58F0;&#x660E;&#x65F6;&#x6307;&#x5B9A;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package mainimport ( &quot;fmt&quot; &quot;time&quot;)// &#x5B9A;&#x4E49;chanfunc defineChan() { // &#x58F0;&#x540D;&#x4E00;&#x4E2A;&#x4F20;&#x9012;int&#x578B;&#x7684;channel // var a chan int // &#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;int&#x578B;channel a := make(chan int) // &#x4ECE;channel&#x4E2D;&#x83B7;&#x53D6; go func() { for { z := &lt;-a fmt.Println(z) } }() a &lt;- 1 time.Sleep(time.Millisecond)}// &#x5B9A;&#x4E49;&#x5E26;&#x7F13;&#x5B58;chanfunc bufChan() { // &#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;int&#x578B;channel a := make(chan int, 3) // &#x4ECE;channel&#x4E2D;&#x83B7;&#x53D6; go func() { for { //z, ok := &lt;-a //if !ok { // break //} //fmt.Println(z) // &#x6216;&#x8005;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;, &#x786E;&#x4FDD;&#x53D1;&#x9001;&#x5B8C;&#x6210; for z := range a { fmt.Println(z) } } }() a &lt;- 1 a &lt;- 2 a &lt;- 3 a &lt;- 4 close(a) // &#x5173;&#x95ED;&#x4E86;&#x7684;&#x8BDD;, &#x5C31;&#x4E00;&#x76F4;&#x53D1;&#x9001;0 time.Sleep(time.Millisecond)}// &#x5982;&#x4F55;&#x4F7F;&#x7528;func chanDemo() { // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53EA;&#x80FD;&#x6536;&#x6570;&#x636E;&#x7684;channel, &#x628A;&#x6570;&#x636E;&#x653E;&#x5230;channel&#x4E2D; var channels [10]chan&lt;- int for i := 0; i &lt; len(channels); i++ { channels[i] = createWorker(i) } // &#x5411;channel&#x4E2D;&#x5199;&#x6570;&#x636E; for i := 0; i &lt; len(channels); i++ { channels[i] &lt;- &apos;a&apos; + i } time.Sleep(time.Millisecond)}func createWorker(i int) chan&lt;- int { c := make(chan int) go func() { for { fmt.Printf(&quot;Worker %d received %c\n&quot;, i, &lt;-c) } }() return c}func main() { defineChan() bufChan() chanDemo()} &#x4F7F;&#x7528; Channel &#x7B49;&#x5F85;&#x4EFB;&#x52A1;&#x7ED3;&#x675F;12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( &quot;fmt&quot;)type worker struct { in chan int done chan bool // &#x4F7F;&#x7528;done&#x6765;&#x901A;&#x4FE1;&#x786E;&#x5B9A;&#x5B8C;&#x6210;}func chanDemo() { var channels [10]worker for i := 0; i &lt; len(channels); i++ { channels[i] = createWorker(i) } // &#x5411;channel&#x4E2D;&#x5199;&#x6570;&#x636E; for i := 0; i &lt; len(channels); i++ { channels[i].in &lt;- &apos;a&apos; + i &lt;-channels[i].done // &#x7B49;&#x5F85;channel&#x5B8C;&#x6210; }}func createWorker(i int) worker { w := worker{ in: make(chan int), done: make(chan bool), } go func() { for in := range w.in { fmt.Printf(&quot;Worker %d received %c\n&quot;, i, in) w.done &lt;- true } }() return w}func main() { chanDemo()} &#x4F7F;&#x7528; select &#x8FDB;&#x884C;&#x8C03;&#x5EA6;12345678910111213141516171819202122232425262728293031323334353637package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot;)func selectDemo() { var c1, c2 chan int c1, c2 = createChan(), createChan() for { select { case n := &lt;-c1: fmt.Printf(&quot;from c1, val: %d\n&quot;, n) case n := &lt;-c2: fmt.Printf(&quot;from c2, val: %d\n&quot;, n) } }}func createChan() chan int { out := make(chan int) go func() { i := 0 for { time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond) i++ out &lt;- i } }() return out}func main() { selectDemo()}]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8的深入与实战]]></title>
    <url>%2F2019%2F08%2F11%2FJava8%E7%9A%84%E6%B7%B1%E5%85%A5%E4%B8%8E%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[Lambda &#x8868;&#x8FBE;&#x5F0F;&#x548C;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;Lambda &#x8868;&#x8FBE;&#x5F0F;&#x5B9A;&#x4E49;&#xFF1A; Lambda: In programming languages such as Lisp, Python and Ruby lambda is an operator used to denote anonymous functions or closures, following the usage of lambda calculus. &#x4E3A;&#x4F55;&#x9700;&#x8981;&#x4F7F;&#x7528; Lambda &#x8868;&#x8FBE;&#x5F0F;&#xFF1A; &#x5728; Java &#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x9012;&#x7ED9;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x4E5F;&#x65E0;&#x6CD5;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x5728; JavaScript &#x4E2D;&#xFF0C;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x60C5;&#x51B5;&#x662F;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x7684;&#xFF0C;JavaScript &#x662F;&#x4E00;&#x95E8;&#x5178;&#x578B;&#x7684;&#x51FD;&#x6570;&#x5F0F;&#x8BED;&#x8A00;&#x3002; &#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x6765;&#x5F15;&#x5165;&#xFF1A; 12345678910111213141516171819202122232425/** * @Author: cuzz * @Date: 2019/8/11 14:55 * @Description: */public class Test1 { public static void main(String[] args) { List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6); for (int i = 0; i &lt; list.size(); i++) { System.out.println(list.get(i)); } System.out.println(&quot;-----------------&quot;); for (int val : list) { System.out.println(val); } System.out.println(&quot;-----------------&quot;); list.forEach(new Consumer&lt;Integer&gt;() { @Override public void accept(Integer integer) { System.out.println(integer); } }); }} &#x8FD9;&#x662F; 3 &#x79CD;&#x904D;&#x5386;&#x96C6;&#x5408;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x7B2C;&#x4E00;&#x5C31;&#x662F;&#x7B80;&#x5355;&#x7684;&#x904D;&#x5386;&#xFF0C;&#x7B2C;&#x4E8C;&#x79CD;&#x662F;&#x6211;&#x4EEC;&#x662F;&#x5E38;&#x8BF4;&#x7684;&#x589E;&#x5F3A; for &#x5FAA;&#x73AF;&#x904D;&#x5386;&#x3002;&#x7B2C;&#x4E09;&#x79CD;&#x5C31;&#x662F; Java 8 &#x65B0;&#x589E;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5148;&#x770B;&#x770B; Consumer &#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x3002; 123456789101112131415package java.util.function;import java.util.Objects;@FunctionalInterfacepublic interface Consumer&lt;T&gt; { void accept(T t); default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; { accept(t); after.accept(t); }; }} &#x6CE8;&#x89E3;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x7684;&#x4F5C;&#x7528;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package java.lang;import java.lang.annotation.*;/** * An informative annotation type used to indicate that an interface * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as * defined by the Java Language Specification. * * Conceptually, a functional interface has exactly one abstract * method. Since {@linkplain java.lang.reflect.Method#isDefault() * default methods} have an implementation, they are not abstract. If * an interface declares an abstract method overriding one of the * public methods of {@code java.lang.Object}, that also does * &lt;em&gt;not&lt;/em&gt; count toward the interface&apos;s abstract method count * since any implementation of the interface will have an * implementation from {@code java.lang.Object} or elsewhere. * * &#x6709;&#x4E14;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x91CD;&#x5199; Object &#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x90A3;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x7684;&#x3002; * * &lt;p&gt;Note that instances of functional interfaces can be created with * lambda expressions, method references, or constructor references. * * &#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; lambda &#x8868;&#x8FBE;&#x5F0F;&#x3001;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x548C;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x6765;&#x521B;&#x5EFA;&#x3002; * * &lt;p&gt;If a type is annotated with this annotation type, compilers are * required to generate an error message unless: * * &lt;ul&gt; * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class. * &lt;li&gt; The annotated type satisfies the requirements of a functional interface. * &lt;/ul&gt; * * &lt;p&gt;However, the compiler will treat any interface meeting the * definition of a functional interface as a functional interface * regardless of whether or not a {@code FunctionalInterface} * annotation is present on the interface declaration. * * &#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5BF9;&#x6EE1;&#x8DB3;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x7684;&#x63A5;&#x53E3;&#x5F53;&#x505A;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#xFF0C;&#x4E0D;&#x7BA1;&#x5B83;&#x6709;&#x6CA1;&#x6709; @FunctionalInterface &#x6CE8;&#x89E3;&#x58F0;&#x660E;&#x3002; * * @jls 4.3.2. The Class Object * @jls 9.8 Functional Interfaces * @jls 9.4.3 Interface Method Body * @since 1.8 */@Documented@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE)public @interface FunctionalInterface {} &#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; lambda &#x8868;&#x8FBE;&#x5F0F;&#x3001;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x548C;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x6765;&#x521B;&#x5EFA;&#x3002; lambda &#x8868;&#x8FBE;&#x5F0F;&#xFF1A;() -&gt; System.out.println(i) &#x65B9;&#x6CD5;&#x5F15;&#x7528;&#xFF1A;System.out::print &#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#xFF1A;new::ArrayList &#x7528;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x6765;&#x8BF4;&#x660E;&#x4EC0;&#x4E48;&#x662F;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x3002; 123456789101112131415161718192021222324252627@FunctionalInterfaceinterface Cons { void print(); String toString();}/** * @Author: cuzz * @Date: 2019/8/11 16:13 * @Description: */public class Test2 { public void test(Cons func) { func.print(); } public static void main(String[] args) { Test2 test2 = new Test2(); test2.test(() -&gt; System.out.println(&quot;xxx&quot;)); Cons func = () -&gt; System.out.println(&quot;yyy&quot;); test2.test(func); System.out.println(func.getClass()); // &#x8F93;&#x51FA; class com.cuzz.Test2$$Lambda$2/2074407503 System.out.println(func.getClass().getSuperclass()); // &#x8F93;&#x51FA; class java.lang.Object }} &#x53EF;&#x4EE5;&#x8BF4;&#x660E;3&#x70B9;&#xFF1A; &#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x975E;&#x91CD;&#x5199; Object &#x7684;&#x62BD;&#x8C61;&#x65B9;&#x6CD5; lambda &#x8868;&#x8FBE;&#x5F0F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7C7B; &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#xFF0C;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x5173;&#x5FC3;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x7684;&#x540D;&#x79F0;&#x3002; &#x4ECE;Consumer&#x6DF1;&#x5165;&#x7406;&#x89E3;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#x548C;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x6211;&#x4EEC;&#x56DE;&#x5230;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x5F53;&#x4E2D; 12345678910public class Test1 { public static void main(String[] args) { list.forEach(new Consumer&lt;Integer&gt;() { @Override public void accept(Integer integer) { System.out.println(integer); } }); }} &#x5148;&#x770B;&#x770B; Iterable#forEach &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x662F; Iterable &#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x8FD9;&#x7684;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#xFF0C;&#x5728; Java 8 &#x4E2D;&#x63A5;&#x53E3;&#x4E2D;&#x662F;&#x5141;&#x8BB8;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#x3002;&#x5BF9;&#x4E8E; Iterable#forEach &#x662F;&#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6267;&#x884C;&#x7ED9;&#x5B9A;&#x7684;&#x52A8;&#x4F5C;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940public interface Iterable&lt;T&gt; { /** * Returns an iterator over elements of type {@code T}. * * @return an Iterator. */ Iterator&lt;T&gt; iterator(); /** * Performs the given action for each element of the {@code Iterable} * until all elements have been processed or the action throws an * exception. Unless otherwise specified by the implementing class, * actions are performed in the order of iteration (if an iteration order * is specified). Exceptions thrown by the action are relayed to the * caller. * * &#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6267;&#x884C;&#x7ED9;&#x5B9A;&#x7684;&#x52A8;&#x4F5C;&#x3002; * * @implSpec * &lt;p&gt;The default implementation behaves as if: * &lt;pre&gt;{@code * for (T t : this) * action.accept(t); * }&lt;/pre&gt; * * @param action The action to be performed for each element * @throws NullPointerException if the specified action is null * @since 1.8 */ default void forEach(Consumer&lt;? super T&gt; action) { Objects.requireNonNull(action); for (T t : this) { action.accept(t); } } default Spliterator&lt;T&gt; spliterator() { return Spliterators.spliteratorUnknownSize(iterator(), 0); }} &#x770B;&#x770B; Consumer &#x662F;&#x4EC0;&#x4E48; 123456789101112131415161718192021222324252627282930313233343536373839404142434445package java.util.function;import java.util.Objects;/** * Represents an operation that accepts a single input argument and returns no * result. Unlike most other functional interfaces, {@code Consumer} is expected * to operate via side-effects. * * &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x63A5;&#x53D7;&#x5355;&#x4E00;&#x8F93;&#x5165;&#x53C2;&#x6570;&#xFF0C;&#x65E0;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x3002; * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #accept(Object)}. * * @param &lt;T&gt; the type of the input to the operation * * @since 1.8 */@FunctionalInterfacepublic interface Consumer&lt;T&gt; { /** * Performs this operation on the given argument. * * @param t the input argument */ void accept(T t); /** * Returns a composed {@code Consumer} that performs, in sequence, this * operation followed by the {@code after} operation. If performing either * operation throws an exception, it is relayed to the caller of the * composed operation. If performing this operation throws an exception, * the {@code after} operation will not be performed. * * @param after the operation to perform after this operation * @return a composed {@code Consumer} that performs in sequence this * operation followed by the {@code after} operation * @throws NullPointerException if {@code after} is null */ default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; { accept(t); after.accept(t); }; }} lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4F5C;&#x7528;&#xFF1A; lambda &#x8868;&#x8FBE;&#x5F0F;&#x4E3A; Java &#x6DFB;&#x52A0;&#x4E86;&#x7F3A;&#x5931;&#x7684;&#x51FD;&#x6570;&#x5F0F;&#x7F16;&#x7A0B;&#x7279;&#x6027;&#xFF0C;&#x4F7F;&#x6211;&#x4EEC;&#x80FD;&#x5C06;&#x51FD;&#x6570;&#x5F53;&#x505A;&#x4E00;&#x7B49;&#x516C;&#x6C11;&#x770B;&#x5F85;&#x3002; &#x5728;&#x5C06;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x4E00;&#x7B49;&#x516C;&#x6C11;&#x7684;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x662F;&#x51FD;&#x6570;&#x3002;&#x4F46;&#x5728; Java &#x4E2D;&#xFF0C;lambda &#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x5BF9;&#x8C61;&#xFF0C;&#x5B83;&#x4EEC;&#x5FC5;&#x987B;&#x4F9D;&#x9644;&#x4E8E;&#x4E00;&#x7C7B;&#x7279;&#x522B;&#x7684;&#x5BF9;&#x8C61;&#xFF08;&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;&#xFF09;&#xFF1B; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x6DF1;&#x5165;&#x5BF9;&#x4E8E; lambda &#x8868;&#x8FBE;&#x5F0F;&#x9700;&#x8981;&#x6839;&#x636E;&#x4E0A;&#x4E0B;&#x6587;&#x6765;&#x63A8;&#x65AD;&#xFF0C;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x77E5;&#x9053;() -&gt; {} &#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x5BF9;&#x5E94;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x65B9;&#x6CD5;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x53EA;&#x7528;&#x901A;&#x8FC7;&#x524D;&#x9762;&#x7684; Cons &#x5B9A;&#x4E49;&#x624D;&#x77E5;&#x9053;&#x3002; 1234567891011121314151617181920212223@FunctionalInterfaceinterface Cons1 { void print1();}@FunctionalInterfaceinterface Cons2 { void print2();}/** * @Author: cuzz * @Date: 2019/8/11 16:13 * @Description: */public class Test2 { public static void main(String[] args) { Cons1 cons1 = () -&gt; {}; Cons2 cons2 = () -&gt; {}; System.out.println(cons1.getClass().getInterfaces()[0]); // interface com.cuzz.Cons1 System.out.println(cons2.getClass().getInterfaces()[0]); // interface com.cuzz.Cons2 }} &#x6211;&#x4EEC;&#x5148;&#x770B;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; 1234567891011121314151617/** * @Author: cuzz * @Date: 2019/8/12 23:09 * @Description: &#x6392;&#x5E8F; */public class Test4 { public static void main(String[] args) { List&lt;String&gt; list = Arrays.asList(&quot;cuzz&quot;, &quot;faker&quot;, &quot;mlxg&quot;); Collections.sort(list, (String s1, String s2) -&gt; { return s2.compareTo(s1); }); // 1 Collections.sort(list, (s1, s2) -&gt; s2.compareTo(s1)); // 2 }} &#x4ECE; 1 &#x5230; 2 &#x7B80;&#x5316;&#x4E86;&#x5F88;&#x591A;&#xFF0C;&#x4FEE;&#x9970;&#x7B26; String &#x548C; return &#x90FD;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#x3002;Java Lambda &#x8868;&#x8FBE;&#x5F0F;&#x662F;&#x4E00;&#x79CD;&#x533F;&#x540D;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x6CA1;&#x6709;&#x58F0;&#x660E;&#x65B9;&#x6CD5;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x3001;&#x8FD4;&#x56DE;&#x503C;&#x548C;&#x540D;&#x5B57;&#x3002; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x4F5C;&#x7528;&#xFF1A; &#x4F20;&#x9012;&#x884C;&#x4E3A;&#xFF0C;&#x800C;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x503C; &#x63D0;&#x5347;&#x62BD;&#x8C61;&#x5C42;&#x6B21; API &#x91CD;&#x7528;&#x6027;&#x597D; &#x66F4;&#x52A0;&#x7075;&#x6D3B; Lambda &#x57FA;&#x672C;&#x8BED;&#x6CD5;&#xFF1A; Java &#x4E2D;&#x7684; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x57FA;&#x672C;&#x8BED;&#x6CD5; &#x5982;&#xFF1A;(argument) -&gt; {body} &#x7701;&#x7565;&#x7C7B;&#x578B;&#xFF1A;(arg1, arg2, ...) -&gt; {body} &#x6709;&#x7C7B;&#x578B;&#xFF1A;(type1 arg1, type2 arg2, ...) -&gt; {body} Lambda &#x793A;&#x4F8B;&#x8BF4;&#x660E; (int a, int b) -&gt; {return a + b;} () -&gt; System.out.println(&quot;hello world&quot;) (String s) -&gt; {System.out.println(s);} () -&gt; 42 () -&gt; {return &quot;cuzz&quot;}; Lambda&#x7ED3;&#x6784; &#x4E00;&#x4E2A; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x6709;&#x96F6;&#x4E2A;&#x6216;&#x591A;&#x4E2A;&#x53C2;&#x6570; &#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x65E2;&#x53EF;&#x4EE5;&#x660E;&#x786E;&#x58F0;&#x660E;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x4E0A;&#x4E0B;&#x6587;&#x6765;&#x63A8;&#x65AD;&#xFF0C;&#x5982;&#xFF1A;(int a) &#x4E0E; (a) &#x6548;&#x679C;&#x76F8;&#x540C; &#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x9700;&#x5305;&#x542B;&#x5728;&#x5706;&#x62EC;&#x53F7;&#x5185;&#xFF0C;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#x7528;&#x9017;&#x53F7;&#x76F8;&#x9694;&#x3002;&#x5982;&#xFF1A;(a, b) &#x6216; (String a, int b float c) &#x7A7A;&#x5706;&#x62EC;&#x53F7;&#x8868;&#x793A;&#x53C2;&#x6570;&#x96C6;&#x4E3A;&#x7A7A;&#xFF0C;&#x5982;&#xFF1A;() -&gt; 42 &#x5F53;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4E14;&#x5176;&#x7C7B;&#x578B;&#x53EF;&#x63A8;&#x5BFC;&#x65F6;&#xFF0C;&#x5706;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#xFF0C;&#x5982;&#xFF1A;a -&gt; return a * a Lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4E3B;&#x9898;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x96F6;&#x6761;&#x6216;&#x591A;&#x6761;&#x8BED;&#x53E5; &#x5982;&#x679C; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4E3B;&#x4F53;&#x53EA;&#x6709;&#x4E00;&#x6761;&#x8BED;&#x53E5;&#xFF0C;&#x82B1;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#xFF0C;&#x533F;&#x540D;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E0E;&#x8BE5;&#x4E3B;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x4E00;&#x81F4; &#x5982;&#x679C; Lambda &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4E3B;&#x4F53;&#x5305;&#x542B;&#x4E00;&#x6761;&#x4EE5;&#x4E0A;&#x8BED;&#x53E5;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x82B1;&#x62EC;&#x53F7; Function&#x76F4;&#x63A5;&#x5148;&#x770B;&#x6E90;&#x7801; 123456789101112131415161718192021222324252627282930313233343536373839404142/** * Represents a function that accepts one argument and produces a result. * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #apply(Object)}. * * @param &lt;T&gt; the type of the input to the function * @param &lt;R&gt; the type of the result of the function * * @since 1.8 */@FunctionalInterfacepublic interface Function&lt;T, R&gt; { /** * Applies this function to the given argument. * * @param t the function argument * @return the function result */ R apply(T t); default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) { Objects.requireNonNull(before); return (V v) -&gt; apply(before.apply(v)); } default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t)); } /** * Returns a function that always returns its input argument. * * @param &lt;T&gt; the type of the input and output objects to the function * @return a function that always returns its input argument */ static &lt;T&gt; Function&lt;T, T&gt; identity() { return t -&gt; t; }} &#x53EF;&#x4EE5;&#x770B;&#x51FA; Function &#x6709;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#x548C;&#x4E24;&#x4E2A;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#x4EE5;&#x53CA;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x3002; &#xFF08;1&#xFF09; Function#apply Stream#map &#x91CC;&#x5C31;&#x662F;&#x63A5;&#x53D7;&#x4E00;&#x4E2A; Function&#xFF0C;&#x5BF9;&#x4E8E; Function &#x610F;&#x601D;&#x5C31;&#x662F;&#x4ECE;&#x4E00;&#x4E2A;&#x6620;&#x5C04;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x3002;&#x4E0B;&#x9762;&#x4F8B;&#x5B50;&#x5C31;&#x662F;&#x628A;&#x5B57;&#x7B26;&#x4E32;&#x6620;&#x5C04;&#x5230;&#x5927;&#x5199;&#x3002;&#x5BF9;&#x4E8E; String::toUpperCase &#x4F7F;&#x7528;&#x7684;&#x662F;&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x3002; 123456789101112131415/** * @Author: cuzz * @Date: 2019/8/11 23:13 * @Description: */public class Test3 { public static void main(String[] args) { List&lt;String&gt; list = Arrays.asList(&quot;cuzz&quot;, &quot;faker&quot;, &quot;mlxg&quot;); list.stream().map(item -&gt; item.toUpperCase()).forEach(item -&gt; System.out.println(item)); list.stream().map(String::toUpperCase).forEach(System.out::println); Function&lt;String, String&gt; function = String::toUpperCase; System.out.println(function.getClass()); }} &#x6211;&#x4EEC;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1234567891011121314151617181920212223242526272829303132/** * @Author: cuzz * @Date: 2019/8/13 0:08 * @Description: */public class FunctionTest { public static void main(String[] args) { FunctionTest function= new FunctionTest(); int res1 = function.compute(100, target -&gt; target * target); int res2 = function.compute(100, target -&gt; target + 1); System.out.println(res1); // 10000 System.out.println(res2); // 101 int res3 = function.pow(100); int res4 = function.addOne(100); System.out.println(res3); // 10000 System.out.println(res4); // 101 } public int compute(int a, Function&lt;Integer, Integer&gt; function) { return function.apply(a); } public int pow(int a) { return a * a; } public int addOne(int a) { return a + 1; }} &#x770B;&#x770B; #compute &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x9012;&#x7684;&#x662F;&#x884C;&#x4E3A;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5177;&#x4F53;&#x7684;&#x503C;&#x3002; &#x6211;&#x4EEC;&#x672C;&#x6765;&#x8981;&#x5B9A;&#x4E49;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;pow &#x548C; addOne &#x73B0;&#x5728;&#x628A;&#x8FD9;&#x79CD;&#x884C;&#x4E3A;&#x4F20;&#x9012;&#x8FDB;&#x6765;&#x3002; &#xFF08;2&#xFF09;Function#compose &#x548C; Function#andThen 123456789101112131415161718192021222324252627282930313233343536373839/** * Returns a composed function that first applies the {@code before} * function to its input, and then applies this function to the result. * If evaluation of either function throws an exception, it is relayed to * the caller of the composed function. * * @param &lt;V&gt; the type of input to the {@code before} function, and to the * composed function * @param before the function to apply before this function is applied * @return a composed function that first applies the {@code before} * function and then applies this function * @throws NullPointerException if before is null * * @see #andThen(Function) */default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) { Objects.requireNonNull(before); return (V v) -&gt; apply(before.apply(v));}/** * Returns a composed function that first applies this function to * its input, and then applies the {@code after} function to the result. * If evaluation of either function throws an exception, it is relayed to * the caller of the composed function. * * @param &lt;V&gt; the type of output of the {@code after} function, and of the * composed function * @param after the function to apply after this function is applied * @return a composed function that first applies this function and then * applies the {@code after} function * @throws NullPointerException if after is null * * @see #compose(Function) */default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t));} compose&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x63A5;&#x6536;&#x4E00;&#x4E2A; function &#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5C06;&#x53C2;&#x6570; function &#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x7ED9;&#x8C03;&#x7528;&#x7684; function&#xFF0C;&#x4EE5;&#x6B64;&#x6765;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;function&#x7EC4;&#x5408;&#x7684;&#x529F;&#x80FD;&#x3002; andThen &#x65B9;&#x6CD5;&#x4E5F;&#x662F;&#x63A5;&#x6536;&#x4E00;&#x4E2A; function &#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x4E0E; compse &#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x5148;&#x6267;&#x884C;&#x672C;&#x8EAB;&#x7684; apply &#x65B9;&#x6CD5;&#xFF0C;&#x5C06;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x7ED9;&#x53C2;&#x6570;&#x4E2D;&#x7684; function&#x3002; 12345678910111213141516171819202122/** * @Author: cuzz * @Date: 2019/8/20 23:59 * @Description: #compose and #andThen test */public class FunctionTest2 { public static void main(String[] args) { FunctionTest2 test = new FunctionTest2(); System.out.println(test.compute1(2, value -&gt; value * 2, value -&gt; value * value)); // 8 System.out.println(test.compute2(2, value -&gt; value * 2, value -&gt; value * value)); // 16 } public int compute1(int a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2) { return function1.compose(function2).apply(a); } public int compute2(int a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2) { return function1.andThen(function2).apply(a); }} &#x53D1;&#x73B0; compute1 &#x662F;&#x5148;&#x6267;&#x884C;&#x7B2C;&#x4E8C;&#x4E2A; Function &#x518D;&#x6267;&#x884C;&#x7B2C;&#x4E00;&#xFF0C;compute2 &#x76F8;&#x53CD;&#x3002; BiFunction&#x5148;&#x770B;&#x6E90;&#x7801; 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Represents a function that accepts two arguments and produces a result. * This is the two-arity specialization of {@link Function}. * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #apply(Object, Object)}. * * @param &lt;T&gt; the type of the first argument to the function * @param &lt;U&gt; the type of the second argument to the function * @param &lt;R&gt; the type of the result of the function * * @see Function * @since 1.8 */@FunctionalInterfacepublic interface BiFunction&lt;T, U, R&gt; { /** * Applies this function to the given arguments. * * @param t the first function argument * @param u the second function argument * @return the function result */ R apply(T t, U u); /** * Returns a composed function that first applies this function to * its input, and then applies the {@code after} function to the result. * If evaluation of either function throws an exception, it is relayed to * the caller of the composed function. * * @param &lt;V&gt; the type of output of the {@code after} function, and of the * composed function * @param after the function to apply after this function is applied * @return a composed function that first applies this function and then * applies the {@code after} function * @throws NullPointerException if after is null */ default &lt;V&gt; BiFunction&lt;T, U, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) { Objects.requireNonNull(after); return (T t, U u) -&gt; after.apply(apply(t, u)); }} &#x6211;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 12345678910111213141516171819202122232425262728293031/** * @Author: cuzz * @Date: 2019/8/21 7:36 * @Description: */public class BiFunctionTest { public static void main(String[] args) { BiFunctionTest test = new BiFunctionTest(); // &#x52A0;&#x6CD5; System.out.println(test.add(1, 2)); System.out.println(test.compute(1, 2, (a, b) -&gt; a + b)); // &#x51CF;&#x6CD5; System.out.println(test.subtract(1, 2)); System.out.println(test.compute(1, 2, (a, b) -&gt; a - b)); } public int compute(int a, int b, BiFunction&lt;Integer, Integer, Integer&gt; biFunction) { return biFunction.apply(a, b); } public int add(int a, int b) { return a + b; } public int subtract(int a, int b) { return a - b; }} &#x4EE5;&#x524D;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x56DB;&#x5219;&#x8FD0;&#x7B97;&#x9700;&#x8981;&#x9700;&#x8981;&#x5148;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#xFF0C;&#x73B0;&#x5728;&#x901A;&#x8FC7; BiFunction &#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x79CD;&#x884C;&#x4E3A;&#x4F20;&#x9012;&#x8FDB;&#x6765;&#x3002; Predicate&#xFF08;1&#xFF09;&#x6E90;&#x7801; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/** * Represents a predicate (boolean-valued function) of one argument. * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #test(Object)}. * * @param &lt;T&gt; the type of the input to the predicate * * @since 1.8 */@FunctionalInterfacepublic interface Predicate&lt;T&gt; { /** * Evaluates this predicate on the given argument. * * @param t the input argument * @return {@code true} if the input argument matches the predicate, * otherwise {@code false} */ boolean test(T t); /** * Returns a composed predicate that represents a short-circuiting logical * AND of this predicate and another. When evaluating the composed * predicate, if this predicate is {@code false}, then the {@code other} * predicate is not evaluated. * * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed * to the caller; if evaluation of this predicate throws an exception, the * {@code other} predicate will not be evaluated. * * @param other a predicate that will be logically-ANDed with this * predicate * @return a composed predicate that represents the short-circuiting logical * AND of this predicate and the {@code other} predicate * @throws NullPointerException if other is null */ default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) { Objects.requireNonNull(other); return (t) -&gt; test(t) &amp;&amp; other.test(t); } /** * Returns a predicate that represents the logical negation of this * predicate. * * @return a predicate that represents the logical negation of this * predicate */ default Predicate&lt;T&gt; negate() { return (t) -&gt; !test(t); } /** * Returns a composed predicate that represents a short-circuiting logical * OR of this predicate and another. When evaluating the composed * predicate, if this predicate is {@code true}, then the {@code other} * predicate is not evaluated. * * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed * to the caller; if evaluation of this predicate throws an exception, the * {@code other} predicate will not be evaluated. * * @param other a predicate that will be logically-ORed with this * predicate * @return a composed predicate that represents the short-circuiting logical * OR of this predicate and the {@code other} predicate * @throws NullPointerException if other is null */ default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) { Objects.requireNonNull(other); return (t) -&gt; test(t) || other.test(t); } /** * Returns a predicate that tests if two arguments are equal according * to {@link Objects#equals(Object, Object)}. * * @param &lt;T&gt; the type of arguments to the predicate * @param targetRef the object reference with which to compare for equality, * which may be {@code null} * @return a predicate that tests if two arguments are equal according * to {@link Objects#equals(Object, Object)} */ static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) { return (null == targetRef) ? Objects::isNull : object -&gt; targetRef.equals(object); }} &#xFF08;2&#xFF09;&#x4F8B;&#x5B50; &#x4EE5;&#x524D;&#x6211;&#x4EEC;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x6761;&#x4EF6;&#x7B5B;&#x9009;&#x6570;&#x636E;&#x9700;&#x8981;&#x4E9B;&#x591A;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x73B0;&#x5728;&#x53EA;&#x8981;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x8FD9;&#x79CD;&#x63A5;&#x53D7;&#x884C;&#x4E3A;&#x7684;&#x65B9;&#x6CD5;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * @Author: cuzz * @Date: 2019/8/21 23:35 * @Description: Predicate test */public class PredicateTest { public static void main(String[] args) { List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); PredicateTest test = new PredicateTest(); // &#x67E5;&#x627E;&#x5947;&#x6570; test.findOdd(list); test.conditionFilter(list, i -&gt; i % 2 != 0); // &#x67E5;&#x627E;&#x5076;&#x6570; test.findEven(list); test.conditionFilter(list, i -&gt; i % 2 == 0); } public void conditionFilter(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate) { for (int i : list) { if (predicate.test(i)) { System.out.print(i + &quot; &quot;); } } System.out.println(); } public void findOdd(List&lt;Integer&gt; list) { for (int i : list) { if (i % 2 != 0) { System.out.print(i + &quot; &quot;); } } System.out.println(); } public void findEven(List&lt;Integer&gt; list) { for (int i : list) { if (i % 2 == 0) { System.out.print(i + &quot; &quot;); } } System.out.println(); }} &#xFF08;3&#xFF09;Predicate#and &#x548C; Predicate#or 123456789101112131415161718public class PredicateTest { public static void main(String[] args) { List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); PredicateTest test = new PredicateTest(); // &#x67E5;&#x627E; &#x5927;&#x4E8E; 3 &#x7684;&#x5947;&#x6570; test.conditionFilter2(list, i -&gt; i &gt; 3, i -&gt; i % 2 != 0); } public void conditionFilter2(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate1, Predicate&lt;Integer&gt; predicate2) { for (int i : list) { if (predicate1.and(predicate2).test(i)) { System.out.print(i + &quot; &quot;); } } System.out.println(); }} Supplier&#xFF08;1&#xFF09;&#x4E0D;&#x63A5;&#x53D7;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x503C;&#x3002; 1234567891011121314151617181920212223/** * Represents a supplier of results. * * &lt;p&gt;There is no requirement that a new or distinct result be returned each * time the supplier is invoked. * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #get()}. * * @param &lt;T&gt; the type of results supplied by this supplier * * @since 1.8 */@FunctionalInterfacepublic interface Supplier&lt;T&gt; { /** * Gets a result. * * @return a result */ T get();} &#xFF08;2&#xFF09;&#x4F8B;&#x5B50; 1234567891011121314151617/** * @Author: cuzz * @Date: 2019/8/22 23:32 * @Description: */public class SupplierTest { public static void main(String[] args) { Supplier&lt;Student&gt; supplier1 = () -&gt; new Student(); Supplier&lt;Student&gt; supplier2 = Student::new; }}@Dataclass Student { private String name = &quot;cuzz&quot;; private int age = 20;} Optional&#x53C2;&#x8003;&#xFF1A; &#x4F7F;&#x7528; Java 8 Optional &#x7684;&#x6B63;&#x786E;&#x59FF;&#x52BF;]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试高频题]]></title>
    <url>%2F2019%2F07%2F23%2F%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&#x5982;&#x4F55;&#x63A7;&#x5236;&#x7EBF;&#x7A0B;&#x6253;&#x5370;&#x987A;&#x5E8F;&#x4F7F;&#x7528; join &#x65B9;&#x6CD5;&#x5982;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x6240;&#x793A;&#xFF1A; 123456789101112131415public class ThreadDemo { public static void main(String[] args) throws InterruptedException { final Thread thread1 = new Thread(() -&gt; System.out.println(&quot;thread1&quot;)); final Thread thread2 = new Thread(() -&gt; System.out.println(&quot;thread2&quot;)); final Thread thread3 = new Thread(() -&gt; System.out.println(&quot;thread3&quot;)); thread1.start(); thread1.join(); thread2.start(); thread2.join(); thread3.start(); thread3.join(); }} &#x901A;&#x8FC7; join &#x65B9;&#x6CD5;&#x53BB;&#x4FDD;&#x8BC1;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x987A;&#x5E8F;&#x7684;&#x7279;&#x6027;&#xFF0C;join &#x4E3B;&#x8981;&#x8BA9;&#x4E3B;&#x7EBF;&#x7A0B;&#x7B49;&#x5F85;&#x5B50;&#x7EBF;&#x7A0B;&#x7ED3;&#x675F;&#x540E;&#x624D;&#x80FD;&#x7EE7;&#x7EED;&#x8FD0;&#x884C;&#x3002; &#x4F7F;&#x7528; Executors.new1234567891011121314public class ThreadDemo { public static void main(String[] args) throws InterruptedException { final Thread thread1 = new Thread(() -&gt; System.out.println(&quot;thread1&quot;)); final Thread thread2 = new Thread(() -&gt; System.out.println(&quot;thread2&quot;)); final Thread thread3 = new Thread(() -&gt; System.out.println(&quot;thread3&quot;)); ExecutorService executorService = Executors.newSingleThreadExecutor(); executorService.submit(thread1); executorService.submit(thread2); executorService.submit(thread3); executorService.shutdown(); }} &#x770B;&#x770B;&#x6E90;&#x7801;&#x5C31;&#x77E5;&#x9053;&#x4E86;&#xFF0C;&#x4F7F;&#x7528;&#x963B;&#x585E;&#x961F;&#x5217;&#x6765;&#x7EF4;&#x62A4;&#x4EFB;&#x52A1;&#xFF0C;&#x662F;&#x4EFB;&#x52A1;&#x6709;&#x5E8F;&#x8FDB;&#x884C;&#x3002; 12345678910111213141516171819/** * Creates an Executor that uses a single worker thread operating * off an unbounded queue. (Note however that if this single * thread terminates due to a failure during execution prior to * shutdown, a new one will take its place if needed to execute * subsequent tasks.) Tasks are guaranteed to execute * sequentially, and no more than one task will be active at any * given time. Unlike the otherwise equivalent * {@code newFixedThreadPool(1)} the returned executor is * guaranteed not to be reconfigurable to use additional threads. * * @return the newly created single-threaded Executor */public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()));} Java &#x4E2D;&#x7684; volatile &#x548C; synchronized JMM&#xFF08;Java Memory Mode&#xFF09;&#xFF1A;&#x89E3;&#x51B3;&#x5E76;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x89C1;&#x6027;&#x3001;&#x539F;&#x5B50;&#x6027;&#x548C;&#x6709;&#x5E8F;&#x6027;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5E76;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x4E24;&#x4E2A;&#x5173;&#x952E;&#x95EE;&#x9898; &#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x901A;&#x4FE1; &#x5171;&#x4EAB;&#x5185;&#x5B58;&#xFF1A;&#x9690;&#x8EAB;&#x901A;&#x4FE1; &#x6D88;&#x606F;&#x4F20;&#x9012;&#xFF1A;&#x663E;&#x793A;&#x901A;&#x4FE1;&#xFF0C;&#x5982; wait() / notify() / notifyall() &#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x540C;&#x6B65; &#x7EBF;&#x7A0B;&#x540C;&#x6B65;&#x6307;&#x7684;&#x662F;&#xFF1A;&#x7A0B;&#x5E8F;&#x7528;&#x4E8E;&#x63A7;&#x5236;&#x4E0D;&#x540C;&#x7EBF;&#x7A0B;&#x5148;&#x540E;&#x987A;&#x5E8F;&#x7684;&#x673A;&#x5236;&#x3002; &#x5728;&#x6D88;&#x606F;&#x4F20;&#x9012;&#x7684;&#x5E76;&#x53D1;&#x6A21;&#x578B;&#x4E2D;&#xFF0C;&#x7531;&#x4E8E;&#x6D88;&#x606F;&#x7684;&#x53D1;&#x9001;&#x5FC5;&#x9700;&#x5728;&#x6D88;&#x606F;&#x63A5;&#x53D7;&#x4E4B;&#x524D;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x9690;&#x5F0F;&#x540C;&#x6B65;&#x3002; &#x5B9A;&#x4F4D;&#x5185;&#x5B58;&#x53EF;&#x89C1;&#x884C;&#x95EE;&#x9898; &#x4EC0;&#x4E48;&#x662F;&#x5185;&#x5B58;&#x5171;&#x4EAB; synchronized&#xFF1A;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x3001;&#x4E92;&#x65A5;&#x6027;&#x548C;&#x53EF;&#x89C1;&#x6027; volatile&#xFF1A;&#x53EF;&#x4EE5;&#x505A;&#x5230;&#x539F;&#x5B50;&#x6027;&#x3001;&#x53EF;&#x89C1;&#x6027;&#x4E0D;&#x80FD;&#x505A;&#x5230;&#x590D;&#x5408;&#x64CD;&#x4F5C;&#x7684;&#x539F;&#x5B50;&#x6027; volatile &#x4FDD;&#x8BC1;&#x53EF;&#x89C1;&#x6027;&#x539F;&#x7406; &#x5BF9;&#x4E8E; volatile &#x4FEE;&#x9970;&#x7684;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x5199;&#x64CD;&#x4F5C;&#x7684;&#x65F6;&#x5019;&#xFF0C;JVM &#x4F1A;&#x5411;&#x5904;&#x7406;&#x5668;&#x53D1;&#x9001;&#x4E00;&#x6761; Lock &#x524D;&#x7F00;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x6240;&#x5728;&#x7F13;&#x5B58;&#x884C;&#x7684;&#x6570;&#x636E;&#x5199;&#x56DE;&#x7CFB;&#x7EDF;&#x5185;&#x5B58;&#x3002; &#x5728;&#x591A;&#x5904;&#x7406;&#x5668;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5404;&#x4E2A;&#x5904;&#x7406;&#x5668;&#x4F1A;&#x901A;&#x8FC7;&#x603B;&#x7EBF;&#x4F20;&#x8FC7;&#x7684;&#x7684;&#x503C;&#x6765;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x4FDD;&#x5B58;&#x7684;&#x503C;&#x662F;&#x4E0D;&#x662F;&#x8FC7;&#x671F;&#x4E86;&#xFF0C;&#x5B9E;&#x73B0;&#x7F13;&#x5B58;&#x4E00;&#x81F4;&#x6027;&#x3002;&#x5F53;CPU&#x5199;&#x6570;&#x636E;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x64CD;&#x4F5C;&#x7684;&#x53D8;&#x91CF;&#x662F;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#xFF0C;&#x5373;&#x5728;&#x5176;&#x4ED6;CPU&#x4E2D;&#x4E5F;&#x5B58;&#x5728;&#x8BE5;&#x53D8;&#x91CF;&#x7684;&#x526F;&#x672C;&#xFF0C;&#x4F1A;&#x53D1;&#x51FA;&#x4FE1;&#x53F7;&#x901A;&#x77E5;&#x5176;&#x4ED6;CPU&#x5C06;&#x8BE5;&#x53D8;&#x91CF;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x7F6E;&#x4E3A;&#x65E0;&#x6548;&#x72B6;&#x6001;&#xFF0C;&#x56E0;&#x6B64;&#x5F53;&#x5176;&#x4ED6;CPU&#x9700;&#x8981;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x7F13;&#x5B58;&#x4E2D;&#x7F13;&#x5B58;&#x8BE5;&#x53D8;&#x91CF;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x662F;&#x65E0;&#x6548;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5C31;&#x4F1A;&#x4ECE;&#x5185;&#x5B58;&#x91CD;&#x65B0;&#x8BFB;&#x53D6;&#x3002; synchronized &#x662F;&#x5173;&#x952E;&#x5B57;&#x5C5E;&#x4E8E; JVM &#x5C42;&#x9762;&#xFF0C;&#x53CD;&#x5E94;&#x5728;&#x5B57;&#x8282;&#x7801;&#x4E0A;&#x662F; monitorenter &#x548C; monitorexit&#xFF0C;&#x5176;&#x5E95;&#x5C42;&#x662F;&#x901A;&#x8FC7; monitor &#x5BF9;&#x8C61;&#x6765;&#x5B8C;&#x6210;&#xFF0C;&#x5176;&#x5B9E; wait/notify &#x7B49;&#x65B9;&#x6CD5;&#x4E5F;&#x662F;&#x4F9D;&#x8D56; monitor &#x5BF9;&#x8C61;&#x53EA;&#x6709;&#x5728;&#x540C;&#x6B65;&#x5FEB;&#x6216;&#x65B9;&#x6CD5;&#x4E2D;&#x624D;&#x80FD;&#x8C03;&#x7528; wait/notify &#x7B49;&#x65B9;&#x6CD5;&#x3002; &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x51E0;&#x79CD;&#x65B9;&#x5F0F; Thread Rannable Callable/Future ExectutorService &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x7684;&#x5B9E;&#x73B0; &#x901A;&#x8FC7;&#x6570;&#x636E;&#x5E93;&#x5B9E;&#x73B0; &#x4F7F;&#x7528; zookeeper &#x5B9E;&#x73B0; &#x57FA;&#x4E8E; redis &#x5B9E;&#x73B0; &#x5982;&#x679C;&#x901A;&#x8FC7;&#x4E00;&#x4E2A; swap &#x4EA4;&#x6362;&#x4E24;&#x4E2A;&#x6570;12345678910111213141516171819public class SwapDemo { public static void main(String[] args) { Integer a = 1; Integer b = 2; System.out.println(&quot;before : a = &quot; + a + &quot;, &quot; + &quot;b = &quot; + b); swap(a, b); System.out.println(&quot;after : a = &quot; + a + &quot;, &quot; + &quot;b = &quot; + b); } private static void swap(Integer a, Integer b) { int temp = a; a = b; b = temp; }}// &#x8F93;&#x51FA;// before : a = 1, b = 2// after : a = 1, b = 2 &#x53D1;&#x73B0;&#x5E76;&#x6CA1;&#x6709;&#x4EA4;&#x6362;&#xFF0C;&#x56E0;&#x4E3A; Java &#x4F7F;&#x7528;&#x7684;&#x503C;&#x4F20;&#x9012;&#xFF0C;&#x4F20;&#x9012;&#x7684;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x526F;&#x672C;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5C31;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x526F;&#x672C;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x5C31;&#x662F;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#x526F;&#x672C;&#x3002; &#x67E5;&#x770B;&#x6E90;&#x7801;&#xFF0C;&#x53D1;&#x73B0; Integer &#x8FD9;&#x4E2A;&#x7C7B;&#x6709;&#x4E00;&#x4E2A; final &#x6210;&#x5458;&#x53D8;&#x91CF;&#x3002; 123456/** * The value of the {@code Integer}. * * @serial */private final int value; &#x6211;&#x4EEC;&#x77E5;&#x9053; final &#x4FEE;&#x9970;&#x7684;&#x53D8;&#x91CF;&#x4E0D;&#x80FD;&#x4FEE;&#x6539;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x4FEE;&#x6539;&#x3002; 123456789101112131415161718192021public class SwapDemo { public static void main(String[] args) throws Exception{ Integer a = 1; // &#x540C; Integer.valueOf(1) Integer b = 2; System.out.println(&quot;before : a = &quot; + a + &quot;, &quot; + &quot;b = &quot; + b); swap(a, b); System.out.println(&quot;after : a = &quot; + a + &quot;, &quot; + &quot;b = &quot; + b); } private static void swap(Integer a, Integer b) throws NoSuchFieldException, IllegalAccessException { Field field = Integer.class.getDeclaredField(&quot;value&quot;); field.setAccessible(true); // &#x8BBF;&#x95EE;&#x79C1;&#x6709;&#x53D8;&#x91CF; Integer temp = new Integer(a.intValue()); // &#x56E0;&#x4E3A; -128 ~ 127 &#x4F1A;&#x7F13;&#x51B2;&#xFF0C;&#x6240;&#x4EE5;&#x8981; new &#x51FA;&#x6765; field.set(a, b.intValue()); field.set(b, temp); }}// &#x8F93;&#x51FA;// before : a = 1, b = 2// after : a = 2, b = 1]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>join</tag>
        <tag>volatile</tag>
        <tag>synchronized</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式事务框架Seata]]></title>
    <url>%2F2019%2F07%2F10%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A1%86%E6%9E%B6Seata%2F</url>
    <content type="text"><![CDATA[&#x5206;&#x5E03;&#x5F0F;&#x57FA;&#x7840;CAP &#x5B9A;&#x7406;CAP &#x5B9A;&#x7406;&#x6307;&#x7684;&#x662F;&#x5728;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C; Consistency&#xFF08;&#x4E00;&#x81F4;&#x6027;&#xFF09;&#x3001; Availability&#xFF08;&#x53EF;&#x7528;&#x6027;&#xFF09;&#x3001;Partition tolerance&#xFF08;&#x5206;&#x533A;&#x5BB9;&#x9519;&#x6027;&#xFF09;&#xFF0C;&#x4E09;&#x8005;&#x4E0D;&#x53EF;&#x517C;&#x5F97;&#x3002;&#x5728;&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x5206;&#x533A;&#x5BB9;&#x9519;&#x6027;&#x662F;&#x5FC5;&#x987B;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x53EA;&#x80FD;&#x5728;&#x4E00;&#x81F4;&#x6027;&#x548C;&#x53EF;&#x7528;&#x6027;&#x4E4B;&#x95F4;&#x8FDB;&#x884C;&#x6743;&#x8861;&#xFF08;AP &#x6216;&#x8005; CP&#xFF09;&#x3002; BASE &#x7406;&#x8BBA;BASE &#x662F; Basically Available&#xFF08;&#x57FA;&#x672C;&#x53EF;&#x7528;&#xFF09;&#x3001;Soft state&#xFF08;&#x8F6F;&#x72B6;&#x6001;&#xFF09;&#x548C; Eventually consistent&#xFF08;&#x6700;&#x7EC8;&#x4E00;&#x81F4;&#x6027;&#xFF09;&#x4E09;&#x4E2A;&#x77ED;&#x8BED;&#x7684;&#x7F29;&#x5199;&#x3002;&#x662F;&#x5BF9; CAP &#x4E2D; AP &#x7684;&#x4E00;&#x4E2A;&#x6269;&#x5C55; BA &#x57FA;&#x672C;&#x53EF;&#x7528;&#xFF1A;&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x5728;&#x51FA;&#x73B0;&#x6545;&#x969C;&#x65F6;&#xFF0C;&#x5141;&#x8BB8;&#x635F;&#x5931;&#x90E8;&#x5206;&#x53EF;&#x7528;&#x529F;&#x80FD;&#xFF0C;&#x4FDD;&#x8BC1;&#x6838;&#x5FC3;&#x529F;&#x80FD;&#x53EF;&#x7528;&#x3002; S &#x8F6F;&#x72B6;&#x6001;&#xFF1A;&#x5141;&#x8BB8;&#x7CFB;&#x7EDF;&#x4E2D;&#x5B58;&#x5728;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#xFF0C;&#x8FD9;&#x4E2A;&#x72B6;&#x6001;&#x4E0D;&#x5F71;&#x54CD;&#x7CFB;&#x7EDF;&#x53EF;&#x7528;&#x6027;&#xFF0C;&#x8FD9;&#x91CC;&#x6307;&#x7684;&#x662F; CAP &#x4E2D;&#x7684;&#x4E0D;&#x4E00;&#x81F4;&#x3002; E &#x6700;&#x7EC8;&#x4E00;&#x81F4;&#xFF1A;&#x6700;&#x7EC8;&#x4E00;&#x81F4;&#x662F;&#x6307;&#x7ECF;&#x8FC7;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x540E;&#xFF0C;&#x6240;&#x6709;&#x8282;&#x70B9;&#x6570;&#x636E;&#x90FD;&#x5C06;&#x4F1A;&#x8FBE;&#x5230;&#x4E00;&#x81F4;&#x3002; BASE &#x89E3;&#x51B3;&#x4E86; CAP &#x4E2D;&#x7406;&#x8BBA;&#x6CA1;&#x6709;&#x7F51;&#x7EDC;&#x5EF6;&#x8FDF;&#xFF0C;&#x5728; BASE &#x4E2D;&#x7528;&#x8F6F;&#x72B6;&#x6001;&#x548C;&#x6700;&#x7EC8;&#x4E00;&#x81F4;&#xFF0C;&#x4FDD;&#x8BC1;&#x4E86;&#x5EF6;&#x8FDF;&#x540E;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x3002; BASE &#x548C; ACID &#x662F;&#x76F8;&#x53CD;&#x7684;&#xFF0C;&#x5B83;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x4E8E; ACID &#x7684;&#x5F3A;&#x4E00;&#x81F4;&#x6027;&#x6A21;&#x578B;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;&#x727A;&#x7272;&#x5F3A;&#x4E00;&#x81F4;&#x6027;&#x6765;&#x83B7;&#x5F97;&#x53EF;&#x7528;&#x6027;&#xFF0C;&#x5E76;&#x5141;&#x8BB8;&#x6570;&#x636E;&#x5728;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5185;&#x662F;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#xFF0C;&#x4F46;&#x6700;&#x7EC8;&#x8FBE;&#x5230;&#x4E00;&#x81F4;&#x72B6;&#x6001;&#x3002; &#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; XA &#x65B9;&#x6848;(&#x4E24;&#x9636;&#x6BB5;&#x63D0;&#x4EA4;) TCC &#x65B9;&#x6848; &#x672C;&#x5730;&#x6D88;&#x606F;&#x8868; &#x53EF;&#x9760;&#x6D88;&#x606F;&#x6700;&#x7EC8;&#x4E00;&#x81F4;&#x6027;&#x65B9;&#x6848; &#x6700;&#x5927;&#x52AA;&#x529B;&#x901A;&#x77E5;&#x65B9;&#x6848; Seata&#x7B80;&#x4ECB;Seata (Simple Extensible Autonomous Transaction Architecture) &#x662F;&#x963F;&#x91CC;&#x5DF4;&#x5DF4;&#x5F00;&#x6E90;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#xFF0C;&#x89E3;&#x51B3;&#x5FAE;&#x670D;&#x52A1;&#x573A;&#x666F;&#x4E0B;&#x9762;&#x4E34;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#x95EE;&#x9898;&#x3002; &#x5177;&#x4F53;&#x770B; Seata &#x5B98;&#x7F51;&#xFF1A; Seata&#x4E3B;&#x8981;&#x7531;&#x4E09;&#x4E2A;&#x91CD;&#x8981;&#x7EC4;&#x4EF6;&#x7EC4;&#x6210;&#xFF1A; Transaction Coordinator(TC)&#xFF1A;&#x7BA1;&#x7406;&#x5168;&#x5C40;&#x7684;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x7528;&#x4E8E;&#x5168;&#x5C40;&#x6027;&#x4E8B;&#x52A1;&#x7684;&#x63D0;&#x4EA4;&#x548C;&#x56DE;&#x6EDA;&#x3002; Transaction Manager(TM)&#xFF1A;&#x4E8B;&#x52A1;&#x7BA1;&#x7406;&#x5668;&#xFF0C;&#x7528;&#x4E8E;&#x5F00;&#x542F;&#x5168;&#x5C40;&#x4E8B;&#x52A1;&#x3001;&#x63D0;&#x4EA4;&#x6216;&#x8005;&#x56DE;&#x6EDA;&#x5168;&#x5C40;&#x4E8B;&#x52A1;&#xFF0C;&#x662F;&#x5168;&#x5C40;&#x4E8B;&#x52A1;&#x7684;&#x5F00;&#x542F;&#x8005;&#x3002; Resource Manager(RM)&#xFF1A;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x5668;&#xFF0C;&#x7528;&#x4E8E;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x4E0A;&#x7684;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#xFF0C;&#x5411; TC &#x6CE8;&#x518C;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#xFF0C;&#x4E0A;&#x62A5;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x63A5;&#x53D7; TC &#x7684;&#x547D;&#x4EE4;&#x6765;&#x63D0;&#x4EA4;&#x6216;&#x8005;&#x56DE;&#x6EDA;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x3002; Seata &#x4E24;&#x79CD;&#x6A21;&#x5F0F;Seata &#x5173;&#x6CE8;&#x7684;&#x5C31;&#x662F;&#x5FAE;&#x670D;&#x52A1;&#x67B6;&#x6784;&#x4E0B;&#x7684;&#x6570;&#x636E;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x662F;&#x4E00;&#x6574;&#x5957;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;Seata &#x6846;&#x67B6;&#x5305;&#x542B;&#x4E24;&#x79CD;&#x6A21;&#x5F0F;&#xFF0C;&#x4E00;&#x79CD;&#x662F; AT &#x6A21;&#x5F0F;&#x3002;AT &#x6A21;&#x5F0F;&#x4E3B;&#x8981;&#x4ECE;&#x6570;&#x636E;&#x5206;&#x7247;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x5173;&#x6CE8;&#x591A; DB &#x8BBF;&#x95EE;&#x7684;&#x6570;&#x636E;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x5305;&#x62EC;&#x591A;&#x670D;&#x52A1;&#x4E0B;&#x7684;&#x591A; DB &#x6570;&#x636E;&#x8BBF;&#x95EE;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#x3002; &#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x5C31;&#x662F; TCC &#x6A21;&#x5F0F;&#xFF0C;TCC &#x6A21;&#x5F0F;&#x4E3B;&#x8981;&#x5173;&#x6CE8;&#x4E1A;&#x52A1;&#x62C6;&#x5206;&#xFF0C;&#x5728;&#x6309;&#x7167;&#x4E1A;&#x52A1;&#x6A2A;&#x5411;&#x6269;&#x5C55;&#x8D44;&#x6E90;&#x65F6;&#xFF0C;&#x89E3;&#x51B3;&#x5FAE;&#x670D;&#x52A1;&#x95F4;&#x8C03;&#x7528;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x4FDD;&#x8BC1;&#x8BFB;&#x8D44;&#x6E90;&#x8BBF;&#x95EE;&#x7684;&#x4E8B;&#x52A1;&#x5C5E;&#x6027;&#x3002; AT &#x6A21;&#x5F0F;AT &#x6A21;&#x5F0F;&#x662F;&#x901A;&#x8FC7;&#x4E24;&#x6BB5;&#x63D0;&#x4EA4;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#xFF0C;AT &#x6A21;&#x5F0F;&#x4E0B;&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x88AB;&#x5F53;&#x505A;&#x662F;&#x4E00;&#x4E2A; Resource&#xFF0C;Seata &#x91CC;&#x79F0;&#x4E3A; DataSource Resource&#x3002;&#x4E1A;&#x52A1;&#x901A;&#x8FC7; JDBC &#x6807;&#x51C6;&#x63A5;&#x53E3;&#x8BBF;&#x95EE;&#x6570;&#x636E;&#x5E93;&#x8D44;&#x6E90;&#x65F6;&#xFF0C;Seata &#x6846;&#x67B6;&#x4F1A;&#x5BF9;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x8FDB;&#x884C;&#x62E6;&#x622A;&#xFF0C;&#x505A;&#x4E00;&#x4E9B;&#x64CD;&#x4F5C;&#x3002;&#x6BCF;&#x4E2A;&#x672C;&#x5730;&#x4E8B;&#x52A1;&#x63D0;&#x4EA4;&#x65F6;&#xFF0C;Seata RM&#xFF08;Resource Manager&#xFF0C;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x5668;&#xFF09; &#x90FD;&#x4F1A;&#x5411; TC&#xFF08;Transaction Coordinator&#xFF0C;&#x4E8B;&#x52A1;&#x534F;&#x8C03;&#x5668;&#xFF09; &#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x3002;&#x5F53;&#x8BF7;&#x6C42;&#x94FE;&#x8DEF;&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x53D1;&#x8D77;&#x65B9;&#x901A;&#x77E5; TC &#x63D0;&#x4EA4;&#x6216;&#x56DE;&#x6EDA;&#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#xFF0C;&#x8FDB;&#x5165;&#x4E8C;&#x9636;&#x6BB5;&#x8C03;&#x7528;&#x6D41;&#x7A0B;&#x3002;&#x6B64;&#x65F6;&#xFF0C;TC &#x4F1A;&#x6839;&#x636E;&#x4E4B;&#x524D;&#x6CE8;&#x518C;&#x7684;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x56DE;&#x8C03;&#x5230;&#x5BF9;&#x5E94;&#x53C2;&#x4E0E;&#x8005;&#x53BB;&#x6267;&#x884C;&#x5BF9;&#x5E94;&#x8D44;&#x6E90;&#x7684;&#x7B2C;&#x4E8C;&#x9636;&#x6BB5;&#x3002;TC &#x662F;&#x600E;&#x4E48;&#x627E;&#x5230;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x4E0E;&#x8D44;&#x6E90;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x5462;&#xFF1F;&#x6BCF;&#x4E2A;&#x8D44;&#x6E90;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x552F;&#x4E00;&#x7684;&#x8D44;&#x6E90; ID&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x7528;&#x8BE5; ID &#x5411; TC &#x6CE8;&#x518C;&#x8D44;&#x6E90;&#x3002;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x6BCF;&#x4E2A;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x7684;&#x6CE8;&#x518C;&#x90FD;&#x4F1A;&#x5E26;&#x4E0A;&#x5176;&#x8D44;&#x6E90; ID&#x3002;&#x8FD9;&#x6837; TC &#x5C31;&#x80FD;&#x5728;&#x4E8C;&#x9636;&#x6BB5;&#x8C03;&#x7528;&#x65F6;&#x6B63;&#x786E;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x8D44;&#x6E90;&#x3002; &#x8FD9;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x7684; AT &#x6A21;&#x5F0F;&#x3002;&#x7B80;&#x5355;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x5F53;&#x505A;&#x4E00;&#x4E2A; Resource&#xFF0C;&#x5728;&#x672C;&#x5730;&#x4E8B;&#x52A1;&#x63D0;&#x4EA4;&#x65F6;&#x4F1A;&#x53BB;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x3002; &#x8FD9;&#x79CD;&#x6A21;&#x5F0F;&#x662F;&#x5BF9;&#x4E1A;&#x52A1;&#x96F6;&#x5165;&#x4FB5;&#xFF0C;&#x5E76;&#x53D1;&#x6CA1;&#x90A3;&#x4E48;&#x9AD8;&#x3002; TCC &#x6A21;&#x5F0F;TCC &#x6A21;&#x578B;&#x662F;&#x628A;&#x9501;&#x7684;&#x7C92;&#x5EA6;&#x5B8C;&#x5168;&#x4EA4;&#x7ED9;&#x4E1A;&#x52A1;&#x5904;&#x7406;&#xFF0C;&#x5B83;&#x9700;&#x8981;&#x6BCF;&#x4E2A;&#x5B50;&#x4E8B;&#x52A1;&#x4E1A;&#x52A1;&#x90FD;&#x5B9E;&#x73B0;Try-Confirm / Cancel &#x63A5;&#x53E3;&#x3002; TCC &#x6A21;&#x5F0F;&#x672C;&#x8D28;&#x4E5F;&#x662F; 2PC &#xFF0C;&#x53EA;&#x662F; TCC &#x5728;&#x5E94;&#x7528;&#x5C42;&#x63A7;&#x5236;&#x3002; Try: &#x5C1D;&#x8BD5;&#x6267;&#x884C;&#x4E1A;&#x52A1; &#x5B8C;&#x6210;&#x6240;&#x6709;&#x4E1A;&#x52A1;&#x68C0;&#x67E5;&#xFF08;&#x4E00;&#x81F4;&#x6027;&#xFF09; &#x9884;&#x7559;&#x5FC5;&#x987B;&#x4E1A;&#x52A1;&#x8D44;&#x6E90;&#xFF08;&#x51C6;&#x9694;&#x79BB;&#x6027;&#xFF09; Confirm: &#x786E;&#x8BA4;&#x6267;&#x884C;&#x4E1A;&#x52A1;&#xFF1B; &#x771F;&#x6B63;&#x6267;&#x884C;&#x4E1A;&#x52A1;&#xFF0C;&#x4E0D;&#x4F5C;&#x4EFB;&#x4F55;&#x4E1A;&#x52A1;&#x68C0;&#x67E5; &#x53EA;&#x4F7F;&#x7528;Try&#x9636;&#x6BB5;&#x9884;&#x7559;&#x7684;&#x4E1A;&#x52A1;&#x8D44;&#x6E90; Confirm &#x64CD;&#x4F5C;&#x6EE1;&#x8DB3;&#x5E42;&#x7B49;&#x6027; Cancel: &#x53D6;&#x6D88;&#x6267;&#x884C;&#x4E1A;&#x52A1; &#x91CA;&#x653E;Try&#x9636;&#x6BB5;&#x9884;&#x7559;&#x7684;&#x4E1A;&#x52A1;&#x8D44;&#x6E90; Cancel&#x64CD;&#x4F5C;&#x6EE1;&#x8DB3;&#x5E42;&#x7B49;&#x6027; &#x8FD9;&#x4E09;&#x4E2A;&#x9636;&#x6BB5;&#xFF0C;&#x90FD;&#x4F1A;&#x6309;&#x672C;&#x5730;&#x4E8B;&#x52A1;&#x7684;&#x65B9;&#x5F0F;&#x6267;&#x884C;&#x3002;&#x4E0D;&#x540C;&#x4E8E; XA &#x7684; prepare &#xFF0C;TCC &#x65E0;&#x9700;&#x5C06; XA &#x7684;&#x6295;&#x7968;&#x671F;&#x95F4;&#x7684;&#x6240;&#x6709;&#x8D44;&#x6E90;&#x6302;&#x8D77;&#xFF0C;&#x56E0;&#x6B64;&#x6781;&#x5927;&#x7684;&#x63D0;&#x9AD8;&#x4E86;&#x541E;&#x5410;&#x91CF;&#x3002; &#x90A3;&#x4E48;&#x5BF9;&#x5E94;&#x5230; TCC &#x6A21;&#x5F0F;&#x91CC;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;Seata &#x6846;&#x67B6;&#x628A;&#x6BCF;&#x7EC4; TCC &#x63A5;&#x53E3;&#x5F53;&#x505A;&#x4E00;&#x4E2A; Resource&#xFF0C;&#x79F0;&#x4E3A; TCC Resource&#x3002;&#x8FD9;&#x5957; TCC &#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x662F; RPC&#xFF0C;&#x4E5F;&#x4EE5;&#x662F;&#x670D;&#x52A1;&#x5185; JVM &#x8C03;&#x7528;&#x3002;&#x5728;&#x4E1A;&#x52A1;&#x542F;&#x52A8;&#x65F6;&#xFF0C;Seata &#x6846;&#x67B6;&#x4F1A;&#x81EA;&#x52A8;&#x626B;&#x63CF;&#x8BC6;&#x522B;&#x5230; TCC &#x63A5;&#x53E3;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x548C;&#x53D1;&#x5E03;&#x65B9;&#x3002;&#x5982;&#x679C;&#x662F; RPC &#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x662F; sofa:reference&#x3001;sofa:service&#x3001;dubbo:reference&#x3001;dubbo:service &#x7B49;&#x3002; &#x626B;&#x63CF;&#x5230; TCC &#x63A5;&#x53E3;&#x7684;&#x8C03;&#x7528;&#x65B9;&#x548C;&#x53D1;&#x5E03;&#x65B9;&#x4E4B;&#x540E;&#x3002;&#x5982;&#x679C;&#x662F;&#x53D1;&#x5E03;&#x65B9;&#xFF0C;&#x4F1A;&#x5728;&#x4E1A;&#x52A1;&#x542F;&#x52A8;&#x65F6;&#x5411; TC &#x6CE8;&#x518C; TCC Resource&#xFF0C;&#x4E0E; DataSource Resource &#x4E00;&#x6837;&#xFF0C;&#x6BCF;&#x4E2A;&#x8D44;&#x6E90;&#x4E5F;&#x4F1A;&#x5E26;&#x6709;&#x4E00;&#x4E2A;&#x8D44;&#x6E90; ID&#x3002; &#x5982;&#x679C;&#x662F;&#x8C03;&#x7528;&#x65B9;&#xFF0C;Seata &#x6846;&#x67B6;&#x4F1A;&#x7ED9;&#x8C03;&#x7528;&#x65B9;&#x52A0;&#x4E0A;&#x5207;&#x9762;&#xFF0C;&#x4E0E; AT &#x6A21;&#x5F0F;&#x4E00;&#x6837;&#xFF0C;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x8BE5;&#x5207;&#x9762;&#x4F1A;&#x62E6;&#x622A;&#x6240;&#x6709;&#x5BF9; TCC &#x63A5;&#x53E3;&#x7684;&#x8C03;&#x7528;&#x3002;&#x6BCF;&#x8C03;&#x7528;&#x4E00;&#x6B21; Try &#x63A5;&#x53E3;&#xFF0C;&#x5207;&#x9762;&#x4F1A;&#x5148;&#x5411; TC &#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#xFF0C;&#x7136;&#x540E;&#x624D;&#x53BB;&#x6267;&#x884C;&#x539F;&#x6765;&#x7684; RPC &#x8C03;&#x7528;&#x3002;&#x5F53;&#x8BF7;&#x6C42;&#x94FE;&#x8DEF;&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#xFF0C;TC &#x901A;&#x8FC7;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#x7684;&#x8D44;&#x6E90; ID &#x56DE;&#x8C03;&#x5230;&#x6B63;&#x786E;&#x7684;&#x53C2;&#x4E0E;&#x8005;&#x53BB;&#x6267;&#x884C;&#x5BF9;&#x5E94; TCC &#x8D44;&#x6E90;&#x7684; Confirm &#x6216; Cancel &#x65B9;&#x6CD5;&#x3002; &#x5728;&#x8BB2;&#x5B8C;&#x4E86;&#x6574;&#x4E2A;&#x6846;&#x67B6;&#x6A21;&#x578B;&#x4EE5;&#x540E;&#xFF0C;&#x5927;&#x5BB6;&#x53EF;&#x80FD;&#x4F1A;&#x95EE; TCC &#x4E09;&#x4E2A;&#x63A5;&#x53E3;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x3002;&#x56E0;&#x4E3A;&#x6846;&#x67B6;&#x672C;&#x8EAB;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x626B;&#x63CF; TCC &#x63A5;&#x53E3;&#xFF0C;&#x6CE8;&#x518C;&#x8D44;&#x6E90;&#xFF0C;&#x62E6;&#x622A;&#x63A5;&#x53E3;&#x8C03;&#x7528;&#xFF0C;&#x6CE8;&#x518C;&#x5206;&#x652F;&#x4E8B;&#x52A1;&#xFF0C;&#x6700;&#x540E;&#x56DE;&#x8C03;&#x4E8C;&#x9636;&#x6BB5;&#x63A5;&#x53E3;&#x3002;&#x6700;&#x6838;&#x5FC3;&#x7684;&#x5B9E;&#x9645;&#x4E0A;&#x662F; TCC &#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x73B0;&#x903B;&#x8F91;&#x3002;&#x4E0B;&#x9762;&#x6211;&#x5C06;&#x6839;&#x636E;&#x8682;&#x8681;&#x91D1;&#x670D;&#x5185;&#x90E8;&#x591A;&#x5E74;&#x7684;&#x5B9E;&#x8DF5;&#x6765;&#x4E3A;&#x5927;&#x5BB6;&#x5206;&#x6790;&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x5B8C;&#x5907;&#x7684; TCC &#x63A5;&#x53E3;&#x3002; &#x8FD0;&#x884C; Demo&#x5B98;&#x65B9;Demo &#x4E0B;&#x9762;&#x662F; dubbo &#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x8FD0;&#x884C;&#x540E;&#x62A5;&#x9519;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x56DE;&#x6EDA;&#x4FE1;&#x606F;&#xFF1A; 1234567INFO [rpcDispatch_RMROLE_4_8] - onMessage:xid=10.116.22.63:8091:2016481020,branchId=2016481022,branchType=AT,resourceId=jdbc:mysql://localhost:3306/fescar_demo?serverTimezone=UTC,applicationData=null INFO [rpcDispatch_RMROLE_4_8] - Branch Rollbacking: 10.116.22.63:8091:2016481020 2016481022 jdbc:mysql://localhost:3306/fescar_demo?serverTimezone=UTC INFO [rpcDispatch_RMROLE_4_8] - xid 10.116.22.63:8091:2016481020 branch 2016481022, undo_log deleted with GlobalFinished INFO [rpcDispatch_RMROLE_4_8] - Branch Rollbacked result: PhaseTwo_RollbackedDEBUG [rpcDispatch_RMROLE_4_8] - branch rollback result:xid=10.116.22.63:8091:2016481020,branchId=2016481022,branchStatus=PhaseTwo_Rollbacked,result code =Success,getMsg =null INFO [rpcDispatch_RMROLE_4_8] - RmRpcClient sendResponse xid=10.116.22.63:8091:2016481020,branchId=2016481022,branchStatus=PhaseTwo_Rollbacked,result code =Success,getMsg =nullDEBUG [rpcDispatch_RMROLE_4_8] - send response:xid=10.116.22.63:8091:2016481020,branchId=2016481022,branchStatus=PhaseTwo_Rollbacked,result code =Success,getMsg =null,channel:[id: 0xc8027ef7, L:/127.0.0.1:62873 - R:/127.0.0.1:8091] &#x6CE8;&#x610F;&#xFF1A; &#x6570;&#x636E;&#x5E93;&#x9A71;&#x52A8;&#x4E0E; Mysql &#x7248;&#x672C;&#x4E00;&#x81F4; &#x6570;&#x636E;&#x5E93; rul &#x6DFB;&#x52A0;&#x65F6;&#x533A; jdbc.account.url=jdbc:mysql://localhost:3306/fescar_demo?serverTimezone=UTC &#x53C2;&#x8003;&#x94FE;&#x63A5;Seata AT &#x6A21;&#x5F0F;&#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1;&#x6E90;&#x7801;&#x5206;&#x6790; &#x5206;&#x5E03;&#x5F0F;&#x4E8B;&#x52A1; Seata TCC &#x6A21;&#x5F0F;&#x6DF1;&#x5EA6;&#x89E3;&#x6790;]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Seata</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于null的思考]]></title>
    <url>%2F2019%2F06%2F03%2F%E5%85%B3%E4%BA%8Enull%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[&#x5199;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#x6709;&#x4E2A;&#x5730;&#x65B9;&#x9700;&#x8981;&#x628A; Integer &#x7C7B;&#x578B;&#x5F3A;&#x8F6C;&#x4E3A; String 12Integer firstEventType = eventTask.getEventType1();String firstEventTypeName = eventTypeService.queryDescByCode(String.valueOf(firstEventType)); &#x5F53;&#x6211;&#x70B9;&#x5F00; String#valueof &#x8FD9;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x5F0F;&#x65F6; 123public static String valueOf(Object obj) { return (obj == null) ? &quot;null&quot; : obj.toString();} &#x5F53;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x83B7;&#x53D6;&#x5230; firstEventType &#x8FD9;&#x4E2A;&#x503C;&#x65F6;&#xFF0C;&#x4E3A; null&#xFF0C;&#x6B64;&#x65F6;&#x5B83;&#x8FD4;&#x56DE;&#x7ED9;&#x6211;&#x4EEC;&#x7684;&#x662F;&#x5B57;&#x7B26;&#x4E32; &#x201C;null&#x201D; &#xFF0C;&#x6709;&#x65F6;&#x5019;&#x5C31;&#x4E0D;&#x7B26;&#x5408;&#x6211;&#x4EEC;&#x7684;&#x4E1A;&#x52A1;&#x573A;&#x666F;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x63D0;&#x524D;&#x505A;&#x7A7A;&#x503C;&#x5224;&#x65AD;&#x3002; &#x770B;&#x4E0B;&#x9762;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 123Integer i = null;System.out.println(String.valueOf(i)); // &#x8F93;&#x51FA; nullSystem.out.println(String.valueOf(null)); // &#x7A7A;&#x6307;&#x9488; &#x611F;&#x89C9;&#x5F88;&#x5947;&#x602A;&#xFF0C;&#x7ADF;&#x7136;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E0D;&#x4E00;&#x6837;&#x3002; &#x770B;&#x770B;&#x8FD9;&#x4E24;&#x4E2A;&#x91CD;&#x8F7D;&#x65B9;&#x6CD5; 1234567public static String valueOf(Object obj) { return (obj == null) ? &quot;null&quot; : obj.toString();}public static String valueOf(char data[]) { return new String(data);} &#x51ED;&#x76F4;&#x89C9;&#x6765;&#x770B;&#x4EE5;&#x4E3A;String.valueOf(null) &#x4F1A;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x505A;&#x4E3A; valueOf(Object obj) &#x8FD9;&#x4E2A;&#x4ECE;&#x8F7D;&#x65B9;&#x6CD5;&#xFF0C;&#x7136;&#x800C;&#x9009;&#x62E9;&#x7684;&#x662F;valueOf(char data[]) &#x6240;&#x4EE5;&#x4F1A;&#x62A5;&#x7A7A;&#x6307;&#x9488;&#x5F02;&#x5E38;&#x3002; &#x4E0B;&#x9762;&#x662F;&#x67E5;&#x5230;&#x5B98;&#x65B9;&#x6587;&#x6863; https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2.5 &#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x5904;&#x7406;&#x7684;&#x4EFB;&#x4F55;&#x8C03;&#x7528;&#x90FD;&#x53EF;&#x4EE5;&#x4F20;&#x9012;&#x7ED9;&#x53E6;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x7F16;&#x8BD1;&#x65F6;&#x7C7B;&#x578B;&#x9519;&#x8BEF;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6BD4;&#x53E6;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x66F4;&#x5177;&#x4F53;&#x3002; &#x4ECE;&#x610F;&#x601D;&#x6765;&#x770B; valueOf(char data[]) &#x6BD4; valueOf(Object obj) &#x66F4;&#x5177;&#x4F53;&#x3002; &#x6211;&#x4EEC;&#x975E;&#x5E38;&#x75DB;&#x6068;&#x7684; null &#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48; Java &#x8BED;&#x8A00;&#x5B9A;&#x4E49; There is also a special null type, the type of the expression null, which has no name. Because the null type has no name, it is impossible to declare a variable of the null type or to cast to the null type. The null reference is the only possible value of an expression of null type. The null reference can always be cast to any reference type. In practice, the programmer can ignore the null type and just pretend that null is merely a special literal that can be of any reference type.]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JVM 面试]]></title>
    <url>%2F2019%2F05%2F10%2FJVM%E9%9D%A2%E8%AF%95%2F</url>
    <content type="text"><![CDATA[JVM &#x5783;&#x573E;&#x56DE;&#x6536;&#x7684;&#x65F6;&#x5019;&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x5783;&#x573E;&#xFF1F;&#x77E5;&#x9053;&#x4EC0;&#x4E48;&#x662F; GC Roots ? &#x4EC0;&#x4E48;&#x662F;&#x5783;&#x573E; &#x7B80;&#x5355;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x5185;&#x5B58;&#x4E2D;&#x5DF2;&#x7ECF;&#x4E0D;&#x5728;&#x88AB;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7A7A;&#x95F4;&#x5C31;&#x662F;&#x5783;&#x573E; &#x8981;&#x8FDB;&#x884C;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;&#x5982;&#x4F55;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x56DE;&#x6536;&#xFF1F; &#x5F15;&#x7528;&#x8BA1;&#x6570;&#x6CD5; &#x679A;&#x4E3E;&#x6839;&#x8282;&#x70B9;&#x505A;&#x53EF;&#x8FBE;&#x6027;&#x5206;&#x6790; &#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x6CD5;&#x7684;&#x5FAA;&#x73AF;&#x5F15;&#x7528;&#x95EE;&#x9898;&#xFF0C;Java &#x4F7F;&#x7528;&#x4E86;&#x53EF;&#x8FBE;&#x6027;&#x7B97;&#x6CD5;&#x3002; &#x8DDF;&#x8E2A;&#x6536;&#x96C6;&#x5668;&#x91C7;&#x7528;&#x7684;&#x4E3A;&#x96C6;&#x4E2D;&#x5F0F;&#x7684;&#x7BA1;&#x7406;&#x65B9;&#x5F0F;&#xFF0C;&#x5168;&#x5C40;&#x8BB0;&#x5F55;&#x5BF9;&#x8C61;&#x4E4B;&#x95F4;&#x7684;&#x5F15;&#x7528;&#x72B6;&#x6001;&#xFF0C;&#x6267;&#x884C;&#x65F6;&#x4ECE;&#x4E00;&#x4E9B;&#x5217;GC Roots&#x7684;&#x5BF9;&#x8C61;&#x505A;&#x4E3A;&#x8D77;&#x70B9;&#xFF0C;&#x4ECE;&#x8FD9;&#x4E9B;&#x8282;&#x70B9;&#x5411;&#x4E0B;&#x5F00;&#x59CB;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#x6240;&#x6709;&#x7684;&#x5F15;&#x7528;&#x94FE;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5230;GC Roots &#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x5F15;&#x7528;&#x94FE;&#x65F6;&#xFF0C;&#x5219;&#x8BC1;&#x660E;&#x6B64;&#x5BF9;&#x8C61;&#x662F;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x3002; &#x56FE;&#x4E2D;&#xFF0C;&#x5BF9;&#x8C61;Object6&#x3001;Object7&#x3001;Object8&#x867D;&#x7136;&#x4E92;&#x76F8;&#x5F15;&#x7528;&#xFF0C;&#x4F46;&#x4ED6;&#x4EEC;&#x7684;GC Roots&#x662F;&#x4E0D;&#x53EF;&#x5230;&#x8FBE;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x4EEC;&#x5C06;&#x4F1A;&#x88AB;&#x5224;&#x5B9A;&#x4E3A;&#x662F;&#x53EF;&#x56DE;&#x6536;&#x7684;&#x5BF9;&#x8C61;&#x3002; &#x54EA;&#x4E9B;&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A; GC Roots &#x7684;&#x5BF9;&#x8C61;&#xFF1A; &#x865A;&#x62DF;&#x673A;&#x6808;&#xFF08;&#x6808;&#x5E27;&#x4E2D;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x533A;&#xFF0C;&#x4E5F;&#x53EB;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8868;&#xFF09;&#x4E2D;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x65B9;&#x6CD5;&#x533A;&#x4E2D;&#x7684;&#x7C7B;&#x9759;&#x6001;&#x5C5E;&#x6027;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x65B9;&#x6CD5;&#x53BB;&#x5E38;&#x91CF;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x672C;&#x5730;&#x65B9;&#x6CD5;&#x6808;&#x4E2D; JNI (Native&#x65B9;&#x6CD5;)&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x4F60;&#x8BF4;&#x4F60;&#x505A;&#x8FC7; JVM &#x8C03;&#x4F18;&#x548C;&#x53C2;&#x6570;&#x914D;&#x7F6E;&#xFF0C;&#x8BF7;&#x95EE;&#x5982;&#x679C;&#x76D8;&#x70B9;&#x67E5;&#x770B; JVM &#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x503C;&#xFF1F;JVM &#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B; &#x6807;&#x914D;&#x53C2;&#x6570; -version -help X &#x53C2;&#x6570;&#xFF08;&#x4E86;&#x89E3;&#xFF09; -Xint&#xFF1A;&#x89E3;&#x91CA;&#x6267;&#x884C; -Xcomp&#xFF1A;&#x7B2C;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#x5C31;&#x7F16;&#x8BD1;&#x6210;&#x672C;&#x5730;&#x4EE3;&#x7801; -Xmixed&#xFF1A;&#x6DF7;&#x5408;&#x6A21;&#x5F0F; XX &#x53C2;&#x6570; Boolean &#x7C7B;&#x578B;&#xFF1A;-XX&#xFF1A;+ &#x6216;&#x8005; - &#x67D0;&#x4E2A;&#x5C5E;&#x6027;&#x503C;&#xFF08;+ &#x8868;&#x793A;&#x5F00;&#x542F;&#xFF0C;- &#x8868;&#x793A;&#x5173;&#x95ED;&#xFF09; -XX:+PrintGCDetails&#xFF1A;&#x6253;&#x5370; GC &#x6536;&#x96C6;&#x7EC6;&#x8282; -XX:-PrintGCDetails&#xFF1A;&#x4E0D;&#x6253;&#x5370; GC &#x6536;&#x96C6;&#x7EC6;&#x8282; -XX:+UseSerialGC&#xFF1A;&#x4F7F;&#x7528;&#x4E86;&#x4E32;&#x884C;&#x6536;&#x96C6;&#x5668; -XX:-UseSerialGC&#xFF1A;&#x4E0D;&#x4F7F;&#x7528;&#x4E86;&#x4E32;&#x884C;&#x6536;&#x96C6;&#x5668; KV &#x8BBE;&#x7F6E;&#x7C7B;&#x578B;&#xFF1A;-XX:key=value -XX:MetaspaceSize=128m -XX:MaxTenuringThreshold=15 jinfo &#x4E3E;&#x4F8B;&#xFF0C;&#x5982;&#x4F55;&#x67E5;&#x770B;&#x5F53;&#x524D;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x7684;&#x914D;&#x7F6E; 12345678910public class HelloGC { public static void main(String[] args) { System.out.println(&quot;hello GC...&quot;); try { Thread.sleep(Integer.MAX_VALUE); } catch (InterruptedException e) { e.printStackTrace(); } }} &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; jps -l &#x547D;&#x4EE4;&#xFF0C;&#x67E5;&#x51FA;&#x8FDB;&#x7A0B; id 1234561923 org.jetbrains.jps.cmdline.Launcher1988 sun.tools.jps.Jps1173 org.jetbrains.kotlin.daemon.KotlinCompileDaemon32077 com.intellij.idea.Main1933 com.cuzz.jvm.HelloGC32382 org.jetbrains.idea.maven.server.RemoteMavenServer &#x5728;&#x4F7F;&#x7528; jinfo -flag PrintGCDetails 1933 &#x547D;&#x4EE4;&#x67E5;&#x770B; 1-XX:-PrintGCDetails &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x9ED8;&#x8BA4;&#x662F;&#x4E0D;&#x6253;&#x5370; GC &#x6536;&#x96C6;&#x7EC6;&#x8282;&#x4E5F;&#x53EF;&#x662F;&#x4F7F;&#x7528;jinfo -flags 1933 &#x67E5;&#x770B;&#x6240;&#x4EE5;&#x7684;&#x53C2;&#x6570; &#x4E24;&#x4E2A;&#x7ECF;&#x5178;&#x53C2;&#x6570;&#xFF1A;-Xms &#x548C; - Xmx&#xFF08;&#x5982; -Xms1024m&#xFF09; -Xms &#x7B49;&#x4EF7;&#x4E8E; -XX:InitialHeapSize -Xmx &#x7B49;&#x4EF7;&#x4E8E; -XX:MaxHeapSize &#x76D8;&#x70B9;&#x5BB6;&#x5E95;&#x67E5;&#x770B; JVM &#x9ED8;&#x8BA4;&#x503C; &#x67E5;&#x770B;&#x521D;&#x59CB;&#x9ED8;&#x8BA4;&#x503C;&#xFF1A;-XX:+PrintFlagsInitial 1234567891011cuzz@cuzz-pc:~/Project/demo$ java -XX:+PrintFlagsInitial[Global flags] intx ActiveProcessorCount = -1 {product} uintx AdaptiveSizeDecrementScaleFactor = 4 {product} uintx AdaptiveSizeMajorGCDecayTimeScale = 10 {product} uintx AdaptiveSizePausePolicy = 0 {product} uintx AdaptiveSizePolicyCollectionCostMargin = 50 {product} uintx AdaptiveSizePolicyInitializingSteps = 20 {product} uintx AdaptiveSizePolicyOutputInterval = 0 {product} uintx AdaptiveSizePolicyWeight = 10 {product} ... &#x67E5;&#x770B;&#x4FEE;&#x6539;&#x66F4;&#x65B0;&#xFF1A;-XX:+PrintFlagsFinal 1234567bool UsePSAdaptiveSurvivorSizePolicy = true {product}bool UseParNewGC = false {product}bool UseParallelGC := true {product}bool UseParallelOldGC = true {product}bool UsePerfData = true {product}bool UsePopCountInstruction = true {product}bool UseRDPCForConstantTableBase = false {C2 product} = &#x4E0E; := &#x7684;&#x533A;&#x522B;&#x662F;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x9ED8;&#x8BA4;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x4EBA;&#x7269;&#x6539;&#x53D8;&#x6216;&#x8005; jvm &#x52A0;&#x8F7D;&#x65F6;&#x6539;&#x53D8;&#x7684;&#x53C2;&#x6570; &#x6253;&#x5370;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;(&#x53EF;&#x4EE5;&#x770B;&#x9ED8;&#x8BA4;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;)&#xFF1A;-XX:+PrintCommandLineFlags12cuzz@cuzz-pc:~/Project/demo$ java -XX:+PrintCommandLineFlags-XX:InitialHeapSize=128789376 -XX:MaxHeapSize=2060630016 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC &#x4F60;&#x5E73;&#x65F6;&#x5DE5;&#x4F5C;&#x7528;&#x8FC7;&#x7684; JVM &#x5E38;&#x7528;&#x7684;&#x57FA;&#x672C;&#x914D;&#x7F6E;&#x53C2;&#x6570;&#x6709;&#x54EA;&#x4E9B;&#xFF1F; -Xms &#x521D;&#x59CB;&#x5927;&#x5C0F;&#x5185;&#x5B58;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7269;&#x7406;&#x5185;&#x5B58; 1/64 &#x7B49;&#x4EF7;&#x4E8E; -XX:InitialHeapSize -Xmx &#x6700;&#x5927;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;&#x7269;&#x7406;&#x5185;&#x5B58;&#x7684; 1/4 &#x7B49;&#x4EF7;&#x4E8E; -XX:MaxHeapSize -Xss &#x8BBE;&#x7F6E;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x6808;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x4E00;&#x822C;&#x9ED8;&#x8BA4;&#x4E3A; 512-1024k &#x7B49;&#x4EF7;&#x4E8E; -XX:ThreadStackSize -Xmn &#x8BBE;&#x7F6E;&#x5E74;&#x8F7B;&#x4EE3;&#x7684;&#x5927;&#x5C0F; &#x6574;&#x4E2A;JVM&#x5185;&#x5B58;&#x5927;&#x5C0F;=&#x5E74;&#x8F7B;&#x4EE3;&#x5927;&#x5C0F; + &#x5E74;&#x8001;&#x4EE3;&#x5927;&#x5C0F; + &#x6301;&#x4E45;&#x4EE3;&#x5927;&#x5C0F;&#xFF0C;&#x6301;&#x4E45;&#x4EE3;&#x4E00;&#x822C;&#x56FA;&#x5B9A;&#x5927;&#x5C0F;&#x4E3A;64m&#xFF0C;&#x6240;&#x4EE5;&#x589E;&#x5927;&#x5E74;&#x8F7B;&#x4EE3;&#x540E;&#xFF0C;&#x5C06;&#x4F1A;&#x51CF;&#x5C0F;&#x5E74;&#x8001;&#x4EE3;&#x5927;&#x5C0F;&#x3002;&#x6B64;&#x503C;&#x5BF9;&#x7CFB;&#x7EDF;&#x6027;&#x80FD;&#x5F71;&#x54CD;&#x8F83;&#x5927;&#xFF0C;Sun&#x5B98;&#x65B9;&#x63A8;&#x8350;&#x914D;&#x7F6E;&#x4E3A;&#x6574;&#x4E2A;&#x5806;&#x7684;3/8&#x3002; -XX:MetaspaceSize &#x8BBE;&#x7F6E;&#x5143;&#x7A7A;&#x95F4;&#x5927;&#x5C0F;&#xFF08;&#x5143;&#x7A7A;&#x95F4;&#x7684;&#x672C;&#x8D28;&#x548C;&#x6C38;&#x4E45;&#x4EE3;&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x662F;&#x5BF9; JVM &#x89C4;&#x8303;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x533A;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x4E0D;&#x8FC7;&#x5143;&#x7A7A;&#x95F4;&#x4E8E;&#x6C38;&#x4E45;&#x4EE3;&#x4E4B;&#x95F4;&#x6700;&#x5927;&#x533A;&#x522B;&#x5728;&#x4E8E;&#xFF0C;&#x5143;&#x7A7A;&#x95F4;&#x5E76;&#x4E0D;&#x5728;&#x865A;&#x62DF;&#x4E2D;&#xFF0C;&#x800C;&#x662F;&#x4F7F;&#x7528;&#x672C;&#x5730;&#x5185;&#x5B58;&#xFF0C;&#x56E0;&#x6B64;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5143;&#x7A7A;&#x95F4;&#x7684;&#x5927;&#x5C0F;&#x4EC5;&#x53D7;&#x672C;&#x5730;&#x5185;&#x5B58;&#x9650;&#x5236;&#xFF09; &#x5143;&#x7A7A;&#x95F4;&#x9ED8;&#x8BA4;&#x6BD4;&#x8F83;&#x5C0F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8C03;&#x5927;&#x4E00;&#x70B9; -XX:+PrintGCDetails &#x8F93;&#x51FA;&#x8BE6;&#x7EC6; GC &#x6536;&#x96C6;&#x65E5;&#x5FD7;&#x4FE1;&#x606F; &#x8BBE;&#x7F6E; JVM &#x53C2;&#x6570;&#x4E3A;&#xFF1A; -Xms10m -Xmx10m -XX:+PrintGCDetails &#x4EE3;&#x7801; 12345public class HelloGC { public static void main(String[] args) { byte[] bytes = new byte[20 * 1024 * 1024]; }} &#x6253;&#x5370;&#x7ED3;&#x679C; 12345678910111213141516[GC (Allocation Failure) [PSYoungGen: 1231K-&gt;448K(2560K)] 1231K-&gt;456K(9728K), 0.0015616 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [GC (Allocation Failure) [PSYoungGen: 448K-&gt;384K(2560K)] 456K-&gt;392K(9728K), 0.0016999 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 384K-&gt;0K(2560K)] [ParOldGen: 8K-&gt;358K(7168K)] 392K-&gt;358K(9728K), [Metaspace: 3028K-&gt;3028K(1056768K)], 0.0066696 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 358K-&gt;358K(9728K), 0.0005321 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 358K-&gt;340K(7168K)] 358K-&gt;340K(9728K), [Metaspace: 3028K-&gt;3028K(1056768K)], 0.0051543 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] Heap PSYoungGen total 2560K, used 81K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000) eden space 2048K, 3% used [0x00000000ffd00000,0x00000000ffd14668,0x00000000fff00000) from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000) to space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000) ParOldGen total 7168K, used 340K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000) object space 7168K, 4% used [0x00000000ff600000,0x00000000ff655188,0x00000000ffd00000) Metaspace used 3060K, capacity 4496K, committed 4864K, reserved 1056768K class space used 336K, capacity 388K, committed 512K, reserved 1048576KException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space at com.cuzz.jvm.HelloGC.main(HelloGC.java:12) GC FullGC -XX:SurvivorRatio &#x8BBE;&#x7F6E;&#x65B0;&#x751F;&#x4EE3;&#x4E2D; eden &#x548C; S0/S1 &#x7A7A;&#x95F4;&#x6BD4;&#x4F8B; &#x9ED8;&#x8BA4; -XX:SurvivorRatio=8&#xFF0C;Eden : S0 : S1 = 8 : 1 : 1 -XX:NewRatio &#x914D;&#x7F6E;&#x5E74;&#x8F7B;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#x5728;&#x5806;&#x7ED3;&#x6784;&#x7684;&#x5360;&#x6BD4; &#x9ED8;&#x8BA4; -XX:NewRatio=2 &#x65B0;&#x751F;&#x4EE3;&#x5360;1&#xFF0C;&#x8001;&#x5E74;&#x4EE3;&#x5360;2&#xFF0C;&#x5E74;&#x8F7B;&#x4EE3;&#x5360;&#x6574;&#x4E2A;&#x5806;&#x7684; 1/3 -XX:MaxTenuringThreshold &#x8BBE;&#x7F6E;&#x5783;&#x573E;&#x6700;&#x5927;&#x5E74;&#x9F84; &#x5F3A;&#x5F15;&#x7528;&#x3001;&#x8F6F;&#x5F15;&#x7528;&#x3001;&#x5F31;&#x5F15;&#x7528;&#x548C;&#x865A;&#x5F15;&#x7528;&#x5206;&#x522B;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x5728;Java&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x9664;&#x4E86;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x90FD;&#x662F;&#x6307;&#x5411;&#x5404;&#x7C7B;&#x5BF9;&#x8C61;&#x7684;&#x5BF9;&#x8C61;&#x5F15;&#x7528;&#xFF1B;Java&#x4E2D;&#x6839;&#x636E;&#x5176;&#x751F;&#x547D;&#x5468;&#x671F;&#x7684;&#x957F;&#x77ED;&#xFF0C;&#x5C06;&#x5F15;&#x7528;&#x5206;&#x4E3A;4&#x7C7B;&#x3002; &#x5F3A;&#x5F15;&#x7528; &#x7279;&#x70B9;&#xFF1A;&#x6211;&#x4EEC;&#x5E73;&#x5E38;&#x5178;&#x578B;&#x7F16;&#x7801;Object obj = new Object()&#x4E2D;&#x7684;obj&#x5C31;&#x662F;&#x5F3A;&#x5F15;&#x7528;&#x3002;&#x901A;&#x8FC7;&#x5173;&#x952E;&#x5B57;new&#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61;&#x6240;&#x5173;&#x8054;&#x7684;&#x5F15;&#x7528;&#x5C31;&#x662F;&#x5F3A;&#x5F15;&#x7528;&#x3002; &#x5F53;JVM&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x4E0D;&#x8DB3;&#xFF0C;JVM&#x5B81;&#x613F;&#x629B;&#x51FA;OutOfMemoryError&#x8FD0;&#x884C;&#x65F6;&#x9519;&#x8BEF;&#xFF08;OOM&#xFF09;&#xFF0C;&#x4F7F;&#x7A0B;&#x5E8F;&#x5F02;&#x5E38;&#x7EC8;&#x6B62;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x9760;&#x968F;&#x610F;&#x56DE;&#x6536;&#x5177;&#x6709;&#x5F3A;&#x5F15;&#x7528;&#x7684;&#x201C;&#x5B58;&#x6D3B;&#x201D;&#x5BF9;&#x8C61;&#x6765;&#x89E3;&#x51B3;&#x5185;&#x5B58;&#x4E0D;&#x8DB3;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5176;&#x4ED6;&#x7684;&#x5F15;&#x7528;&#x5173;&#x7CFB;&#xFF0C;&#x53EA;&#x8981;&#x8D85;&#x8FC7;&#x4E86;&#x5F15;&#x7528;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x6216;&#x8005;&#x663E;&#x5F0F;&#x5730;&#x5C06;&#x76F8;&#x5E94;&#xFF08;&#x5F3A;&#xFF09;&#x5F15;&#x7528;&#x8D4B;&#x503C;&#x4E3A; null&#xFF0C;&#x5C31;&#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7684;&#x4E86;&#xFF0C;&#x5177;&#x4F53;&#x56DE;&#x6536;&#x65F6;&#x673A;&#x8FD8;&#x662F;&#x8981;&#x770B;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7B56;&#x7565;&#x3002; &#x8F6F;&#x5F15;&#x7528; &#x7279;&#x70B9;&#xFF1A;&#x8F6F;&#x5F15;&#x7528;&#x901A;&#x8FC7;SoftReference&#x7C7B;&#x5B9E;&#x73B0;&#x3002; &#x8F6F;&#x5F15;&#x7528;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#x6BD4;&#x5F3A;&#x5F15;&#x7528;&#x77ED;&#x4E00;&#x4E9B;&#x3002;&#x53EA;&#x6709;&#x5F53; JVM &#x8BA4;&#x4E3A;&#x5185;&#x5B58;&#x4E0D;&#x8DB3;&#x65F6;&#xFF0C;&#x624D;&#x4F1A;&#x53BB;&#x8BD5;&#x56FE;&#x56DE;&#x6536;&#x8F6F;&#x5F15;&#x7528;&#x6307;&#x5411;&#x7684;&#x5BF9;&#x8C61;&#xFF1A;&#x5373;JVM &#x4F1A;&#x786E;&#x4FDD;&#x5728;&#x629B;&#x51FA; OutOfMemoryError &#x4E4B;&#x524D;&#xFF0C;&#x6E05;&#x7406;&#x8F6F;&#x5F15;&#x7528;&#x6307;&#x5411;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x8F6F;&#x5F15;&#x7528;&#x53EF;&#x4EE5;&#x548C;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#x961F;&#x5217;&#xFF08;ReferenceQueue&#xFF09;&#x8054;&#x5408;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x8F6F;&#x5F15;&#x7528;&#x6240;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x56DE;&#x6536;&#xFF0C;Java&#x865A;&#x62DF;&#x673A;&#x5C31;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A;&#x8F6F;&#x5F15;&#x7528;&#x52A0;&#x5165;&#x5230;&#x4E0E;&#x4E4B;&#x5173;&#x8054;&#x7684;&#x5F15;&#x7528;&#x961F;&#x5217;&#x4E2D;&#x3002;&#x540E;&#x7EED;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8C03;&#x7528;ReferenceQueue&#x7684;poll()&#x65B9;&#x6CD5;&#x6765;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6709;&#x5B83;&#x6240;&#x5173;&#x5FC3;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x56DE;&#x6536;&#x3002;&#x5982;&#x679C;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#xFF0C;&#x5C06;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;null,&#x5426;&#x5219;&#x8BE5;&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x961F;&#x5217;&#x4E2D;&#x524D;&#x9762;&#x7684;&#x4E00;&#x4E2A;Reference&#x5BF9;&#x8C61;&#x3002; &#x5E94;&#x7528;&#x573A;&#x666F;&#xFF1A;&#x8F6F;&#x5F15;&#x7528;&#x901A;&#x5E38;&#x7528;&#x6765;&#x5B9E;&#x73B0;&#x5185;&#x5B58;&#x654F;&#x611F;&#x7684;&#x7F13;&#x5B58;&#x3002;&#x5982;&#x679C;&#x8FD8;&#x6709;&#x7A7A;&#x95F2;&#x5185;&#x5B58;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x6682;&#x65F6;&#x4FDD;&#x7559;&#x7F13;&#x5B58;&#xFF0C;&#x5F53;&#x5185;&#x5B58;&#x4E0D;&#x8DB3;&#x65F6;&#x6E05;&#x7406;&#x6389;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4FDD;&#x8BC1;&#x4E86;&#x4F7F;&#x7528;&#x7F13;&#x5B58;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4E0D;&#x4F1A;&#x8017;&#x5C3D;&#x5185;&#x5B58;&#x3002; &#x4EE3;&#x7801;&#x9A8C;&#x8BC1;&#x6211;&#x8BBE;&#x7F6E; JVM &#x53C2;&#x6570;&#x4E3A; -Xms10m -Xmx10m -XX:+PrintGCDetails 1234567891011121314151617public class SoftReferenceDemo { public static void main(String[] args) { Object obj = new Object(); SoftReference&lt;Object&gt; softReference = new SoftReference&lt;&gt;(obj); obj = null; try { // &#x5206;&#x914D; 20 M byte[] bytes = new byte[20 * 1024 * 1024]; } catch (Exception e) { e.printStackTrace(); } finally { System.out.println(&quot;&#x8F6F;&#x5F15;&#x7528;&#xFF1A;&quot; + softReference.get()); } }} &#x8F93;&#x51FA; 1234567891011121314151617[GC (Allocation Failure) [PSYoungGen: 1234K-&gt;448K(2560K)] 1234K-&gt;456K(9728K), 0.0016748 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 448K-&gt;384K(2560K)] 456K-&gt;392K(9728K), 0.0018398 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 384K-&gt;0K(2560K)] [ParOldGen: 8K-&gt;358K(7168K)] 392K-&gt;358K(9728K), [Metaspace: 3030K-&gt;3030K(1056768K)], 0.0057246 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] [GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 358K-&gt;358K(9728K), 0.0006038 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] [Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 358K-&gt;340K(7168K)] 358K-&gt;340K(9728K), [Metaspace: 3030K-&gt;3030K(1056768K)], 0.0115080 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] &#x8F6F;&#x5F15;&#x7528;&#xFF1A;nullException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space at com.cuzz.jvm.SoftReferenceDemo.main(SoftReferenceDemo.java:21)Heap PSYoungGen total 2560K, used 98K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000) eden space 2048K, 4% used [0x00000000ffd00000,0x00000000ffd18978,0x00000000fff00000) from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000) to space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000) ParOldGen total 7168K, used 340K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000) object space 7168K, 4% used [0x00000000ff600000,0x00000000ff6552f8,0x00000000ffd00000) Metaspace used 3067K, capacity 4496K, committed 4864K, reserved 1056768K class space used 336K, capacity 388K, committed 512K, reserved 1048576K &#x53D1;&#x73B0;&#x5F53;&#x5185;&#x5B58;&#x4E0D;&#x591F;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x88AB;&#x56DE;&#x6536;&#x3002; &#x5F31;&#x5F15;&#x7528; &#x7279;&#x70B9;&#xFF1A;&#x5F31;&#x5F15;&#x7528;&#x901A;&#x8FC7;WeakReference&#x7C7B;&#x5B9E;&#x73B0;&#x3002; &#x5F31;&#x5F15;&#x7528;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#x6BD4;&#x8F6F;&#x5F15;&#x7528;&#x77ED;&#x3002;&#x5728;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x7EBF;&#x7A0B;&#x626B;&#x63CF;&#x5B83;&#x6240;&#x7BA1;&#x8F96;&#x7684;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4E00;&#x65E6;&#x53D1;&#x73B0;&#x4E86;&#x5177;&#x6709;&#x5F31;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x7BA1;&#x5F53;&#x524D;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x8DB3;&#x591F;&#x4E0E;&#x5426;&#xFF0C;&#x90FD;&#x4F1A;&#x56DE;&#x6536;&#x5B83;&#x7684;&#x5185;&#x5B58;&#x3002;&#x7531;&#x4E8E;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x5F88;&#x4F4E;&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x4E00;&#x5B9A;&#x4F1A;&#x5F88;&#x5FEB;&#x56DE;&#x6536;&#x5F31;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x5F31;&#x5F15;&#x7528;&#x53EF;&#x4EE5;&#x548C;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#x961F;&#x5217;&#xFF08;ReferenceQueue&#xFF09;&#x8054;&#x5408;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x5F31;&#x5F15;&#x7528;&#x6240;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;Java&#x865A;&#x62DF;&#x673A;&#x5C31;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A;&#x5F31;&#x5F15;&#x7528;&#x52A0;&#x5165;&#x5230;&#x4E0E;&#x4E4B;&#x5173;&#x8054;&#x7684;&#x5F15;&#x7528;&#x961F;&#x5217;&#x4E2D;&#x3002; &#x5E94;&#x7528;&#x573A;&#x666F;&#xFF1A;&#x5F31;&#x5E94;&#x7528;&#x540C;&#x6837;&#x53EF;&#x7528;&#x4E8E;&#x5185;&#x5B58;&#x654F;&#x611F;&#x7684;&#x7F13;&#x5B58;&#x3002; &#x4EE3;&#x7801;&#x9A8C;&#x8BC1; 123456789101112131415public class WeakReferenceDemo { public static void main(String[] args) { Object obj = new Object(); WeakReference&lt;Object&gt; weakReference = new WeakReference&lt;&gt;(obj); System.out.println(obj); System.out.println(weakReference.get()); obj = null; System.gc(); System.out.println(&quot;GC&#x4E4B;&#x540E;....&quot;); System.out.println(obj); System.out.println(weakReference.get()); }} &#x8F93;&#x51FA; 12345java.lang.Object@1540e19djava.lang.Object@1540e19dGC&#x4E4B;&#x540E;....nullnull &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;String name = &quot;cuzz&quot; &#x8FD9;&#x79CD;&#x4F1A;&#x653E;&#x5165;&#x6C38;&#x4E45;&#x4EE3;&#xFF0C;&#x4EE5;&#x53CA; Integer age = 1 &#x5728; int &#x4E2D; -128 &#x5230; 127 &#x4F1A;&#x88AB;&#x7F13;&#x5B58;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x5F3A;&#x5F15;&#x7528;&#xFF0C;&#x7136;&#x540E; GC &#x4E5F;&#x4E0D;&#x4F1A;&#x88AB;&#x56DE;&#x6536;&#x3002; &#x5F15;&#x7528;&#x961F;&#x5217; 12345678910111213141516171819public class ReferenceQueueDemo { public static void main(String[] args) throws InterruptedException { Object obj = new Object(); ReferenceQueue&lt;Object&gt; referenceQueue = new ReferenceQueue&lt;&gt;(); WeakReference&lt;Object&gt; weakReference = new WeakReference&lt;&gt;(obj, referenceQueue); System.out.println(obj); System.out.println(weakReference.get()); System.out.println(weakReference); obj = null; System.gc(); Thread.sleep(500); System.out.println(&quot;GC&#x4E4B;&#x540E;....&quot;); System.out.println(obj); System.out.println(weakReference.get()); System.out.println(weakReference); }} &#x8F93;&#x51FA; 1234567java.lang.Object@1540e19djava.lang.Object@1540e19djava.lang.ref.WeakReference@677327b6GC&#x4E4B;&#x540E;....nullnulljava.lang.ref.WeakReference@677327b6 &#x4F1A;&#x628A;&#x8BE5;&#x5BF9;&#x8C61;&#x7684;&#x5305;&#x88C5;&#x7C7B;&#x5373;weakReference&#x653E;&#x5165;&#x5230;ReferenceQueue&#x91CC;&#x9762;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;queue&#x4E2D;&#x83B7;&#x53D6;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x5BF9;&#x8C61;&#x4FE1;&#x606F;&#xFF0C;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#x989D;&#x5916;&#x7684;&#x5904;&#x7406;&#x3002;&#x6BD4;&#x5982;&#x53CD;&#x5411;&#x64CD;&#x4F5C;&#xFF0C;&#x6570;&#x636E;&#x6E05;&#x7406;&#x7B49;&#x3002; &#x865A;&#x5F15;&#x7528; &#x7279;&#x70B9;&#xFF1A;&#x865A;&#x5F15;&#x7528;&#x4E5F;&#x53EB;&#x5E7B;&#x8C61;&#x5F15;&#x7528;&#xFF0C;&#x901A;&#x8FC7;PhantomReference&#x7C7B;&#x6765;&#x5B9E;&#x73B0;&#x3002;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;&#x865A;&#x5F15;&#x7528;&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x7684;&#x4EFB;&#x4F55;&#x5C5E;&#x6027;&#x6216;&#x51FD;&#x6570;&#x3002;&#x5E7B;&#x8C61;&#x5F15;&#x7528;&#x4EC5;&#x4EC5;&#x662F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x786E;&#x4FDD;&#x5BF9;&#x8C61;&#x88AB; finalize &#x4EE5;&#x540E;&#xFF0C;&#x505A;&#x67D0;&#x4E9B;&#x4E8B;&#x60C5;&#x7684;&#x673A;&#x5236;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4EC5;&#x6301;&#x6709;&#x865A;&#x5F15;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5C31;&#x548C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x5F15;&#x7528;&#x4E00;&#x6837;&#xFF0C;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x5019;&#x90FD;&#x53EF;&#x80FD;&#x88AB;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x56DE;&#x6536;&#x3002;&#x865A;&#x5F15;&#x7528;&#x5FC5;&#x987B;&#x548C;&#x5F15;&#x7528;&#x961F;&#x5217; &#xFF08;ReferenceQueue&#xFF09;&#x8054;&#x5408;&#x4F7F;&#x7528;&#x3002;&#x5F53;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x51C6;&#x5907;&#x56DE;&#x6536;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x5B83;&#x8FD8;&#x6709;&#x865A;&#x5F15;&#x7528;&#xFF0C;&#x5C31;&#x4F1A;&#x5728;&#x56DE;&#x6536;&#x5BF9;&#x8C61;&#x7684;&#x5185;&#x5B58;&#x4E4B;&#x524D;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x865A;&#x5F15;&#x7528;&#x52A0;&#x5165;&#x5230;&#x4E0E;&#x4E4B;&#x5173;&#x8054;&#x7684;&#x5F15;&#x7528;&#x961F;&#x5217;&#x4E2D;&#x3002;ReferenceQueue queue = new ReferenceQueue ();PhantomReference pr = new PhantomReference (object, queue);&#x7A0B;&#x5E8F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;&#x5F15;&#x7528;&#x961F;&#x5217;&#x4E2D;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x52A0;&#x5165;&#x4E86;&#x865A;&#x5F15;&#x7528;&#xFF0C;&#x6765;&#x4E86;&#x89E3;&#x88AB;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#x662F;&#x5426;&#x5C06;&#x8981;&#x88AB;&#x5783;&#x573E;&#x56DE;&#x6536;&#x3002;&#x5982;&#x679C;&#x7A0B;&#x5E8F;&#x53D1;&#x73B0;&#x67D0;&#x4E2A;&#x865A;&#x5F15;&#x7528;&#x5DF2;&#x7ECF;&#x88AB;&#x52A0;&#x5165;&#x5230;&#x5F15;&#x7528;&#x961F;&#x5217;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x6240;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x5185;&#x5B58;&#x88AB;&#x56DE;&#x6536;&#x4E4B;&#x524D;&#x91C7;&#x53D6;&#x4E00;&#x4E9B;&#x7A0B;&#x5E8F;&#x884C;&#x52A8;&#x3002; &#x5E94;&#x7528;&#x573A;&#x666F;&#xFF1A;&#x53EF;&#x7528;&#x6765;&#x8DDF;&#x8E2A;&#x5BF9;&#x8C61;&#x88AB;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x56DE;&#x6536;&#x7684;&#x6D3B;&#x52A8;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x865A;&#x5F15;&#x7528;&#x5173;&#x8054;&#x7684;&#x5BF9;&#x8C61;&#x88AB;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x56DE;&#x6536;&#x4E4B;&#x524D;&#x4F1A;&#x6536;&#x5230;&#x4E00;&#x6761;&#x7CFB;&#x7EDF;&#x901A;&#x77E5;&#x3002; &#x8BF7;&#x8C08;&#x8C08;&#x4F60;&#x5BF9; OOM &#x7684;&#x8BA4;&#x8BC6;&#xFF1F; java.lang.StackOverflowError &#x5728;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4E2D;&#x8C03;&#x7528;&#x81EA;&#x5DF1;&#x5C31;&#x4F1A;&#x4EA7;&#x751F;&#x8FD9;&#x4E2A;&#x9519;&#x8BEF; java.lang.OutOfMemoryError : Java heap space new &#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x5BF9;&#x8C61; java.lang.OutOfMemoryError : GC overhead limit exceeded &#x6267;&#x884C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7684;&#x65F6;&#x95F4;&#x6BD4;&#x4F8B;&#x592A;&#x5927;&#xFF0C; &#x6709;&#x6548;&#x7684;&#x8FD0;&#x7B97;&#x91CF;&#x592A;&#x5C0F;&#xFF0C;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;,&#xFF0C;&#x5982;&#x679C;GC&#x82B1;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#x8D85;&#x8FC7; 98%&#xFF0C; &#x5E76;&#x4E14;GC&#x56DE;&#x6536;&#x7684;&#x5185;&#x5B58;&#x5C11;&#x4E8E; 2%&#xFF0C; JVM&#x5C31;&#x4F1A;&#x629B;&#x51FA;&#x8FD9;&#x4E2A;&#x9519;&#x8BEF;&#x3002; java.lang.OutOfMemoryError : Direct buffer memory&#x914D;&#x7F6E;&#x53C2;&#x6570;&#xFF1A;-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m 123456public class DirectBufferDemo { public static void main(String[] args) { System.out.println(&quot;maxDirectMemory : &quot; + sun.misc.VM.maxDirectMemory() / (1024 * 1024) + &quot;MB&quot;); ByteBuffer byteBuffer = ByteBuffer.allocateDirect(6 * 1024 * 1024); }} &#x8F93;&#x51FA; 1234567891011121314151617maxDirectMemory : 5MB[GC (System.gc()) [PSYoungGen: 1315K-&gt;464K(2560K)] 1315K-&gt;472K(9728K), 0.0008907 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] [Full GC (System.gc()) [PSYoungGen: 464K-&gt;0K(2560K)] [ParOldGen: 8K-&gt;359K(7168K)] 472K-&gt;359K(9728K), [Metaspace: 3037K-&gt;3037K(1056768K)], 0.0060466 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Direct buffer memory at java.nio.Bits.reserveMemory(Bits.java:694) at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:123) at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311) at com.cuzz.jvm.DirectBufferDemo.main(DirectBufferDemo.java:17)Heap PSYoungGen total 2560K, used 56K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000) eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0e170,0x00000000fff00000) from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000) to space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000) ParOldGen total 7168K, used 359K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000) object space 7168K, 5% used [0x00000000ff600000,0x00000000ff659e28,0x00000000ffd00000) Metaspace used 3068K, capacity 4496K, committed 4864K, reserved 1056768K class space used 336K, capacity 388K, committed 512K, reserved 1048576K java.lang.OutOfMemoryError : unable to create new native thread &#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x6570;&#x592A;&#x591A;&#x4E86; java.lang.OutOfMemoryError : Metaspace Java 8 &#x4E4B;&#x540E;&#x7684;&#x7248;&#x672C;&#x4F7F;&#x7528;&#x5143;&#x7A7A;&#x95F4;&#xFF08;Metaspace&#xFF09;&#x4EE3;&#x66FF;&#x4E86;&#x6C38;&#x4E45;&#x4EE3;&#xFF0C;&#x5143;&#x7A7A;&#x95F4;&#x662F;&#x65B9;&#x6CD5;&#x533A;&#x5728; HotSpot &#x4E2D;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x5B83;&#x4E0E;&#x6301;&#x4E45;&#x4EE3;&#x6700;&#x5927;&#x7684;&#x533A;&#x522B;&#x662F;&#xFF1A;&#x5143;&#x7A7A;&#x95F4;&#x5E76;&#x4E0D;&#x5728;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#x7684;&#x5185;&#x5B58;&#x4E2D;&#x800C;&#x662F;&#x4F7F;&#x7528;&#x672C;&#x5730;&#x5185;&#x5B58;&#x3002; &#x5143;&#x7A7A;&#x95F4;&#x5B58;&#x653E;&#x7684;&#x4FE1;&#x606F;&#xFF1A; &#x865A;&#x62DF;&#x673A;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x4FE1;&#x606F; &#x5E38;&#x91CF;&#x6C60; &#x9759;&#x6001;&#x53D8;&#x91CF; &#x5373;&#x65F6;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x4EE3;&#x7801; &#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x5E16;&#x5B50;&#xFF1A;&#x51E0;&#x79CD;&#x624B;&#x52A8;OOM&#x7684;&#x65B9;&#x5F0F; GC &#x5783;&#x573E;&#x56DE;&#x6536;&#x7B97;&#x6CD5;&#x548C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x7684;&#x5173;&#x7CFB;&#xFF1F;&#x8C08;&#x8C08;&#x4F60;&#x7684;&#x7406;&#x89E3;&#xFF1F; &#x56DB;&#x79CD; GC &#x5783;&#x573E;&#x56DE;&#x6536;&#x7B97;&#x6CD5; &#x5F15;&#x7528;&#x8BA1;&#x6570; &#x590D;&#x5236;&#x56DE;&#x6536; &#x6807;&#x8BB0;&#x6E05;&#x9664; &#x6807;&#x8BB0;&#x6574;&#x7406; GC &#x7B97;&#x6CD5;&#x662F;&#x5185;&#x5B58;&#x56DE;&#x6536;&#x7684;&#x65B9;&#x6CD5;&#x8BBA;&#xFF0C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5176;&#x5C31;&#x662F;&#x7B97;&#x6CD5;&#x7684;&#x843D;&#x5B9E;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x76EE;&#x524D;&#x4E3A;&#x6B62;&#x8FD8;&#x6CA1;&#x6709;&#x5B8C;&#x7F8E;&#x7684;&#x6536;&#x96C6;&#x5668;&#x7684;&#x51FA;&#x73B0;&#xFF0C;&#x66F4;&#x52A0;&#x6CA1;&#x6709;&#x4E07;&#x80FD;&#x7684;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x53EA;&#x662F;&#x9488;&#x5BF9;&#x5177;&#x4F53;&#x5E94;&#x7528;&#x6700;&#x9002;&#x5408;&#x7684;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x8FDB;&#x884C;&#x5206;&#x4EE3;&#x6536;&#x96C6;&#x3002; &#x4E32;&#x884C;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#xFF08;Serial&#xFF09; &#x5B83;&#x4E3A;&#x5355;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x8BBE;&#x8BA1;&#x4E14;&#x53EA;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FDB;&#x884C;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;&#x4F1A;&#x6682;&#x505C;&#x6240;&#x6709;&#x7684;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9002;&#x5408;&#x670D;&#x52A1;&#x73AF;&#x5883;&#x3002; &#x5E76;&#x884C;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#xFF08;Parallel&#xFF09; &#x591A;&#x4E2A;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7EBF;&#x7A0B;&#x5E76;&#x884C;&#x5DE5;&#x4F5C;&#xFF0C;&#x6B64;&#x65F6;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x662F;&#x6682;&#x505C;&#x7684;&#xFF0C;&#x7528;&#x4E8E;&#x79D1;&#x5B66;&#x8BA1;&#x7B97;&#x3001;&#x5927;&#x6570;&#x636E;&#x5904;&#x7406;&#x7B49;&#x5F31;&#x4EA4;&#x4E92;&#x573A;&#x666F;&#x3002; &#x5E76;&#x53D1;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#xFF08;CMS&#xFF09; &#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x548C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x6267;&#x884C;&#xFF08;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x5E76;&#x884C;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x4EA4;&#x66FF;&#x6267;&#x884C;&#xFF09;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x505C;&#x987F;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#xFF0C;&#x4E92;&#x8054;&#x7F51;&#x516C;&#x53F8;&#x591A;&#x7528;&#x5B83;&#xFF0C;&#x9002;&#x7528;&#x5BF9;&#x76F8;&#x5E94;&#x65F6;&#x95F4;&#x6709;&#x8981;&#x6C42;&#x7684;&#x573A;&#x666F;&#x3002; G1 &#x5783;&#x573E;&#x56DE;&#x6536;&#x5668; G1 &#x5783;&#x573E;&#x56DE;&#x6536;&#x5668;&#x5C06;&#x5806;&#x5185;&#x5B58;&#x5206;&#x5272;&#x6210;&#x4E0D;&#x540C;&#x7684;&#x533A;&#x57DF;&#x7136;&#x540E;&#x5E76;&#x53D1;&#x7684;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x5783;&#x573E;&#x56DE;&#x6536;&#x3002; &#x600E;&#x4E48;&#x67E5;&#x770B;&#x670D;&#x52A1;&#x5668;&#x9ED8;&#x8BA4;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x662F;&#x54EA;&#x4E2A;&#xFF1F;&#x751F;&#x4EA7;&#x662F;&#x5982;&#x4F55;&#x914D;&#x7F6E;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#xFF1F;&#x8C08;&#x8C08;&#x4F60;&#x5BF9;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x7684;&#x7406;&#x89E3;&#xFF1F; &#x600E;&#x4E48;&#x67E5;&#x770B;&#x670D;&#x52A1;&#x5668;&#x9ED8;&#x8BA4;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x662F;&#x54EA;&#x4E2A;&#xFF1F; Java -XX:+PrintCommandLineFlags Java &#x7684; GC &#x56DE;&#x6536;&#x7684;&#x7C7B;&#x578B;&#x4E3B;&#x8981;&#x6709;&#xFF1A; UseSerialGC&#xFF0C;UseParallelGC&#xFF0C;UseConcMarkSweepGC&#xFF0C;UseParNewGC&#xFF0C;UseParallelOldGC&#xFF0C;UseG1GC Java 8 &#x4EE5;&#x540E;&#x57FA;&#x672C;&#x4E0D;&#x4F7F;&#x7528; Serial Old &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668; &#x53C2;&#x6570;&#x8BF4;&#x660E; DefNew : Default New Generation Tenured : Old ParNew : Parallel New Generation PSYoungGen : Parallel Scavenge ParOldGen : Parallel Old Generation Server/Client &#x6A21;&#x5F0F;&#x5206;&#x522B;&#x662F;&#x4EC0;&#x4E48;&#x610F;&#x601D; &#x6700;&#x4E3B;&#x8981;&#x7684;&#x5DEE;&#x522B;&#x5728;&#x4E8E;&#xFF1A;-Server&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#x65F6;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x65E6;&#x8FD0;&#x884C;&#x8D77;&#x6765;&#x540E;&#xFF0C;&#x6027;&#x80FD;&#x5C06;&#x4F1A;&#x6709;&#x5F88;&#x5927;&#x7684;&#x63D0;&#x5347;&#x3002; &#x5F53;&#x865A;&#x62DF;&#x673A;&#x8FD0;&#x884C;&#x5728;-client&#x6A21;&#x5F0F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x4EE3;&#x53F7;&#x4E3A;C1&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x7F16;&#x8BD1;&#x5668;, &#x800C;-server&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#x7684;&#x865A;&#x62DF;&#x673A;&#x91C7;&#x7528;&#x76F8;&#x5BF9;&#x91CD;&#x91CF;&#x7EA7;&#xFF0C;&#x4EE3;&#x53F7;&#x4E3A;C2&#x7684;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;C2&#x6BD4;C1&#x7F16;&#x8BD1;&#x5668;&#x7F16;&#x8BD1;&#x7684;&#x76F8;&#x5BF9;&#x5F7B;&#x5E95;&#xFF0C;&#x670D;&#x52A1;&#x8D77;&#x6765;&#x4E4B;&#x540E;,&#x6027;&#x80FD;&#x66F4;&#x9AD8;&#x3002; &#x6240;&#x4EE5;&#x901A;&#x5E38;&#x7528;&#x4E8E;&#x505A;&#x670D;&#x52A1;&#x5668;&#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x7528;&#x670D;&#x52A1;&#x7AEF;&#x6A21;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7684;&#x7535;&#x8111;&#x53EA;&#x662F;&#x8FD0;&#x884C;&#x4E00;&#x4E0B;java&#x7A0B;&#x5E8F;&#xFF0C;&#x5C31;&#x5BA2;&#x6237;&#x7AEF;&#x6A21;&#x5F0F;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x5F53;&#x7136;&#x8FD9;&#x4E9B;&#x90FD;&#x662F;&#x6211;&#x4EEC;&#x505A;&#x7A0B;&#x5E8F;&#x4F18;&#x5316;&#x7A0B;&#x5E8F;&#x624D;&#x9700;&#x8981;&#x8FD9;&#x4E9B;&#x4E1C;&#x897F;&#x7684;&#xFF0C;&#x666E;&#x901A;&#x4EBA;&#x5E76;&#x4E0D;&#x5173;&#x6CE8;&#x8FD9;&#x4E9B;&#x4E13;&#x4E1A;&#x7684;&#x4E1C;&#x897F;&#x4E86;&#x3002;&#x5176;&#x5B9E;&#x670D;&#x52A1;&#x5668;&#x6A21;&#x5F0F;&#x5373;&#x4F7F;&#x7F16;&#x8BD1;&#x66F4;&#x5F7B;&#x5E95;&#xFF0C;&#x7136;&#x540E;&#x5783;&#x573E;&#x56DE;&#x6536;&#x4F18;&#x5316;&#x66F4;&#x597D;&#xFF0C;&#x8FD9;&#x5F53;&#x7136;&#x5403;&#x7684;&#x5185;&#x5B58;&#x8981;&#x591A;&#x70B9;&#x76F8;&#x5BF9;&#x4E8E;&#x5BA2;&#x6237;&#x7AEF;&#x6A21;&#x5F0F;&#x3002; &#x65B0;&#x751F;&#x4EE3; &#x4E32;&#x884C; GC (Serial/ Serital Copying) &#x5E76;&#x884C; GC (ParNew) &#x5E76;&#x884C;&#x56DE;&#x6536; GC (Parallel/ Parallel Scanvenge) &#x8001;&#x5E74;&#x4EE3; &#x4E32;&#x884C; GC (Serial Old/ Serial MSC) &#x5E76;&#x884C; GC (Parallel Old/ Parallel MSC) &#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x6E05;&#x9664; GC (CMS) &#x662F;&#x4E00;&#x79CD;&#x4EE5;&#x83B7;&#x53D6;&#x6700;&#x77ED;&#x56DE;&#x6536;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x4E3A;&#x76EE;&#x6807;&#x7684;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x9002;&#x5408;&#x5E94;&#x7528;&#x5728;&#x4E92;&#x8054;&#x7F51;&#x7AD9;&#x6216;&#x8005; B/S &#x7CFB;&#x7EDF;&#x7684;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x5E94;&#x7528;&#x5C24;&#x5176;&#x91CD;&#x89C6;&#x670D;&#x52A1;&#x5668;&#x7684;&#x54CD;&#x5E94;&#x901F;&#x5EA6;&#xFF0C;&#x5E0C;&#x671B;&#x7CFB;&#x7EDF;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x6700;&#x77ED;&#x3002; CMS &#x975E;&#x5E38;&#x9002;&#x5408;&#x5806;&#x5185;&#x5B58;&#x5927;&#x3001;CPU &#x6838;&#x6570;&#x591A;&#x7684;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x5E94;&#x7528;&#xFF0C;&#x4E5F;&#x662F; G1 &#x51FA;&#x73B0;&#x4E4B;&#x524D;&#x5927;&#x578B;&#x5E94;&#x7528;&#x9996;&#x9009;&#x6536;&#x96C6;&#x5668;&#x3002; &#x5E76;&#x53D1;&#x505C;&#x987F;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x5E76;&#x53D1;&#x6307;&#x7684;&#x662F;&#x4E0E;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#x6267;&#x884C;&#x3002; &#x8FC7;&#x7A0B; &#x521D;&#x59CB;&#x6807;&#x8BB0;&#xFF08;initail mark&#xFF09;&#xFF1A;&#x53EA;&#x662F;&#x6807;&#x8BB0;&#x4E00;&#x4E0B; GC Roots &#x80FD;&#x76F4;&#x63A5;&#x5173;&#x8054;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#xFF0C;&#x9700;&#x8981;&#x6682;&#x505C;&#x6240;&#x6709;&#x7684;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B; &#x5E76;&#x53D1;&#x6807;&#x8BB0;&#xFF08;concurrent mark &#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#xFF09;&#xFF1A;&#x8FDB;&#x884C; GC Roots &#x7684;&#x8DDF;&#x8E2A;&#x8FC7;&#x7A0B;&#xFF0C;&#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#x5DE5;&#x4F5C;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x6682;&#x505C;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x3002; &#x91CD;&#x65B0;&#x6807;&#x8BB0;&#xFF08;remark&#xFF09;&#xFF1A;&#x4E3A;&#x4E86;&#x4FEE;&#x6B63;&#x5728;&#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x671F;&#x95F4;&#xFF0C;&#x56E0;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x7EE7;&#x7EED;&#x8FD0;&#x884C;&#x800C;&#x5BFC;&#x81F4;&#x6807;&#x8BB0;&#x4EA7;&#x751F;&#x53D8;&#x52A8;&#x7684;&#x90A3;&#x4E00;&#x90E8;&#x5206;&#x5BF9;&#x8C61;&#x7684;&#x6807;&#x8BB0;&#x8BB0;&#x5F55;&#xFF0C;&#x4ECD;&#x7136;&#x9700;&#x8981;&#x6682;&#x505C;&#x6240;&#x6709;&#x7684;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x3002; &#x5E76;&#x53D1;&#x6E05;&#x9664;&#xFF08;concurrent sweep &#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#xFF09;&#xFF1A;&#x6E05;&#x9664; GC &#x4E0D;&#x53EF;&#x8FBE;&#x5BF9;&#x8C61;&#xFF0C;&#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#x5DE5;&#x4F5C;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x6682;&#x505C;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#xFF0C;&#x57FA;&#x4E8E;&#x6807;&#x8BB0;&#x7ED3;&#x679C;&#xFF0C;&#x76F4;&#x63A5;&#x6E05;&#x9664;&#x3002;&#x7531;&#x4E8E;&#x8017;&#x65F6;&#x6700;&#x957F;&#x7684;&#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x548C;&#x5E76;&#x53D1;&#x6E05;&#x9664;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7EBF;&#x7A0B;&#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x4E00;&#x8D77;&#x5E76;&#x53D1;&#x5DE5;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x603B;&#x4F53;&#x6765;&#x770B; CMS &#x6536;&#x96C6;&#x5668;&#x7684;&#x5185;&#x5B58;&#x56DE;&#x6536;&#x548C;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x662F;&#x4E00;&#x8D77;&#x5E76;&#x53D1;&#x5730;&#x6267;&#x884C;&#x3002; &#x4F18;&#x7F3A;&#x70B9; &#x4F18;&#x70B9;&#xFF1A;&#x5E76;&#x53D1;&#x6536;&#x96C6;&#x505C;&#x987F;&#x4F4E; &#x7F3A;&#x70B9;&#xFF1A;&#x5E76;&#x53D1;&#x6267;&#x884C;&#x5BF9; CPU &#x8D44;&#x6E90;&#x538B;&#x529B;&#x5927;&#xFF0C;&#x91C7;&#x7528;&#x7684;&#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5;&#x4F1A;&#x5BFC;&#x81F4;&#x5927;&#x91CF;&#x788E;&#x7247; &#x7531;&#x4E8E;&#x5E76;&#x53D1;&#x8FDB;&#x884C;&#xFF0C; CMS &#x5728;&#x6536;&#x96C6;&#x4E0E;&#x5E94;&#x7528;&#x7EBF;&#x7A0B;&#x4F1A;&#x540C;&#x65F6;&#x589E;&#x52A0;&#x5BF9;&#x5806;&#x5185;&#x5B58;&#x7684;&#x5360;&#x7528;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;CMS &#x5FC5;&#x987B;&#x8981;&#x5728;&#x8001;&#x5E74;&#x4EE3;&#x5806;&#x7528;&#x5C3D;&#x4E4B;&#x524D;&#x5B8C;&#x6210;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;&#x5426;&#x8005; CMS &#x56DE;&#x6536;&#x5931;&#x8D25;&#xFF0C;&#x5C06;&#x89E6;&#x53D1;&#x62C5;&#x4FDD;&#x673A;&#x5236;&#xFF0C;&#x4E32;&#x884C;&#x8001;&#x5E74;&#x4EE3;&#x6536;&#x96C6;&#x5668;&#x5C06;&#x4F1A;&#x4EE5; STW &#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x4E00;&#x6B21; GC&#xFF0C;&#x4ECE;&#x800C;&#x9020;&#x6210;&#x8F83;&#x5927;&#x7684;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x3002; &#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5;&#x65E0;&#x6CD5;&#x6574;&#x7406;&#x7A7A;&#x95F4;&#x788E;&#x7247;&#xFF0C;&#x8001;&#x5E74;&#x4EE3;&#x7A7A;&#x95F4;&#x4F1A;&#x968F;&#x7740;&#x5E94;&#x7528;&#x65F6;&#x957F;&#x88AB;&#x9010;&#x6E10;&#x8017;&#x5C3D;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x4E0D;&#x5F97;&#x4E0D;&#x901A;&#x8FC7;&#x62C5;&#x4FDD;&#x673A;&#x5236;&#x5BF9;&#x5806;&#x5185;&#x5B58;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#x3002;CMS &#x4E5F;&#x63D0;&#x4F9B;&#x4E86;&#x53C2;&#x6570; -XX:CMSFullGCsBeForeCompaction (&#x9ED8;&#x8BA4;0&#xFF0C;&#x5373;&#x6BCF;&#x6B21;&#x90FD;&#x8FDB;&#x884C;&#x5185;&#x5B58;&#x6574;&#x7406;) &#x6765;&#x6307;&#x5B9A;&#x591A;&#x5C11;&#x6B21; CMS &#x6536;&#x96C6;&#x4E4B;&#x540E;&#xFF0C;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x538B; &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x914D;&#x7F6E;&#x4EE3;&#x7801;&#x603B;&#x7ED3; &#x914D;&#x7F6E;&#x65B0;&#x751F;&#x4EE3;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x8001;&#x5E74;&#x4EE3;&#x6536;&#x96C6;&#x5668;&#x4F1A;&#x81EA;&#x52A8;&#x914D;&#x7F6E;&#x4E0A;&#x3002; &#x5982;&#x4F55;&#x9009;&#x62E9;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668; &#x5355; CPU &#x6216;&#x8005;&#x5C0F;&#x5185;&#x5B58;&#xFF0C;&#x5355;&#x673A;&#x7A0B;&#x5E8F;&#xFF1A;-XX:UseSerialGC &#x591A; CPU &#x9700;&#x8981;&#x6700;&#x5927;&#x541E;&#x5410;&#x91CF;&#xFF0C;&#x5982;&#x540E;&#x53F0;&#x8BA1;&#x7B97;&#x578B;&#x5E94;&#x7528;&#xFF1A;-XX:UseParallelGC &#x6216;&#x8005; -XX:UseParallelOldGC &#x591A; CPU &#x8FFD;&#x6C42;&#x4F4E;&#x505C;&#x987F;&#x65F6;&#x95F4;&#xFF0C;&#x9700;&#x8981;&#x5FEB;&#x901F;&#x54CD;&#x5E94;&#xFF0C;&#x5982;&#x4E92;&#x8054;&#x7F51;&#x5E94;&#x7528;&#xFF1A;-XX:+UseConcMarkSweepGC G1 &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x4F60;&#x4E86;&#x89E3;&#x5417;&#xFF1F; &#x4EE5;&#x524D;&#x6536;&#x96C6;&#x5668;&#x7684;&#x7279;&#x70B9; &#x5E74;&#x8F7B;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#x662F;&#x5404;&#x81EA;&#x72EC;&#x7ACB;&#x4E14;&#x8FDE;&#x7EED;&#x7684;&#x5185;&#x5B58;&#x5757; &#x5E74;&#x8F7B;&#x4EE3;&#x6536;&#x96C6;&#x5668;&#x4F7F;&#x7528; eden + S0 + S1 &#x8FDB;&#x884C;&#x590D;&#x5236;&#x7B97;&#x6CD5; &#x8001;&#x5E74;&#x4EE3;&#x6536;&#x96C6;&#x5FC5;&#x987B;&#x626B;&#x63CF;&#x6574;&#x4E2A;&#x8001;&#x5E74;&#x4EE3;&#x533A;&#x57DF; &#x90FD;&#x662F;&#x4EE5;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x5C11;&#x800C;&#x5FEB;&#x901F;&#x5730;&#x6267;&#x884C; GC &#x4E3A;&#x8BBE;&#x8BA1;&#x539F;&#x5219; G1 &#x662F;&#x4EC0;&#x4E48; G1 &#x662F;&#x4E00;&#x79CD;&#x9762;&#x5411;&#x670D;&#x52A1;&#x7AEF;&#x7684;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x5E94;&#x7528;&#x5728;&#x591A;&#x6838;&#x5904;&#x7406;&#x5668;&#x548C;&#x5927;&#x5BB9;&#x91CF;&#x5185;&#x5B58;&#x73AF;&#x5883;&#x4E2D;&#xFF0C;&#x5728;&#x5B9E;&#x73B0;&#x9AD8;&#x541E;&#x5410;&#x91CF;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x6EE1;&#x8DB3;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x7684;&#x6682;&#x505C;&#x65F6;&#x95F4;&#x8981;&#x6C42;&#x3002; &#x50CF; CMS &#x6536;&#x96C6;&#x5668;&#x4E00;&#x6837;&#xFF0C;&#x80FD;&#x4E0E;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x7EBF;&#x7A0B;&#x5E76;&#x53D1;&#x6267;&#x884C;&#xFF0C;&#x6574;&#x7406;&#x7A7A;&#x95F2;&#x7A7A;&#x95F4;&#x66F4;&#x5FEB;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x591A;&#x7684;&#x65F6;&#x95F4;&#x6765;&#x9884;&#x6D4B; GC &#x505C;&#x987F;&#x65F6;&#x95F4;&#xFF0C;&#x4E0D;&#x5E0C;&#x671B;&#x727A;&#x7272;&#x5927;&#x91CF;&#x7684;&#x541E;&#x5410;&#x6027;&#x80FD;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x66F4;&#x5927;&#x7684; JAVA Heap&#x3002; G1 &#x6536;&#x96C6;&#x5668;&#x7684;&#x8BBE;&#x8BA1;&#x76EE;&#x7684;&#x662F;&#x53D6;&#x4EE3; CMS &#x6536;&#x96C6;&#x5668;&#xFF0C;&#x540C;&#x65F6;&#x4E0E; CMS &#x76F8;&#x6BD4;&#xFF0C;G1 &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6574;&#x7406;&#x5185;&#x5B58;&#x8FC7;&#x7A0B;&#x7684;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x591A;&#x5185;&#x5B58;&#x788E;&#x7247;&#x3002;G1 &#x7684; Stop The World &#x66F4;&#x53EF;&#x63A7;&#xFF0C;G1 &#x5728;&#x505C;&#x987F;&#x4E0A;&#x6DFB;&#x52A0;&#x4E86;&#x9884;&#x6D4B;&#x673A;&#x5236;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;&#x671F;&#x671B;&#x7684;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x3002; G1 &#x662F;&#x5728; 2012 &#x5E74;&#x624D;&#x5728; jdk.1.7u4 &#x4E2D;&#x53EF;&#x4EE5;&#x5440;&#x7528;&#xFF0C;&#x5728; jdk9 &#x4E2D;&#x5C06; G1 &#x53D8;&#x6210;&#x9ED8;&#x8BA4;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x6765;&#x4EE3;&#x66FF; CMS&#x3002;&#x5B83;&#x662F;&#x4EE5;&#x6B3E;&#x9762;&#x5411;&#x670D;&#x52A1;&#x5E94;&#x7528;&#x7684;&#x6536;&#x96C6;&#x5668;&#x3002; &#x4E3B;&#x8981;&#x6539;&#x53D8;&#x662F; Eden&#x3001;Survivor &#x548C; Tenured &#x7B49;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x4E0D;&#x518D;&#x662F;&#x8FDE;&#x7EED;&#x7684;&#xFF0C;&#x800C;&#x662F;&#x53D8;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x4E2A;&#x5927;&#x5C0F;&#x4E00;&#x6837;&#x7684; region&#xFF0C;&#x6BCF;&#x4E2A; region &#x4ECE; 1M &#x5230; 32M &#x4E0D;&#x7B49;&#xFF0C;&#x4E00;&#x4E2A; region &#x6709;&#x53EF;&#x80FD;&#x5C5E;&#x4E8E; Eden&#x3001;Survivor &#x6216;&#x8005; Tenured &#x5185;&#x5B58;&#x533A;&#x57DF;&#x3002; &#x7279;&#x70B9; G1 &#x80FD;&#x5145;&#x5206;&#x5229;&#x7528;&#x591A; CPU&#x3001;&#x591A;&#x6838;&#x73AF;&#x5883;&#x786C;&#x4EF6;&#x4F18;&#x52BF;&#xFF0C;&#x5C3D;&#x91CF;&#x7F29;&#x77ED; STW&#x3002; G1 &#x6574;&#x4F53;&#x91C7;&#x7528;&#x6807;&#x8BB0;-&#x6574;&#x7406;&#x7B97;&#x6CD5;&#xFF0C;&#x5C40;&#x90E8;&#x662F;&#x901A;&#x8FC7;&#x662F;&#x901A;&#x8FC7;&#x590D;&#x5236;&#x7B97;&#x6CD5;&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x5185;&#x5B58;&#x788E;&#x7247;&#x3002; &#x5B8F;&#x89C2;&#x4E0A;&#x770B; G1 &#x4E4B;&#x4E2D;&#x4E0D;&#x5728;&#x533A;&#x5206;&#x5E74;&#x8F7B;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#xFF0C;&#x88AB;&#x5185;&#x5B58;&#x5212;&#x5206;&#x4E3A;&#x591A;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x5B50;&#x533A;&#x57DF;&#x3002; G1 &#x6536;&#x96C6;&#x5668;&#x91CC;&#x9762;&#x8BB2;&#x6574;&#x4E2A;&#x7684;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x6DF7;&#x5408;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x4F46;&#x5176;&#x672C;&#x8EAB;&#x4F9D;&#x7136;&#x5728;&#x5C0F;&#x8303;&#x56F4;&#x5185;&#x8981;&#x8FDB;&#x884C;&#x5E74;&#x8F7B;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#x7684;&#x533A;&#x5206;&#x3002;&#x4FDD;&#x7559;&#x4E86;&#x65B0;&#x751F;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#xFF0C;&#x4F46;&#x5979;&#x4EEC;&#x4E0D;&#x5728;&#x662F;&#x7269;&#x7406;&#x9694;&#x79BB;&#xFF0C;&#x800C;&#x662F;&#x4E00;&#x90E8;&#x5206; Region &#x7684;&#x96C6;&#x5408;&#x4E14;&#x4E0D;&#x9700;&#x8981; Region &#x662F;&#x8FDE;&#x7EED;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4F9D;&#x7136;&#x4F1A;&#x91C7;&#x7528;&#x4E0D;&#x540C;&#x7684; GC &#x65B9;&#x5F0F;&#x6765;&#x5904;&#x7406;&#x4E0D;&#x540C;&#x7684;&#x533A;&#x57DF;&#x3002; G1 &#x867D;&#x7136;&#x4E5F;&#x662F;&#x5206;&#x4EE3;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x4F46;&#x6574;&#x4E2A;&#x5185;&#x5B58;&#x5206;&#x533A;&#x4E0D;&#x5B58;&#x5728;&#x7269;&#x7406;&#x4E0A;&#x7684;&#x5E74;&#x8F7B;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#x7684;&#x533A;&#x522B;&#xFF0C;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x5B8C;&#x5168;&#x72EC;&#x7ACB;&#x7684; Survivor to space &#x5806;&#x505A;&#x590D;&#x5236;&#x51C6;&#x5907;&#x3002;G1 &#x53EA;&#x6709;&#x903B;&#x8F91;&#x4E0A;&#x7684;&#x5206;&#x4EE3;&#x6982;&#x5FF5;&#xFF0C;&#x6216;&#x8005;&#x8BF4;&#x6BCF;&#x4E2A;&#x5206;&#x533A;&#x90FD;&#x53EF;&#x80FD;&#x968F; G1 &#x7684;&#x8FD0;&#x884C;&#x5728;&#x4E0D;&#x540C;&#x4EE3;&#x4E4B;&#x95F4;&#x524D;&#x540E;&#x5207;&#x6362;&#x3002; &#x5E95;&#x5C42;&#x539F;&#x7406; Region &#x533A;&#x57DF;&#x5316;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#xFF1A;&#x6700;&#x5927;&#x597D;&#x5904;&#x662F;&#x5316;&#x6574;&#x4E3A;&#x96F6;&#xFF0C;&#x907F;&#x514D;&#x5168;&#x5185;&#x5B58;&#x626B;&#x63CF;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x6309;&#x7167;&#x533A;&#x57DF;&#x6765;&#x8FDB;&#x884C;&#x626B;&#x63CF;&#x5373;&#x53EF;&#x3002; RegionG1&#x7684;&#x5185;&#x5B58;&#x7ED3;&#x6784;&#x548C;&#x4F20;&#x7EDF;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x5212;&#x5206;&#x6709;&#x6BD4;&#x8F83;&#x7684;&#x4E0D;&#x540C;&#x3002;G1&#x5C06;&#x5185;&#x5B58;&#x5212;&#x5206;&#x6210;&#x4E86;&#x591A;&#x4E2A;&#x5927;&#x5C0F;&#x76F8;&#x7B49;&#x7684;Region&#xFF08;&#x9ED8;&#x8BA4;&#x662F;512K&#xFF09;&#xFF0C;Region&#x903B;&#x8F91;&#x4E0A;&#x8FDE;&#x7EED;&#xFF0C;&#x7269;&#x7406;&#x5185;&#x5B58;&#x5730;&#x5740;&#x4E0D;&#x8FDE;&#x7EED;&#x3002;&#x540C;&#x65F6;&#x6BCF;&#x4E2A;Region&#x88AB;&#x6807;&#x8BB0;&#x6210;E&#x3001;S&#x3001;O&#x3001;H&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;Eden&#x3001;Survivor&#x3001;Old&#x3001;Humongous&#x3002;&#x5176;&#x4E2D;E&#x3001;S&#x5C5E;&#x4E8E;&#x5E74;&#x8F7B;&#x4EE3;&#xFF0C;O&#x4E0E;H&#x5C5E;&#x4E8E;&#x8001;&#x5E74;&#x4EE3;&#x3002;H&#x8868;&#x793A;Humongous&#x3002;&#x4ECE;&#x5B57;&#x9762;&#x4E0A;&#x5C31;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x8868;&#x793A;&#x5927;&#x7684;&#x5BF9;&#x8C61;&#xFF08;&#x4E0B;&#x9762;&#x7B80;&#x79F0;H&#x5BF9;&#x8C61;&#xFF09;&#x3002;&#x5F53;&#x5206;&#x914D;&#x7684;&#x5BF9;&#x8C61;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;Region&#x5927;&#x5C0F;&#x7684;&#x4E00;&#x534A;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5DE8;&#x578B;&#x5BF9;&#x8C61;&#x3002;H&#x5BF9;&#x8C61;&#x9ED8;&#x8BA4;&#x5206;&#x914D;&#x5728;&#x8001;&#x5E74;&#x4EE3;&#xFF0C;&#x53EF;&#x4EE5;&#x9632;&#x6B62;GC&#x7684;&#x65F6;&#x5019;&#x5927;&#x5BF9;&#x8C61;&#x7684;&#x5185;&#x5B58;&#x62F7;&#x8D1D;&#x3002;&#x901A;&#x8FC7;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x5806;&#x5185;&#x5B58;&#x5BB9;&#x4E0D;&#x4E0B;H&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x89E6;&#x53D1;&#x4E00;&#x6B21;GC&#x64CD;&#x4F5C;&#x3002; &#x56DE;&#x6536;&#x6B65;&#x9AA4; &#x53C2;&#x770B;&#xFF1A;G1&#x4ECE;&#x5165;&#x95E8;&#x5230;&#x653E;&#x5F03; &#x56DB;&#x6B65;&#x8FC7;&#x7A0B; &#x751F;&#x4EA7;&#x73AF;&#x5883;&#x670D;&#x52A1;&#x5668;&#x53D8;&#x6162;&#xFF0C;&#x8BCA;&#x65AD;&#x601D;&#x8DEF;&#x548C;&#x6027;&#x80FD;&#x8BC4;&#x4F30;&#x8C08;&#x8C08;&#xFF1F; &#x6574;&#x673A;&#xFF1A;top CPU&#xFF1A;vmstat &#x5185;&#x5B58;&#xFF1A;free &#x786C;&#x76D8;&#xFF1A;df &#x78C1;&#x76D8;IO&#xFF1A;iostat &#x7F51;&#x7EDC;IO&#xFF1A;ifstat &#x5047;&#x5982;&#x751F;&#x4EA7;&#x73AF;&#x5883;&#x51FA;&#x73B0; CPU &#x8FC7;&#x9AD8;&#xFF0C;&#x8BF7;&#x8C08;&#x8C08;&#x4F60;&#x7684;&#x5206;&#x6790;&#x601D;&#x8DEF;&#x548C;&#x5B9A;&#x4F4D;&#xFF1F; &#x5148;&#x7528; top &#x547D;&#x4EE4;&#x627E;&#x51FA; CPU &#x5360;&#x6BD4;&#x6700;&#x9AD8;&#x7684; ps -ef &#x6216;&#x8005; jps &#x8FDB;&#x4E00;&#x6B65;&#x5B9A;&#x4F4D;&#xFF0C;&#x5F97;&#x77E5;&#x662F;&#x4E00;&#x4E2A;&#x600E;&#x4E48;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x540E;&#x53F0;&#x7A0B;&#x5E8F; &#x5B9A;&#x4F4D;&#x5230;&#x5177;&#x4F53;&#x7684;&#x7EBF;&#x7A0B;&#x6216;&#x4EE3;&#x7801; ps -mp 11111 -o THREAD,tid,time -m &#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x7EBF;&#x7A0B; -p &#x8FDB;&#x7A0B;&#x4F7F;&#x7528;cpu&#x7684;&#x65F6;&#x95F4; -o &#x8BE5;&#x53C2;&#x6570;&#x540E;&#x662F;&#x7528;&#x6237;&#x81EA;&#x5B9A;&#x4E49;&#x683C;&#x5F0F; &#x5C06;&#x9700;&#x8981;&#x7684;&#x7EBF;&#x7A0B; ID &#x8F6C;&#x5316;&#x4E3A; 16 &#x8FDB;&#x5236;&#x683C;&#x5F0F; jstat &lt;&#x8FDB;&#x7A0B;ID&gt; | grep &lt;&#x7EBF;&#x7A0B;ID(16&#x8FDB;&#x5236;)&gt; -A60 &#x5BF9;&#x4E8E; JDK &#x81EA;&#x5E26;&#x7684; JVM &#x76D1;&#x63A7;&#x548C;&#x6027;&#x80FD;&#x5206;&#x6790;&#x5DE5;&#x5177;&#x7528;&#x8FC7;&#x54EA;&#x4E9B;&#xFF1F;&#x4E00;&#x822C;&#x673A;&#x662F;&#x600E;&#x4E48;&#x7528;&#x5230;&#x7684;&#xFF1F;&#x4E0B;&#x4E00;&#x7BC7;&#x91CD;&#x70B9;&#x4ECB;&#x7ECD;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5; &#x5F3A;&#x5F15;&#x7528;&#x3001;&#x8F6F;&#x5F15;&#x7528;&#x3001;&#x5F31;&#x5F15;&#x7528;&#x3001;&#x5E7B;&#x8C61;&#x5F15;&#x7528;&#x6709;&#x4EC0;&#x4E48;&#x533A;&#x522B;&#xFF1F;(&#x8BC4;&#x8BBA;) G1&#x4ECE;&#x5165;&#x95E8;&#x5230;&#x653E;&#x5F03;]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019春招总结]]></title>
    <url>%2F2019%2F05%2F07%2F2019%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;3 &#x6708;&#x4EFD;&#x5F00;&#x59CB;&#x51C6;&#x5907;&#x6625;&#x62DB;&#x5230;&#x73B0;&#x5728;&#x5DF2;&#x7ECF; 2 &#x4E2A;&#x591A;&#x6708;&#x4E86;&#xFF0C; &#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x4E24;&#x4E2A;&#x6708;&#x7684;&#x9762;&#x8BD5;&#x7684;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x6211;&#x8FD9;&#x4E2A;&#x6708;&#x9762;&#x8FC7;&#x7684;&#x4E00;&#x4E9B;&#x516C;&#x53F8;&#x3002; &#x65F6;&#x95F4; &#x516C;&#x53F8; &#x5730;&#x70B9; 2019/3/5 15:30 &#x817E;&#x8BAF; &#x89C6;&#x9891; 2019/3/9 19:30 &#x817E;&#x8BAF; &#x89C6;&#x9891; 2019/3/11 15:00 &#x6C26;&#x79D1;&#x6280; &#x73B0;&#x573A; 2019/3/12 14:00 &#x822A;&#x73ED;&#x7BA1;&#x5BB6; &#x73B0;&#x573A; 2019/3/15 15:00 &#x5B57;&#x8282;&#x8DF3;&#x52A8; &#x89C6;&#x9891; 2019/3/19 15:00 &#x963F;&#x91CC;&#x5DF4;&#x5DF4; &#x7535;&#x8BDD; 2019/3/21 15:00 &#x963F;&#x91CC;&#x5DF4;&#x5DF4; &#x7535;&#x8BDD; 2019/3/28 15:00 &#x963F;&#x91CC;&#x5DF4;&#x5DF4; &#x7535;&#x8BDD; 2019/3/29 19:00 &#x5FEB;&#x624B; &#x7B14;&#x8BD5; 2019/4/1 19:00 &#x864E;&#x7259; &#x7B14;&#x8BD5; 2019/4/3 19:00 &#x62FC;&#x591A;&#x591A; &#x7B14;&#x8BD5; 2019/4/5 19:00 &#x817E;&#x8BAF; &#x7B14;&#x8BD5; 2019/4/6 19:00 &#x767E;&#x5EA6; &#x7B14;&#x8BD5; 2019/4/10 19:00 &#x534E;&#x4E3A; &#x7B14;&#x8BD5; 2019/4/12 19:00 &#x963F;&#x91CC;&#x5DF4;&#x5DF4; &#x7B14;&#x8BD5; 2019/4/14 19:00 &#x5B8C;&#x7F8E;&#x4E16;&#x754C; &#x7B14;&#x8BD5; 2019/4/15 10:00 &#x534E;&#x4E3A; &#x73B0;&#x573A; 2019/4/15 15:00 &#x4F5C;&#x4E1A;&#x5E2E; &#x7B14;&#x8BD5; 2019/4/21 19:00 &#x83DC;&#x9E1F; &#x7535;&#x8BDD; 2019/5/6 17:00 &#x53BB;&#x54EA;&#x513F; &#x73B0;&#x573A; 2019/5/7 19:00 &#x83DC;&#x9E1F; &#x7535;&#x8BDD; &#x4E00;&#x4E9B;&#x9762;&#x8BD5;&#x6CA1;&#x6709;&#x7B54;&#x51FA;&#x7684;&#x7684;&#x9898;&#x76EE;&#x6709;&#x7684;&#x9762;&#x8BD5;&#x5DF2;&#x7ECF;&#x8FC7;&#x53BB;&#x5F88;&#x4E45;&#x4E86;&#xFF0C;&#x6211;&#x5C31;&#x628A;&#x6211;&#x5370;&#x8C61;&#x6BD4;&#x8F83;&#x6DF1;&#x7684;&#x9898;&#x76EE;&#x5217;&#x51FA;&#x6765; HashMap &#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528;&#x7EA2;&#x9ED1;&#x6811;&#x800C;&#x4E0D;&#x4F7F;&#x7528;&#x5E73;&#x8861;&#x6811;&#xFF1F;&#xFF08;&#x83DC;&#x9E1F;&#xFF09; 6&#x5927;&#x8BBE;&#x8BA1;&#x539F;&#x5219;&#xFF0C;&#x4EC0;&#x4E48;&#x662F;&#x9AD8;&#x5185;&#x805A;&#x4F4E;&#x8026;&#x5408;&#xFF08;&#x83DC;&#x9E1F;&#xFF09; &#x8861;&#x91CF;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x7684;&#x6307;&#x6807;&#x6709;&#x54EA;&#x4E9B;&#xFF0C;&#x8BF4;&#x8BF4;CMS&#x6536;&#x96C6;&#x5668;&#xFF0C;CMS &#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x6682;&#x505C; - stop the world&#xFF1F;&#xFF08;&#x83DC;&#x9E1F;&#xFF09; &#x77E5;&#x9053; C++ &#x7684;&#x6790;&#x6784;&#x51FD;&#x6570;&#x5417;&#xFF1F;&#x5728; JAVA &#x4E2D;&#x8C03;&#x7528; finalize &#x7684;&#x4F1A;&#x600E;&#x6837;&#xFF1F;&#x90A3;&#x4F60;&#x77E5;&#x9053; finalize &#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#xFF1F;&#xFF08;&#x83DC;&#x9E1F;&#xFF09; &#x8BF4;&#x8BF4;&#x4E00;&#x81F4;&#x6027;Hash&#x7B97;&#x6CD5;&#xFF0C;&#x5B83;&#x89E3;&#x51B3;&#x4E86;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF1F;&#xFF08;&#x83DC;&#x9E1F;&#xFF09; Dubbo &#x6709;&#x54EA;&#x4E9B;&#x4F20;&#x8F93;&#x534F;&#x8BAE;&#xFF1F;&#xFF08;&#x963F;&#x91CC;&#xFF09; &#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF1F;&#xFF08;&#x963F;&#x91CC;&#xFF09; HTTPS &#x52A0;&#x5BC6;&#x8FC7;&#x7A0B;&#xFF0C;&#x662F;&#x600E;&#x4E48;&#x4FDD;&#x8BC1;&#x4FE1;&#x606F;&#x53EF;&#x9760;&#x7684;&#xFF1F;&#xFF08;&#x5934;&#x6761;&#xFF09; Dubbo &#x6709;&#x54EA;&#x4E9B;&#x8D1F;&#x8F7D;&#x5747;&#x8861;&#x7B56;&#x7565;&#xFF1F;&#xFF08;&#x5934;&#x6761;&#xFF09; &#x540E;&#x8BB0;&#x5176;&#x5B9E;&#x5F88;&#x591A;&#x90FD;&#x662F;&#x7B14;&#x8BD5;&#x6302;&#x4E86;&#xFF0C;&#x81EA;&#x5DF1;&#x5237;&#x4E86;&#x5251;&#x6307;offer &#x8FD8;&#x6709; leetcode &#x4E00;&#x4E9B;&#x9898;&#xFF0C;&#x8FD8;&#x662F;&#x5F88;&#x96BE;&#x901A;&#x8FC7;&#x4E00;&#x4E9B;&#x5927;&#x516C;&#x53F8;&#x7684;&#x7B14;&#x8BD5;&#x9898;&#xFF0C;&#x6700;&#x8FD1;&#x5728;&#x5B9E;&#x4E60;&#x5237;&#x7684;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x6CA1;&#x624B;&#x611F;&#xFF0C;&#x770B;&#x5230;&#x9898;&#x76EE;&#x90FD;&#x662F;&#x61F5;&#x903C;&#x72B6;&#x6001;&#xFF0C;&#x6240;&#x4EE5;&#x8FD8;&#x662F;&#x8981;&#x575A;&#x6301;&#x5237;&#x9898;&#x3002; &#x963F;&#x91CC;&#x9762;&#x8BD5;&#x65F6;&#x76F4;&#x63A5;&#x6253;&#x7535;&#x8BDD;&#x8FC7;&#x6765;&#xFF0C;&#x6211;&#x4E00;&#x822C;&#x90FD;&#x6CA1;&#x6709;&#x65F6;&#x95F4;&#x51C6;&#x5907;&#x5C31;&#x5F00;&#x59CB;&#x9762;&#x8BD5;&#x4E86;&#xFF0C;&#x6700;&#x53EF;&#x60DC;&#x7684;&#x662F;&#x963F;&#x91CC;&#x7B2C;&#x4E09;&#x9762;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x8BA4;&#x4E3A;&#x7B2C;&#x4E09;&#x9762;&#x4F1A;&#x95EE;&#x6BD4;&#x8F83;&#x591A;&#x9879;&#x76EE;&#xFF0C;&#x7136;&#x800C;&#x4ED6;&#x95EE;&#x4E86;&#x5F88;&#x591A;&#x8BA1;&#x7B97;&#x673A;&#x57FA;&#x7840;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x6BD4;&#x5982;&#x7EA2;&#x9ED1;&#x6811;&#x3001;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x95EE;&#x9898;&#x7B49;&#xFF0C;&#x8FD9;&#x4E9B;&#x6211;&#x90FD;&#x6CA1;&#x7B54;&#x597D;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x51C9;&#x51C9;&#x4E86;&#xFF0C;&#x81EA;&#x5DF1;&#x5728;&#x8FD9;&#x65B9;&#x9762;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x8584;&#x5F31;&#xFF0C;&#x9700;&#x8981;&#x52A0;&#x5F3A;&#x3002; &#x5F53;&#x7136;&#x4E5F;&#x6536;&#x5230;&#x4E86;&#x51E0;&#x4E2A; offer&#xFF0C;&#x7ECF;&#x5386;&#x4E86;&#x8FD9;&#x6BB5;&#x9762;&#x8BD5;&#xFF0C;&#x81EA;&#x5DF1;&#x4E5F;&#x5B66;&#x5230;&#x4E86;&#x633A;&#x591A;&#xFF0C;&#x81F3;&#x5C11;&#x4E0D;&#x518D;&#x754F;&#x60E7;&#x9762;&#x8BD5;&#x4E86;&#xFF0C;&#x4E5F;&#x77E5;&#x9053;&#x4E86;&#x5927;&#x5382;&#x9700;&#x8981;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x4EBA;&#x624D;&#xFF0C;&#x7EE7;&#x7EED;&#x52AA;&#x529B;&#xFF0C;&#x79CB;&#x62DB;&#x518D;&#x6765;&#x3002;]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 并发编程]]></title>
    <url>%2F2019%2F04%2F16%2FJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&#x8BF7;&#x8C08;&#x8C08;&#x4F60;&#x5BF9; volatile &#x7684;&#x7406;&#x89E3;volatile &#x662F; Java &#x865A;&#x62DF;&#x673A;&#x63D0;&#x4F9B;&#x7684;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x540C;&#x6B65;&#x673A;&#x5236; &#x4FDD;&#x8BC1;&#x53EF;&#x89C1;&#x6027; &#x7981;&#x6B62;&#x6307;&#x4EE4;&#x6392;&#x5E8F; &#x4E0D;&#x4FDD;&#x8BC1;&#x539F;&#x5B50;&#x6027; JMM&#xFF08;Java &#x5185;&#x5B58;&#x6A21;&#x578B;&#xFF09; &#x4F60;&#x8C08;&#x8C08;&#x57FA;&#x672C;&#x6982;&#x5FF5; JMM &#x672C;&#x8EAB;&#x662F;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#x7684;&#x6982;&#x5FF5;&#x5E76;&#x4E0D;&#x662F;&#x771F;&#x5B9E;&#x5B58;&#x5728;&#xFF0C;&#x5B83;&#x63CF;&#x8FF0;&#x7684;&#x662F;&#x4E00;&#x7EC4;&#x89C4;&#x5B9A;&#x6216;&#x5219;&#x89C4;&#x8303;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x7EC4;&#x89C4;&#x8303;&#x5B9A;&#x4E49;&#x4E86;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&#x8BBF;&#x95EE;&#x65B9;&#x5F0F;&#x3002; JMM &#x540C;&#x6B65;&#x89C4;&#x5B9A; &#x7EBF;&#x7A0B;&#x89E3;&#x9501;&#x524D;&#xFF0C;&#x5FC5;&#x987B;&#x628A;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x5237;&#x65B0;&#x56DE;&#x4E3B;&#x5185;&#x5B58; &#x7EBF;&#x7A0B;&#x52A0;&#x9501;&#x524D;&#xFF0C;&#x5FC5;&#x987B;&#x8BFB;&#x53D6;&#x4E3B;&#x5185;&#x5B58;&#x7684;&#x6700;&#x65B0;&#x503C;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x4F5C;&#x5185;&#x5B58; &#x52A0;&#x9501;&#x89E3;&#x9501;&#x662F;&#x540C;&#x4E00;&#x628A;&#x9501; &#x7531;&#x4E8E; JVM &#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x7684;&#x5B9E;&#x4F53;&#x662F;&#x7EBF;&#x7A0B;&#xFF0C;&#x800C;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x521B;&#x5EFA;&#x65F6; JVM &#x90FD;&#x4F1A;&#x4E3A;&#x5176;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#xFF0C;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x662F;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x79C1;&#x6709;&#x6570;&#x636E;&#x533A;&#x57DF;&#xFF0C;&#x800C; Java &#x5185;&#x5B58;&#x6A21;&#x578B;&#x4E2D;&#x89C4;&#x5B9A;&#x6240;&#x6709;&#x53D8;&#x91CF;&#x7684;&#x50A8;&#x5B58;&#x5728;&#x4E3B;&#x5185;&#x5B58;&#xFF0C;&#x4E3B;&#x5185;&#x5B58;&#x662F;&#x5171;&#x4EAB;&#x5185;&#x5B58;&#x533A;&#x57DF;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x7EBF;&#x7A0B;&#x90FD;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#xFF0C;&#x4F46;&#x7EBF;&#x7A0B;&#x5BF9;&#x53D8;&#x91CF;&#x7684;&#x64CD;&#x4F5C;&#xFF08;&#x8BFB;&#x53D6;&#x8D4B;&#x503C;&#x7B49;&#xFF09;&#x5FC5;&#x987B;&#x90FD;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x8FDB;&#x884C;&#x770B;&#x3002; &#x9996;&#x5148;&#x8981;&#x5C06;&#x53D8;&#x91CF;&#x4ECE;&#x4E3B;&#x5185;&#x5B58;&#x62F7;&#x8D1D;&#x7684;&#x81EA;&#x5DF1;&#x7684;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x64CD;&#x4F5C;&#x5B8C;&#x6210;&#x540E;&#x518D;&#x5C06;&#x53D8;&#x91CF;&#x5199;&#x56DE;&#x4E3B;&#x5185;&#x5B58;&#xFF0C;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x64CD;&#x4F5C;&#x4E3B;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x4E2D;&#x5B58;&#x50A8;&#x7740;&#x4E3B;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#x526F;&#x672C;&#x62F7;&#x8D1D;&#xFF0C;&#x524D;&#x9762;&#x8BF4;&#x8FC7;&#xFF0C;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x662F;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x79C1;&#x6709;&#x6570;&#x636E;&#x533A;&#x57DF;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x540C;&#x7684;&#x7EBF;&#x7A0B;&#x95F4;&#x65E0;&#x6CD5;&#x8BBF;&#x95EE;&#x5BF9;&#x65B9;&#x7684;&#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#xFF0C;&#x7EBF;&#x7A0B;&#x95F4;&#x7684;&#x901A;&#x4FE1;(&#x4F20;&#x503C;)&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x4E3B;&#x5185;&#x5B58;&#x6765;&#x5B8C;&#x6210;&#x3002; &#x5185;&#x5B58;&#x6A21;&#x578B;&#x56FE; &#x4E09;&#x5927;&#x7279;&#x6027; &#x53EF;&#x89C1;&#x6027; 123456789101112131415161718192021222324252627282930313233/** * @Author: cuzz * @Date: 2019/4/16 21:29 * @Description: &#x53EF;&#x89C1;&#x6027;&#x4EE3;&#x7801;&#x5B9E;&#x4F8B; */public class VolatileDemo { public static void main(String[] args) { Data data = new Data(); new Thread(() -&gt; { System.out.println(Thread.currentThread().getName() + &quot; coming...&quot;); try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } data.addOne(); System.out.println(Thread.currentThread().getName() + &quot; updated...&quot;); }).start(); while (data.a == 0) { // looping } System.out.println(Thread.currentThread().getName() + &quot; job is done...&quot;); }}class Data { // int a = 0; volatile int a = 0; void addOne() { this.a += 1; }} &#x5982;&#x679C;&#x4E0D;&#x52A0; volatile &#x5173;&#x952E;&#x5B57;&#xFF0C;&#x5219;&#x4E3B;&#x7EBF;&#x7A0B;&#x4F1A;&#x8FDB;&#x5165;&#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x52A0; volatile &#x5219;&#x4E3B;&#x7EBF;&#x7A0B;&#x80FD;&#x591F;&#x9000;&#x51FA;&#xFF0C;&#x8BF4;&#x660E;&#x52A0;&#x4E86; volatile &#x5173;&#x952E;&#x5B57;&#x53D8;&#x91CF;&#xFF0C;&#x5F53;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4FEE;&#x6539;&#x4E86;&#x503C;&#xFF0C;&#x4F1A;&#x9A6C;&#x4E0A;&#x88AB;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x611F;&#x77E5;&#x5230;&#xFF0C;&#x5F53;&#x524D;&#x503C;&#x4F5C;&#x5E9F;&#xFF0C;&#x4ECE;&#x65B0;&#x4ECE;&#x4E3B;&#x5185;&#x5B58;&#x4E2D;&#x83B7;&#x53D6;&#x503C;&#x3002;&#x5BF9;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x53EF;&#x89C1;&#xFF0C;&#x8FD9;&#x5C31;&#x53EB;&#x53EF;&#x89C1;&#x6027;&#x3002; &#x539F;&#x5B50;&#x6027; 123456789101112131415161718192021222324252627282930public class VolatileDemo { public static void main(String[] args) { // test01(); test02(); } // &#x6D4B;&#x8BD5;&#x539F;&#x5B50;&#x6027; private static void test02() { Data data = new Data(); for (int i = 0; i &lt; 20; i++) { new Thread(() -&gt; { for (int j = 0; j &lt; 1000; j++) { data.addOne(); } }).start(); } // &#x9ED8;&#x8BA4;&#x6709; main &#x7EBF;&#x7A0B;&#x548C; gc &#x7EBF;&#x7A0B; while (Thread.activeCount() &gt; 2) { Thread.yield(); } System.out.println(data.a); }}class Data { volatile int a = 0; void addOne() { this.a += 1; }} &#x53D1;&#x73B0;&#x5E76;&#x4E0D;&#x80FD;&#x8F93;&#x5165; 20000 &#x6709;&#x5E8F;&#x6027; &#x8BA1;&#x7B97;&#x673A;&#x5728;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x65F6;&#xFF0C;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4E2A;&#x5904;&#x7406;&#x5668;&#x5E38;&#x5E38;&#x4F1A;&#x5BF9;&#x6307;&#x4EE4;&#x505A;&#x91CD;&#x6392;&#xFF0C;&#x4E00;&#x822C;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B; 3 &#x79CD; &#x7F16;&#x8BD1;&#x5668;&#x4F18;&#x5316;&#x7684;&#x91CD;&#x6392; &#x6307;&#x4EE4;&#x5E76;&#x884C;&#x7684;&#x91CD;&#x6392; &#x5185;&#x5B58;&#x7CFB;&#x7EDF;&#x7684;&#x91CD;&#x6392; &#x5355;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x91CC;&#x9762;&#x786E;&#x4FDD;&#x7A0B;&#x5E8F;&#x6700;&#x7EC8;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x548C;&#x4EE3;&#x7801;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4E00;&#x81F4; &#x5904;&#x7406;&#x5668;&#x5728;&#x8FDB;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#x65F6;&#x5FC5;&#x987B;&#x8003;&#x8651;&#x6307;&#x4EE4;&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x4F9D;&#x8D56;&#x6027; &#x591A;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x4E2D;&#x7EBF;&#x7A0B;&#x4EA4;&#x66FF;&#x6267;&#x884C;&#xFF0C;&#x7531;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x4F18;&#x5316;&#x91CD;&#x6392;&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x53D8;&#x91CF;&#x80FD;&#x5426;&#x4FDD;&#x8BC1;&#x7528;&#x7684;&#x53D8;&#x91CF;&#x80FD;&#x5426;&#x4E00;&#x81F4;&#x6027;&#x662F;&#x65E0;&#x6CD5;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x7ED3;&#x679C;&#x65E0;&#x6CD5;&#x9884;&#x6D4B; &#x4EE3;&#x7801;&#x793A;&#x4F8B; 123456789101112131415161718public class ReSortSeqDemo { int a = 0; boolean flag = false; public void method01() { a = 1; // flag = true; // ----&#x7EBF;&#x7A0B;&#x5207;&#x6362;---- flag = true; // a = 1; } public void method02() { if (flag) { a = a + 3; System.out.println(&quot;a = &quot; + a); } }} &#x5982;&#x679C;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x6267;&#x884C;&#xFF0C;method01 &#x548C; method02 &#x5982;&#x679C;&#x7EBF;&#x7A0B; 1 &#x6267;&#x884C; method01 &#x91CD;&#x6392;&#x5E8F;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x5207;&#x6362;&#x7684;&#x7EBF;&#x7A0B; 2 &#x6267;&#x884C; method02 &#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x7981;&#x6B62;&#x6307;&#x4EE4;&#x6392;&#x5E8F;volatile &#x5B9E;&#x73B0;&#x7981;&#x6B62;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#x7684;&#x4F18;&#x5316;&#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D;&#x4E86;&#x591A;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x4E0B;&#x7A0B;&#x5E8F;&#x51FA;&#x73B0;&#x4E71;&#x5E8F;&#x7684;&#x73B0;&#x8C61; &#x5148;&#x4E86;&#x89E3;&#x4E00;&#x4E2A;&#x6982;&#x5FF5;&#xFF0C;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#xFF08;Memory Barrier&#xFF09;&#x53C8;&#x79F0;&#x5185;&#x5B58;&#x6805;&#x680F;&#xFF0C;&#x662F;&#x4E00;&#x4E2A; CPU &#x6307;&#x4EE4;&#xFF0C;&#x4ED6;&#x7684;&#x4F5C;&#x7528;&#x6709;&#x4E24;&#x4E2A;&#xFF1A; &#x4FDD;&#x8BC1;&#x7279;&#x5B9A;&#x64CD;&#x4F5C;&#x7684;&#x6267;&#x884C;&#x987A;&#x5E8F; &#x4FDD;&#x8BC1;&#x67D0;&#x4E9B;&#x53D8;&#x91CF;&#x7684;&#x5185;&#x5B58;&#x53EF;&#x89C1;&#x6027;&#xFF08;&#x5229;&#x7528;&#x8BE5;&#x7279;&#x6027;&#x5B9E;&#x73B0; volatile &#x7684;&#x5185;&#x5B58;&#x53EF;&#x89C1;&#x6027;&#xFF09; &#x7531;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x4E2A;&#x5904;&#x7406;&#x5668;&#x90FD;&#x80FD;&#x6267;&#x884C;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#x4F18;&#x5316;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x6307;&#x4EE4;&#x95F4;&#x63D2;&#x5165;&#x4E00;&#x6761; Memory Barrier &#x5219;&#x4F1A;&#x544A;&#x8BC9;&#x7F16;&#x8BD1;&#x5668;&#x548C; CPU&#xFF0C;&#x4E0D;&#x7BA1;&#x4EC0;&#x4E48;&#x6307;&#x4EE4;&#x90FD;&#x4E0D;&#x80FD;&#x4E2A;&#x8FD9;&#x6761; Memory Barrier &#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x901A;&#x8FC7;&#x63D2;&#x5165;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x7981;&#x6B62;&#x5728;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x524D;&#x540E;&#x6267;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#x4F18;&#x5316;&#x3002;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x53E6;&#x4E00;&#x4E2A;&#x4F5C;&#x7528;&#x662F;&#x5F3A;&#x5236;&#x5237;&#x51FA;&#x5404;&#x79CD; CPU &#x7F13;&#x5B58;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;&#x4EFB;&#x4F55; CPU &#x4E0A;&#x7684;&#x7EBF;&#x7A0B;&#x90FD;&#x80FD;&#x8BFB;&#x53D6;&#x5230;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x7684;&#x6700;&#x65B0;&#x7248;&#x672C;&#x3002; &#x4E0B;&#x9762;&#x662F;&#x4FDD;&#x5B88;&#x7B56;&#x7565;&#x4E0B;&#xFF0C;volatile&#x5199;&#x63D2;&#x5165;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x540E;&#x751F;&#x6210;&#x7684;&#x6307;&#x4EE4;&#x5E8F;&#x5217;&#x793A;&#x610F;&#x56FE;&#xFF1A; &#x4E0B;&#x9762;&#x662F;&#x5728;&#x4FDD;&#x5B88;&#x7B56;&#x7565;&#x4E0B;&#xFF0C;volatile&#x8BFB;&#x63D2;&#x5165;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x540E;&#x751F;&#x6210;&#x7684;&#x6307;&#x4EE4;&#x5E8F;&#x5217;&#x793A;&#x610F;&#x56FE;&#xFF1A; &#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x6027;&#x4FDD;&#x8BC1; &#x5DE5;&#x4F5C;&#x5185;&#x5B58;&#x4E0E;&#x4E3B;&#x5185;&#x5B58;&#x540C;&#x6B65;&#x5EF6;&#x8FDF;&#x73B0;&#x8C61;&#x5BFC;&#x81F4;&#x53EF;&#x89C1;&#x6027;&#x95EE;&#x9898; &#x53EF;&#x4EE5;&#x4F7F;&#x7528; synchronzied &#x6216; volatile &#x5173;&#x952E;&#x5B57;&#x89E3;&#x51B3;&#xFF0C;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4FEE;&#x6539;&#x540E;&#x7684;&#x53D8;&#x91CF;&#x7ACB;&#x5373;&#x5BF9;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x53EF;&#x89C1; &#x5BF9;&#x4E8E;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5BFC;&#x81F4;&#x53EF;&#x89C1;&#x6027;&#x95EE;&#x9898;&#x548C;&#x6709;&#x5E8F;&#x6027;&#x95EE;&#x9898; &#x53EF;&#x4EE5;&#x5229;&#x7528; volatile &#x5173;&#x952E;&#x5B57;&#x89E3;&#x51B3;&#xFF0C;&#x56E0;&#x4E3A; volatile &#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x7981;&#x6B62;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#x4F18;&#x5316; &#x4F60;&#x5728;&#x54EA;&#x4E9B;&#x5730;&#x65B9;&#x7528;&#x5230;&#x8FC7; volatile&#x5355;&#x4F8B; &#x591A;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x4E0B;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x7684;&#x5B89;&#x5168;&#x95EE;&#x9898; 123456789101112131415161718192021@NotThreadSafepublic class Singleton01 { private static Singleton01 instance = null; private Singleton01() { System.out.println(Thread.currentThread().getName() + &quot; construction...&quot;); } public static Singleton01 getInstance() { if (instance == null) { instance = new Singleton01(); } return instance; } public static void main(String[] args) { ExecutorService executorService = Executors.newFixedThreadPool(10); for (int i = 0; i &lt; 10; i++) { executorService.execute(()-&gt; Singleton01.getInstance()); } executorService.shutdown(); }} &#x53D1;&#x73B0;&#x6784;&#x9020;&#x5668;&#x91CC;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x591A;&#x6B21;&#x8F93;&#x51FA; &#x53CC;&#x91CD;&#x9501;&#x5355;&#x4F8B; &#x4EE3;&#x7801; 123456789101112131415161718192021222324public class Singleton02 { private static volatile Singleton02 instance = null; private Singleton02() { System.out.println(Thread.currentThread().getName() + &quot; construction...&quot;); } public static Singleton02 getInstance() { if (instance == null) { synchronized (Singleton01.class) { if (instance == null) { instance = new Singleton02(); } } } return instance; } public static void main(String[] args) { ExecutorService executorService = Executors.newFixedThreadPool(10); for (int i = 0; i &lt; 10; i++) { executorService.execute(()-&gt; Singleton02.getInstance()); } executorService.shutdown(); }} &#x5982;&#x679C;&#x6CA1;&#x6709;&#x52A0; volatile &#x5C31;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x52A0;&#x5165; volatile &#x53EF;&#x4EE5;&#x7981;&#x6B62;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x3002; &#x539F;&#x56E0;&#x662F;&#x5728;&#x4E8E;&#x67D0;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x5230;&#x7B2C;&#x4E00;&#x6B21;&#x68C0;&#x6D4B;&#xFF0C;&#x8BFB;&#x53D6;&#x5230;&#x7684; instance &#x4E0D;&#x4E3A; null &#x65F6;&#xFF0C;instance &#x7684;&#x5F15;&#x7528;&#x5BF9;&#x8C61;&#x53EF;&#x80FD;&#x8FD8;&#x6CA1;&#x6709;&#x5B8C;&#x6210;&#x521D;&#x59CB;&#x5316;&#x3002; instance = new Singleton() &#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x4E09;&#x6B65;&#x5B8C;&#x6210; 123memory = allocate(); // 1.&#x5206;&#x914D;&#x5BF9;&#x8C61;&#x7A7A;&#x95F4;instance(memory); // 2.&#x521D;&#x59CB;&#x5316;&#x5BF9;&#x8C61;instance = memory; // 3.&#x8BBE;&#x7F6E;instance&#x6307;&#x5411;&#x521A;&#x5206;&#x914D;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;&#xFF0C;&#x6B64;&#x65F6;instance != null &#x6B65;&#x9AA4; 2 &#x548C;&#x6B65;&#x9AA4; 3 &#x4E0D;&#x5B58;&#x5728;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x800C;&#x4E14;&#x65E0;&#x8BBA;&#x91CD;&#x6392;&#x524D;&#x8FD8;&#x662F;&#x91CD;&#x6392;&#x540E;&#x7A0B;&#x5E8F;&#x7684;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x5728;&#x5355;&#x7EBF;&#x7A0B;&#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x6539;&#x53D8;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x79CD;&#x4F18;&#x5316;&#x662F;&#x5141;&#x8BB8;&#x7684;&#x3002; &#x53D1;&#x751F;&#x91CD;&#x6392; 123memory = allocate(); // 1.&#x5206;&#x914D;&#x5BF9;&#x8C61;&#x7A7A;&#x95F4;instance = memory; // 3.&#x8BBE;&#x7F6E;instance&#x6307;&#x5411;&#x521A;&#x5206;&#x914D;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;&#xFF0C;&#x6B64;&#x65F6;instance != null&#xFF0C;&#x4F46;&#x5BF9;&#x8C61;&#x8FD8;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316;&#x5B8C;&#x6210;instance(memory); // 2.&#x521D;&#x59CB;&#x5316;&#x5BF9;&#x8C61; &#x6240;&#x4EE5;&#x4E0D;&#x52A0; volatile &#x8FD4;&#x56DE;&#x7684;&#x5B9E;&#x4F8B;&#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x4F46;&#x53EF;&#x80FD;&#x662F;&#x672A;&#x521D;&#x59CB;&#x5316;&#x7684;&#x5B9E;&#x4F8B; CAS &#x4F60;&#x77E5;&#x9053;&#x5417;&#xFF1F;1234567891011public class CASDemo { public static void main(String[] args) { AtomicInteger atomicInteger = new AtomicInteger(666); // &#x83B7;&#x53D6;&#x771F;&#x5B9E;&#x503C;&#xFF0C;&#x5E76;&#x66FF;&#x6362;&#x4E3A;&#x76F8;&#x5E94;&#x7684;&#x503C; boolean b = atomicInteger.compareAndSet(666, 2019); System.out.println(b); // true boolean b1 = atomicInteger.compareAndSet(666, 2020); System.out.println(b1); // false atomicInteger.getAndIncrement(); }} CAS &#x5E95;&#x5C42;&#x539F;&#x7406;&#xFF1F;&#x8C08;&#x8C08;&#x5BF9; UnSafe &#x7684;&#x7406;&#x89E3;&#xFF1F;getAndIncrement();12345678/** * Atomically increments by one the current value. * * @return the previous value */public final int getAndIncrement() { return unsafe.getAndAddInt(this, valueOffset, 1);} &#x5F15;&#x51FA;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;UnSafe &#x7C7B;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; UnSafe &#x7C7B;123456789101112131415161718public class AtomicInteger extends Number implements java.io.Serializable { private static final long serialVersionUID = 6214790243416807050L; // setup to use Unsafe.compareAndSwapInt for updates private static final Unsafe unsafe = Unsafe.getUnsafe(); private static final long valueOffset; static { try { // &#x83B7;&#x53D6;&#x4E0B;&#x9762; value &#x7684;&#x5730;&#x5740;&#x504F;&#x79FB;&#x91CF; valueOffset = unsafe.objectFieldOffset (AtomicInteger.class.getDeclaredField(&quot;value&quot;)); } catch (Exception ex) { throw new Error(ex); } } private volatile int value; // ...} Unsafe &#x662F; CAS &#x7684;&#x6838;&#x5FC3;&#x7C7B;&#xFF0C;&#x7531;&#x4E8E; Java &#x65B9;&#x6CD5;&#x65E0;&#x6CD5;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x5E95;&#x5C42;&#x7CFB;&#x7EDF;&#xFF0C;&#x800C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x672C;&#x5730;&#xFF08;native&#xFF09;&#x65B9;&#x6CD5;&#x6765;&#x8BBF;&#x95EE;&#xFF0C; Unsafe &#x7C7B;&#x76F8;&#x5F53;&#x4E00;&#x4E2A;&#x540E;&#x95E8;&#xFF0C;&#x57FA;&#x4E8E;&#x8BE5;&#x7C7B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x64CD;&#x4F5C;&#x7279;&#x5B9A;&#x5185;&#x5B58;&#x7684;&#x6570;&#x636E;&#x3002;Unsafe &#x7C7B;&#x5B58;&#x5728;&#x4E8E; sun.misc &#x5305;&#x4E2D;&#xFF0C;&#x5176;&#x5185;&#x90E8;&#x65B9;&#x6CD5;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x50CF; C &#x6307;&#x9488;&#x4E00;&#x6837;&#x76F4;&#x63A5;&#x64CD;&#x4F5C;&#x5185;&#x5B58;&#xFF0C;&#x56E0;&#x4E3A; Java &#x4E2D; CAS &#x64CD;&#x4F5C;&#x6267;&#x884C;&#x4F9D;&#x8D56;&#x4E8E; Unsafe &#x7C7B;&#x3002; &#x53D8;&#x91CF; vauleOffset&#xFF0C;&#x8868;&#x793A;&#x8BE5;&#x53D8;&#x91CF;&#x503C;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A; Unsafe &#x5C31;&#x662F;&#x6839;&#x636E;&#x5185;&#x5B58;&#x504F;&#x79FB;&#x91CF;&#x6765;&#x83B7;&#x53D6;&#x6570;&#x636E;&#x7684;&#x3002; &#x53D8;&#x91CF; value &#x7528; volatile &#x4FEE;&#x9970;&#xFF0C;&#x4FDD;&#x8BC1;&#x4E86;&#x591A;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x7684;&#x5185;&#x5B58;&#x53EF;&#x89C1;&#x6027;&#x3002; CAS &#x662F;&#x4EC0;&#x4E48; CAS &#x7684;&#x5168;&#x79F0; Compare-And-Swap&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x6761; CPU &#x5E76;&#x53D1;&#x3002; &#x5B83;&#x7684;&#x529F;&#x80FD;&#x662F;&#x5224;&#x65AD;&#x5185;&#x5B58;&#x67D0;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x503C;&#x662F;&#x5426;&#x4E3A;&#x9884;&#x671F;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5219;&#x66F4;&#x6539;&#x8FD9;&#x4E2A;&#x503C;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x539F;&#x5B50;&#x7684;&#x3002; CAS &#x5E76;&#x53D1;&#x539F;&#x4F53;&#x73B0;&#x5728; JAVA &#x8BED;&#x8A00;&#x4E2D;&#x5C31;&#x662F; sun.misc.Unsafe &#x7C7B;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x65B9;&#x6CD5;&#x3002;&#x8C03;&#x7528; UnSafe &#x7C7B;&#x4E2D;&#x7684; CAS &#x65B9;&#x6CD5;&#xFF0C;JVM &#x4F1A;&#x5E2E;&#x6211;&#x4EEC;&#x5B9E;&#x73B0;&#x51FA; CAS &#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x5B8C;&#x5168;&#x4F9D;&#x8D56;&#x786C;&#x4EF6;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x901A;&#x8FC7;&#x5B83;&#x5B9E;&#x73B0;&#x4E86;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x3002;&#x7531;&#x4E8E; CAS &#x662F;&#x4E00;&#x79CD;&#x7CFB;&#x7EDF;&#x6E90;&#x8BED;&#xFF0C;&#x6E90;&#x8BED;&#x5C5E;&#x4E8E;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7528;&#x8BED;&#x8303;&#x7574;&#xFF0C;&#x662F;&#x7531;&#x82E5;&#x5E72;&#x6761;&#x6307;&#x4EE4;&#x7EC4;&#x6210;&#xFF0C;&#x7528;&#x4E8E;&#x5B8C;&#x6210;&#x67D0;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5E76;&#x4E14;&#x539F;&#x8BED;&#x7684;&#x6267;&#x884C;&#x5FC5;&#x987B;&#x662F;&#x8FDE;&#x7EED;&#x7684;&#xFF0C;&#x5728;&#x6267;&#x884C;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x5141;&#x8BB8;&#x88AB;&#x4E2D;&#x65AD;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4; CAS &#x662F;&#x4E00;&#x6761;&#x539F;&#x5B50;&#x6307;&#x4EE4;&#xFF0C;&#x4E0D;&#x4F1A;&#x9020;&#x6210;&#x6240;&#x8C13;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5206;&#x6790;&#x4E00;&#x4E0B; getAndAddInt &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5; 12345678// unsafe.getAndAddIntpublic final int getAndAddInt(Object obj, long valueOffset, long expected, int val) { int temp; do { temp = this.getIntVolatile(obj, valueOffset); // &#x83B7;&#x53D6;&#x5FEB;&#x7167;&#x503C; } while (!this.compareAndSwap(obj, valueOffset, temp, temp + val)); // &#x5982;&#x679C;&#x6B64;&#x65F6; temp &#x6CA1;&#x6709;&#x88AB;&#x4FEE;&#x6539;&#xFF0C;&#x5C31;&#x80FD;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#xFF0C;&#x5426;&#x5219;&#x91CD;&#x65B0;&#x83B7;&#x53D6; return temp;} CAS &#x7684;&#x7F3A;&#x70B9;&#xFF1F; &#x5FAA;&#x73AF;&#x65F6;&#x95F4;&#x957F;&#x5F00;&#x9500;&#x5F88;&#x5927; &#x5982;&#x679C; CAS &#x5931;&#x8D25;&#xFF0C;&#x4F1A;&#x4E00;&#x76F4;&#x5C1D;&#x8BD5;&#xFF0C;&#x5982;&#x679C; CAS &#x957F;&#x65F6;&#x95F4;&#x4E00;&#x76F4;&#x4E0D;&#x6210;&#x529F;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x7ED9; CPU &#x5E26;&#x6765;&#x5F88;&#x5927;&#x7684;&#x5F00;&#x9500;&#xFF08;&#x6BD4;&#x5982;&#x7EBF;&#x7A0B;&#x6570;&#x5F88;&#x591A;&#xFF0C;&#x6BCF;&#x6B21;&#x6BD4;&#x8F83;&#x90FD;&#x662F;&#x5931;&#x8D25;&#xFF0C;&#x5C31;&#x4F1A;&#x4E00;&#x76F4;&#x5FAA;&#x73AF;&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#x5E0C;&#x671B;&#x662F;&#x7EBF;&#x7A0B;&#x6570;&#x6BD4;&#x8F83;&#x5C0F;&#x7684;&#x573A;&#x666F;&#x3002; &#x53EA;&#x80FD;&#x4FDD;&#x8BC1;&#x4E00;&#x4E2A;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x7684;&#x539F;&#x5B50;&#x64CD;&#x4F5C; &#x5BF9;&#x4E8E;&#x591A;&#x4E2A;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x5FAA;&#x73AF; CAS &#x5C31;&#x65E0;&#x6CD5;&#x4FDD;&#x8BC1;&#x64CD;&#x4F5C;&#x7684;&#x539F;&#x5B50;&#x6027;&#x3002; &#x5F15;&#x51FA; ABA &#x95EE;&#x9898; &#x539F;&#x5B50;&#x7C7B; AtomicInteger &#x7684; ABA &#x95EE;&#x9898;&#x8C08;&#x4E00;&#x8C08;&#xFF1F;&#x539F;&#x5B50;&#x66F4;&#x65B0;&#x5F15;&#x7528;&#x77E5;&#x9053;&#x5417;&#xFF1F; &#x539F;&#x5B50;&#x5F15;&#x7528; 12345678910public class AtomicReferenceDemo { public static void main(String[] args) { User cuzz = new User(&quot;cuzz&quot;, 18); User faker = new User(&quot;faker&quot;, 20); AtomicReference&lt;User&gt; atomicReference = new AtomicReference&lt;&gt;(); atomicReference.set(cuzz); System.out.println(atomicReference.compareAndSet(cuzz, faker)); // true System.out.println(atomicReference.get()); // User(userName=faker, age=20) }} ABA &#x95EE;&#x9898;&#x662F;&#x600E;&#x4E48;&#x4EA7;&#x751F;&#x7684; 123456789101112131415161718192021222324252627/** * @program: learn-demo * @description: ABA * @author: cuzz * @create: 2019-04-21 23:31 **/public class ABADemo { private static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100); public static void main(String[] args) { new Thread(() -&gt; { atomicReference.compareAndSet(100, 101); atomicReference.compareAndSet(101, 100); }).start(); new Thread(() -&gt; { // &#x4FDD;&#x8BC1;&#x4E0A;&#x9762;&#x7EBF;&#x7A0B;&#x5148;&#x6267;&#x884C; try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } atomicReference.compareAndSet(100, 2019); System.out.println(atomicReference.get()); // 2019 }).start(); }} &#x5F53;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#x4ECE; A &#x6539;&#x4E3A; B &#x53C8;&#x6539;&#x4E3A; A&#xFF0C;&#x8FD9;&#x5C31;&#x662F; ABA &#x95EE;&#x9898;&#x3002; &#x65F6;&#x95F4;&#x6233;&#x539F;&#x5B50;&#x5F15;&#x7528; 123456789101112131415161718192021222324252627282930313233343536373839404142package com.cuzz.thread;import java.util.concurrent.atomic.AtomicReference;import java.util.concurrent.atomic.AtomicStampedReference;/** * @program: learn-demo * @description: ABA * @author: cuzz * @create: 2019-04-21 23:31 **/public class ABADemo2 { private static AtomicStampedReference&lt;Integer&gt; atomicStampedReference = new AtomicStampedReference&lt;&gt;(100, 1); public static void main(String[] args) { new Thread(() -&gt; { int stamp = atomicStampedReference.getStamp(); System.out.println(Thread.currentThread().getName() + &quot; &#x7684;&#x7248;&#x672C;&#x53F7;&#x4E3A;&#xFF1A;&quot; + stamp); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } atomicStampedReference.compareAndSet(100, 101, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1 ); atomicStampedReference.compareAndSet(101, 100, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1 ); }).start(); new Thread(() -&gt; { int stamp = atomicStampedReference.getStamp(); System.out.println(Thread.currentThread().getName() + &quot; &#x7684;&#x7248;&#x672C;&#x53F7;&#x4E3A;&#xFF1A;&quot; + stamp); try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } boolean b = atomicStampedReference.compareAndSet(100, 2019, stamp, stamp + 1); System.out.println(b); // false System.out.println(atomicStampedReference.getReference()); // 100 }).start(); }} &#x6211;&#x4EEC;&#x5148;&#x4FDD;&#x8BC1;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x521D;&#x59CB;&#x7248;&#x672C;&#x4E3A;&#x4E00;&#x81F4;&#xFF0C;&#x540E;&#x9762;&#x4FEE;&#x6539;&#x662F;&#x7531;&#x4E8E;&#x7248;&#x672C;&#x4E0D;&#x4E00;&#x6837;&#x5C31;&#x4F1A;&#x4FEE;&#x6539;&#x5931;&#x8D25;&#x3002; &#x6211;&#x4EEC;&#x77E5;&#x9053; ArrayList &#x662F;&#x7EBF;&#x7A0B;&#x4E0D;&#x5B89;&#x5168;&#xFF0C;&#x8BF7;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#x6848;&#x4F8B;&#x5E76;&#x7ED9;&#x51FA;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF1F; &#x6545;&#x969C;&#x73B0;&#x8C61; 123456789101112public class ContainerDemo { public static void main(String[] args) { List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); Random random = new Random(); for (int i = 0; i &lt; 100; i++) { new Thread(() -&gt; { list.add(random.nextInt(10)); System.out.println(list); }).start(); } }} &#x53D1;&#x73B0;&#x62A5; java.util.ConcurrentModificationException &#x5BFC;&#x81F4;&#x539F;&#x56E0; &#x5E76;&#x53D1;&#x4FEE;&#x6539;&#x5BFC;&#x81F4;&#x7684;&#x5F02;&#x5E38; &#x89E3;&#x51B3;&#x65B9;&#x6848; new Vector(); Collections.synchronizedList(new ArrayList&lt;&gt;()); new CopyOnWriteArrayList&lt;&gt;(); &#x4F18;&#x5316;&#x5EFA;&#x8BAE; &#x5728;&#x8BFB;&#x591A;&#x5199;&#x5C11;&#x7684;&#x65F6;&#x5019;&#x63A8;&#x8350;&#x4F7F;&#x7528; CopeOnWriteArrayList &#x8FD9;&#x4E2A;&#x7C7B; java &#x4E2D;&#x9501;&#x4F60;&#x77E5;&#x9053;&#x54EA;&#x4E9B;&#xFF1F;&#x8BF7;&#x624B;&#x5199;&#x4E00;&#x4E2A;&#x81EA;&#x65CB;&#x9501;&#xFF1F;&#x516C;&#x5E73;&#x548C;&#x975E;&#x516C;&#x5E73;&#x9501; &#x662F;&#x4EC0;&#x4E48; &#x516C;&#x5E73;&#x9501;&#xFF1A;&#x662F;&#x6307;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x6309;&#x7167;&#x7533;&#x8BF7;&#x7684;&#x987A;&#x5E8F;&#x6765;&#x83B7;&#x53D6;&#x503C; &#x975E;&#x516C;&#x5E73;&#x9501;&#xFF1A;&#x662F;&#x503C;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x83B7;&#x53D6;&#x503C;&#x7684;&#x987A;&#x5E8F;&#x5E76;&#x4E0D;&#x662F;&#x6309;&#x7167;&#x7533;&#x8BF7;&#x9501;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x540E;&#x7533;&#x8BF7;&#x7684;&#x7EBF;&#x7A0B;&#x6BD4;&#x5148;&#x7533;&#x8BF7;&#x7684;&#x7EBF;&#x7A0B;&#x4F18;&#x5148;&#x83B7;&#x53D6;&#x9501;&#xFF0C;&#x5728;&#x9AD8;&#x5E76;&#x53D1;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x9020;&#x6210;&#x4F18;&#x5148;&#x7EA7;&#x7FFB;&#x8F6C;&#x6216;&#x8005;&#x9965;&#x997F;&#x73B0;&#x8C61; &#x4E24;&#x8005;&#x533A;&#x522B; &#x516C;&#x5E73;&#x9501;&#xFF1A;&#x5728;&#x5E76;&#x53D1;&#x73AF;&#x5883;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5728;&#x83B7;&#x53D6;&#x9501;&#x65F6;&#x4F1A;&#x5148;&#x67E5;&#x770B;&#x6B64;&#x9501;&#x7EF4;&#x62A4;&#x7684;&#x7B49;&#x5F85;&#x961F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x4E3A;&#x7A7A;&#xFF0C;&#x6216;&#x8005;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x662F;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5C31;&#x5360;&#x6709;&#x9501;&#xFF0C;&#x5426;&#x8005;&#x5C31;&#x4F1A;&#x52A0;&#x5165;&#x5230;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x4EE5;&#x540E;&#x4F1A;&#x6309;&#x7167; FIFO &#x7684;&#x89C4;&#x5219;&#x83B7;&#x53D6;&#x9501; &#x975E;&#x516C;&#x5E73;&#x9501;&#xFF1A;&#x4E00;&#x4E0A;&#x6765;&#x5C31;&#x5C1D;&#x8BD5;&#x5360;&#x6709;&#x9501;&#xFF0C;&#x5982;&#x679C;&#x5931;&#x8D25;&#x5728;&#x8FDB;&#x884C;&#x6392;&#x961F; &#x53EF;&#x91CD;&#x5165;&#x9501;&#x548C;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501; &#x662F;&#x4EC0;&#x4E48; &#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF1A;&#x6307;&#x7684;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5916;&#x5C42;&#x51FD;&#x6570;&#x83B7;&#x5F97;&#x9501;&#x4E4B;&#x540E;&#xFF0C;&#x5185;&#x5C42;&#x4ECD;&#x7136;&#x80FD;&#x83B7;&#x53D6;&#x5230;&#x8BE5;&#x9501;&#xFF0C;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5728;&#x5916;&#x5C42;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x9501;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5728;&#x8FDB;&#x5165;&#x5185;&#x5C42;&#x65B9;&#x6CD5;&#x6216;&#x4F1A;&#x81EA;&#x52A8;&#x83B7;&#x53D6;&#x8BE5;&#x9501; &#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF1A; &#x6240;&#x8C13;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF0C;&#x5373;&#x82E5;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x67D0;&#x4E2A;&#x65B9;&#x6CD5;&#x5DF2;&#x7ECF;&#x83B7;&#x53D6;&#x4E86;&#x8BE5;&#x9501;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x65B9;&#x6CD5;&#x4E2D;&#x5C1D;&#x8BD5;&#x518D;&#x6B21;&#x83B7;&#x53D6;&#x9501;&#x65F6;&#xFF0C;&#x5C31;&#x4F1A;&#x83B7;&#x53D6;&#x4E0D;&#x5230;&#x88AB;&#x963B;&#x585E; &#x4EE3;&#x7801;&#x5B9E;&#x73B0; &#x53EF;&#x91CD;&#x5165;&#x9501; 123456789101112131415161718192021222324public class ReentrantLock { boolean isLocked = false; Thread lockedBy = null; int lockedCount = 0; public synchronized void lock() throws InterruptedException { Thread thread = Thread.currentThread(); while (isLocked &amp;&amp; lockedBy != thread) { wait(); } isLocked = true; lockedCount++; lockedBy = thread; } public synchronized void unlock() { if (Thread.currentThread() == lockedBy) { lockedCount--; if (lockedCount == 0) { isLocked = false; notify(); } } }} &#x6D4B;&#x8BD5; 123456789101112131415161718192021public class Count {// NotReentrantLock lock = new NotReentrantLock(); ReentrantLock lock = new ReentrantLock(); public void print() throws InterruptedException{ lock.lock(); doAdd(); lock.unlock(); } private void doAdd() throws InterruptedException { lock.lock(); // do something System.out.println(&quot;ReentrantLock&quot;); lock.unlock(); } public static void main(String[] args) throws InterruptedException { Count count = new Count(); count.print(); }} &#x53D1;&#x73B0;&#x53EF;&#x4EE5;&#x8F93;&#x51FA; ReentrantLock&#xFF0C;&#x6211;&#x4EEC;&#x8BBE;&#x8BA1;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; print() &#x65B9;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; print() &#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x9501;&#xFF0C;&#x8FDB;&#x5165; lock() &#x65B9;&#x6CD5;&#xFF0C;&#x7531;&#x4E8E;&#x521D;&#x59CB; lockedBy &#x662F; null&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x8FDB;&#x5165; while &#x800C;&#x6302;&#x8D77;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#xFF0C;&#x800C;&#x662F;&#x662F;&#x589E;&#x91CF; lockedCount &#x5E76;&#x8BB0;&#x5F55; lockBy &#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x3002;&#x63A5;&#x7740;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FDB;&#x5165; doAdd() &#x65B9;&#x6CD5;&#xFF0C;&#x7531;&#x4E8E;&#x540C;&#x4E00;&#x8FDB;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x8FDB;&#x5165; while &#x800C;&#x6302;&#x8D77;&#xFF0C;&#x63A5;&#x7740;&#x589E;&#x91CF; lockedCount&#xFF0C;&#x5F53;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EBF;&#x7A0B;&#x5C1D;&#x8BD5;lock&#xFF0C;&#x7531;&#x4E8E; isLocked=true&#xFF0C;&#x6240;&#x4EE5;&#x4ED6;&#x4E0D;&#x4F1A;&#x83B7;&#x53D6;&#x8BE5;&#x9501;&#xFF0C;&#x76F4;&#x5230;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x4E24;&#x6B21; unlock() &#x5C06; lockCount &#x9012;&#x51CF;&#x4E3A;0&#xFF0C;&#x624D;&#x5C06;&#x6807;&#x8BB0;&#x4E3A; isLocked &#x8BBE;&#x7F6E;&#x4E3A; false&#x3002; &#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501; 12345678910111213public class NotReentrantLock { private boolean isLocked = false; public synchronized void lock() throws InterruptedException { while (isLocked) { wait(); } isLocked = true; } public synchronized void unlock() { isLocked = false; notify(); }} &#x6D4B;&#x8BD5; 12345678910111213141516171819public class Count { NotReentrantLock lock = new NotReentrantLock(); public void print() throws InterruptedException{ lock.lock(); doAdd(); lock.unlock(); } private void doAdd() throws InterruptedException { lock.lock(); // do something lock.unlock(); } public static void main(String[] args) throws InterruptedException { Count count = new Count(); count.print(); }} &#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x6267;&#x884C;print()&#x65B9;&#x6CD5;&#x9996;&#x5148;&#x83B7;&#x53D6;lock&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x6267;&#x884C;doAdd()&#x65B9;&#x6CD5;&#x5C31;&#x65E0;&#x6CD5;&#x6267;&#x884C;doAdd()&#x4E2D;&#x7684;&#x903B;&#x8F91;&#xFF0C;&#x5FC5;&#x987B;&#x5148;&#x91CA;&#x653E;&#x9501;&#x3002;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x5F88;&#x597D;&#x7684;&#x8BF4;&#x660E;&#x4E86;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x3002; synchronized &#x548C; ReentrantLock &#x90FD;&#x662F;&#x53EF;&#x91CD;&#x5165;&#x9501; synchronzied 1234567891011121314public class SynchronziedDemo { private synchronized void print() { doAdd(); } private synchronized void doAdd() { System.out.println(&quot;doAdd...&quot;); } public static void main(String[] args) { SynchronziedDemo synchronziedDemo = new SynchronziedDemo(); synchronziedDemo.print(); // doAdd... }} &#x4E0A;&#x9762;&#x53EF;&#x4EE5;&#x8BF4;&#x660E; synchronized &#x662F;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x3002; ReentrantLock 12345678910111213141516171819202122public class ReentrantLockDemo { private Lock lock = new ReentrantLock(); private void print() { lock.lock(); doAdd(); lock.unlock(); } private void doAdd() { lock.lock(); lock.lock(); System.out.println(&quot;doAdd...&quot;); lock.unlock(); lock.unlock(); } public static void main(String[] args) { ReentrantLockDemo reentrantLockDemo = new ReentrantLockDemo(); reentrantLockDemo.print(); }} &#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x53EF;&#x4EE5;&#x8BF4;&#x660E; ReentrantLock &#x662F;&#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF0C;&#x800C;&#x4E14;&#x5728; #doAdd &#x65B9;&#x6CD5;&#x4E2D;&#x52A0;&#x4E24;&#x6B21;&#x9501;&#x548C;&#x89E3;&#x4E24;&#x6B21;&#x9501;&#x4E5F;&#x53EF;&#x4EE5;&#x3002; &#x81EA;&#x65CB;&#x9501; &#x662F;&#x6307;&#x5B9A;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;&#x7684;&#x7EBF;&#x7A0B;&#x4E0D;&#x4F1A;&#x7ACB;&#x5373;&#x5835;&#x585E;&#xFF0C;&#x800C;&#x662F;&#x91C7;&#x7528;&#x5FAA;&#x73AF;&#x7684;&#x65B9;&#x5F0F;&#x53BB;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x597D;&#x5904;&#x662F;&#x51CF;&#x5C11;&#x7EBF;&#x7A0B;&#x4E0A;&#x7EBF;&#x6587;&#x5207;&#x6362;&#x7684;&#x6D88;&#x8017;&#xFF0C;&#x7F3A;&#x70B9;&#x5C31;&#x662F;&#x5FAA;&#x73AF;&#x4F1A;&#x6D88;&#x8017; CPU&#x3002; &#x624B;&#x52A8;&#x5B9E;&#x73B0;&#x81EA;&#x65CB;&#x9501; 1234567891011121314151617181920212223242526272829303132333435363738public class SpinLock { private AtomicReference&lt;Thread&gt; atomicReference = new AtomicReference&lt;&gt;(); private void lock () { System.out.println(Thread.currentThread() + &quot; coming...&quot;); while (!atomicReference.compareAndSet(null, Thread.currentThread())) { // loop } } private void unlock() { Thread thread = Thread.currentThread(); atomicReference.compareAndSet(thread, null); System.out.println(thread + &quot; unlock...&quot;); } public static void main(String[] args) throws InterruptedException { SpinLock spinLock = new SpinLock(); new Thread(() -&gt; { spinLock.lock(); try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(&quot;hahaha&quot;); spinLock.unlock(); }).start(); Thread.sleep(1); new Thread(() -&gt; { spinLock.lock(); System.out.println(&quot;hehehe&quot;); spinLock.unlock(); }).start(); }} &#x8F93;&#x51FA;&#xFF1A; 123456Thread[Thread-0,5,main] coming...Thread[Thread-1,5,main] coming...hahahaThread[Thread-0,5,main] unlock...heheheThread[Thread-1,5,main] unlock... &#x83B7;&#x53D6;&#x9501;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x539F;&#x5B50;&#x5F15;&#x7528;&#x4E3A;&#x7A7A;&#x5C31;&#x83B7;&#x53D6;&#x9501;&#xFF0C;&#x4E0D;&#x4E3A;&#x7A7A;&#x8868;&#x793A;&#x6709;&#x4EBA;&#x83B7;&#x53D6;&#x4E86;&#x9501;&#xFF0C;&#x5C31;&#x5FAA;&#x73AF;&#x7B49;&#x5F85;&#x3002; &#x72EC;&#x5360;&#x9501;&#xFF08;&#x5199;&#x9501;&#xFF09;/&#x5171;&#x4EAB;&#x9501;&#xFF08;&#x8BFB;&#x9501;&#xFF09; &#x662F;&#x4EC0;&#x4E48; &#x72EC;&#x5360;&#x9501;&#xFF1A;&#x6307;&#x8BE5;&#x9501;&#x4E00;&#x6B21;&#x53EA;&#x80FD;&#x88AB;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6301;&#x6709; &#x5171;&#x4EAB;&#x9501;&#xFF1A;&#x8BE5;&#x9501;&#x53EF;&#x4EE5;&#x88AB;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x6301;&#x6709; &#x5BF9;&#x4E8E; ReentrantLock &#x548C; synchronized &#x90FD;&#x662F;&#x72EC;&#x5360;&#x9501;&#xFF1B;&#x5BF9;&#x4E0E; ReentrantReadWriteLock &#x5176;&#x8BFB;&#x9501;&#x662F;&#x5171;&#x4EAB;&#x9501;&#x800C;&#x5199;&#x9501;&#x662F;&#x72EC;&#x5360;&#x9501;&#x3002;&#x8BFB;&#x9501;&#x7684;&#x5171;&#x4EAB;&#x53EF;&#x4FDD;&#x8BC1;&#x5E76;&#x53D1;&#x8BFB;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x7684;&#xFF0C;&#x8BFB;&#x5199;&#x3001;&#x5199;&#x8BFB;&#x548C;&#x5199;&#x5199;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x4E92;&#x65A5;&#x7684;&#x3002; &#x8BFB;&#x5199;&#x9501;&#x4F8B;&#x5B50; 12345678910111213141516171819202122232425262728293031323334353637383940public class MyCache { private volatile Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); private ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); WriteLock writeLock = lock.writeLock(); ReadLock readLock = lock.readLock(); public void put(String key, Object value) { try { writeLock.lock(); System.out.println(Thread.currentThread().getName() + &quot; &#x6B63;&#x5728;&#x5199;&#x5165;...&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } map.put(key, value); System.out.println(Thread.currentThread().getName() + &quot; &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; &quot; + value); } finally { writeLock.unlock(); } } public void get(String key) { try { readLock.lock(); System.out.println(Thread.currentThread().getName() + &quot; &#x6B63;&#x5728;&#x8BFB;...&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } Object res = map.get(key); System.out.println(Thread.currentThread().getName() + &quot; &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; &quot; + res); } finally { readLock.unlock(); } }} &#x6D4B;&#x8BD5; 12345678910111213141516171819public class ReadWriteLockDemo { public static void main(String[] args) { MyCache cache = new MyCache(); for (int i = 0; i &lt; 5; i++) { final int temp = i; new Thread(() -&gt; { cache.put(temp + &quot;&quot;, temp + &quot;&quot;); }).start(); } for (int i = 0; i &lt; 5; i++) { final int temp = i; new Thread(() -&gt; { cache.get(temp + &quot;&quot;); }).start(); } }} &#x8F93;&#x51FA;&#x7ED3;&#x679C; 1234567891011121314151617181920Thread-0 &#x6B63;&#x5728;&#x5199;&#x5165;...Thread-0 &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; 0Thread-1 &#x6B63;&#x5728;&#x5199;&#x5165;...Thread-1 &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; 1Thread-2 &#x6B63;&#x5728;&#x5199;&#x5165;...Thread-2 &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; 2Thread-3 &#x6B63;&#x5728;&#x5199;&#x5165;...Thread-3 &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; 3Thread-4 &#x6B63;&#x5728;&#x5199;&#x5165;...Thread-4 &#x5199;&#x5165;&#x5B8C;&#x6210;&#xFF0C;&#x5199;&#x5165;&#x7ED3;&#x679C;&#x662F; 4Thread-5 &#x6B63;&#x5728;&#x8BFB;...Thread-7 &#x6B63;&#x5728;&#x8BFB;...Thread-8 &#x6B63;&#x5728;&#x8BFB;...Thread-6 &#x6B63;&#x5728;&#x8BFB;...Thread-9 &#x6B63;&#x5728;&#x8BFB;...Thread-5 &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; 0Thread-7 &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; 2Thread-8 &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; 3Thread-6 &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; 1Thread-9 &#x8BFB;&#x53D6;&#x5B8C;&#x6210;&#xFF0C;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x662F; 4 &#x80FD;&#x4FDD;&#x8BC1;&#x8BFB;&#x5199;&#x3001;&#x5199;&#x8BFB;&#x548C;&#x5199;&#x5199;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x4E92;&#x65A5;&#x7684;&#x65F6;&#x5019;&#x662F;&#x72EC;&#x4EAB;&#x7684;&#xFF0C;&#x8BFB;&#x8BFB;&#x7684;&#x65F6;&#x5019;&#x662F;&#x5171;&#x4EAB;&#x7684;&#x3002; CountDownLatch/CyclicBarrier/Semaphore &#x4F7F;&#x7528;&#x8FC7;&#x5417;&#xFF1F;CountDownLatch&#x8BA9;&#x4E00;&#x4E9B;&#x7EBF;&#x7A0B;&#x5835;&#x585E;&#x76F4;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;&#x64CD;&#x4F5C;&#x540E;&#x624D;&#x88AB;&#x5524;&#x9192;&#x3002;CountDownLatch &#x4E3B;&#x8981;&#x6709;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x6216;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; await &#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x8C03;&#x7528;&#x7EBF;&#x7A0B;&#x4F1A;&#x88AB;&#x5835;&#x585E;&#xFF0C;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; countDown &#x65B9;&#x6CD5;&#x4F1A;&#x5C06;&#x8BA1;&#x6570;&#x51CF;&#x4E00;&#xFF08;&#x8C03;&#x7528; countDown &#x65B9;&#x6CD5;&#x7684;&#x7EBF;&#x7A0B;&#x4E0D;&#x4F1A;&#x5835;&#x585E;&#xFF09;&#xFF0C;&#x5F53;&#x8BA1;&#x6570;&#x5176;&#x503C;&#x53D8;&#x4E3A;&#x96F6;&#x65F6;&#xFF0C;&#x56E0;&#x8C03;&#x7528; await &#x65B9;&#x6CD5;&#x88AB;&#x5835;&#x585E;&#x7684;&#x7EBF;&#x7A0B;&#x4F1A;&#x88AB;&#x5524;&#x9192;&#xFF0C;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x3002; &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x6709;&#x8FD9;&#x4E48;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#xFF0C;&#x6559;&#x5BA4;&#x91CC;&#x6709;&#x73ED;&#x957F;&#x548C;&#x5176;&#x4ED6;6&#x4E2A;&#x4EBA;&#x5728;&#x6559;&#x5BA4;&#x4E0A;&#x81EA;&#x4E60;&#xFF0C;&#x600E;&#x4E48;&#x4FDD;&#x8BC1;&#x73ED;&#x957F;&#x7B49;&#x5176;&#x4ED6;6&#x4E2A;&#x4EBA;&#x90FD;&#x8D70;&#x51FA;&#x6559;&#x5BA4;&#x5728;&#x628A;&#x6559;&#x5BA4;&#x95E8;&#x7ED9;&#x5173;&#x6389;&#x3002; 12345678910public class CountDownLanchDemo { public static void main(String[] args) { for (int i = 0; i &lt; 6; i++) { new Thread(() -&gt; { System.out.println(Thread.currentThread().getName() + &quot; &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&quot;); }, String.valueOf(i)).start(); } System.out.println(&quot;&#x73ED;&#x957F;&#x628A;&#x95E8;&#x7ED9;&#x5173;&#x4E86;&#xFF0C;&#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&quot;); }} &#x6B64;&#x65F6;&#x8F93;&#x51FA; 12345670 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...1 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...2 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...3 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&#x73ED;&#x957F;&#x628A;&#x95E8;&#x7ED9;&#x5173;&#x4E86;&#xFF0C;&#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...5 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...4 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;... &#x53D1;&#x73B0;&#x73ED;&#x957F;&#x90FD;&#x6CA1;&#x6709;&#x7B49;&#x5176;&#x4ED6;&#x4EBA;&#x7406;&#x4ED6;&#x6559;&#x5BA4;&#x5C31;&#x628A;&#x95E8;&#x7ED9;&#x5173;&#x4E86;&#xFF0C;&#x6B64;&#x65F6;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; CountDownLatch &#x6765;&#x63A7;&#x5236; 12345678910111213public class CountDownLanchDemo { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(6); for (int i = 0; i &lt; 6; i++) { new Thread(() -&gt; { countDownLatch.countDown(); System.out.println(Thread.currentThread().getName() + &quot; &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&quot;); }, String.valueOf(i)).start(); } countDownLatch.await(); System.out.println(&quot;&#x73ED;&#x957F;&#x628A;&#x95E8;&#x7ED9;&#x5173;&#x4E86;&#xFF0C;&#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&quot;); }} &#x6B64;&#x65F6;&#x8F93;&#x51FA; 12345670 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...1 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...2 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...3 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...4 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...5 &#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;...&#x73ED;&#x957F;&#x628A;&#x95E8;&#x7ED9;&#x5173;&#x4E86;&#xFF0C;&#x79BB;&#x5F00;&#x4E86;&#x6559;&#x5BA4;... CyclicBarrier&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x6709;&#x8FD9;&#x4E48;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#xFF0C;&#x6BCF;&#x8F86;&#x8F66;&#x53EA;&#x80FD;&#x5750;&#x4E2A;&#x4EBA;&#xFF0C;&#x5F53;&#x8F66;&#x6EE1;&#x4E86;&#xFF0C;&#x5C31;&#x53D1;&#x8F66;&#x3002;12345678910111213141516171819public class CyclicBarrierDemo { public static void main(String[] args) { CyclicBarrier cyclicBarrier = new CyclicBarrier(4, () -&gt; { System.out.println(&quot;&#x8F66;&#x6EE1;&#x4E86;&#xFF0C;&#x5F00;&#x59CB;&#x51FA;&#x53D1;...&quot;); }); for (int i = 0; i &lt; 8; i++) { new Thread(() -&gt; { System.out.println(Thread.currentThread().getName() + &quot; &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...&quot;); try { cyclicBarrier.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } }).start(); } }} &#x8F93;&#x51FA;&#x7ED3;&#x679C;12345678910Thread-0 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-1 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-3 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-4 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...&#x8F66;&#x6EE1;&#x4E86;&#xFF0C;&#x5F00;&#x59CB;&#x51FA;&#x53D1;...Thread-5 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-7 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-2 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...Thread-6 &#x5F00;&#x59CB;&#x4E0A;&#x8F66;...&#x8F66;&#x6EE1;&#x4E86;&#xFF0C;&#x5F00;&#x59CB;&#x51FA;&#x53D1;... Semaphore&#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x6709; 3 &#x4E2A;&#x505C;&#x8F66;&#x4F4D;&#xFF0C;6 &#x8F86;&#x8F66;&#x53BB;&#x62A2;12345678910111213141516171819public class SemaphoreDemo { public static void main(String[] args) { Semaphore semaphore = new Semaphore(3); for (int i = 0; i &lt; 6; i++) { new Thread(() -&gt; { try { semaphore.acquire(); // &#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x8BB8;&#x53EF; System.out.println(Thread.currentThread().getName() + &quot; &#x62A2;&#x5230;&#x8F66;&#x4F4D;...&quot;); Thread.sleep(3000); System.out.println(Thread.currentThread().getName() + &quot; &#x79BB;&#x5F00;&#x8F66;&#x4F4D;&quot;); } catch (InterruptedException e) { e.printStackTrace(); } finally { semaphore.release(); // &#x91CA;&#x653E;&#x4E00;&#x4E2A;&#x8BB8;&#x53EF; } }).start(); } }} &#x8F93;&#x51FA;123456789101112Thread-1 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-2 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-0 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-2 &#x79BB;&#x5F00;&#x8F66;&#x4F4D;Thread-0 &#x79BB;&#x5F00;&#x8F66;&#x4F4D;Thread-3 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-1 &#x79BB;&#x5F00;&#x8F66;&#x4F4D;Thread-4 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-5 &#x62A2;&#x5230;&#x8F66;&#x4F4D;...Thread-3 &#x79BB;&#x5F00;&#x8F66;&#x4F4D;Thread-5 &#x79BB;&#x5F00;&#x8F66;&#x4F4D;Thread-4 &#x79BB;&#x5F00;&#x8F66;&#x4F4D; &#x5835;&#x585E;&#x961F;&#x5217;&#x4F60;&#x77E5;&#x9053;&#x5417;&#xFF1F;&#x963B;&#x585E;&#x961F;&#x5217;&#x6709;&#x54EA;&#x4E9B; ArrayBlockingQueue&#xFF1A;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;&#x6570;&#x7EC4;&#x7ED3;&#x6784;&#x7684;&#x6709;&#x754C;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x6B64;&#x961F;&#x5217;&#x6309; FIFO&#xFF08;&#x5148;&#x8FDB;&#x5148;&#x51FA;&#xFF09;&#x5BF9;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; LinkedBlokcingQueue&#xFF1A;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;&#x94FE;&#x8868;&#x7ED3;&#x6784;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x6B64;&#x961F;&#x5217;&#x6309; FIFO&#xFF08;&#x5148;&#x8FDB;&#x5148;&#x51FA;&#xFF09;&#x5BF9;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x541E;&#x5410;&#x91CF;&#x901A;&#x5E38;&#x8981;&#x9AD8;&#x4E8E; ArrayBlockingQueue&#x3002; SynchronousQueue&#xFF1A;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x5B58;&#x50A8;&#x5143;&#x7D20;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x6BCF;&#x4E2A;&#x63D2;&#x5165;&#x64CD;&#x4F5C;&#x5FC5;&#x987B;&#x7B49;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x79FB;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x63D2;&#x5165;&#x64CD;&#x4F5C;&#x4E00;&#x76F4;&#x5904;&#x4E8E;&#x963B;&#x585E;&#x72B6;&#x6001;&#xFF0C;&#x541E;&#x5410;&#x91CF;&#x901A;&#x5E38;&#x8981;&#x9AD8;&#x4E8E; LinkedBlokcingQueue&#x3002; &#x4EC0;&#x4E48;&#x662F;&#x963B;&#x585E;&#x961F;&#x5217; &#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x9996;&#x5148;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#xFF0C;&#x800C;&#x4E00;&#x4E2A;&#x963B;&#x585E;&#x961F;&#x5217;&#x5728;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4E2D;&#x6240;&#x8D77;&#x7684;&#x4F5C;&#x7528;&#x5927;&#x81F4;&#x5982;&#x56FE;&#x6240;&#x793A;&#xFF1A; &#x5F53;&#x963B;&#x585E;&#x961F;&#x5217;&#x662F;&#x7A7A;&#x65F6;&#xFF0C;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#x7684;&#x64CD;&#x4F5C;&#x5C06;&#x4F1A;&#x88AB;&#x963B;&#x585E;&#x3002; &#x5F53;&#x963B;&#x585E;&#x961F;&#x5217;&#x662F;&#x6EE1;&#x65F6;&#xFF0C;&#x5F80;&#x961F;&#x5217;&#x91CC;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7684;&#x64CD;&#x4F5C;&#x5C06;&#x4F1A;&#x88AB;&#x963B;&#x585E;&#x3002; &#x6838;&#x5FC3;&#x65B9;&#x6CD5; | &#x65B9;&#x6CD5;\&#x884C;&#x4E3A; | &#x629B;&#x5F02;&#x5E38; | &#x7279;&#x5B9A;&#x7684;&#x503C; | &#x963B;&#x585E; | &#x8D85;&#x65F6; || :&#x2014;&#x2014;-: | :&#x2014;&#x2014;-: | :&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;: | :&#x2014;-: | :&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;-: || &#x63D2;&#x5165;&#x65B9;&#x6CD5; | add(o) | offer(o) | put(o) | offer(o, timeout, timeunit) || &#x79FB;&#x9664;&#x65B9;&#x6CD5; | | poll()&#x3001;remove(o) | take() | poll(timeout, timeunit) || &#x68C0;&#x67E5;&#x65B9;&#x6CD5; | element() | peek() | | | &#x884C;&#x4E3A;&#x89E3;&#x91CA;&#xFF1A; &#x629B;&#x5F02;&#x5E38;&#xFF1A;&#x5982;&#x679C;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x9A6C;&#x4E0A;&#x8FDB;&#x884C;&#xFF0C;&#x5219;&#x629B;&#x51FA;&#x5F02;&#x5E38; &#x7279;&#x5B9A;&#x7684;&#x503C;&#xFF1A;&#x5982;&#x679C;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x9A6C;&#x4E0A;&#x8FDB;&#x884C;&#xFF0C;&#x5C06;&#x4F1A;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x503C;&#xFF0C;&#x4E00;&#x822C;&#x662F; true &#x6216;&#x8005; false &#x963B;&#x585E;&#xFF1A;&#x5982;&#x679C;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x9A6C;&#x4E0A;&#x8FDB;&#x884C;&#xFF0C;&#x64CD;&#x4F5C;&#x4F1A;&#x88AB;&#x963B;&#x585E; &#x8D85;&#x65F6;&#xFF1A;&#x5982;&#x679C;&#x64CD;&#x4F5C;&#x4E0D;&#x80FD;&#x9A6C;&#x4E0A;&#x8FDB;&#x884C;&#xFF0C;&#x64CD;&#x4F5C;&#x4F1A;&#x88AB;&#x963B;&#x585E;&#x6307;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x5982;&#x679C;&#x6307;&#x5B9A;&#x65F6;&#x95F4;&#x6CA1;&#x6267;&#x884C;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x503C;&#xFF0C;&#x4E00;&#x822C;&#x662F; true &#x6216;&#x8005; false &#x63D2;&#x5165;&#x65B9;&#x6CD5;&#xFF1A; add(E e)&#xFF1A;&#x6DFB;&#x52A0;&#x6210;&#x529F;&#x8FD4;&#x56DE;true&#xFF0C;&#x5931;&#x8D25;&#x629B; IllegalStateException &#x5F02;&#x5E38; offer(E e)&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE; true&#xFF0C;&#x5982;&#x679C;&#x6B64;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; false put(E e)&#xFF1A;&#x5C06;&#x5143;&#x7D20;&#x63D2;&#x5165;&#x6B64;&#x961F;&#x5217;&#x7684;&#x5C3E;&#x90E8;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#xFF0C;&#x5219;&#x4E00;&#x76F4;&#x963B;&#x585E; &#x5220;&#x9664;&#x65B9;&#x6CD5;&#xFF1A; remove(Object o) &#xFF1A;&#x79FB;&#x9664;&#x6307;&#x5B9A;&#x5143;&#x7D20;,&#x6210;&#x529F;&#x8FD4;&#x56DE;true&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;false poll()&#xFF1A;&#x83B7;&#x53D6;&#x5E76;&#x79FB;&#x9664;&#x6B64;&#x961F;&#x5217;&#x7684;&#x5934;&#x5143;&#x7D20;&#xFF0C;&#x82E5;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; null take()&#xFF1A;&#x83B7;&#x53D6;&#x5E76;&#x79FB;&#x9664;&#x6B64;&#x961F;&#x5217;&#x5934;&#x5143;&#x7D20;&#xFF0C;&#x82E5;&#x6CA1;&#x6709;&#x5143;&#x7D20;&#x5219;&#x4E00;&#x76F4;&#x963B;&#x585E; &#x68C0;&#x67E5;&#x65B9;&#x6CD5;&#xFF1A; element() &#xFF1A;&#x83B7;&#x53D6;&#x4F46;&#x4E0D;&#x79FB;&#x9664;&#x6B64;&#x961F;&#x5217;&#x7684;&#x5934;&#x5143;&#x7D20;&#xFF0C;&#x6CA1;&#x6709;&#x5143;&#x7D20;&#x5219;&#x629B;&#x5F02;&#x5E38; peek() :&#x83B7;&#x53D6;&#x4F46;&#x4E0D;&#x79FB;&#x9664;&#x6B64;&#x961F;&#x5217;&#x7684;&#x5934;&#xFF1B;&#x82E5;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; null SynchronousQueueSynchronousQueue&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5B83;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x771F;&#x6B63;&#x7684;&#x961F;&#x5217;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x4F1A;&#x4E3A;&#x961F;&#x5217;&#x4E2D;&#x5143;&#x7D20;&#x7EF4;&#x62A4;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x3002;&#x4E0E;&#x5176;&#x4ED6;&#x961F;&#x5217;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x5B83;&#x7EF4;&#x62A4;&#x4E00;&#x7EC4;&#x7EBF;&#x7A0B;&#xFF0C;&#x8FD9;&#x4E9B;&#x7EBF;&#x7A0B;&#x5728;&#x7B49;&#x5F85;&#x7740;&#x628A;&#x5143;&#x7D20;&#x52A0;&#x5165;&#x6216;&#x79FB;&#x51FA;&#x961F;&#x5217;&#x3002; 123456789101112131415161718192021222324252627282930public class SynchronousQueueDemo { public static void main(String[] args) { SynchronousQueue&lt;Integer&gt; synchronousQueue = new SynchronousQueue&lt;&gt;(); new Thread(() -&gt; { try { synchronousQueue.put(1); Thread.sleep(3000); synchronousQueue.put(2); Thread.sleep(3000); synchronousQueue.put(3); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); new Thread(() -&gt; { try { Integer val = synchronousQueue.take(); System.out.println(val); Integer val2 = synchronousQueue.take(); System.out.println(val2); Integer val3 = synchronousQueue.take(); System.out.println(val3); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); }} &#x4F7F;&#x7528;&#x573A;&#x666F; &#x751F;&#x4EA7;&#x8005;&#x6D88;&#x8D39;&#x8005;&#x6A21;&#x5F0F; &#x7EBF;&#x7A0B;&#x6C60; &#x6D88;&#x606F;&#x4E2D;&#x95F4;&#x4EF6; synchronized &#x548C; Lock &#x6709;&#x4EC0;&#x4E48;&#x533A;&#x522B;&#xFF1F; &#x539F;&#x59CB;&#x7ED3;&#x6784; synchronized &#x662F;&#x5173;&#x952E;&#x5B57;&#x5C5E;&#x4E8E; JVM &#x5C42;&#x9762;&#xFF0C;&#x53CD;&#x5E94;&#x5728;&#x5B57;&#x8282;&#x7801;&#x4E0A;&#x662F; monitorenter &#x548C; monitorexit&#xFF0C;&#x5176;&#x5E95;&#x5C42;&#x662F;&#x901A;&#x8FC7; monitor &#x5BF9;&#x8C61;&#x6765;&#x5B8C;&#x6210;&#xFF0C;&#x5176;&#x5B9E; wait/notify &#x7B49;&#x65B9;&#x6CD5;&#x4E5F;&#x662F;&#x4F9D;&#x8D56; monitor &#x5BF9;&#x8C61;&#x53EA;&#x6709;&#x5728;&#x540C;&#x6B65;&#x5FEB;&#x6216;&#x65B9;&#x6CD5;&#x4E2D;&#x624D;&#x80FD;&#x8C03;&#x7528; wait/notify &#x7B49;&#x65B9;&#x6CD5;&#x3002; Lock &#x662F;&#x5177;&#x4F53;&#x7C7B;&#xFF08;java.util.concurrent.locks.Lock&#xFF09;&#x662F; api &#x5C42;&#x9762;&#x7684;&#x9501;&#x3002; &#x4F7F;&#x7528;&#x65B9;&#x6CD5; synchronized &#x4E0D;&#x9700;&#x8981;&#x7528;&#x6237;&#x624B;&#x52A8;&#x53BB;&#x91CA;&#x653E;&#x9501;&#xFF0C;&#x5F53; synchronized &#x4EE3;&#x7801;&#x6267;&#x884C;&#x5B8C;&#x540E;&#x7CFB;&#x7EDF;&#x4F1A;&#x81EA;&#x52A8;&#x8BA9;&#x7EBF;&#x7A0B;&#x91CA;&#x653E;&#x5BF9;&#x9501;&#x7684;&#x5360;&#x7528;&#x3002; ReentrantLock &#x5219;&#x9700;&#x8981;&#x7528;&#x6237;&#x624B;&#x52A8;&#x7684;&#x91CA;&#x653E;&#x9501;&#xFF0C;&#x82E5;&#x6CA1;&#x6709;&#x4E3B;&#x52A8;&#x91CA;&#x653E;&#x9501;&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x51FA;&#x73B0;&#x6B7B;&#x9501;&#x7684;&#x73B0;&#x8C61;&#xFF0C;lock() &#x548C; unlock() &#x65B9;&#x6CD5;&#x9700;&#x8981;&#x914D;&#x5408; try/finally &#x8BED;&#x53E5;&#x6765;&#x5B8C;&#x6210;&#x3002; &#x7B49;&#x5F85;&#x662F;&#x5426;&#x53EF;&#x4E2D;&#x65AD; synchronized &#x4E0D;&#x53EF;&#x4E2D;&#x65AD;&#xFF0C;&#x9664;&#x975E;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#x6216;&#x8005;&#x6B63;&#x5E38;&#x8FD0;&#x884C;&#x5B8C;&#x6210;&#x3002; ReentrantLock &#x53EF;&#x4E2D;&#x65AD;&#xFF0C;&#x8BBE;&#x7F6E;&#x8D85;&#x65F6;&#x65B9;&#x6CD5; tryLock(long timeout, TimeUnit unit)&#xFF0C;lockInterruptibly() &#x653E;&#x4EE3;&#x7801;&#x5757;&#x4E2D;&#xFF0C;&#x8C03;&#x7528; interrupt() &#x65B9;&#x6CD5;&#x53EF;&#x4E2D;&#x65AD;&#x3002; &#x52A0;&#x9501;&#x662F;&#x5426;&#x516C;&#x5E73; synchronized &#x975E;&#x516C;&#x5E73;&#x9501; ReentrantLock &#x9ED8;&#x8BA4;&#x975E;&#x516C;&#x5E73;&#x9501;&#xFF0C;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E2D;&#x53EF;&#x4EE5;&#x4F20;&#x5165; boolean &#x503C;&#xFF0C;true &#x4E3A;&#x516C;&#x5E73;&#x9501;&#xFF0C;false &#x4E3A;&#x975E;&#x516C;&#x5E73;&#x9501;&#x3002; &#x9501;&#x53EF;&#x4EE5;&#x7ED1;&#x5B9A;&#x591A;&#x4E2A; Condition synchronized &#x6CA1;&#x6709; Condition&#x3002; ReentrantLock &#x7528;&#x6765;&#x5B9E;&#x73B0;&#x5206;&#x7EC4;&#x5524;&#x9192;&#x9700;&#x8981;&#x5524;&#x9192;&#x7684;&#x7EBF;&#x7A0B;&#x4EEC;&#xFF0C;&#x53EF;&#x4EE5;&#x7CBE;&#x786E;&#x5524;&#x9192;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x50CF; synchronized &#x8981;&#x4E48;&#x968F;&#x673A;&#x5524;&#x9192;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8981;&#x4E48;&#x5524;&#x9192;&#x5168;&#x90E8;&#x7EBF;&#x7A0B;&#x3002; &#x7EBF;&#x7A0B;&#x6C60;&#x4F7F;&#x7528;&#x8FC7;&#x5417;&#xFF1F;&#x8C08;&#x8C08;&#x5BF9; ThreadPoolExector &#x7684;&#x7406;&#x89E3;&#xFF1F;&#x4E3A;&#x4EC0;&#x4F7F;&#x7528;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x4F18;&#x52BF;&#xFF1F;&#x7EBF;&#x7A0B;&#x6C60;&#x7528;&#x4E8E;&#x591A;&#x7EBF;&#x7A0B;&#x5904;&#x7406;&#x4E2D;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x7CFB;&#x7EDF;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x63A7;&#x5236;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x4F18;&#x5316;&#x8FD0;&#x884C;&#x6548;&#x679C;&#x3002;&#x7EBF;&#x7A0B;&#x6C60;&#x505A;&#x7684;&#x5DE5;&#x4F5C;&#x4E3B;&#x8981;&#x662F;&#x63A7;&#x5236;&#x8FD0;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x4E2D;&#x5C06;&#x4EFB;&#x52A1;&#x653E;&#x5165;&#x961F;&#x5217;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7EBF;&#x7A0B;&#x521B;&#x5EFA;&#x540E;&#x542F;&#x52A8;&#x8FD9;&#x4E9B;&#x4EFB;&#x52A1;&#xFF0C;&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x6570;&#x91CF;&#x8D85;&#x8FC7;&#x4E86;&#x6700;&#x5927;&#x6570;&#x91CF;&#xFF0C;&#x90A3;&#x4E48;&#x8D85;&#x51FA;&#x6570;&#x91CF;&#x7684;&#x7EBF;&#x7A0B;&#x6392;&#x961F;&#x7B49;&#x5019;&#xFF0C;&#x7B49;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#xFF0C;&#x518D;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x53D6;&#x51FA;&#x4EFB;&#x52A1;&#x6765;&#x6267;&#x884C;&#x3002; &#x4E3B;&#x8981;&#x7279;&#x70B9;&#x4E3A;&#xFF1A; &#x7EBF;&#x7A0B;&#x590D;&#x7528; &#x63A7;&#x5236;&#x6700;&#x5927;&#x5E76;&#x53D1;&#x6570;&#x91CF; &#x7BA1;&#x7406;&#x7EBF;&#x7A0B; &#x4E3B;&#x8981;&#x4F18;&#x70B9; &#x964D;&#x4F4E;&#x8D44;&#x6E90;&#x6D88;&#x8017;&#xFF0C;&#x901A;&#x8FC7;&#x91CD;&#x590D;&#x5229;&#x7528;&#x5DF2;&#x521B;&#x5EFA;&#x7684;&#x7EBF;&#x7A0B;&#x6765;&#x964D;&#x4F4E;&#x7EBF;&#x7A0B;&#x521B;&#x5EFA;&#x548C;&#x9500;&#x6BC1;&#x9020;&#x6210;&#x7684;&#x6D88;&#x8017;&#x3002; &#x63D0;&#x9AD8;&#x76F8;&#x5E94;&#x901F;&#x5EA6;&#xFF0C;&#x5F53;&#x4EFB;&#x52A1;&#x5230;&#x8FBE;&#x65F6;&#xFF0C;&#x4EFB;&#x52A1;&#x53EF;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x7B49;&#x5230;&#x7EBF;&#x7A0B;&#x521B;&#x5EFA;&#x5C31;&#x80FD;&#x7ACB;&#x5373;&#x6267;&#x884C;&#x3002; &#x63D0;&#x9AD8;&#x7EBF;&#x7A0B;&#x7684;&#x53EF;&#x7BA1;&#x7406;&#x6027;&#xFF0C;&#x7EBF;&#x7A0B;&#x662F;&#x7A00;&#x7F3A;&#x8D44;&#x6E90;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x9650;&#x5236;&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x4E0D;&#x4EC5;&#x4EC5;&#x4F1A;&#x6D88;&#x8017;&#x7CFB;&#x7EDF;&#x8D44;&#x6E90;&#xFF0C;&#x8FD8;&#x4F1A;&#x964D;&#x4F4E;&#x4F53;&#x7EDF;&#x7684;&#x7A33;&#x5B9A;&#x6027;&#xFF0C;&#x4F7F;&#x7528;&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x7EDF;&#x4E00;&#x5206;&#x914D;&#xFF0C;&#x8C03;&#x4F18;&#x548C;&#x76D1;&#x63A7;&#x3002; &#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x7684;&#x51E0;&#x79CD;&#x65B9;&#x5F0F; &#x7EE7;&#x627F; Thread &#x5B9E;&#x73B0; Runnable &#x63A5;&#x53E3; &#x5B9E;&#x73B0; Callable 12345678910111213141516public class CallableDemo { public static void main(String[] args) throws ExecutionException, InterruptedException { // &#x5728; FutureTask &#x4E2D;&#x4F20;&#x5165; Callable &#x7684;&#x5B9E;&#x73B0;&#x7C7B; FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new Callable&lt;Integer&gt;() { @Override public Integer call() throws Exception { return 666; } }); // &#x628A; futureTask &#x653E;&#x5165;&#x7EBF;&#x7A0B;&#x4E2D; new Thread(futureTask).start(); // &#x83B7;&#x53D6;&#x7ED3;&#x679C; Integer res = futureTask.get(); System.out.println(res); }} &#x7EBF;&#x7A0B;&#x6C60;&#x5982;&#x679C;&#x4F7F;&#x7528;&#xFF1F;&#x67B6;&#x6784;&#x8BF4;&#x660E; &#x7F16;&#x7801;&#x5B9E;&#x73B0; Executors.newSingleThreadExecutor()&#xFF1A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x56E0;&#x6B64;&#x6240;&#x6709;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x987A;&#x5E8F;&#x6267;&#x884C; Executors.newCachedThreadPool()&#xFF1A;&#x7EBF;&#x7A0B;&#x6C60;&#x91CC;&#x6709;&#x5F88;&#x591A;&#x7EBF;&#x7A0B;&#x9700;&#x8981;&#x540C;&#x65F6;&#x6267;&#x884C;&#xFF0C;&#x8001;&#x7684;&#x53EF;&#x7528;&#x7EBF;&#x7A0B;&#x5C06;&#x88AB;&#x65B0;&#x7684;&#x4EFB;&#x52A1;&#x89E6;&#x53D1;&#x91CD;&#x65B0;&#x6267;&#x884C;&#xFF0C;&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x8D85;&#x8FC7;60&#x79D2;&#x5185;&#x6CA1;&#x6267;&#x884C;&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x88AB;&#x7EC8;&#x6B62;&#x5E76;&#x4ECE;&#x6C60;&#x4E2D;&#x5220;&#x9664; Executors.newFixedThreadPool()&#xFF1A;&#x62E5;&#x6709;&#x56FA;&#x5B9A;&#x7EBF;&#x7A0B;&#x6570;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#xFF0C;&#x90A3;&#x4E48;&#x7EBF;&#x7A0B;&#x4F1A;&#x4E00;&#x76F4;&#x7B49;&#x5F85; Executors.newScheduledThreadPool()&#xFF1A;&#x7528;&#x6765;&#x8C03;&#x5EA6;&#x5373;&#x5C06;&#x6267;&#x884C;&#x7684;&#x4EFB;&#x52A1;&#x7684;&#x7EBF;&#x7A0B;&#x6C60; Executors.newWorkStealingPool()&#xFF1A; newWorkStealingPool&#x9002;&#x5408;&#x4F7F;&#x7528;&#x5728;&#x5F88;&#x8017;&#x65F6;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;newWorkStealingPool&#x4E0D;&#x662F;ThreadPoolExecutor&#x7684;&#x6269;&#x5C55;&#xFF0C;&#x5B83;&#x662F;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#x7C7B;ForkJoinPool&#x7684;&#x6269;&#x5C55;&#xFF0C;&#x4F46;&#x662F;&#x90FD;&#x662F;&#x5728;&#x7EDF;&#x4E00;&#x7684;&#x4E00;&#x4E2A;Executors&#x7C7B;&#x4E2D;&#x5B9E;&#x73B0;&#xFF0C;&#x7531;&#x4E8E;&#x80FD;&#x591F;&#x5408;&#x7406;&#x7684;&#x4F7F;&#x7528;CPU&#x8FDB;&#x884C;&#x5BF9;&#x4EFB;&#x52A1;&#x64CD;&#x4F5C;&#xFF08;&#x5E76;&#x884C;&#x64CD;&#x4F5C;&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#x9002;&#x5408;&#x4F7F;&#x7528;&#x5728;&#x5F88;&#x8017;&#x65F6;&#x7684;&#x4EFB;&#x52A1;&#x4E2D; ThreadPoolExecutorThreadPoolExecutor&#x4F5C;&#x4E3A;java.util.concurrent&#x5305;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x57FA;&#x7840;&#x5B9E;&#x73B0;&#xFF0C;&#x4EE5;&#x5185;&#x90E8;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x5F62;&#x5F0F;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x7BA1;&#x7406;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#xFF0C;&#x7EBF;&#x7A0B;&#x8C03;&#x5EA6;&#xFF0C;&#x7EBF;&#x7A0B;&#x6C60;&#x7BA1;&#x7406;&#x7B49;&#x7B49;&#x670D;&#x52A1;&#x3002; &#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x51E0;&#x4E2A;&#x91CD;&#x8981;&#x53C2;&#x6570;&#x4ECB;&#x7ECD;&#xFF1F; &#x53C2;&#x6570; &#x4F5C;&#x7528; corePoolSize &#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6C60;&#x5927;&#x5C0F; maximumPoolSize &#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6C60;&#x5927;&#x5C0F; keepAliveTime &#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x8D85;&#x8FC7; corePoolSize &#x6570;&#x76EE;&#x7684;&#x7A7A;&#x95F2;&#x7EBF;&#x7A0B;&#x6700;&#x5927;&#x5B58;&#x6D3B;&#x65F6;&#x95F4;&#xFF1B;&#x53EF;&#x4EE5;allowCoreThreadTimeOut(true) &#x4F7F;&#x5F97;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6709;&#x6548;&#x65F6;&#x95F4; TimeUnit keepAliveTime &#x65F6;&#x95F4;&#x5355;&#x4F4D; workQueue &#x963B;&#x585E;&#x4EFB;&#x52A1;&#x961F;&#x5217; threadFactory &#x65B0;&#x5EFA;&#x7EBF;&#x7A0B;&#x5DE5;&#x5382; RejectedExecutionHandler &#x5F53;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x6570;&#x8D85;&#x8FC7; maxmumPoolSize+workQueue &#x4E4B;&#x548C;&#x65F6;&#xFF0C;&#x4EFB;&#x52A1;&#x4F1A;&#x4EA4;&#x7ED9;RejectedExecutionHandler &#x6765;&#x5904;&#x7406; &#x8BF4;&#x8BF4;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x5E95;&#x5C42;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#xFF1F; &#x91CD;&#x70B9;&#x8BB2;&#x89E3;&#xFF1A; &#x5176;&#x4E2D;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x8BA9;&#x4EBA;&#x8BEF;&#x89E3;&#x7684;&#x662F;&#xFF1A;corePoolSize&#xFF0C;maximumPoolSize&#xFF0C;workQueue&#x4E4B;&#x95F4;&#x5173;&#x7CFB;&#x3002; &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x5C0F;&#x4E8E;corePoolSize&#x65F6;&#xFF0C;&#x65B0;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x5C06;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#xFF0C;&#x5373;&#x4F7F;&#x6B64;&#x65F6;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x5B58;&#x5728;&#x7A7A;&#x95F2;&#x7EBF;&#x7A0B;&#x3002; &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x8FBE;&#x5230;corePoolSize&#x65F6;&#xFF0C;&#x65B0;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x5C06;&#x88AB;&#x653E;&#x5165; workQueue &#x4E2D;&#xFF0C;&#x7B49;&#x5F85;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x4EFB;&#x52A1;&#x8C03;&#x5EA6;&#x6267;&#x884C;&#x3002; &#x5F53;workQueue&#x5DF2;&#x6EE1;&#xFF0C;&#x4E14; maximumPoolSize &#x5927;&#x4E8E; corePoolSize &#x65F6;&#xFF0C;&#x65B0;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x4F1A;&#x521B;&#x5EFA;&#x65B0;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#x3002; &#x5F53;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x6570;&#x8D85;&#x8FC7; maximumPoolSize &#x65F6;&#xFF0C;&#x65B0;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x7531; RejectedExecutionHandler &#x5904;&#x7406;&#x3002; &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x8D85;&#x8FC7;corePoolSize &#x7EBF;&#x7A0B;&#xFF0C;&#x7A7A;&#x95F2;&#x65F6;&#x95F4;&#x8FBE;&#x5230; keepAliveTime &#x65F6;&#xFF0C;&#x5173;&#x95ED;&#x7A7A;&#x95F2;&#x7EBF;&#x7A0B; &#x3002; &#x5F53;&#x8BBE;&#x7F6E;allowCoreThreadTimeOut(true) &#x65F6;&#xFF0C;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D; corePoolSize &#x7EBF;&#x7A0B;&#x7A7A;&#x95F2;&#x65F6;&#x95F4;&#x8FBE;&#x5230; keepAliveTime &#x4E5F;&#x5C06;&#x5173;&#x95ED;&#x3002; &#x7EBF;&#x7A0B;&#x6C60;&#x7528;&#x8FC7;&#x5417;&#xFF1F;&#x751F;&#x4EA7;&#x4E0A;&#x4F60;&#x5982;&#x4F55;&#x8BBE;&#x7F6E;&#x5408;&#x7406;&#x53C2;&#x6570;&#xFF1F;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x62D2;&#x7EDD;&#x7B56;&#x7565;&#x4F60;&#x8C08;&#x8C08;&#xFF1F; &#x662F;&#x4EC0;&#x4E48; &#x7B49;&#x5F85;&#x961F;&#x5217;&#x5DF2;&#x7ECF;&#x6EE1;&#x4E86;&#xFF0C;&#x518D;&#x4E5F;&#x585E;&#x4E0D;&#x4E0B;&#x65B0;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x540C;&#x65F6;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x8FBE;&#x5230;&#x4E86;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x65E0;&#x6CD5;&#x7EE7;&#x7EED;&#x4E3A;&#x65B0;&#x4EFB;&#x52A1;&#x670D;&#x52A1;&#x3002; &#x62D2;&#x7EDD;&#x7B56;&#x7565; AbortPolicy&#xFF1A;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#x906D;&#x5230;&#x62D2;&#x7EDD;&#x5C06;&#x629B;&#x51FA;&#x8FD0;&#x884C;&#x65F6; RejectedExecutionException CallerRunsPolicy&#xFF1A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x8FD0;&#x884C;&#x8BE5;&#x4EFB;&#x52A1;&#x7684; execute &#x672C;&#x8EAB;&#x3002;&#x6B64;&#x7B56;&#x7565;&#x63D0;&#x4F9B;&#x7B80;&#x5355;&#x7684;&#x53CD;&#x9988;&#x63A7;&#x5236;&#x673A;&#x5236;&#xFF0C;&#x80FD;&#x591F;&#x51CF;&#x7F13;&#x65B0;&#x4EFB;&#x52A1;&#x7684;&#x63D0;&#x4EA4;&#x901F;&#x5EA6;&#x3002; DiscardPolicy&#xFF1A;&#x4E0D;&#x80FD;&#x6267;&#x884C;&#x7684;&#x4EFB;&#x52A1;&#x5C06;&#x88AB;&#x5220;&#x9664; DiscardOldestPolicy&#xFF1A;&#x5982;&#x679C;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x5C1A;&#x672A;&#x5173;&#x95ED;&#xFF0C;&#x5219;&#x4F4D;&#x4E8E;&#x5DE5;&#x4F5C;&#x961F;&#x5217;&#x5934;&#x90E8;&#x7684;&#x4EFB;&#x52A1;&#x5C06;&#x88AB;&#x5220;&#x9664;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x8BD5;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#xFF08;&#x5982;&#x679C;&#x518D;&#x6B21;&#x5931;&#x8D25;&#xFF0C;&#x5219;&#x91CD;&#x590D;&#x6B64;&#x8FC7;&#x7A0B;&#xFF09; &#x4F60;&#x5728;&#x5DE5;&#x4F5C;&#x4E2D;&#x5355;&#x4E00;&#x7684;&#x3001;&#x56FA;&#x5B9A;&#x6570;&#x7684;&#x548C;&#x53EF;&#x53D8;&#x7684;&#x4E09;&#x79CD;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4F60;&#x7528;&#x54EA;&#x4E2A;&#x591A;&#xFF0C;&#x8D85;&#x7EA7;&#x5927;&#x5751;&#xFF1F;&#x5982;&#x679C;&#x8BFB;&#x8005;&#x5BF9;Java&#x4E2D;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#x6709;&#x6240;&#x4E86;&#x89E3;&#x7684;&#x8BDD;&#xFF0C;&#x770B;&#x5230;&#x8FD9;&#x91CC;&#x6216;&#x8BB8;&#x5C31;&#x80FD;&#x591F;&#x660E;&#x767D;&#x539F;&#x56E0;&#x4E86;&#x3002; Java&#x4E2D;&#x7684;BlockingQueue&#x4E3B;&#x8981;&#x6709;&#x4E24;&#x79CD;&#x5B9E;&#x73B0;&#xFF0C;&#x5206;&#x522B;&#x662F;ArrayBlockingQueue &#x548C; LinkedBlockingQueue&#x3002; ArrayBlockingQueue&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x7684;&#x6709;&#x754C;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x5FC5;&#x987B;&#x8BBE;&#x7F6E;&#x5BB9;&#x91CF;&#x3002; LinkedBlockingQueue&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#x7684;&#x6709;&#x754C;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x5BB9;&#x91CF;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#xFF0C;&#x4E0D;&#x8BBE;&#x7F6E;&#x7684;&#x8BDD;&#xFF0C;&#x5C06;&#x662F;&#x4E00;&#x4E2A;&#x65E0;&#x8FB9;&#x754C;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x4E3A;Integer.MAX_VALUE&#x3002; &#x8FD9;&#x91CC;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x51FA;&#x5728;&#xFF1A;&#x4E0D;&#x8BBE;&#x7F6E;&#x7684;&#x8BDD;&#xFF0C;&#x5C06;&#x662F;&#x4E00;&#x4E2A;&#x65E0;&#x8FB9;&#x754C;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x4E3A;Integer.MAX_VALUE&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4E0D;&#x8BBE;&#x7F6E;LinkedBlockingQueue&#x7684;&#x5BB9;&#x91CF;&#x7684;&#x8BDD;&#xFF0C;&#x5176;&#x9ED8;&#x8BA4;&#x5BB9;&#x91CF;&#x5C06;&#x4F1A;&#x662F;Integer.MAX_VALUE&#x3002; &#x800C;newFixedThreadPool&#x4E2D;&#x521B;&#x5EFA;LinkedBlockingQueue&#x65F6;&#xFF0C;&#x5E76;&#x672A;&#x6307;&#x5B9A;&#x5BB9;&#x91CF;&#x3002;&#x6B64;&#x65F6;&#xFF0C;LinkedBlockingQueue&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x65E0;&#x8FB9;&#x754C;&#x961F;&#x5217;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x65E0;&#x8FB9;&#x754C;&#x961F;&#x5217;&#x6765;&#x8BF4;&#xFF0C;&#x662F;&#x53EF;&#x4EE5;&#x4E0D;&#x65AD;&#x7684;&#x5411;&#x961F;&#x5217;&#x4E2D;&#x52A0;&#x5165;&#x4EFB;&#x52A1;&#x7684;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x5C31;&#x6709;&#x53EF;&#x80FD;&#x56E0;&#x4E3A;&#x4EFB;&#x52A1;&#x8FC7;&#x591A;&#x800C;&#x5BFC;&#x81F4;&#x5185;&#x5B58;&#x6EA2;&#x51FA;&#x95EE;&#x9898;&#x3002; &#x4E0A;&#x9762;&#x63D0;&#x5230;&#x7684;&#x95EE;&#x9898;&#x4E3B;&#x8981;&#x4F53;&#x73B0;&#x5728;newFixedThreadPool&#x548C;newSingleThreadExecutor&#x4E24;&#x4E2A;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#x4E0A;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x8BF4;newCachedThreadPool&#x548C;newScheduledThreadPool&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x5C31;&#x5B89;&#x5168;&#x4E86;&#xFF0C;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;&#x7684;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x53EF;&#x80FD;&#x662F;Integer.MAX_VALUE&#xFF0C;&#x800C;&#x521B;&#x5EFA;&#x8FD9;&#x4E48;&#x591A;&#x7EBF;&#x7A0B;&#xFF0C;&#x5FC5;&#x7136;&#x5C31;&#x6709;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;OOM&#x3002; &#x4F60;&#x5728;&#x5DE5;&#x4F5C;&#x4E2D;&#x662F;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#xFF0C;&#x662F;&#x5426;&#x81EA;&#x5B9A;&#x4E49;&#x8FC7;&#x7EBF;&#x7A0B;&#x6C60;&#x4F7F;&#x7528;&#xFF1F;&#x81EA;&#x5B9A;&#x4E49;&#x7EBF;&#x7A0B;&#x6C60; 123456789public class ThreadPoolExecutorDemo { public static void main(String[] args) { Executor executor = new ThreadPoolExecutor(2, 3, 1L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;&gt;(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.DiscardPolicy()); }} &#x5408;&#x7406;&#x914D;&#x7F6E;&#x7EBF;&#x7A0B;&#x6C60;&#x4F60;&#x662F;&#x5982;&#x679C;&#x8003;&#x8651;&#x7684;&#xFF1F; CPU &#x5BC6;&#x96C6;&#x578B; CPU &#x5BC6;&#x96C6;&#x7684;&#x610F;&#x601D;&#x662F;&#x8BE5;&#x4EFB;&#x52A1;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x8FD0;&#x7B97;&#xFF0C;&#x800C;&#x6CA1;&#x6709;&#x963B;&#x585E;&#xFF0C;CPU &#x4E00;&#x76F4;&#x5168;&#x901F;&#x8FD0;&#x884C;&#x3002; CPU &#x5BC6;&#x96C6;&#x578B;&#x4EFB;&#x52A1;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x5C11;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x91CF;&#xFF0C;&#x4E00;&#x822C;&#x4E3A; CPU &#x6838;&#x6570; + 1 &#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#x3002; IO &#x5BC6;&#x96C6;&#x578B; &#x7531;&#x4E8E; IO &#x5BC6;&#x96C6;&#x578B;&#x4EFB;&#x52A1;&#x7EBF;&#x7A0B;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x76F4;&#x5728;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#xFF0C;&#x53EF;&#x4EE5;&#x591A;&#x5206;&#x914D;&#x4E00;&#x70B9;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x5982; CPU * 2 &#x3002; &#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x516C;&#x5F0F;&#xFF1A;CPU &#x6838;&#x6570; / (1 - &#x963B;&#x585E;&#x7CFB;&#x6570;)&#xFF1B;&#x5176;&#x4E2D;&#x963B;&#x585E;&#x7CFB;&#x6570;&#x5728; 0.8 &#xFF5E; 0.9 &#x4E4B;&#x95F4;&#x3002; &#x6B7B;&#x9501;&#x7F16;&#x7801;&#x4EE5;&#x53CA;&#x5B9A;&#x4F4D;&#x5206;&#x6790; &#x4EA7;&#x751F;&#x6B7B;&#x9501;&#x7684;&#x539F;&#x56E0; &#x6B7B;&#x9501;&#x662F;&#x6307;&#x4E24;&#x4E2A;&#x6216;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x8FDB;&#x7A0B;&#x5728;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x56E0;&#x4E89;&#x593A;&#x8D44;&#x6E90;&#x800C;&#x9020;&#x6210;&#x7684;&#x4E00;&#x79CD;&#x76F8;&#x4E92;&#x7B49;&#x5F85;&#x7684;&#x73B0;&#x8C61;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x5916;&#x529B;&#x7684;&#x5E72;&#x6D89;&#x90A3;&#x5B83;&#x4EEC;&#x90FD;&#x5C06;&#x65E0;&#x6CD5;&#x63A8;&#x8FDB;&#x4E0B;&#x53BB;&#xFF0C;&#x5982;&#x679C;&#x7CFB;&#x7EDF;&#x7684;&#x8D44;&#x6E90;&#x5145;&#x8DB3;&#xFF0C;&#x8FDB;&#x7A0B;&#x7684;&#x8D44;&#x6E90;&#x8BF7;&#x6C42;&#x90FD;&#x80FD;&#x591F;&#x5F97;&#x5230;&#x6EE1;&#x8DB3;&#xFF0C;&#x6B7B;&#x9501;&#x51FA;&#x73B0;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x5C31;&#x5F88;&#x4F4E;&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x4F1A;&#x56E0;&#x4E89;&#x593A;&#x6709;&#x9650;&#x7684;&#x8D44;&#x6E90;&#x800C;&#x9677;&#x5165;&#x6B7B;&#x9501;&#x3002; &#x4EE3;&#x7801; 1234567891011121314151617181920212223242526public class DeadLockDemo { public static void main(String[] args) { String lockA = &quot;lockA&quot;; String lockB = &quot;lockB&quot;; DeadLockDemo deadLockDemo = new DeadLockDemo(); Executor executor = Executors.newFixedThreadPool(2); executor.execute(() -&gt; deadLockDemo.method(lockA, lockB)); executor.execute(() -&gt; deadLockDemo.method(lockB, lockA)); } public void method(String lock1, String lock2) { synchronized (lock1) { System.out.println(Thread.currentThread().getName() + &quot;--&#x83B7;&#x53D6;&#x5230;&#xFF1A;&quot; + lock1 + &quot;; &#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#xFF1A;&quot; + lock2); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (lock2) { System.out.println(&quot;&#x83B7;&#x53D6;&#x5230;&#x4E24;&#x628A;&#x9501;!&quot;); } } }} &#x89E3;&#x51B3; jps -l &#x547D;&#x4EE4;&#x67E5;&#x5B9A;&#x4F4D;&#x8FDB;&#x7A0B;&#x53F7; 1234528519 org.jetbrains.jps.cmdline.Launcher32376 com.intellij.idea.Main28521 com.cuzz.thread.DeadLockDemo27836 org.jetbrains.kotlin.daemon.KotlinCompileDaemon28591 sun.tools.jps.Jps jstack 28521 &#x627E;&#x5230;&#x6B7B;&#x9501;&#x67E5;&#x770B; 123456789101112131415161718192021222324252627282930313233343536372019-05-07 00:04:15Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.191-b12 mixed mode):&quot;Attach Listener&quot; #13 daemon prio=9 os_prio=0 tid=0x00007f7acc001000 nid=0x702a waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE// ...Found one Java-level deadlock:=============================&quot;pool-1-thread-2&quot;: waiting to lock monitor 0x00007f7ad4006478 (object 0x00000000d71f60b0, a java.lang.String), which is held by &quot;pool-1-thread-1&quot;&quot;pool-1-thread-1&quot;: waiting to lock monitor 0x00007f7ad4003be8 (object 0x00000000d71f60e8, a java.lang.String), which is held by &quot;pool-1-thread-2&quot;Java stack information for the threads listed above:===================================================&quot;pool-1-thread-2&quot;: at com.cuzz.thread.DeadLockDemo.method(DeadLockDemo.java:34) - waiting to lock &lt;0x00000000d71f60b0&gt; (a java.lang.String) - locked &lt;0x00000000d71f60e8&gt; (a java.lang.String) at com.cuzz.thread.DeadLockDemo.lambda$main$1(DeadLockDemo.java:21) at com.cuzz.thread.DeadLockDemo$$Lambda$2/2074407503.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)&quot;pool-1-thread-1&quot;: at com.cuzz.thread.DeadLockDemo.method(DeadLockDemo.java:34) - waiting to lock &lt;0x00000000d71f60e8&gt; (a java.lang.String) - locked &lt;0x00000000d71f60b0&gt; (a java.lang.String) at com.cuzz.thread.DeadLockDemo.lambda$main$0(DeadLockDemo.java:20) at com.cuzz.thread.DeadLockDemo$$Lambda$1/558638686.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Found 1 deadlock. &#x6700;&#x540E;&#x53D1;&#x73B0;&#x4E00;&#x4E2A;&#x6B7B;&#x9501;&#x3002; &#x540E;&#x7EED;JVM &#x9762;&#x8BD5; &#x53C2;&#x8003;&#x94FE;&#x63A5; Java&#x5185;&#x5B58;&#x6A21;&#x578B;-volatile]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生产者消费者]]></title>
    <url>%2F2019%2F04%2F06%2F%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%2F</url>
    <content type="text"><![CDATA[&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#x89E3;&#x91CA;&#xFF1A; In computing, the producer&#x2013;consumer problem[1][2] (also known as the bounded-buffer problem) is a classic example of a multi-process) synchronization) problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer) used as a queue). The producer&#x2019;s job is to generate data, put it into the buffer, and start again. At the same time, the consumer is consuming the data (i.e., removing it from the buffer), one piece at a time. The problem is to make sure that the producer won&#x2019;t try to add data into the buffer if it&#x2019;s full and that the consumer won&#x2019;t try to remove data from an empty buffer. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import java.util.LinkedList;import java.util.List;import java.util.Random;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * @Author: cuzz * @Date: 2019/4/6 13:03 * @Description: &#x751F;&#x4EA7;&#x8005;&#x6D88;&#x8D39;&#x8005; */public class ProducerConsumerDemo { public static void main(String[] args) { Container container = new Container(); ExecutorService executor = Executors.newFixedThreadPool(2); executor.execute(() -&gt; container.produce()); executor.execute(() -&gt; container.consume()); executor.shutdown(); }}class Container { private List&lt;Integer&gt; list = new LinkedList&lt;&gt;(); private final int MAX_SIZE = 5; private Random random = new Random(); public void produce() { while (true) { synchronized (this) { try { while (list.size() &gt;= MAX_SIZE) { wait(); } int i = random.nextInt(); System.out.println(&quot;produce...&quot; + i); list.add(i); notify(); Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } public void consume() { while (true) { try { synchronized (this) { while (list.isEmpty()) { wait(); } int i = list.remove(0); System.out.println(&quot;consume...&quot; + i); notify(); Thread.sleep(1000); } } catch (InterruptedException e) { e.printStackTrace(); } } }}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>ProducerConsumer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LRUCache]]></title>
    <url>%2F2019%2F03%2F16%2FLRUCache%2F</url>
    <content type="text"><![CDATA[LRU&#xFF08;Least recently used&#xFF0C;&#x6700;&#x8FD1;&#x6700;&#x5C11;&#x4F7F;&#x7528;&#xFF09;&#x7B97;&#x6CD5;&#x6839;&#x636E;&#x6570;&#x636E;&#x7684;&#x5386;&#x53F2;&#x8BBF;&#x95EE;&#x8BB0;&#x5F55;&#x6765;&#x8FDB;&#x884C;&#x6DD8;&#x6C70;&#x6570;&#x636E;&#xFF0C;&#x5176;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x662F;&#x201C;&#x5982;&#x679C;&#x6570;&#x636E;&#x6700;&#x8FD1;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x6765;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x51E0;&#x7387;&#x4E5F;&#x66F4;&#x9AD8;&#x201D; &#x3002; &#x4EE3;&#x7801;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899/** * @Author: cuzz * @Date: 2019/3/16 15:35 * @Description: LRU cache */public class LRUCache { private Map&lt;Integer, DLinkedList&gt; cache = new HashMap&lt;&gt;(); private int count; private int capacity; private DLinkedList head, tail; public LRUCache(int capacity) { this.count = 0; this.capacity = capacity; this.head = new DLinkedList(); this.tail = new DLinkedList(); head.next = tail; tail.pre = head; } public int get(int key) { DLinkedList node = cache.get(key); if (node == null) { return -1; } removeNode(node); addHead(node); return node.value; } public void put(int key, int value) { DLinkedList node = cache.get(key); if (node == null) { node = new DLinkedList(key, value); addHead(node); cache.put(key, node); count++; if (count &gt; capacity) { DLinkedList preTail = tail.pre; removeNode(preTail); cache.remove(preTail.key); count--; } } else { node.value = value; removeNode(node); addHead(node); } } // &#x79FB;&#x9664;&#x7ED9;&#x5B9A;&#x7684;&#x7ED3;&#x70B9; private void removeNode(DLinkedList node) { DLinkedList pre = node.pre; DLinkedList next = node.next; pre.next = next; next.pre = pre; } // &#x628A;&#x7ED3;&#x70B9;&#x6DFB;&#x52A0;&#x5934;&#x8282;&#x70B9; private void addHead(DLinkedList node) { DLinkedList next = head.next; head.next = node; node.next = next; next.pre = node; node.pre = head; } public static void main(String[] args) { LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); System.out.println(cache.get(1)); // &#x8FD4;&#x56DE; 1 cache.put(3, 3); // &#x4F7F; 2 &#x4F5C;&#x5E9F; System.out.println(cache.get(2)); // &#x8FD4;&#x56DE; -1 cache.put(4, 4); // &#x4F7F; 1 &#x4F5C;&#x5E9F; System.out.println(cache.get(1)); // &#x8FD4;&#x56DE; -1 &#x672A;&#x627E;&#x5230; System.out.println(cache.get(3)); // &#x8FD4;&#x56DE; 3 System.out.println(cache.get(4)); // &#x8FD4;&#x56DE; 4 }}class DLinkedList { int key; int value; DLinkedList pre; DLinkedList next; public DLinkedList() {}; public DLinkedList(int key, int value) { this.key = key; this.value = value; }}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LRUCache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Java虚拟机（四）]]></title>
    <url>%2F2019%2F03%2F04%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[synchronized &#x5B57;&#x8282;&#x7801;&#x5206;&#x6790;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x4E00;&#x4E0B;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5; 123456789101112/** * @Author: cuzz * @Date: 2019/3/4 13:34 * @Description: */public class MyTest02 { int x = 0; public void setX(int x) { this.x = x; }} &#x4F7F;&#x7528; javap -v com.cuzz.jvm.bytecode.MyTest02 &#x547D;&#x4EE4;&#xFF0C;&#x627E;&#x5230; setX &#x65B9;&#x6CD5; 12345678910111213141516public void setX(int); descriptor: (I)V flags: ACC_PUBLIC Code: stack=2, locals=2, args_size=2 0: aload_0 1: iload_1 2: putfield #2 // Field x:I 5: return LineNumberTable: line 12: 0 line 13: 5 LocalVariableTable: Start Length Slot Name Signature 0 6 0 this Lcom/cuzz/jvm/bytecode/MyTest02; 0 6 1 x I &#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x65B9;&#x6CD5;&#x4E2D;&#x6DFB;&#x52A0; synchronzied &#x5173;&#x952E;&#x5B57; 1234567public class MyTest02 { int x = 0; public synchronized void setX(int x) { this.x = x; }} &#x6211;&#x4EEC;&#x518D;&#x53CD;&#x7F16;&#x8BD1;&#x4E00;&#x4E0B; 12345678910111213141516public synchronized void setX(int); descriptor: (I)V flags: ACC_PUBLIC, ACC_SYNCHRONIZED Code: stack=2, locals=2, args_size=2 0: aload_0 1: iload_1 2: putfield #2 // Field x:I 5: return LineNumberTable: line 12: 0 line 13: 5 LocalVariableTable: Start Length Slot Name Signature 0 6 0 this Lcom/cuzz/jvm/bytecode/MyTest02; 0 6 1 x I &#x5BF9;&#x6BD4;&#x8FD9;&#x4E24;&#x4E2A;&#x53CD;&#x7F16;&#x8BD1;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728; flags &#x4E2D;&#x591A;&#x4E86; ACC_SYNCHRONIZED&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0; monitorenter &#x548C; monitorexit&#x3002; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x662F;&#x5728;&#x65B9;&#x6CD5;&#x4F53;&#x91CD;&#x6DFB;&#x52A0; synchronized &#x5173;&#x952E;&#x5B57; 12345678910public class MyTest02 { String lock = &quot;lock&quot;; int x = 0; public int getX() { synchronized (lock) { return x; } }} &#x6211;&#x4EEC;&#x53CD;&#x7F16;&#x8BD1;&#x4E00;&#x4E0B; &#x627E;&#x5230; getX &#x65B9;&#x6CD5; 123456789101112131415161718192021222324252627282930313233343536public int getX(); descriptor: ()I flags: ACC_PUBLIC Code: stack=2, locals=3, args_size=1 0: aload_0 1: getfield #3 // Field lock:Ljava/lang/String; 4: dup 5: astore_1 6: monitorenter 7: aload_0 8: getfield #4 // Field x:I 11: aload_1 12: monitorexit 13: ireturn 14: astore_2 15: aload_1 16: monitorexit 17: aload_2 18: athrow Exception table: from to target type 7 13 14 any 14 17 14 any LineNumberTable: line 17: 0 line 18: 7 line 19: 14 LocalVariableTable: Start Length Slot Name Signature 0 19 0 this Lcom/cuzz/jvm/bytecode/MyTest02; StackMapTable: number_of_entries = 1 frame_type = 255 /* full_frame */ offset_delta = 14 locals = [ class com/cuzz/jvm/bytecode/MyTest02, class java/lang/Object ] stack = [ class java/lang/Throwable ] &#x5728; 6 &#x4E2D;&#x51FA;&#x73B0; monitorenter&#xFF0C;&#x5728; 16 &#x4E2D;&#x51FA;&#x73B0; moniterexit]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2F2019%2F02%2F23%2FRedis%2F</url>
    <content type="text"><![CDATA[&#x4EC0;&#x4E48;&#x662F; Redis &#xFF1F;Redis&#xFF0C;&#x5168;&#x79F0; Remote Dictionary Server&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;&#x5185;&#x5B58;&#x7684;&#x9AD8;&#x6027;&#x80FD; Key-Value &#x6570;&#x636E;&#x5E93;&#x3002; &#x53E6;&#x5916;&#xFF0C;Redis &#x5DF2;&#x7ECF;&#x6210;&#x4E3A;&#x4E92;&#x8054;&#x7F51;&#x516C;&#x53F8;&#x5728;&#x7F13;&#x5B58;&#x7EC4;&#x4EF6;&#x9009;&#x62E9;&#x7684;&#x552F;&#x4E00;&#xFF0C;&#x66F4;&#x591A;&#x7684;&#x5173;&#x6CE8;&#x70B9;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x597D; Redis &#x3002; Redis &#x6709;&#x4EC0;&#x4E48;&#x4F18;&#x70B9;&#xFF1F;1&#x3001;&#x901F;&#x5EA6;&#x5FEB; &#x56E0;&#x4E3A;&#x6570;&#x636E;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E; HashMap &#xFF0C;HashMap &#x7684;&#x4F18;&#x52BF;&#x5C31;&#x662F;&#x67E5;&#x627E;&#x548C;&#x64CD;&#x4F5C;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O (1) &#x3002; Redis &#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4E00;&#x4E2A; Key-Value &#x7C7B;&#x578B;&#x7684;&#x5185;&#x5B58;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x5F88;&#x50CF;Memcached &#xFF0C;&#x6574;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x7EDF;&#x7EDF;&#x52A0;&#x8F7D;&#x5728;&#x5185;&#x5B58;&#x5F53;&#x4E2D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x5B9A;&#x671F;&#x901A;&#x8FC7;&#x5F02;&#x6B65;&#x64CD;&#x4F5C;&#x628A;&#x6570;&#x636E;&#x5E93;&#x6570;&#x636E; flush &#x5230;&#x786C;&#x76D8;&#x4E0A;&#x8FDB;&#x884C;&#x4FDD;&#x5B58;&#x3002; &#x56E0;&#x4E3A;&#x662F;&#x7EAF;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#xFF0C;Redis &#x7684;&#x6027;&#x80FD;&#x975E;&#x5E38;&#x51FA;&#x8272;&#xFF0C;&#x6BCF;&#x79D2;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x8D85;&#x8FC7; 10 &#x4E07;&#x6B21;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#xFF0C;&#x662F;&#x5DF2;&#x77E5;&#x6027;&#x80FD;&#x6700;&#x5FEB;&#x7684; Key-Value &#x6570;&#x636E;&#x5E93;&#x3002; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x67E5;&#x770B;&#x5728;&#x963F;&#x91CC;&#x4E91;&#x9500;&#x552E;&#x7684; Redis &#x89C4;&#x683C;&#xFF0C;&#x6700;&#x4F4E;&#x7684;&#x4E5F;&#x662F; 8W QPS &#x3002; 2&#x3001;&#x652F;&#x6301;&#x4E30;&#x5BCC;&#x6570;&#x636E;&#x7C7B;&#x578B; &#x652F;&#x6301; String &#xFF0C;List&#xFF0C;Set&#xFF0C;Sorted Set&#xFF0C;Hash &#x3002; Redis &#x7684;&#x51FA;&#x8272;&#x4E4B;&#x5904;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x6027;&#x80FD;&#xFF0C;Redis &#x6700;&#x5927;&#x7684;&#x9B45;&#x529B;&#x662F;&#x652F;&#x6301;&#x4FDD;&#x5B58;&#x591A;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x6B64;&#x5916;&#x5355;&#x4E2A; Value &#x7684;&#x6700;&#x5927;&#x9650;&#x5236;&#x662F;1GB&#xFF0C;&#x4E0D;&#x50CF; Memcached&#x53EA;&#x80FD;&#x4FDD;&#x5B58;1MB&#x7684;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;Redis&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5B9E;&#x73B0;&#x5F88;&#x591A;&#x6709;&#x7528;&#x7684;&#x529F;&#x80FD;&#x3002;&#x6BD4;&#x65B9;&#x8BF4;&#xFF1A; &#x7528;&#x4ED6;&#x7684; List &#x6765;&#x505A; FIFO &#x53CC;&#x5411;&#x94FE;&#x8868;&#xFF0C;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x9AD8;&#x6027;&#x80FD;&#x6D88;&#x606F;&#x961F;&#x5217;&#x670D;&#x52A1;&#x3002; &#x7528;&#x4ED6;&#x7684; Set &#x53EF;&#x4EE5;&#x505A;&#x9AD8;&#x6027;&#x80FD;&#x7684; tag &#x7CFB;&#x7EDF;&#x7B49;&#x7B49;&#x3002; 3&#x3001;&#x4E30;&#x5BCC;&#x7684;&#x7279;&#x6027; &#x8BA2;&#x9605;&#x53D1;&#x5E03; Pub / Sub &#x529F;&#x80FD; Key &#x8FC7;&#x671F;&#x7B56;&#x7565; &#x4E8B;&#x52A1; &#x652F;&#x6301;&#x591A;&#x4E2A; DB &#x8BA1;&#x6570; &#x2026; &#x5E76;&#x4E14;&#x5728; Redis 5.0 &#x589E;&#x52A0;&#x4E86; Stream &#x529F;&#x80FD;&#xFF0C;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5F3A;&#x5927;&#x7684;&#x652F;&#x6301;&#x591A;&#x64AD;&#x7684;&#x53EF;&#x6301;&#x4E45;&#x5316;&#x7684;&#x6D88;&#x606F;&#x961F;&#x5217;&#xFF0C;&#x63D0;&#x4F9B;&#x7C7B;&#x4F3C; Kafka &#x7684;&#x529F;&#x80FD;&#x3002; 4&#x3001;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8; Redis &#x63D0;&#x4F9B; RDB &#x548C; AOF &#x4E24;&#x79CD;&#x6570;&#x636E;&#x7684;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8;&#x65B9;&#x6848;&#xFF0C;&#x89E3;&#x51B3;&#x5185;&#x5B58;&#x6570;&#x636E;&#x5E93;&#x6700;&#x62C5;&#x5FC3;&#x7684;&#x4E07;&#x4E00; Redis &#x6302;&#x6389;&#xFF0C;&#x6570;&#x636E;&#x4F1A;&#x6D88;&#x5931;&#x6389;&#x3002; Redis &#x6709;&#x4EC0;&#x4E48;&#x7F3A;&#x70B9;&#xFF1F; &#x7531;&#x4E8E; Redis &#x662F;&#x5185;&#x5B58;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5355;&#x53F0;&#x673A;&#x5668;&#xFF0C;&#x5B58;&#x50A8;&#x7684;&#x6570;&#x636E;&#x91CF;&#xFF0C;&#x8DDF;&#x673A;&#x5668;&#x672C;&#x8EAB;&#x7684;&#x5185;&#x5B58;&#x5927;&#x5C0F;&#x3002;&#x867D;&#x7136; Redis &#x672C;&#x8EAB;&#x6709; Key &#x8FC7;&#x671F;&#x7B56;&#x7565;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x63D0;&#x524D;&#x9884;&#x4F30;&#x548C;&#x8282;&#x7EA6;&#x5185;&#x5B58;&#x3002;&#x5982;&#x679C;&#x5185;&#x5B58;&#x589E;&#x957F;&#x8FC7;&#x5FEB;&#xFF0C;&#x9700;&#x8981;&#x5B9A;&#x671F;&#x5220;&#x9664;&#x6570;&#x636E;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x53EF;&#x4F7F;&#x7528; Redis Cluster&#x3001;Codis &#x7B49;&#x65B9;&#x6848;&#xFF0C;&#x5BF9; Redis &#x8FDB;&#x884C;&#x5206;&#x533A;&#xFF0C;&#x4ECE;&#x5355;&#x673A; Redis &#x53D8;&#x6210;&#x96C6;&#x7FA4; Redis &#x3002; &#x5982;&#x679C;&#x8FDB;&#x884C;&#x5B8C;&#x6574;&#x91CD;&#x540C;&#x6B65;&#xFF0C;&#x7531;&#x4E8E;&#x9700;&#x8981;&#x751F;&#x6210; RDB &#x6587;&#x4EF6;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x4F20;&#x8F93;&#xFF0C;&#x4F1A;&#x5360;&#x7528;&#x4E3B;&#x673A;&#x7684; CPU &#xFF0C;&#x5E76;&#x4F1A;&#x6D88;&#x8017;&#x73B0;&#x7F51;&#x7684;&#x5E26;&#x5BBD;&#x3002;&#x4E0D;&#x8FC7; Redis2.8 &#x7248;&#x672C;&#xFF0C;&#x5DF2;&#x7ECF;&#x6709;&#x90E8;&#x5206;&#x91CD;&#x540C;&#x6B65;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x6709;&#x53EF;&#x80FD;&#x6709;&#x5B8C;&#x6574;&#x91CD;&#x540C;&#x6B65;&#x7684;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x65B0;&#x4E0A;&#x7EBF;&#x7684;&#x5907;&#x673A;&#x3002; &#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x8FDB;&#x884C;&#x91CD;&#x542F;&#xFF0C;&#x5C06;&#x786C;&#x76D8;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x52A0;&#x8F7D;&#x8FDB;&#x5185;&#x5B58;&#xFF0C;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x4E45;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;Redis &#x4E0D;&#x80FD;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#x3002; Redis &#x548C; Memcached &#x7684;&#x533A;&#x522B;&#x6709;&#x54EA;&#x4E9B;&#xFF1F;1&#x3001;Redis &#x652F;&#x6301;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784; Memcached &#x4EC5;&#x63D0;&#x4F9B;&#x7B80;&#x5355;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002; Redis &#x63D0;&#x4F9B;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x4E30;&#x5BCC;&#x7684;&#x6570;&#x636E;&#x64CD;&#x4F5C;&#x3002; &#x4E5F;&#x56E0;&#x4E3A; Redis &#x652F;&#x6301;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;Redis &#x5373;&#x4F7F;&#x5F80;&#x4E8E; Memcached &#x63A8;&#x51FA;&#xFF0C;&#x5374;&#x83B7;&#x5F97;&#x66F4;&#x591A;&#x5F00;&#x53D1;&#x8005;&#x7684;&#x9752;&#x7750;&#x3002; Redis &#x76F8;&#x6BD4; Memcached &#x6765;&#x8BF4;&#xFF0C;&#x62E5;&#x6709;&#x66F4;&#x591A;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x80FD;&#x652F;&#x6301;&#x66F4;&#x4E30;&#x5BCC;&#x7684;&#x6570;&#x636E;&#x64CD;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x9700;&#x8981;&#x7F13;&#x5B58;&#x80FD;&#x591F;&#x652F;&#x6301;&#x66F4;&#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#x548C;&#x64CD;&#x4F5C;&#xFF0C;Redis &#x4F1A;&#x662F;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#x3002; 2&#x3001;Redis &#x539F;&#x751F;&#x652F;&#x6301;&#x96C6;&#x7FA4;&#x6A21;&#x5F0F; &#x5728; Redis3.x &#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x5B98;&#x65B9;&#x4FBF;&#x80FD;&#x652F;&#x6301; Cluster &#x6A21;&#x5F0F;&#x3002; Memcached &#x6CA1;&#x6709;&#x539F;&#x751F;&#x7684;&#x96C6;&#x7FA4;&#x6A21;&#x5F0F;&#xFF0C;&#x9700;&#x8981;&#x4F9D;&#x9760;&#x5BA2;&#x6237;&#x7AEF;&#x6765;&#x5B9E;&#x73B0;&#x5F80;&#x96C6;&#x7FA4;&#x4E2D;&#x5206;&#x7247;&#x5199;&#x5165;&#x6570;&#x636E;&#x3002; 3&#x3001;&#x6027;&#x80FD;&#x5BF9;&#x6BD4; Redis &#x53EA;&#x4F7F;&#x7528;&#x5355;&#x6838;&#xFF0C;&#x800C; Memcached &#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x591A;&#x6838;&#xFF0C;&#x6240;&#x4EE5;&#x5E73;&#x5747;&#x6BCF;&#x4E00;&#x4E2A;&#x6838;&#x4E0A; Redis&#x5728;&#x5B58;&#x50A8;&#x5C0F;&#x6570;&#x636E;&#x65F6;&#x6BD4; Memcached &#x6027;&#x80FD;&#x66F4;&#x9AD8;&#x3002; &#x5728; 100k &#x4EE5;&#x4E0A;&#x7684;&#x6570;&#x636E;&#x4E2D;&#xFF0C;Memcached &#x6027;&#x80FD;&#x8981;&#x9AD8;&#x4E8E; Redis &#x3002;&#x867D;&#x7136; Redis &#x6700;&#x8FD1;&#x4E5F;&#x5728;&#x5B58;&#x50A8;&#x5927;&#x6570;&#x636E;&#x7684;&#x6027;&#x80FD;&#x4E0A;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x6BD4;&#x8D77; Memcached&#xFF0C;&#x8FD8;&#x662F;&#x7A0D;&#x6709;&#x900A;&#x8272;&#x3002; &#x66F4;&#x591A;&#x5173;&#x4E8E;&#x6027;&#x80FD;&#x7684;&#x5BF9;&#x6BD4;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Memcached &#x4E0E; Redis &#x7684;&#x5173;&#x952E;&#x6027;&#x80FD;&#x6307;&#x6807;&#x6BD4;&#x8F83;&#x300B; &#x3002; 4&#x3001;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x6548;&#x7387;&#x5BF9;&#x6BD4; &#x7B80;&#x5355;&#x7684; Key-Value &#x5B58;&#x50A8;&#x7684;&#x8BDD;&#xFF0C;Memcached &#x7684;&#x5185;&#x5B58;&#x5229;&#x7528;&#x7387;&#x66F4;&#x9AD8;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7C7B;&#x4F3C;&#x5185;&#x5B58;&#x6C60;&#x3002; &#x5982;&#x679C; Redis &#x91C7;&#x7528; hash &#x7ED3;&#x6784;&#x6765;&#x505A; key-value &#x5B58;&#x50A8;&#xFF0C;&#x7531;&#x4E8E;&#x5176;&#x7EC4;&#x5408;&#x5F0F;&#x7684;&#x538B;&#x7F29;&#xFF0C; &#x5176;&#x5185;&#x5B58;&#x5229;&#x7528;&#x7387;&#x4F1A;&#x9AD8;&#x4E8E; Memcached &#x3002; Redis &#x548C; Memcached &#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;Redis &#x91C7;&#x7528;&#x7684;&#x662F;&#x5305;&#x88C5;&#x7684; malloc/free &#xFF0C; &#x76F8;&#x8F83;&#x4E8E; Memcached &#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x65B9;&#x6CD5; tcmalloc / jmalloc &#x6765;&#x8BF4;&#xFF0C;&#x8981;&#x7B80;&#x5355;&#x5F88;&#x591A; &#x3002; 5&#x3001;&#x7F51;&#x7EDC; IO &#x6A21;&#x578B; Memcached &#x662F;&#x591A;&#x7EBF;&#x7A0B;&#xFF0C;&#x975E;&#x963B;&#x585E; IO &#x590D;&#x7528;&#x7684;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#xFF0C;&#x539F;&#x578B;&#x4E0A;&#x63A5;&#x8FD1; Nignx &#x3002; Redis &#x4F7F;&#x7528;&#x5355;&#x7EBF;&#x7A0B;&#x7684; IO &#x590D;&#x7528;&#x6A21;&#x578B;&#xFF0C;&#x81EA;&#x5DF1;&#x5C01;&#x88C5;&#x4E86;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684; AeEvent &#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x6846;&#x67B6;&#xFF0C;&#x4E3B;&#x8981;&#x5B9E;&#x73B0;&#x4E86; epoll, kqueue &#x548C; select &#xFF0C;&#x66F4;&#x63A5;&#x8FD1; Apache &#x65E9;&#x671F;&#x7684;&#x6A21;&#x5F0F;&#x3002; TODO &#x6709;&#x70B9;&#x770B;&#x4E0D;&#x61C2;&#xFF0C;&#x627E;&#x4E9A;&#x666E;&#x8868;&#x5F1F;&#x786E;&#x8BA4;&#x4E2D;&#x3002; 6&#x3001;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8; Memcached &#x4E0D;&#x652F;&#x6301;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8;&#xFF0C;&#x91CD;&#x542F;&#x65F6;&#xFF0C;&#x6570;&#x636E;&#x88AB;&#x6E05;&#x7A7A;&#x3002; Redis &#x652F;&#x6301;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8;&#xFF0C;&#x91CD;&#x542F;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x6062;&#x590D;&#x5DF2;&#x6301;&#x4E45;&#x5316;&#x7684;&#x6570;&#x636E;&#x3002; &#x4E5F;&#x63A8;&#x8350;&#x9605;&#x8BFB;&#x4E0B; &#x300A;&#x811A;&#x8E0F;&#x4E24;&#x53EA;&#x8239;&#x7684;&#x56F0;&#x60D1; - Memcached &#x4E0E; Redis&#x300B; &#x3002; &#x8BF7;&#x8BF4;&#x8BF4; Redis &#x7684;&#x7EBF;&#x7A0B;&#x6A21;&#x578B;&#xFF1F; &#x827F;&#x827F;&#xFF1A;&#x8FD9;&#x4E2A;&#x662F;&#x6211;&#x4ECE;&#x7F51;&#x7EDC;&#x4E0A;&#x627E;&#x7684;&#x8D44;&#x6599;&#xFF0C;&#x8BB2;&#x7684;&#x7070;&#x5E38;&#x4E0D;&#x9519;&#x3002; redis &#x5185;&#x90E8;&#x4F7F;&#x7528;&#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668; file event handler&#xFF0C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668;&#x662F;&#x5355;&#x7EBF;&#x7A0B;&#x7684;&#xFF0C;&#x6240;&#x4EE5; redis &#x624D;&#x53EB;&#x505A;&#x5355;&#x7EBF;&#x7A0B;&#x7684;&#x6A21;&#x578B;&#x3002;&#x5B83;&#x91C7;&#x7528; IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x673A;&#x5236;&#x540C;&#x65F6;&#x76D1;&#x542C;&#x591A;&#x4E2A; socket&#xFF0C;&#x6839;&#x636E; socket &#x4E0A;&#x7684;&#x4E8B;&#x4EF6;&#x6765;&#x9009;&#x62E9;&#x5BF9;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668;&#x7684;&#x7ED3;&#x6784;&#x5305;&#x542B; 4 &#x4E2A;&#x90E8;&#x5206;&#xFF1A; &#x591A;&#x4E2A; socket IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x7A0B;&#x5E8F; &#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668; &#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668;&#xFF08;&#x8FDE;&#x63A5;&#x5E94;&#x7B54;&#x5904;&#x7406;&#x5668;&#x3001;&#x547D;&#x4EE4;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x5668;&#x3001;&#x547D;&#x4EE4;&#x56DE;&#x590D;&#x5904;&#x7406;&#x5668;&#xFF09; &#x591A;&#x4E2A; socket &#x53EF;&#x80FD;&#x4F1A;&#x5E76;&#x53D1;&#x4EA7;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6BCF;&#x4E2A;&#x64CD;&#x4F5C;&#x5BF9;&#x5E94;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#xFF0C;&#x4F46;&#x662F; IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x7A0B;&#x5E8F;&#x4F1A;&#x76D1;&#x542C;&#x591A;&#x4E2A; socket&#xFF0C;&#x4F1A;&#x5C06; socket &#x4EA7;&#x751F;&#x7684;&#x4E8B;&#x4EF6;&#x653E;&#x5165;&#x961F;&#x5217;&#x4E2D;&#x6392;&#x961F;&#xFF0C;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668;&#x6BCF;&#x6B21;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x4E8B;&#x4EF6;&#xFF0C;&#x628A;&#x8BE5;&#x4E8B;&#x4EF6;&#x4EA4;&#x7ED9;&#x5BF9;&#x5E94;&#x7684;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x5668;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x6765;&#x770B;&#x5BA2;&#x6237;&#x7AEF;&#x4E0E; redis &#x7684;&#x4E00;&#x6B21;&#x901A;&#x4FE1;&#x8FC7;&#x7A0B;&#xFF1A; &#x5BA2;&#x6237;&#x7AEF; socket01 &#x5411; redis &#x7684; server socket &#x8BF7;&#x6C42;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#xFF0C;&#x6B64;&#x65F6; server socket &#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; AE_READABLE &#x4E8B;&#x4EF6;&#xFF0C;IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x7A0B;&#x5E8F;&#x76D1;&#x542C;&#x5230; server socket &#x4EA7;&#x751F;&#x7684;&#x4E8B;&#x4EF6;&#x540E;&#xFF0C;&#x5C06;&#x8BE5;&#x4E8B;&#x4EF6;&#x538B;&#x5165;&#x961F;&#x5217;&#x4E2D;&#x3002;&#x6587;&#x4EF6;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x83B7;&#x53D6;&#x8BE5;&#x4E8B;&#x4EF6;&#xFF0C;&#x4EA4;&#x7ED9;&#x8FDE;&#x63A5;&#x5E94;&#x7B54;&#x5904;&#x7406;&#x5668;&#x3002;&#x8FDE;&#x63A5;&#x5E94;&#x7B54;&#x5904;&#x7406;&#x5668;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x80FD;&#x4E0E;&#x5BA2;&#x6237;&#x7AEF;&#x901A;&#x4FE1;&#x7684; socket01&#xFF0C;&#x5E76;&#x5C06;&#x8BE5; socket01 &#x7684; AE_READABLE &#x4E8B;&#x4EF6;&#x4E0E;&#x547D;&#x4EE4;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x5668;&#x5173;&#x8054;&#x3002; &#x5047;&#x8BBE;&#x6B64;&#x65F6;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x4E86;&#x4E00;&#x4E2A; set key value &#x8BF7;&#x6C42;&#xFF0C;&#x6B64;&#x65F6; redis &#x4E2D;&#x7684; socket01 &#x4F1A;&#x4EA7;&#x751F; AE_READABLE &#x4E8B;&#x4EF6;&#xFF0C;IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x7A0B;&#x5E8F;&#x5C06;&#x4E8B;&#x4EF6;&#x538B;&#x5165;&#x961F;&#x5217;&#xFF0C;&#x6B64;&#x65F6;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x83B7;&#x53D6;&#x5230;&#x8BE5;&#x4E8B;&#x4EF6;&#xFF0C;&#x7531;&#x4E8E;&#x524D;&#x9762; socket01 &#x7684; AE_READABLE &#x4E8B;&#x4EF6;&#x5DF2;&#x7ECF;&#x4E0E;&#x547D;&#x4EE4;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x5668;&#x5173;&#x8054;&#xFF0C;&#x56E0;&#x6B64;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668;&#x5C06;&#x4E8B;&#x4EF6;&#x4EA4;&#x7ED9;&#x547D;&#x4EE4;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x5668;&#x6765;&#x5904;&#x7406;&#x3002;&#x547D;&#x4EE4;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x5668;&#x8BFB;&#x53D6; socket01 &#x7684; key value &#x5E76;&#x5728;&#x81EA;&#x5DF1;&#x5185;&#x5B58;&#x4E2D;&#x5B8C;&#x6210; key value &#x7684;&#x8BBE;&#x7F6E;&#x3002;&#x64CD;&#x4F5C;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5B83;&#x4F1A;&#x5C06; socket01 &#x7684; AE_WRITABLE &#x4E8B;&#x4EF6;&#x4E0E;&#x4EE4;&#x56DE;&#x590D;&#x5904;&#x7406;&#x5668;&#x5173;&#x8054;&#x3002; &#x5982;&#x679C;&#x6B64;&#x65F6;&#x5BA2;&#x6237;&#x7AEF;&#x51C6;&#x5907;&#x597D;&#x63A5;&#x6536;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E86;&#xFF0C;&#x90A3;&#x4E48; redis &#x4E2D;&#x7684; socket01 &#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; AE_WRITABLE &#x4E8B;&#x4EF6;&#xFF0C;&#x540C;&#x6837;&#x538B;&#x5165;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x4E8B;&#x4EF6;&#x5206;&#x6D3E;&#x5668;&#x627E;&#x5230;&#x76F8;&#x5173;&#x8054;&#x7684;&#x547D;&#x4EE4;&#x56DE;&#x590D;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x7531;&#x547D;&#x4EE4;&#x56DE;&#x590D;&#x5904;&#x7406;&#x5668;&#x5BF9; socket01 &#x8F93;&#x5165;&#x672C;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x4E00;&#x4E2A;&#x7ED3;&#x679C;&#xFF0C;&#x6BD4;&#x5982; ok&#xFF0C;&#x4E4B;&#x540E;&#x89E3;&#x9664; socket01 &#x7684; AE_WRITABLE &#x4E8B;&#x4EF6;&#x4E0E;&#x547D;&#x4EE4;&#x56DE;&#x590D;&#x5904;&#x7406;&#x5668;&#x7684;&#x5173;&#x8054;&#x3002; &#x8FD9;&#x6837;&#x4FBF;&#x5B8C;&#x6210;&#x4E86;&#x4E00;&#x6B21;&#x901A;&#x4FE1;&#x3002;&#x1F608; &#x8010;&#x5FC3;&#x7406;&#x89E3;&#x4E00;&#x4E0B;&#xFF0C;&#x7070;&#x5E38;&#x91CD;&#x8981;&#x3002;&#x5982;&#x679C;&#x8FD8;&#x662F;&#x4E0D;&#x80FD;&#x7406;&#x89E3;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x641C;&#x4E00;&#x4E9B;&#x8D44;&#x6599;&#xFF0C;&#x5728;&#x7406;&#x89E3;&#x7406;&#x89E3;&#x3002; &#x4E3A;&#x4EC0;&#x4E48; Redis &#x5355;&#x7EBF;&#x7A0B;&#x6A21;&#x578B;&#x4E5F;&#x80FD;&#x6548;&#x7387;&#x8FD9;&#x4E48;&#x9AD8;&#xFF1F; 1&#x3001;&#x7EAF;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#x3002; Redis &#x4E3A;&#x4E86;&#x8FBE;&#x5230;&#x6700;&#x5FEB;&#x7684;&#x8BFB;&#x5199;&#x901F;&#x5EA6;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x90FD;&#x8BFB;&#x5230;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x5F02;&#x6B65;&#x7684;&#x65B9;&#x5F0F;&#x5C06;&#x6570;&#x636E;&#x5199;&#x5165;&#x78C1;&#x76D8;&#x3002;&#x6240;&#x4EE5; Redis &#x5177;&#x6709;&#x5FEB;&#x901F;&#x548C;&#x6570;&#x636E;&#x6301;&#x4E45;&#x5316;&#x7684;&#x7279;&#x5F81;&#x3002; &#x5982;&#x679C;&#x4E0D;&#x5C06;&#x6570;&#x636E;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x78C1;&#x76D8; I/O &#x901F;&#x5EA6;&#x4E3A;&#x4E25;&#x91CD;&#x5F71;&#x54CD; Redis &#x7684;&#x6027;&#x80FD;&#x3002; 2&#x3001;&#x6838;&#x5FC3;&#x662F;&#x57FA;&#x4E8E;&#x975E;&#x963B;&#x585E;&#x7684; IO &#x591A;&#x8DEF;&#x590D;&#x7528;&#x673A;&#x5236;&#x3002; 3&#x3001;&#x5355;&#x7EBF;&#x7A0B;&#x53CD;&#x800C;&#x907F;&#x514D;&#x4E86;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x9891;&#x7E41;&#x4E0A;&#x4E0B;&#x6587;&#x5207;&#x6362;&#x95EE;&#x9898;&#x3002; Redis &#x5229;&#x7528;&#x961F;&#x5217;&#x6280;&#x672F;&#xFF0C;&#x5C06;&#x5E76;&#x53D1;&#x8BBF;&#x95EE;&#x53D8;&#x4E3A;&#x4E32;&#x884C;&#x8BBF;&#x95EE;&#xFF0C;&#x6D88;&#x9664;&#x4E86;&#x4F20;&#x7EDF;&#x6570;&#x636E;&#x5E93;&#x4E32;&#x884C;&#x63A7;&#x5236;&#x7684;&#x5F00;&#x9500; 4&#x3001;Redis &#x5168;&#x7A0B;&#x4F7F;&#x7528; hash &#x7ED3;&#x6784;&#xFF0C;&#x8BFB;&#x53D6;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5BF9;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x8FDB;&#x884C;&#x4E86;&#x4F18;&#x5316;&#xFF0C;&#x5982;&#x538B;&#x7F29;&#x8868;&#xFF0C;&#x5BF9;&#x77ED;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#x5B58;&#x50A8;&#xFF0C;&#x518D;&#x5982;&#xFF0C;&#x8DF3;&#x8868;&#xFF0C;&#x4F7F;&#x7528;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x52A0;&#x5FEB;&#x8BFB;&#x53D6;&#x7684;&#x901F;&#x5EA6;&#x3002; Redis &#x6709;&#x51E0;&#x79CD;&#x6301;&#x4E45;&#x5316;&#x65B9;&#x5F0F;&#xFF1F;&#x6301;&#x4E45;&#x5316;&#x65B9;&#x5F0F;Redis &#x63D0;&#x4F9B;&#x4E86;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x7684;&#x6301;&#x4E45;&#x5316;&#x5230;&#x786C;&#x76D8;&#x3002; &#x3010;&#x5168;&#x91CF;&#x3011;RDB &#x6301;&#x4E45;&#x5316;&#xFF0C;&#x662F;&#x6307;&#x5728;&#x6307;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x95F4;&#x9694;&#x5185;&#x5C06;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5FEB;&#x7167;&#x5199;&#x5165;&#x78C1;&#x76D8;&#x3002;&#x5B9E;&#x9645;&#x64CD;&#x4F5C;&#x8FC7;&#x7A0B;&#x662F;&#xFF0C;fork &#x4E00;&#x4E2A;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x5148;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x5199;&#x5165;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#xFF0C;&#x5199;&#x5165;&#x6210;&#x529F;&#x540E;&#xFF0C;&#x518D;&#x66FF;&#x6362;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x538B;&#x7F29;&#x5B58;&#x50A8;&#x3002; &#x3010;&#x589E;&#x91CF;&#x3011;AOF&#x6301;&#x4E45;&#x5316;&#xFF0C;&#x4EE5;&#x65E5;&#x5FD7;&#x7684;&#x5F62;&#x5F0F;&#x8BB0;&#x5F55;&#x670D;&#x52A1;&#x5668;&#x6240;&#x5904;&#x7406;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5199;&#x3001;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x8BB0;&#x5F55;&#xFF0C;&#x4EE5;&#x6587;&#x672C;&#x7684;&#x65B9;&#x5F0F;&#x8BB0;&#x5F55;&#xFF0C;&#x53EF;&#x4EE5;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;&#x8BE6;&#x7EC6;&#x7684;&#x64CD;&#x4F5C;&#x8BB0;&#x5F55;&#x3002; &#x4E8C;&#x8005;&#x7684;&#x533A;&#x522B;RDB&#x6301;&#x4E45;&#x5316;&#x662F;&#x6307;&#x5728;&#x6307;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x95F4;&#x9694;&#x5185;&#x5C06;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5FEB;&#x7167;&#x5199;&#x5165;&#x78C1;&#x76D8;&#xFF0C;&#x5B9E;&#x9645;&#x64CD;&#x4F5C;&#x8FC7;&#x7A0B;&#x662F;fork&#x4E00;&#x4E2A;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x5148;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x5199;&#x5165;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#xFF0C;&#x5199;&#x5165;&#x6210;&#x529F;&#x540E;&#xFF0C;&#x518D;&#x66FF;&#x6362;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x538B;&#x7F29;&#x5B58;&#x50A8;&#x3002; AOF&#x6301;&#x4E45;&#x5316;&#x4EE5;&#x65E5;&#x5FD7;&#x7684;&#x5F62;&#x5F0F;&#x8BB0;&#x5F55;&#x670D;&#x52A1;&#x5668;&#x6240;&#x5904;&#x7406;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5199;&#x3001;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x8BB0;&#x5F55;&#xFF0C;&#x4EE5;&#x6587;&#x672C;&#x7684;&#x65B9;&#x5F0F;&#x8BB0;&#x5F55;&#xFF0C;&#x53EF;&#x4EE5;&#x6253;&#x5F00;&#x6587;&#x4EF6;&#x770B;&#x5230;&#x8BE6;&#x7EC6;&#x7684;&#x64CD;&#x4F5C;&#x8BB0;&#x5F55;&#x3002; &#x4E8C;&#x8005;&#x4F18;&#x7F3A;&#x70B9;RDB&#x5B58;&#x5728;&#x54EA;&#x4E9B;&#x4F18;&#x52BF;&#x5462;&#xFF1F; &#x4E00;&#x65E6;&#x91C7;&#x7528;&#x8BE5;&#x65B9;&#x5F0F;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x7684;&#x6574;&#x4E2A;Redis&#x6570;&#x636E;&#x5E93;&#x5C06;&#x53EA;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x5BF9;&#x4E8E;&#x6587;&#x4EF6;&#x5907;&#x4EFD;&#x800C;&#x8A00;&#x662F;&#x975E;&#x5E38;&#x5B8C;&#x7F8E;&#x7684;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x6253;&#x7B97;&#x6BCF;&#x4E2A;&#x5C0F;&#x65F6;&#x5F52;&#x6863;&#x4E00;&#x6B21;&#x6700;&#x8FD1;24&#x5C0F;&#x65F6;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x8981;&#x6BCF;&#x5929;&#x5F52;&#x6863;&#x4E00;&#x6B21;&#x6700;&#x8FD1;30&#x5929;&#x7684;&#x6570;&#x636E;&#x3002;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x7684;&#x5907;&#x4EFD;&#x7B56;&#x7565;&#xFF0C;&#x4E00;&#x65E6;&#x7CFB;&#x7EDF;&#x51FA;&#x73B0;&#x707E;&#x96BE;&#x6027;&#x6545;&#x969C;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x7684;&#x8FDB;&#x884C;&#x6062;&#x590D;&#x3002; &#x5BF9;&#x4E8E;&#x707E;&#x96BE;&#x6062;&#x590D;&#x800C;&#x8A00;&#xFF0C;RDB&#x662F;&#x975E;&#x5E38;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#x3002;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x975E;&#x5E38;&#x8F7B;&#x677E;&#x7684;&#x5C06;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x6587;&#x4EF6;&#x538B;&#x7F29;&#x540E;&#x518D;&#x8F6C;&#x79FB;&#x5230;&#x5176;&#x5B83;&#x5B58;&#x50A8;&#x4ECB;&#x8D28;&#x4E0A;&#x3002; &#x6027;&#x80FD;&#x6700;&#x5927;&#x5316;&#x3002;&#x5BF9;&#x4E8E;Redis&#x7684;&#x670D;&#x52A1;&#x8FDB;&#x7A0B;&#x800C;&#x8A00;&#xFF0C;&#x5728;&#x5F00;&#x59CB;&#x6301;&#x4E45;&#x5316;&#x65F6;&#xFF0C;&#x5B83;&#x552F;&#x4E00;&#x9700;&#x8981;&#x505A;&#x7684;&#x53EA;&#x662F;fork&#x51FA;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x4E4B;&#x540E;&#x518D;&#x7531;&#x5B50;&#x8FDB;&#x7A0B;&#x5B8C;&#x6210;&#x8FD9;&#x4E9B;&#x6301;&#x4E45;&#x5316;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x6781;&#x5927;&#x7684;&#x907F;&#x514D;&#x670D;&#x52A1;&#x8FDB;&#x7A0B;&#x6267;&#x884C;IO&#x64CD;&#x4F5C;&#x4E86;&#x3002; &#x76F8;&#x6BD4;&#x4E8E;AOF&#x673A;&#x5236;&#xFF0C;&#x5982;&#x679C;&#x6570;&#x636E;&#x96C6;&#x5F88;&#x5927;&#xFF0C;RDB&#x7684;&#x542F;&#x52A8;&#x6548;&#x7387;&#x4F1A;&#x66F4;&#x9AD8;&#x3002; RDB&#x53C8;&#x5B58;&#x5728;&#x54EA;&#x4E9B;&#x52A3;&#x52BF;&#x5462;&#xFF1F; .&#x5982;&#x679C;&#x4F60;&#x60F3;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x7684;&#x9AD8;&#x53EF;&#x7528;&#x6027;&#xFF0C;&#x5373;&#x6700;&#x5927;&#x9650;&#x5EA6;&#x7684;&#x907F;&#x514D;&#x6570;&#x636E;&#x4E22;&#x5931;&#xFF0C;&#x90A3;&#x4E48;RDB&#x5C06;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x9009;&#x62E9;&#x3002;&#x56E0;&#x4E3A;&#x7CFB;&#x7EDF;&#x4E00;&#x65E6;&#x5728;&#x5B9A;&#x65F6;&#x6301;&#x4E45;&#x5316;&#x4E4B;&#x524D;&#x51FA;&#x73B0;&#x5B95;&#x673A;&#x73B0;&#x8C61;&#xFF0C;&#x6B64;&#x524D;&#x6CA1;&#x6709;&#x6765;&#x5F97;&#x53CA;&#x5199;&#x5165;&#x78C1;&#x76D8;&#x7684;&#x6570;&#x636E;&#x90FD;&#x5C06;&#x4E22;&#x5931;&#x3002; &#x7531;&#x4E8E;RDB&#x662F;&#x901A;&#x8FC7;fork&#x5B50;&#x8FDB;&#x7A0B;&#x6765;&#x534F;&#x52A9;&#x5B8C;&#x6210;&#x6570;&#x636E;&#x6301;&#x4E45;&#x5316;&#x5DE5;&#x4F5C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5982;&#x679C;&#x5F53;&#x6570;&#x636E;&#x96C6;&#x8F83;&#x5927;&#x65F6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x6574;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x505C;&#x6B62;&#x670D;&#x52A1;&#x51E0;&#x767E;&#x6BEB;&#x79D2;&#xFF0C;&#x751A;&#x81F3;&#x662F;1&#x79D2;&#x949F;&#x3002; AOF&#x7684;&#x4F18;&#x52BF;&#x6709;&#x54EA;&#x4E9B;&#x5462;&#xFF1F; &#x8BE5;&#x673A;&#x5236;&#x53EF;&#x4EE5;&#x5E26;&#x6765;&#x66F4;&#x9AD8;&#x7684;&#x6570;&#x636E;&#x5B89;&#x5168;&#x6027;&#xFF0C;&#x5373;&#x6570;&#x636E;&#x6301;&#x4E45;&#x6027;&#x3002;Redis&#x4E2D;&#x63D0;&#x4F9B;&#x4E86;3&#x4E2D;&#x540C;&#x6B65;&#x7B56;&#x7565;&#xFF0C;&#x5373;&#x6BCF;&#x79D2;&#x540C;&#x6B65;&#x3001;&#x6BCF;&#x4FEE;&#x6539;&#x540C;&#x6B65;&#x548C;&#x4E0D;&#x540C;&#x6B65;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x6BCF;&#x79D2;&#x540C;&#x6B65;&#x4E5F;&#x662F;&#x5F02;&#x6B65;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x5176;&#x6548;&#x7387;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#xFF0C;&#x6240;&#x5DEE;&#x7684;&#x662F;&#x4E00;&#x65E6;&#x7CFB;&#x7EDF;&#x51FA;&#x73B0;&#x5B95;&#x673A;&#x73B0;&#x8C61;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E00;&#x79D2;&#x949F;&#x4E4B;&#x5185;&#x4FEE;&#x6539;&#x7684;&#x6570;&#x636E;&#x5C06;&#x4F1A;&#x4E22;&#x5931;&#x3002;&#x800C;&#x6BCF;&#x4FEE;&#x6539;&#x540C;&#x6B65;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x89C6;&#x4E3A;&#x540C;&#x6B65;&#x6301;&#x4E45;&#x5316;&#xFF0C;&#x5373;&#x6BCF;&#x6B21;&#x53D1;&#x751F;&#x7684;&#x6570;&#x636E;&#x53D8;&#x5316;&#x90FD;&#x4F1A;&#x88AB;&#x7ACB;&#x5373;&#x8BB0;&#x5F55;&#x5230;&#x78C1;&#x76D8;&#x4E2D;&#x3002;&#x53EF;&#x4EE5;&#x9884;&#x89C1;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x5728;&#x6548;&#x7387;&#x4E0A;&#x662F;&#x6700;&#x4F4E;&#x7684;&#x3002;&#x81F3;&#x4E8E;&#x65E0;&#x540C;&#x6B65;&#xFF0C;&#x65E0;&#x9700;&#x591A;&#x8A00;&#xFF0C;&#x6211;&#x60F3;&#x5927;&#x5BB6;&#x90FD;&#x80FD;&#x6B63;&#x786E;&#x7684;&#x7406;&#x89E3;&#x5B83;&#x3002; &#x7531;&#x4E8E;&#x8BE5;&#x673A;&#x5236;&#x5BF9;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x7684;&#x5199;&#x5165;&#x64CD;&#x4F5C;&#x91C7;&#x7528;&#x7684;&#x662F;append&#x6A21;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5199;&#x5165;&#x8FC7;&#x7A0B;&#x4E2D;&#x5373;&#x4F7F;&#x51FA;&#x73B0;&#x5B95;&#x673A;&#x73B0;&#x8C61;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x7834;&#x574F;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x4E2D;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x7136;&#x800C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x672C;&#x6B21;&#x64CD;&#x4F5C;&#x53EA;&#x662F;&#x5199;&#x5165;&#x4E86;&#x4E00;&#x534A;&#x6570;&#x636E;&#x5C31;&#x51FA;&#x73B0;&#x4E86;&#x7CFB;&#x7EDF;&#x5D29;&#x6E83;&#x95EE;&#x9898;&#xFF0C;&#x4E0D;&#x7528;&#x62C5;&#x5FC3;&#xFF0C;&#x5728;Redis&#x4E0B;&#x4E00;&#x6B21;&#x542F;&#x52A8;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;redis-check-aof&#x5DE5;&#x5177;&#x6765;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x89E3;&#x51B3;&#x6570;&#x636E;&#x4E00;&#x81F4;&#x6027;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5982;&#x679C;&#x65E5;&#x5FD7;&#x8FC7;&#x5927;&#xFF0C;Redis&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x542F;&#x7528;rewrite&#x673A;&#x5236;&#x3002;&#x5373;Redis&#x4EE5;append&#x6A21;&#x5F0F;&#x4E0D;&#x65AD;&#x7684;&#x5C06;&#x4FEE;&#x6539;&#x6570;&#x636E;&#x5199;&#x5165;&#x5230;&#x8001;&#x7684;&#x78C1;&#x76D8;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x540C;&#x65F6;Redis&#x8FD8;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6587;&#x4EF6;&#x7528;&#x4E8E;&#x8BB0;&#x5F55;&#x6B64;&#x671F;&#x95F4;&#x6709;&#x54EA;&#x4E9B;&#x4FEE;&#x6539;&#x547D;&#x4EE4;&#x88AB;&#x6267;&#x884C;&#x3002;&#x56E0;&#x6B64;&#x5728;&#x8FDB;&#x884C;rewrite&#x5207;&#x6362;&#x65F6;&#x53EF;&#x4EE5;&#x66F4;&#x597D;&#x7684;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x5B89;&#x5168;&#x6027;&#x3002; AOF&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x683C;&#x5F0F;&#x6E05;&#x6670;&#x3001;&#x6613;&#x4E8E;&#x7406;&#x89E3;&#x7684;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x7528;&#x4E8E;&#x8BB0;&#x5F55;&#x6240;&#x6709;&#x7684;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BE5;&#x6587;&#x4EF6;&#x5B8C;&#x6210;&#x6570;&#x636E;&#x7684;&#x91CD;&#x5EFA;&#x3002; AOF&#x7684;&#x52A3;&#x52BF;&#x6709;&#x54EA;&#x4E9B;&#x5462;&#xFF1F; &#x5BF9;&#x4E8E;&#x76F8;&#x540C;&#x6570;&#x91CF;&#x7684;&#x6570;&#x636E;&#x96C6;&#x800C;&#x8A00;&#xFF0C;AOF&#x6587;&#x4EF6;&#x901A;&#x5E38;&#x8981;&#x5927;&#x4E8E;RDB&#x6587;&#x4EF6;&#x3002;RDB &#x5728;&#x6062;&#x590D;&#x5927;&#x6570;&#x636E;&#x96C6;&#x65F6;&#x7684;&#x901F;&#x5EA6;&#x6BD4; AOF &#x7684;&#x6062;&#x590D;&#x901F;&#x5EA6;&#x8981;&#x5FEB;&#x3002; &#x6839;&#x636E;&#x540C;&#x6B65;&#x7B56;&#x7565;&#x7684;&#x4E0D;&#x540C;&#xFF0C;AOF&#x5728;&#x8FD0;&#x884C;&#x6548;&#x7387;&#x4E0A;&#x5F80;&#x5F80;&#x4F1A;&#x6162;&#x4E8E;RDB&#x3002;&#x603B;&#x4E4B;&#xFF0C;&#x6BCF;&#x79D2;&#x540C;&#x6B65;&#x7B56;&#x7565;&#x7684;&#x6548;&#x7387;&#x662F;&#x6BD4;&#x8F83;&#x9AD8;&#x7684;&#xFF0C;&#x540C;&#x6B65;&#x7981;&#x7528;&#x7B56;&#x7565;&#x7684;&#x6548;&#x7387;&#x548C;RDB&#x4E00;&#x6837;&#x9AD8;&#x6548;&#x3002; &#x4E8C;&#x8005;&#x9009;&#x62E9;&#x7684;&#x6807;&#x51C6;&#xFF0C;&#x5C31;&#x662F;&#x770B;&#x7CFB;&#x7EDF;&#x662F;&#x613F;&#x610F;&#x727A;&#x7272;&#x4E00;&#x4E9B;&#x6027;&#x80FD;&#xFF0C;&#x6362;&#x53D6;&#x66F4;&#x9AD8;&#x7684;&#x7F13;&#x5B58;&#x4E00;&#x81F4;&#x6027;&#xFF08;aof&#xFF09;&#xFF0C;&#x8FD8;&#x662F;&#x613F;&#x610F;&#x5199;&#x64CD;&#x4F5C;&#x9891;&#x7E41;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x542F;&#x7528;&#x5907;&#x4EFD;&#x6765;&#x6362;&#x53D6;&#x66F4;&#x9AD8;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x5F85;&#x624B;&#x52A8;&#x8FD0;&#x884C;save&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x518D;&#x505A;&#x5907;&#x4EFD;&#xFF08;rdb&#xFF09;&#x3002;rdb&#x8FD9;&#x4E2A;&#x5C31;&#x66F4;&#x6709;&#x4E9B; eventually consistent &#x7684;&#x610F;&#x601D;&#x4E86;&#x3002; &#x5E38;&#x7528;&#x914D;&#x7F6E;RDB&#x6301;&#x4E45;&#x5316;&#x914D;&#x7F6E; Redis&#x4F1A;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x7684;&#x5FEB;&#x7167;dump&#x5230;dump.rdb&#x6587;&#x4EF6;&#x4E2D;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x6765;&#x4FEE;&#x6539;Redis&#x670D;&#x52A1;&#x5668;dump&#x5FEB;&#x7167;&#x7684;&#x9891;&#x7387;&#xFF0C;&#x5728;&#x6253;&#x5F00;6379.conf&#x6587;&#x4EF6;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x641C;&#x7D22;save&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x4E0B;&#x9762;&#x7684;&#x914D;&#x7F6E;&#x4FE1;&#x606F;&#xFF1A; 123save 900 1 # &#x5728;900&#x79D2;(15&#x5206;&#x949F;)&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x81F3;&#x5C11;&#x6709;1&#x4E2A;key&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5219;dump&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x3002;save 300 10 # &#x5728;300&#x79D2;(5&#x5206;&#x949F;)&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x81F3;&#x5C11;&#x6709;10&#x4E2A;key&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5219;dump&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x3002;save 60 10000 # &#x5728;60&#x79D2;(1&#x5206;&#x949F;)&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x81F3;&#x5C11;&#x6709;10000&#x4E2A;key&#x53D1;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x5219;dump&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x3002; AOF&#x6301;&#x4E45;&#x5316;&#x914D;&#x7F6E; &#x5728;Redis&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x5B58;&#x5728;&#x4E09;&#x79CD;&#x540C;&#x6B65;&#x65B9;&#x5F0F;&#xFF0C;&#x5B83;&#x4EEC;&#x5206;&#x522B;&#x662F;&#xFF1A; 123appendfsync always # &#x6BCF;&#x6B21;&#x6709;&#x6570;&#x636E;&#x4FEE;&#x6539;&#x53D1;&#x751F;&#x65F6;&#x90FD;&#x4F1A;&#x5199;&#x5165;AOF&#x6587;&#x4EF6;&#x3002;appendfsync everysec # &#x6BCF;&#x79D2;&#x949F;&#x540C;&#x6B65;&#x4E00;&#x6B21;&#xFF0C;&#x8BE5;&#x7B56;&#x7565;&#x4E3A;AOF&#x7684;&#x7F3A;&#x7701;&#x7B56;&#x7565;&#x3002;appendfsync no # &#x4ECE;&#x4E0D;&#x540C;&#x6B65;&#x3002;&#x9AD8;&#x6548;&#x4F46;&#x662F;&#x6570;&#x636E;&#x4E0D;&#x4F1A;&#x88AB;&#x6301;&#x4E45;&#x5316;&#x3002; &#x5982;&#x4F55;&#x9009;&#x62E9; &#x4E0D;&#x8981;&#x4EC5;&#x4EC5;&#x4F7F;&#x7528; RDB&#xFF0C;&#x56E0;&#x4E3A;&#x90A3;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x4F60;&#x4E22;&#x5931;&#x5F88;&#x591A;&#x6570;&#x636E; &#x4E5F;&#x4E0D;&#x8981;&#x4EC5;&#x4EC5;&#x4F7F;&#x7528; AOF&#xFF0C;&#x56E0;&#x4E3A;&#x90A3;&#x6837;&#x6709;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x7B2C;&#x4E00;&#xFF0C;&#x4F60;&#x901A;&#x8FC7; AOF &#x505A;&#x51B7;&#x5907;&#xFF0C;&#x6CA1;&#x6709; RDB &#x505A;&#x51B7;&#x5907;&#xFF0C;&#x6765;&#x7684;&#x6062;&#x590D;&#x901F;&#x5EA6;&#x66F4;&#x5FEB;; &#x7B2C;&#x4E8C;&#xFF0C;RDB &#x6BCF;&#x6B21;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x751F;&#x6210;&#x6570;&#x636E;&#x5FEB;&#x7167;&#xFF0C;&#x66F4;&#x52A0;&#x5065;&#x58EE;&#xFF0C;&#x53EF;&#x4EE5;&#x907F;&#x514D; AOF &#x8FD9;&#x79CD;&#x590D;&#x6742;&#x7684;&#x5907;&#x4EFD;&#x548C;&#x6062;&#x590D;&#x673A;&#x5236;&#x7684; bug &#x3002; Redis &#x652F;&#x6301;&#x540C;&#x65F6;&#x5F00;&#x542F;&#x5F00;&#x542F;&#x4E24;&#x79CD;&#x6301;&#x4E45;&#x5316;&#x65B9;&#x5F0F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7EFC;&#x5408;&#x4F7F;&#x7528; AOF &#x548C; RDB &#x4E24;&#x79CD;&#x6301;&#x4E45;&#x5316;&#x673A;&#x5236;&#xFF0C;&#x7528; AOF &#x6765;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x4E0D;&#x4E22;&#x5931;&#xFF0C;&#x4F5C;&#x4E3A;&#x6570;&#x636E;&#x6062;&#x590D;&#x7684;&#x7B2C;&#x4E00;&#x9009;&#x62E9;; &#x7528; RDB &#x6765;&#x505A;&#x4E0D;&#x540C;&#x7A0B;&#x5EA6;&#x7684;&#x51B7;&#x5907;&#xFF0C;&#x5728; AOF &#x6587;&#x4EF6;&#x90FD;&#x4E22;&#x5931;&#x6216;&#x635F;&#x574F;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; RDB &#x6765;&#x8FDB;&#x884C;&#x5FEB;&#x901F;&#x7684;&#x6570;&#x636E;&#x6062;&#x590D;&#x3002; &#x5982;&#x679C;&#x540C;&#x65F6;&#x4F7F;&#x7528; RDB &#x548C; AOF &#x4E24;&#x79CD;&#x6301;&#x4E45;&#x5316;&#x673A;&#x5236;&#xFF0C;&#x90A3;&#x4E48;&#x5728; Redis &#x91CD;&#x542F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x4F7F;&#x7528; AOF &#x6765;&#x91CD;&#x65B0;&#x6784;&#x5EFA;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x4E3A; AOF &#x4E2D;&#x7684;&#x6570;&#x636E;&#x66F4;&#x52A0;&#x5B8C;&#x6574;&#x3002; &#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C; &#x5982;&#x679C;&#x60F3;&#x8FBE;&#x5230;&#x8DB3;&#x4EE5;&#x5AB2;&#x7F8E; PostgreSQL &#x7684;&#x6570;&#x636E;&#x5B89;&#x5168;&#x6027;&#xFF0C; &#x4F60;&#x5E94;&#x8BE5;&#x540C;&#x65F6;&#x4F7F;&#x7528;&#x4E24;&#x79CD;&#x6301;&#x4E45;&#x5316;&#x529F;&#x80FD;&#x3002;&#x5982;&#x679C;&#x4F60;&#x975E;&#x5E38;&#x5173;&#x5FC3;&#x4F60;&#x7684;&#x6570;&#x636E;&#xFF0C; &#x4F46;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x627F;&#x53D7;&#x6570;&#x5206;&#x949F;&#x4EE5;&#x5185;&#x7684;&#x6570;&#x636E;&#x4E22;&#x5931;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x53EF;&#x4EE5;&#x53EA;&#x4F7F;&#x7528; RDB &#x6301;&#x4E45;&#x5316;&#x3002; &#x6709;&#x5F88;&#x591A;&#x7528;&#x6237;&#x90FD;&#x53EA;&#x4F7F;&#x7528; AOF &#x6301;&#x4E45;&#x5316;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x63A8;&#x8350;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;&#x56E0;&#x4E3A;&#x5B9A;&#x65F6;&#x751F;&#x6210; RDB &#x5FEB;&#x7167;&#xFF08;snapshot&#xFF09;&#x975E;&#x5E38;&#x4FBF;&#x4E8E;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x5E93;&#x5907;&#x4EFD;&#xFF0C; &#x5E76;&#x4E14; RDB &#x6062;&#x590D;&#x6570;&#x636E;&#x96C6;&#x7684;&#x901F;&#x5EA6;&#x4E5F;&#x8981;&#x6BD4;AOF&#x6062;&#x590D;&#x7684;&#x901F;&#x5EA6;&#x8981;&#x5FEB;&#xFF0C;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x4F7F;&#x7528; RDB &#x8FD8;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x4E4B;&#x524D;&#x63D0;&#x5230;&#x7684; AOF &#x7A0B;&#x5E8F;&#x7684; bug&#x3002; &#x5728; Redis4.0 &#x7248;&#x672C;&#x5F00;&#x59CB;&#xFF0C;&#x5141;&#x8BB8;&#x4F60;&#x4F7F;&#x7528; RDB-AOF &#x6DF7;&#x5408;&#x6301;&#x4E45;&#x5316;&#x65B9;&#x5F0F;&#xFF0C;&#x8BE6;&#x7EC6;&#x53EF;&#x89C1; &#x300A;Redis4.0 &#x4E4B; RDB-AOF &#x6DF7;&#x5408;&#x6301;&#x4E45;&#x5316;&#x300B; &#x3002;&#x4E5F;&#x56E0;&#x6B64;&#xFF0C;RDB &#x548C; AOF &#x540C;&#x65F6;&#x4F7F;&#x7528;&#xFF0C;&#x662F;&#x5E0C;&#x671B;&#x8FBE;&#x5230;&#x5B89;&#x5168;&#x7684;&#x6301;&#x4E45;&#x5316;&#x7684;&#x63A8;&#x8350;&#x65B9;&#x5F0F;&#x3002; &#x81EA;&#x52A8;&#x5316;&#x89E6;&#x53D1; RDB &#x6301;&#x4E45;&#x5316;&#x7684;&#x65B9;&#x5F0F; &#x6839;&#x636E; redis.conf &#x914D;&#x7F6E;&#x4E2D; SAVE m n &#x5B9A;&#x65F6;&#x89E6;&#x53D1;&#xFF08;&#x4F7F;&#x7528;&#x7684;BGSAVE&#xFF09; &#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x65F6;&#xFF0C;&#x4E3B;&#x8282;&#x70B9;&#x81EA;&#x52A8;&#x89E6;&#x53D1; &#x6267;&#x884C; Debug Reload &#x6267;&#x884C; Shutdown &#x4E14;&#x6CA1;&#x6709;&#x5F00;&#x542F; AOF &#x6301;&#x4E45;&#x5316; BGSAVE &#x539F;&#x7406;&#xFF1A; &#x91CD;&#x8981;&#x77E5;&#x8BC6;&#xFF1A; bgsave &#x505A;&#x955C;&#x50CF;&#x5168;&#x91CF;&#x6301;&#x4E45;&#x5316;&#xFF0C;AOF &#x505A;&#x589E;&#x91CF;&#x6301;&#x4E45;&#x5316;&#x3002;&#x56E0;&#x4E3A; bgsave &#x4F1A;&#x8017;&#x8D39;&#x8F83;&#x957F;&#x65F6;&#x95F4;&#xFF0C;&#x4E0D;&#x591F;&#x5B9E;&#x65F6;&#xFF0C;&#x5728;&#x505C;&#x673A;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5BFC;&#x81F4;&#x5927;&#x91CF;&#x4E22;&#x5931;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981; AOF &#x6765;&#x914D;&#x5408;&#x4F7F;&#x7528;&#x3002;&#x5728; Redis &#x5B9E;&#x4F8B;&#x91CD;&#x542F;&#x65F6;&#xFF0C;&#x4F1A;&#x4F7F;&#x7528; bgsave &#x6301;&#x4E45;&#x5316;&#x6587;&#x4EF6;&#x91CD;&#x65B0;&#x6784;&#x5EFA;&#x5185;&#x5B58;&#xFF0C;&#x518D;&#x4F7F;&#x7528; AOF &#x91CD;&#x653E;&#x8FD1;&#x671F;&#x7684;&#x64CD;&#x4F5C;&#x6307;&#x4EE4;&#x6765;&#x5B9E;&#x73B0;&#x5B8C;&#x6574;&#x6062;&#x590D;&#x91CD;&#x542F;&#x4E4B;&#x524D;&#x7684;&#x72B6;&#x6001;&#x3002; &#x5BF9;&#x65B9;&#x8FFD;&#x95EE;&#x90A3;&#x5982;&#x679C;&#x7A81;&#x7136;&#x673A;&#x5668;&#x6389;&#x7535;&#x4F1A;&#x600E;&#x6837;&#xFF1F;&#x53D6;&#x51B3;&#x4E8E; AOF &#x65E5;&#x5FD7; sync &#x5C5E;&#x6027;&#x7684;&#x914D;&#x7F6E;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x8981;&#x6C42;&#x6027;&#x80FD;&#xFF0C;&#x5728;&#x6BCF;&#x6761;&#x5199;&#x6307;&#x4EE4;&#x65F6;&#x90FD; sync &#x4E00;&#x4E0B;&#x78C1;&#x76D8;&#xFF0C;&#x5C31;&#x4E0D;&#x4F1A;&#x4E22;&#x5931;&#x6570;&#x636E;&#x3002;&#x4F46;&#x662F;&#x5728;&#x9AD8;&#x6027;&#x80FD;&#x7684;&#x8981;&#x6C42;&#x4E0B;&#x6BCF;&#x6B21;&#x90FD; sync &#x662F;&#x4E0D;&#x73B0;&#x5B9E;&#x7684;&#xFF0C;&#x4E00;&#x822C;&#x90FD;&#x4F7F;&#x7528;&#x5B9A;&#x65F6; sync &#xFF0C;&#x6BD4;&#x5982; 1 &#x79D2; 1 &#x6B21;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x6700;&#x591A;&#x5C31;&#x4F1A;&#x4E22;&#x5931; 1 &#x79D2;&#x7684;&#x6570;&#x636E;&#x3002; &#x5BF9;&#x65B9;&#x8FFD;&#x95EE; bgsave &#x7684;&#x539F;&#x7406;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x4F60;&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x8BCD;&#x6C47;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;fork &#x548C; cow &#x3002;fork &#x662F;&#x6307; Redis &#x901A;&#x8FC7;&#x521B;&#x5EFA;&#x5B50;&#x8FDB;&#x7A0B;&#x6765;&#x8FDB;&#x884C; bgsave &#x64CD;&#x4F5C;&#x3002;cow &#x6307;&#x7684;&#x662F; copy on write &#xFF0C;&#x5B50;&#x8FDB;&#x7A0B;&#x521B;&#x5EFA;&#x540E;&#xFF0C;&#x7236;&#x5B50;&#x8FDB;&#x7A0B;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x6BB5;&#xFF0C;&#x7236;&#x8FDB;&#x7A0B;&#x7EE7;&#x7EED;&#x63D0;&#x4F9B;&#x8BFB;&#x5199;&#x670D;&#x52A1;&#xFF0C;&#x5199;&#x810F;&#x7684;&#x9875;&#x9762;&#x6570;&#x636E;&#x4F1A;&#x9010;&#x6E10;&#x548C;&#x5B50;&#x8FDB;&#x7A0B;&#x5206;&#x79BB;&#x5F00;&#x6765;&#x3002; Redis &#x6709;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x201C;&#x8FC7;&#x671F;&#x201D;&#x7B56;&#x7565;&#xFF1F;Redis &#x7684;&#x8FC7;&#x671F;&#x7B56;&#x7565;&#xFF0C;&#x5C31;&#x662F;&#x6307;&#x5F53; Redis &#x4E2D;&#x7F13;&#x5B58;&#x7684; key &#x8FC7;&#x671F;&#x4E86;&#xFF0C;Redis &#x5982;&#x4F55;&#x5904;&#x7406;&#x3002; Redis &#x63D0;&#x4F9B;&#x4E86; 3 &#x79CD;&#x6570;&#x636E;&#x8FC7;&#x671F;&#x7B56;&#x7565;&#xFF1A; &#x88AB;&#x52A8;&#x5220;&#x9664;&#xFF1A;&#x5F53;&#x8BFB;/&#x5199;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x8FC7;&#x671F;&#x7684; key &#x65F6;&#xFF0C;&#x4F1A;&#x89E6;&#x53D1;&#x60F0;&#x6027;&#x5220;&#x9664;&#x7B56;&#x7565;&#xFF0C;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x6389;&#x8FD9;&#x4E2A;&#x8FC7;&#x671F; key &#x3002; &#x4E3B;&#x52A8;&#x5220;&#x9664;&#xFF1A;&#x7531;&#x4E8E;&#x60F0;&#x6027;&#x5220;&#x9664;&#x7B56;&#x7565;&#x65E0;&#x6CD5;&#x4FDD;&#x8BC1;&#x51B7;&#x6570;&#x636E;&#x88AB;&#x53CA;&#x65F6;&#x5220;&#x6389;&#xFF0C;&#x6240;&#x4EE5; Redis &#x4F1A;&#x5B9A;&#x671F;&#x4E3B;&#x52A8;&#x6DD8;&#x6C70;&#x4E00;&#x6279;&#x5DF2;&#x8FC7;&#x671F;&#x7684; key &#x3002; &#x4E3B;&#x52A8;&#x5220;&#x9664;&#xFF1A;&#x5F53;&#x524D;&#x5DF2;&#x7528;&#x5185;&#x5B58;&#x8D85;&#x8FC7; maxmemory &#x9650;&#x5B9A;&#x65F6;&#xFF0C;&#x89E6;&#x53D1;&#x4E3B;&#x52A8;&#x6E05;&#x7406;&#x7B56;&#x7565;&#xFF0C;&#x5373; &#x300C;&#x6570;&#x636E;&#x201C;&#x6DD8;&#x6C70;&#x201D;&#x7B56;&#x7565;&#x300D; &#x3002; &#x5728; Redis &#x4E2D;&#xFF0C;&#x540C;&#x65F6;&#x4F7F;&#x7528;&#x4E86;&#x4E0A;&#x8FF0; 3 &#x79CD;&#x7B56;&#x7565;&#xFF0C;&#x5373;&#x5B83;&#x4EEC;&#x975E;&#x4E92;&#x65A5;&#x7684;&#x3002; &#x60F3;&#x8981;&#x8FDB;&#x4E00;&#x6B65;&#x4E86;&#x89E3;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;&#x5173;&#x4E8E; Redis &#x6570;&#x636E;&#x8FC7;&#x671F;&#x7B56;&#x7565;&#x300B; &#x6587;&#x7AE0;&#x3002; Redis &#x6709;&#x54EA;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x201C;&#x6DD8;&#x6C70;&#x201D;&#x7B56;&#x7565;&#xFF1F;Redis &#x5185;&#x5B58;&#x6570;&#x636E;&#x96C6;&#x5927;&#x5C0F;&#x4E0A;&#x5347;&#x5230;&#x4E00;&#x5B9A;&#x5927;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x6DD8;&#x6C70;&#x7B56;&#x7565;&#x3002; Redis &#x63D0;&#x4F9B;&#x4E86; 6 &#x79CD;&#x6570;&#x636E;&#x6DD8;&#x6C70;&#x7B56;&#x7565;&#xFF1A; volatile-lru volatile-ttl volatile-random allkeys-lru allkeys-random no-enviction &#x5177;&#x4F53;&#x7684; &#x6BCF;&#x79CD;&#x6570;&#x636E;&#x6DD8;&#x6C70;&#x7B56;&#x7565;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x548C; &#x5982;&#x4F55;&#x9009;&#x62E9;&#x8BA8;&#x8BBA;&#x7B56;&#x7565;&#xFF0C;&#x53EF;&#x89C1; &#x300A;Redis&#x5B9E;&#x6218;&#xFF08;&#x4E8C;&#xFF09; &#x5185;&#x5B58;&#x6DD8;&#x6C70;&#x673A;&#x5236;&#x300B; &#x3002; Redis LRU &#x7B97;&#x6CD5; &#x53E6;&#x5916;&#xFF0C;Redis &#x7684; LRU &#x7B97;&#x6CD5;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x4E25;&#x683C;&#x7684; LRU &#x5B9E;&#x73B0;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740; Redis &#x4E0D;&#x80FD;&#x9009;&#x62E9;&#x6700;&#x4F73;&#x5019;&#x9009;&#x952E;&#x6765;&#x56DE;&#x6536;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6700;&#x4E45;&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x90A3;&#x4E9B;&#x952E;&#x3002;&#x76F8;&#x53CD;&#xFF0C;Redis &#x4F1A;&#x5C1D;&#x8BD5;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x8FD1;&#x4F3C;&#x7684; LRU &#x7B97;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x91C7;&#x6837;&#x4E00;&#x5C0F;&#x90E8;&#x5206;&#x952E;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x91C7;&#x6837;&#x952E;&#x4E2D;&#x56DE;&#x6536;&#x6700;&#x9002;&#x5408;(&#x62E5;&#x6709;&#x6700;&#x4E45;&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x65F6;&#x95F4;)&#x7684;&#x90A3;&#x4E2A;&#x3002; &#x5177;&#x4F53;&#x7684;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;&#x4F7F;&#x7528; Redis &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A; LRU &#x7F13;&#x5B58;&#x300B; &#x6587;&#x7AE0;&#x3002; MySQL &#x91CC;&#x6709; 2000w &#x6570;&#x636E;&#xFF0C;Redis &#x4E2D;&#x53EA;&#x5B58; 20w &#x7684;&#x6570;&#x636E;&#xFF0C;&#x5982;&#x4F55;&#x4FDD;&#x8BC1; Redis &#x4E2D;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x70ED;&#x70B9;&#x6570;&#x636E;&#xFF1F; &#x827F;&#x827F;&#xFF1A;&#x8FD9;&#x4E2A;&#x662F;&#x4ECE;&#x7F51;&#x7EDC;&#x4E0A;&#x627E;&#x5230;&#x7684;&#x4E00;&#x4E2A;&#x795E;&#x5947;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5E76;&#x4E14;&#x770B;&#x4E86;&#x7B54;&#x6848;&#x4E4B;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6709;&#x70B9;&#x83AB;&#x540D;&#x7684;&#x5BF9;&#x4E0D;&#x4E0A;&#x3002; &#x6240;&#x4EE5;&#xFF0C;&#x611F;&#x89C9;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x76EE;&#x7684;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x4FDD;&#x8BC1;&#x70ED;&#x70B9;&#x6570;&#x636E;&#x4E0D;&#x8981;&#x88AB;&#x6DD8;&#x6C70;&#x3002; &#x5728; &#x300C;Redis &#x6709;&#x54EA;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x201C;&#x6DD8;&#x6C70;&#x201D;&#x7B56;&#x7565;&#xFF1F;&#x300D; &#x95EE;&#x9898;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x770B;&#x5230;&#xFF0C;&#x201C;Redis &#x5185;&#x5B58;&#x6570;&#x636E;&#x96C6;&#x5927;&#x5C0F;&#x4E0A;&#x5347;&#x5230;&#x4E00;&#x5B9A;&#x5927;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x6DD8;&#x6C70;&#x7B56;&#x7565;&#x3002;&#x201D; &#x3002; &#x90A3;&#x4E48;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6B64;&#x65F6;&#x8981;&#x4FDD;&#x8BC1;&#x70ED;&#x70B9;&#x6570;&#x636E;&#x4E0D;&#x88AB;&#x6DD8;&#x6C70;&#xFF0C;&#x90A3;&#x4E48;&#x9700;&#x8981;&#x9009;&#x62E9; volatile-lru &#x6216; allkeys-lru &#x8FD9;&#x4E24;&#x4E2A;&#x57FA;&#x4E8E; LRU &#x7B97;&#x6CD5;&#x7684;&#x6DD8;&#x6C70;&#x7B56;&#x7565;&#x3002; &#x76F8;&#x6BD4;&#x8F83;&#x6765;&#x8BF4;&#xFF0C;&#x6700;&#x7EC8;&#x4F1A;&#x9009;&#x62E9; allkeys-lru &#x6DD8;&#x6C70;&#x7B56;&#x7565;&#x3002;&#x539F;&#x56E0;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7684;&#x5E94;&#x7528;&#x5BF9;&#x7F13;&#x5B58;&#x7684;&#x8BBF;&#x95EE;&#x7B26;&#x5408;&#x5E42;&#x5F8B;&#x5206;&#x5E03;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5B58;&#x5728;&#x76F8;&#x5BF9;&#x70ED;&#x70B9;&#x6570;&#x636E;&#xFF0C;&#x6216;&#x8005;&#x6211;&#x4EEC;&#x4E0D;&#x592A;&#x6E05;&#x695A;&#x6211;&#x4EEC;&#x5E94;&#x7528;&#x7684;&#x7F13;&#x5B58;&#x8BBF;&#x95EE;&#x5206;&#x5E03;&#x72B6;&#x51B5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x9009;&#x62E9; allkeys-lru &#x7B56;&#x7565;&#x3002; Redis &#x56DE;&#x6536;&#x8FDB;&#x7A0B;&#x5982;&#x4F55;&#x5DE5;&#x4F5C;&#x7684;&#xFF1F; &#x7406;&#x89E3;&#x56DE;&#x6536;&#x8FDB;&#x7A0B;&#x5982;&#x4F55;&#x5DE5;&#x4F5C;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#xFF1A; &#x4E00;&#x4E2A;&#x5BA2;&#x6237;&#x7AEF;&#x8FD0;&#x884C;&#x4E86;&#x65B0;&#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x6DFB;&#x52A0;&#x4E86;&#x65B0;&#x7684;&#x6570;&#x636E; Redis &#x68C0;&#x67E5;&#x5185;&#x5B58;&#x4F7F;&#x7528;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;&#x5927;&#x4E8E; maxmemory &#x7684;&#x9650;&#x5236;, &#x5219;&#x6839;&#x636E;&#x8BBE;&#x5B9A;&#x597D;&#x7684;&#x7B56;&#x7565;&#x8FDB;&#x884C;&#x56DE;&#x6536;&#x3002; Redis &#x6267;&#x884C;&#x65B0;&#x547D;&#x4EE4;&#x2026;&#x2026; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4E0D;&#x65AD;&#x5730;&#x7A7F;&#x8D8A;&#x5185;&#x5B58;&#x9650;&#x5236;&#x7684;&#x8FB9;&#x754C;&#xFF0C;&#x901A;&#x8FC7;&#x4E0D;&#x65AD;&#x8FBE;&#x5230;&#x8FB9;&#x754C;&#x7136;&#x540E;&#x4E0D;&#x65AD;&#x5730;&#x56DE;&#x6536;&#x56DE;&#x5230;&#x8FB9;&#x754C;&#x4EE5;&#x4E0B;&#xFF08;&#x8DCC;&#x5B95;&#x8D77;&#x4F0F;&#xFF09;&#x3002; &#x5982;&#x679C;&#x6709;&#x5927;&#x91CF;&#x7684; key &#x9700;&#x8981;&#x8BBE;&#x7F6E;&#x540C;&#x4E00;&#x65F6;&#x95F4;&#x8FC7;&#x671F;&#xFF0C;&#x4E00;&#x822C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x4EC0;&#x4E48;&#xFF1F;&#x5982;&#x679C;&#x5927;&#x91CF;&#x7684; key &#x8FC7;&#x671F;&#x65F6;&#x95F4;&#x8BBE;&#x7F6E;&#x7684;&#x8FC7;&#x4E8E;&#x96C6;&#x4E2D;&#xFF0C;&#x5230;&#x8FC7;&#x671F;&#x7684;&#x90A3;&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#xFF0C;Redis&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x77ED;&#x6682;&#x7684;&#x5361;&#x987F;&#x73B0;&#x8C61;&#x3002; &#x4E00;&#x822C;&#x9700;&#x8981;&#x5728;&#x65F6;&#x95F4;&#x4E0A;&#x52A0;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x503C;&#xFF0C;&#x4F7F;&#x5F97;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#x5206;&#x6563;&#x4E00;&#x4E9B;&#x3002; Redis &#x6709;&#x54EA;&#x4E9B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1F;&#x5982;&#x679C;&#x4F60;&#x662F; Redis &#x666E;&#x901A;&#x73A9;&#x5BB6;&#xFF0C;&#x53EF;&#x80FD;&#x4F60;&#x7684;&#x56DE;&#x7B54;&#x662F;&#x5982;&#x4E0B;&#x4E94;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A; &#x5B57;&#x7B26;&#x4E32; String &#x5B57;&#x5178;Hash &#x5217;&#x8868;List &#x96C6;&#x5408;Set &#x6709;&#x5E8F;&#x96C6;&#x5408; SortedSet &#x5982;&#x679C;&#x4F60;&#x662F; Redis &#x4E2D;&#x7EA7;&#x73A9;&#x5BB6;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x52A0;&#x4E0A;&#x4E0B;&#x9762;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A; HyperLogLog Geo Pub / Sub &#x5982;&#x679C;&#x4F60;&#x662F; Redis &#x9AD8;&#x7AEF;&#x73A9;&#x5BB6;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x73A9;&#x8FC7; Redis Module &#xFF0C;&#x53EF;&#x4EE5;&#x518D;&#x52A0;&#x4E0A;&#x4E0B;&#x9762;&#x51E0;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A; BloomFilter RedisSearch Redis-ML JSON &#x53E6;&#x5916;&#xFF0C;&#x5728; Redis 5.0 &#x589E;&#x52A0;&#x4E86; Stream &#x529F;&#x80FD;&#xFF0C;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5F3A;&#x5927;&#x7684;&#x652F;&#x6301;&#x591A;&#x64AD;&#x7684;&#x53EF;&#x6301;&#x4E45;&#x5316;&#x7684;&#x6D88;&#x606F;&#x961F;&#x5217;&#xFF0C;&#x63D0;&#x4F9B;&#x7C7B;&#x4F3C; Kafka &#x7684;&#x529F;&#x80FD;&#x3002;&#x1F608; &#x9ED8;&#x9ED8;&#x8DDF;&#x9762;&#x8BD5;&#x5B98;&#x5728;&#x88C5;&#x4E00;&#x6CE2;&#x3002; &#x804A;&#x804A; Redis &#x4F7F;&#x7528;&#x573A;&#x666F;Redis &#x53EF;&#x7528;&#x7684;&#x573A;&#x666F;&#x975E;&#x5E38;&#x4E4B;&#x591A;&#xFF1A; &#x6570;&#x636E;&#x7F13;&#x5B58; &#x4F1A;&#x8BDD;&#x7F13;&#x5B58; &#x65F6;&#x6548;&#x6027;&#x6570;&#x636E; &#x8BBF;&#x95EE;&#x9891;&#x7387; &#x8BA1;&#x6570;&#x5668; &#x793E;&#x4EA4;&#x5217;&#x8868; &#x8BB0;&#x5F55;&#x7528;&#x6237;&#x5224;&#x5B9A;&#x4FE1;&#x606F; &#x4EA4;&#x96C6;&#x3001;&#x5E76;&#x96C6;&#x548C;&#x5DEE;&#x96C6; &#x70ED;&#x95E8;&#x5217;&#x8868;&#x4E0E;&#x6392;&#x884C;&#x699C; &#x6700;&#x65B0;&#x52A8;&#x6001; &#x6D88;&#x606F;&#x961F;&#x5217; &#x5206;&#x5E03;&#x5F0F;&#x9501; &#x8BE6;&#x7EC6;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x5982;&#x4E0B;&#x6587;&#x7AE0;&#xFF1A; &#x300A;&#x804A;&#x804A; Redis &#x4F7F;&#x7528;&#x573A;&#x666F;&#x300B; &#x300A;Redis &#x5E94;&#x7528;&#x573A;&#x666F;&#x53CA;&#x5B9E;&#x4F8B;&#x300B; &#x300A;Redis &#x5E38;&#x89C1;&#x7684;&#x5E94;&#x7528;&#x573A;&#x666F;&#x89E3;&#x6790;&#x300B; &#x300A;Redis &#x548C; Memcached &#x5404;&#x6709;&#x4EC0;&#x4E48;&#x4F18;&#x7F3A;&#x70B9;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x5E94;&#x7528;&#x573A;&#x666F;&#x662F;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#xFF1F;&#x300B; &#x8BF7;&#x7528; Redis &#x548C;&#x4EFB;&#x610F;&#x8BED;&#x8A00;&#x5B9E;&#x73B0;&#x4E00;&#x6BB5;&#x6076;&#x610F;&#x767B;&#x5F55;&#x4FDD;&#x62A4;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x9650;&#x5236; 1 &#x5C0F;&#x65F6;&#x5185;&#x6BCF;&#x7528;&#x6237; Id &#x6700;&#x591A;&#x53EA;&#x80FD;&#x767B;&#x5F55; 5 &#x6B21;&#x3002; &#x7528;&#x5217;&#x8868;&#x5B9E;&#x73B0;&#xFF0C;&#x5217;&#x8868;&#x4E2D;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x4EE3;&#x8868;&#x767B;&#x9646;&#x65F6;&#x95F4;&#xFF0C;&#x53EA;&#x8981;&#x6700;&#x540E;&#x7684;&#x7B2C; 5 &#x6B21;&#x767B;&#x9646;&#x65F6;&#x95F4;&#x548C;&#x73B0;&#x5728;&#x65F6;&#x95F4;&#x5DEE;&#x4E0D;&#x8D85;&#x8FC7; 1 &#x5C0F;&#x65F6;&#x5C31;&#x7981;&#x6B62;&#x767B;&#x9646;&#x3002; &#x5177;&#x4F53;&#x7684;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;&#x4E00;&#x9053; Redis &#x9762;&#x8BD5;&#x9898;&#x300B; &#x3002; Redis &#x652F;&#x6301;&#x7684; Java &#x5BA2;&#x6237;&#x7AEF;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#xFF1F;&#x4F7F;&#x7528;&#x6BD4;&#x8F83;&#x5E7F;&#x6CDB;&#x7684;&#x6709;&#x4E09;&#x4E2A; Java &#x5BA2;&#x6237;&#x7AEF;&#xFF1A; Redisson Redisson &#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x9AD8;&#x7EA7;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x534F;&#x8C03; Redis &#x5BA2;&#x670D;&#x7AEF;&#xFF0C;&#x80FD;&#x5E2E;&#x52A9;&#x7528;&#x6237;&#x5728;&#x5206;&#x5E03;&#x5F0F;&#x73AF;&#x5883;&#x4E2D;&#x8F7B;&#x677E;&#x5B9E;&#x73B0;&#x4E00;&#x4E9B; Java &#x7684;&#x5BF9;&#x8C61; (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)&#x3002; Jedis Jedis &#x662F; Redis &#x7684; Java &#x5B9E;&#x73B0;&#x7684;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x5176; API &#x63D0;&#x4F9B;&#x4E86;&#x6BD4;&#x8F83;&#x5168;&#x9762;&#x7684; Redis &#x547D;&#x4EE4;&#x7684;&#x652F;&#x6301;&#x3002; Redisson &#x5B9E;&#x73B0;&#x4E86;&#x5206;&#x5E03;&#x5F0F;&#x548C;&#x53EF;&#x6269;&#x5C55;&#x7684; Java &#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x548C; Jedis &#x76F8;&#x6BD4;&#xFF0C;Jedis &#x529F;&#x80FD;&#x8F83;&#x4E3A;&#x7B80;&#x5355;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x5B57;&#x7B26;&#x4E32;&#x64CD;&#x4F5C;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x6392;&#x5E8F;&#x3001;&#x4E8B;&#x52A1;&#x3001;&#x7BA1;&#x9053;&#x3001;&#x5206;&#x533A;&#x7B49; Redis &#x7279;&#x6027;&#x3002; Redisson &#x7684;&#x5B97;&#x65E8;&#x662F;&#x4FC3;&#x8FDB;&#x4F7F;&#x7528;&#x8005;&#x5BF9; Redis &#x7684;&#x5173;&#x6CE8;&#x5206;&#x79BB;&#xFF0C;&#x4ECE;&#x800C;&#x8BA9;&#x4F7F;&#x7528;&#x8005;&#x80FD;&#x591F;&#x5C06;&#x7CBE;&#x529B;&#x66F4;&#x96C6;&#x4E2D;&#x5730;&#x653E;&#x5728;&#x5904;&#x7406;&#x4E1A;&#x52A1;&#x903B;&#x8F91;&#x4E0A;&#x3002; Lettuce Lettuce &#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4F38;&#x7F29;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684; Redis &#x5BA2;&#x6237;&#x7AEF;&#x3002;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x5171;&#x4EAB;&#x540C;&#x4E00;&#x4E2A; RedisConnection &#x3002;&#x5B83;&#x5229;&#x7528;&#x4F18;&#x79C0; Netty NIO &#x6846;&#x67B6;&#x6765;&#x9AD8;&#x6548;&#x5730;&#x7BA1;&#x7406;&#x591A;&#x4E2A;&#x8FDE;&#x63A5;&#x3002; Redis &#x5B98;&#x65B9;&#x63A8;&#x8350;&#x4F7F;&#x7528; Redisson &#x6216; Jedis &#x3002; Spring Boot 2.x &#x5185;&#x7F6E;&#x4F7F;&#x7528; Lettuce &#x3002; &#x5982;&#x4F55;&#x4F7F;&#x7528; Redis &#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#x9501;&#xFF1F; &#x65B9;&#x6848;&#x4E00;&#xFF1A;set &#x6307;&#x4EE4; &#x5148;&#x62FF; setnx &#x6765;&#x4E89;&#x62A2;&#x9501;&#xFF0C;&#x62A2;&#x5230;&#x4E4B;&#x540E;&#xFF0C;&#x518D;&#x7528; expire &#x7ED9;&#x9501;&#x52A0;&#x4E00;&#x4E2A;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#x9632;&#x6B62;&#x9501;&#x5FD8;&#x8BB0;&#x4E86;&#x91CA;&#x653E;&#x3002; &#x8FD9;&#x65F6;&#x5019;&#x5BF9;&#x65B9;&#x4F1A;&#x544A;&#x8BC9;&#x4F60;&#x8BF4;&#x4F60;&#x56DE;&#x7B54;&#x5F97;&#x4E0D;&#x9519;&#xFF0C;&#x7136;&#x540E;&#x63A5;&#x7740;&#x95EE;&#x5982;&#x679C;&#x5728; setnx &#x4E4B;&#x540E;&#x6267;&#x884C; expire &#x4E4B;&#x524D;&#x8FDB;&#x7A0B;&#x610F;&#x5916; crash &#x6216;&#x8005;&#x8981;&#x91CD;&#x542F;&#x7EF4;&#x62A4;&#x4E86;&#xFF0C;&#x90A3;&#x4F1A;&#x600E;&#x4E48;&#x6837;&#xFF1F; &#x8FD9;&#x65F6;&#x5019;&#x4F60;&#x8981;&#x7ED9;&#x4E88;&#x60CA;&#x8BB6;&#x7684;&#x53CD;&#x9988;&#xFF1A;&#x5509;&#xFF0C;&#x662F;&#x5594;&#xFF0C;&#x8FD9;&#x4E2A;&#x9501;&#x5C31;&#x6C38;&#x8FDC;&#x5F97;&#x4E0D;&#x5230;&#x91CA;&#x653E;&#x4E86;&#x3002;&#x7D27;&#x63A5;&#x7740;&#x4F60;&#x9700;&#x8981;&#x6293;&#x4E00;&#x6293;&#x81EA;&#x5DF1;&#x5F97;&#x8111;&#x888B;&#xFF0C;&#x6545;&#x4F5C;&#x601D;&#x8003;&#x7247;&#x523B;&#xFF0C;&#x597D;&#x50CF;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x4F60;&#x4E3B;&#x52A8;&#x601D;&#x8003;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x56DE;&#x7B54;&#xFF1A;&#x6211;&#x8BB0;&#x5F97; set &#x6307;&#x4EE4;&#x6709;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x662F;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x628A; setnx &#x548C; expire &#x5408;&#x6210;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#x6765;&#x7528;&#x7684;&#xFF01;&#x5BF9;&#x65B9;&#x8FD9;&#x65F6;&#x4F1A;&#x663E;&#x9732;&#x7B11;&#x5BB9;&#xFF0C;&#x5FC3;&#x91CC;&#x5F00;&#x59CB;&#x9ED8;&#x5FF5;&#xFF1A;&#x6441;&#xFF0C;&#x8FD9;&#x5C0F;&#x5B50;&#x8FD8;&#x4E0D;&#x9519;&#x3002; &#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; set &#x6307;&#x4EE4;&#xFF0C;&#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#x9501;&#x3002;&#x6307;&#x4EE4;&#x5982;&#x4E0B;&#xFF1A; 1SET key value [EX seconds] [PX milliseconds] [NX|XX] &#x53EF;&#x4EE5;&#x4F7F;&#x7528; SET key value EX seconds NX &#x547D;&#x4EE4;&#xFF0C;&#x5C1D;&#x8BD5;&#x83B7;&#x5F97;&#x9501;&#x3002; &#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003; &#x300A;Redis &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x7684;&#x6B63;&#x786E;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF08;Java&#x7248;&#xFF09;&#x300B; &#x6587;&#x7AE0;&#x3002; &#x65B9;&#x6848;&#x4E8C;&#xFF1A;redlock set &#x6307;&#x4EE4;&#x7684;&#x65B9;&#x6848;&#xFF0C;&#x9002;&#x5408;&#x7528;&#x4E8E;&#x5728;&#x5355;&#x673A; Redis &#x8282;&#x70B9;&#x7684;&#x573A;&#x666F;&#x4E0B;&#xFF0C;&#x5728;&#x591A; Redis &#x8282;&#x70B9;&#x7684;&#x573A;&#x666F;&#x4E0B;&#xFF0C;&#x4F1A;&#x5B58;&#x5728;&#x5206;&#x5E03;&#x5F0F;&#x9501;&#x4E22;&#x5931;&#x7684;&#x95EE;&#x9898;&#x3002;&#x6240;&#x4EE5;&#xFF0C;Redis &#x4F5C;&#x8005; Antirez &#x57FA;&#x4E8E;&#x5206;&#x5E03;&#x5F0F;&#x73AF;&#x5883;&#x4E0B;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x66F4;&#x9AD8;&#x7EA7;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x9501;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A;Redlock &#x3002; &#x5177;&#x4F53;&#x7684;&#x65B9;&#x6848;&#xFF0C;&#x80D6;&#x53CB;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x8001;&#x53CB;&#x98DE;&#x54E5;&#x7684;&#x4E24;&#x7BC7;&#x535A;&#x5BA2;&#xFF1A; &#x300A;Redlock&#xFF1A;Redis&#x5206;&#x5E03;&#x5F0F;&#x9501;&#x6700;&#x725B;&#x903C;&#x7684;&#x5B9E;&#x73B0;&#x300B; &#x300A;Redisson &#x5B9E;&#x73B0; Redis &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x7684; N &#x79CD;&#x59FF;&#x52BF;&#x300B; &#x5BF9;&#x6BD4; Zookeeper &#x5206;&#x5E03;&#x5F0F;&#x9501; &#x4ECE;&#x53EF;&#x9760;&#x6027;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;Zookeeper &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x597D;&#x4E8E; Redis &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x3002; &#x4ECE;&#x6027;&#x80FD;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;Redis &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x597D;&#x4E8E; Zookeeper &#x5206;&#x5E03;&#x5F0F;&#x9501;&#x3002; &#x6240;&#x4EE5;&#xFF0C;&#x6CA1;&#x6709;&#x7EDD;&#x5BF9;&#x7684;&#x597D;&#x574F;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x4E1A;&#x52A1;&#x6765;&#x5177;&#x4F53;&#x9009;&#x62E9;&#x3002; &#x5982;&#x4F55;&#x4F7F;&#x7528; Redis &#x5B9E;&#x73B0;&#x6D88;&#x606F;&#x961F;&#x5217;&#xFF1F;&#x4E00;&#x822C;&#x4F7F;&#x7528; list &#x7ED3;&#x6784;&#x4F5C;&#x4E3A;&#x961F;&#x5217;&#xFF0C;rpush &#x751F;&#x4EA7;&#x6D88;&#x606F;&#xFF0C;lpop &#x6D88;&#x8D39;&#x6D88;&#x606F;&#x3002;&#x5F53; lpop &#x6CA1;&#x6709;&#x6D88;&#x606F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x9002;&#x5F53; sleep &#x4E00;&#x4F1A;&#x518D;&#x91CD;&#x8BD5;&#x3002; &#x5982;&#x679C;&#x5BF9;&#x65B9;&#x8FFD;&#x95EE;&#x53EF;&#x4E0D;&#x53EF;&#x4EE5;&#x4E0D;&#x7528; sleep &#x5462;&#xFF1F;list &#x8FD8;&#x6709;&#x4E2A;&#x6307;&#x4EE4;&#x53EB; blpop &#xFF0C;&#x5728;&#x6CA1;&#x6709;&#x6D88;&#x606F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5B83;&#x4F1A;&#x963B;&#x585E;&#x4F4F;&#x76F4;&#x5230;&#x6D88;&#x606F;&#x5230;&#x6765;&#x3002; &#x5982;&#x679C;&#x5BF9;&#x65B9;&#x8FFD;&#x95EE;&#x80FD;&#x4E0D;&#x80FD;&#x751F;&#x4EA7;&#x4E00;&#x6B21;&#x6D88;&#x8D39;&#x591A;&#x6B21;&#x5462;&#xFF1F;&#x4F7F;&#x7528; pub / sub &#x4E3B;&#x9898;&#x8BA2;&#x9605;&#x8005;&#x6A21;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0; 1:N &#x7684;&#x6D88;&#x606F;&#x961F;&#x5217;&#x3002; &#x5982;&#x679C;&#x5BF9;&#x65B9;&#x8FFD;&#x95EE; pub / sub &#x6709;&#x4EC0;&#x4E48;&#x7F3A;&#x70B9;&#xFF1F;&#x5728;&#x6D88;&#x8D39;&#x8005;&#x4E0B;&#x7EBF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x751F;&#x4EA7;&#x7684;&#x6D88;&#x606F;&#x4F1A;&#x4E22;&#x5931;&#xFF0C;&#x5F97;&#x4F7F;&#x7528;&#x4E13;&#x4E1A;&#x7684;&#x6D88;&#x606F;&#x961F;&#x5217;&#x5982; rabbitmq &#x7B49;&#x3002; &#x5982;&#x679C;&#x5BF9;&#x65B9;&#x8FFD;&#x95EE; redis &#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x5EF6;&#x65F6;&#x961F;&#x5217;&#xFF1F;&#x6211;&#x4F30;&#x8BA1;&#x73B0;&#x5728;&#x4F60;&#x5F88;&#x60F3;&#x628A;&#x9762;&#x8BD5;&#x5B98;&#x4E00;&#x68D2;&#x6253;&#x6B7B;&#x5982;&#x679C;&#x4F60;&#x624B;&#x4E0A;&#x6709;&#x4E00;&#x6839;&#x68D2;&#x7403;&#x68CD;&#x7684;&#x8BDD;&#xFF0C;&#x600E;&#x4E48;&#x95EE;&#x7684;&#x8FD9;&#x4E48;&#x8BE6;&#x7EC6;&#x3002;&#x4F46;&#x662F;&#x4F60;&#x5F88;&#x514B;&#x5236;&#xFF0C;&#x7136;&#x540E;&#x795E;&#x6001;&#x81EA;&#x82E5;&#x7684;&#x56DE;&#x7B54;&#x9053;&#xFF1A;&#x4F7F;&#x7528; sortedset &#xFF0C;&#x62FF;&#x65F6;&#x95F4;&#x6233;&#x4F5C;&#x4E3A; score &#xFF0C;&#x6D88;&#x606F;&#x5185;&#x5BB9;&#x4F5C;&#x4E3A; key &#x8C03;&#x7528; zadd &#x6765;&#x751F;&#x4EA7;&#x6D88;&#x606F;&#xFF0C;&#x6D88;&#x8D39;&#x8005;&#x7528; zrangebyscore &#x6307;&#x4EE4;&#x83B7;&#x53D6; N &#x79D2;&#x4E4B;&#x524D;&#x7684;&#x6570;&#x636E;&#x8F6E;&#x8BE2;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x6697;&#x5730;&#x91CC;&#x5DF2;&#x7ECF;&#x5BF9;&#x4F60;&#x7AD6;&#x8D77;&#x4E86;&#x5927;&#x62C7;&#x6307;&#x3002;&#x4F46;&#x662F;&#x4ED6;&#x4E0D;&#x77E5;&#x9053;&#x7684;&#x662F;&#x6B64;&#x523B;&#x4F60;&#x5374;&#x7AD6;&#x8D77;&#x4E86;&#x4E2D;&#x6307;&#xFF0C;&#x5728;&#x6905;&#x5B50;&#x80CC;&#x540E;&#x3002; &#x5F53;&#x7136;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A; Redis &#x771F;&#x7684;&#x771F;&#x7684;&#x771F;&#x7684;&#x4E0D;&#x63A8;&#x8350;&#x4F5C;&#x4E3A;&#x6D88;&#x606F;&#x961F;&#x5217;&#x4F7F;&#x7528;&#xFF0C;&#x5B83;&#x6700;&#x591A;&#x53EA;&#x662F;&#x6D88;&#x606F;&#x961F;&#x5217;&#x7684;&#x5B58;&#x50A8;&#x5C42;&#xFF0C;&#x4E0A;&#x5C42;&#x7684;&#x903B;&#x8F91;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x505A;&#x5927;&#x91CF;&#x7684;&#x5C01;&#x88C5;&#x548C;&#x652F;&#x6301;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x5728; Redis 5.0 &#x589E;&#x52A0;&#x4E86; Stream &#x529F;&#x80FD;&#xFF0C;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5F3A;&#x5927;&#x7684;&#x652F;&#x6301;&#x591A;&#x64AD;&#x7684;&#x53EF;&#x6301;&#x4E45;&#x5316;&#x7684;&#x6D88;&#x606F;&#x961F;&#x5217;&#xFF0C;&#x63D0;&#x4F9B;&#x7C7B;&#x4F3C; Kafka &#x7684;&#x529F;&#x80FD;&#x3002; &#x4EC0;&#x4E48;&#x662F; Redis Pipelining &#xFF1F;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;/&#x54CD;&#x5E94;&#x670D;&#x52A1;&#x5668;&#x80FD;&#x5B9E;&#x73B0;&#x5904;&#x7406;&#x65B0;&#x7684;&#x8BF7;&#x6C42;&#x5373;&#x4F7F;&#x65E7;&#x7684;&#x8BF7;&#x6C42;&#x8FD8;&#x672A;&#x88AB;&#x54CD;&#x5E94;&#x3002;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x5C06;&#x591A;&#x4E2A;&#x547D;&#x4EE4;&#x53D1;&#x9001;&#x5230;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x7B49;&#x5F85;&#x56DE;&#x590D;&#xFF0C;&#x6700;&#x540E;&#x5728;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#x4E2D;&#x8BFB;&#x53D6;&#x8BE5;&#x7B54;&#x590D;&#x3002; &#x8FD9;&#x5C31;&#x662F;&#x7BA1;&#x9053;&#xFF08;pipelining&#xFF09;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x51E0;&#x5341;&#x5E74;&#x6765;&#x5E7F;&#x6CDB;&#x4F7F;&#x7528;&#x7684;&#x6280;&#x672F;&#x3002;&#x4F8B;&#x5982;&#x8BB8;&#x591A; POP3 &#x534F;&#x8BAE;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#x652F;&#x6301;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#xFF0C;&#x5927;&#x5927;&#x52A0;&#x5FEB;&#x4E86;&#x4ECE;&#x670D;&#x52A1;&#x5668;&#x4E0B;&#x8F7D;&#x65B0;&#x90AE;&#x4EF6;&#x7684;&#x8FC7;&#x7A0B;&#x3002; Redis &#x5F88;&#x65E9;&#x5C31;&#x652F;&#x6301;&#x7BA1;&#x9053;&#xFF08;pipelining&#xFF09;&#x6280;&#x672F;&#xFF0C;&#x56E0;&#x6B64;&#x65E0;&#x8BBA;&#x4F60;&#x8FD0;&#x884C;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x7248;&#x672C;&#xFF0C;&#x4F60;&#x90FD;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7BA1;&#x9053;&#xFF08;pipelining&#xFF09;&#x64CD;&#x4F5C; Redis&#x3002; Redis &#x5982;&#x4F55;&#x505A;&#x5927;&#x91CF;&#x6570;&#x636E;&#x63D2;&#x5165;&#xFF1F; Redis2.6 &#x5F00;&#x59CB;&#xFF0C;Redis-cli &#x652F;&#x6301;&#x4E00;&#x79CD;&#x65B0;&#x7684;&#x88AB;&#x79F0;&#x4E4B;&#x4E3A; pipe mode &#x7684;&#x65B0;&#x6A21;&#x5F0F;&#x7528;&#x4E8E;&#x6267;&#x884C;&#x5927;&#x91CF;&#x6570;&#x636E;&#x63D2;&#x5165;&#x5DE5;&#x4F5C;&#x3002; &#x5177;&#x4F53;&#x53EF;&#x89C1; &#x300A;Redis &#x5927;&#x91CF;&#x6570;&#x636E;&#x63D2;&#x5165;&#x300B; &#x6587;&#x7AE0;&#x3002; &#x4EC0;&#x4E48;&#x662F; Redis &#x4E8B;&#x52A1;&#xFF1F;&#x548C;&#x4F17;&#x591A;&#x5176;&#x5B83;&#x6570;&#x636E;&#x5E93;&#x4E00;&#x6837;&#xFF0C;Redis &#x4F5C;&#x4E3A; NoSQL &#x6570;&#x636E;&#x5E93;&#x4E5F;&#x540C;&#x6837;&#x63D0;&#x4F9B;&#x4E86;&#x4E8B;&#x52A1;&#x673A;&#x5236;&#x3002;&#x5728;Redis&#x4E2D;&#xFF0C;MULTI / EXEC / DISCARD / WATCH &#x8FD9;&#x56DB;&#x4E2A;&#x547D;&#x4EE4;&#x662F;&#x6211;&#x4EEC;&#x5B9E;&#x73B0;&#x4E8B;&#x52A1;&#x7684;&#x57FA;&#x77F3;&#x3002;&#x76F8;&#x4FE1;&#x5BF9;&#x6709;&#x5173;&#x7CFB;&#x578B;&#x6570;&#x636E;&#x5E93;&#x5F00;&#x53D1;&#x7ECF;&#x9A8C;&#x7684;&#x5F00;&#x53D1;&#x8005;&#x800C;&#x8A00;&#x8FD9;&#x4E00;&#x6982;&#x5FF5;&#x5E76;&#x4E0D;&#x964C;&#x751F;&#xFF0C;&#x5373;&#x4FBF;&#x5982;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x662F;&#x4F1A;&#x7B80;&#x8981;&#x7684;&#x5217;&#x51FA; Redis &#x4E2D;&#x4E8B;&#x52A1;&#x7684;&#x5B9E;&#x73B0;&#x7279;&#x5F81;&#xFF1A; 1&#x3001;&#x5728;&#x4E8B;&#x52A1;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x547D;&#x4EE4;&#x90FD;&#x5C06;&#x4F1A;&#x88AB;&#x4E32;&#x884C;&#x5316;&#x7684;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x4E8B;&#x52A1;&#x6267;&#x884C;&#x671F;&#x95F4;&#xFF0C;Redis &#x4E0D;&#x4F1A;&#x518D;&#x4E3A;&#x5176;&#x5B83;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8BF7;&#x6C42;&#x63D0;&#x4F9B;&#x4EFB;&#x4F55;&#x670D;&#x52A1;&#xFF0C;&#x4ECE;&#x800C;&#x4FDD;&#x8BC1;&#x4E86;&#x4E8B;&#x7269;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x547D;&#x4EE4;&#x88AB;&#x539F;&#x5B50;&#x7684;&#x6267;&#x884C;&#x3002; 2&#x3001;&#x548C;&#x5173;&#x7CFB;&#x578B;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684;&#x4E8B;&#x52A1;&#x76F8;&#x6BD4;&#xFF0C;&#x5728; Redis &#x4E8B;&#x52A1;&#x4E2D;&#x5982;&#x679C;&#x6709;&#x67D0;&#x4E00;&#x6761;&#x547D;&#x4EE4;&#x6267;&#x884C;&#x5931;&#x8D25;&#xFF0C;&#x5176;&#x540E;&#x7684;&#x547D;&#x4EE4;&#x4ECD;&#x7136;&#x4F1A;&#x88AB;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x3002; 3&#x3001;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; MULTI &#x547D;&#x4EE4;&#x5F00;&#x542F;&#x4E00;&#x4E2A;&#x4E8B;&#x52A1;&#xFF0C;&#x6709;&#x5173;&#x7CFB;&#x578B;&#x6570;&#x636E;&#x5E93;&#x5F00;&#x53D1;&#x7ECF;&#x9A8C;&#x7684;&#x4EBA;&#x53EF;&#x4EE5;&#x5C06;&#x5176;&#x7406;&#x89E3;&#x4E3A; &quot;BEGIN TRANSACTION&quot; &#x8BED;&#x53E5;&#x3002;&#x5728;&#x8BE5;&#x8BED;&#x53E5;&#x4E4B;&#x540E;&#x6267;&#x884C;&#x7684;&#x547D;&#x4EE4;&#x90FD;&#xFF0C;&#x5C06;&#x88AB;&#x89C6;&#x4E3A;&#x4E8B;&#x52A1;&#x4E4B;&#x5185;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6700;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6267;&#x884C; EXEC / DISCARD &#x547D;&#x4EE4;&#x6765;&#x63D0;&#x4EA4; / &#x56DE;&#x6EDA;&#x8BE5;&#x4E8B;&#x52A1;&#x5185;&#x7684;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x4E24;&#x4E2A; Redis &#x547D;&#x4EE4;&#xFF0C;&#x53EF;&#x88AB;&#x89C6;&#x4E3A;&#x7B49;&#x540C;&#x4E8E;&#x5173;&#x7CFB;&#x578B;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684; COMMIT / ROLLBACK &#x8BED;&#x53E5;&#x3002; 4&#x3001;&#x5728;&#x4E8B;&#x52A1;&#x5F00;&#x542F;&#x4E4B;&#x524D;&#xFF0C;&#x5982;&#x679C;&#x5BA2;&#x6237;&#x7AEF;&#x4E0E;&#x670D;&#x52A1;&#x5668;&#x4E4B;&#x95F4;&#x51FA;&#x73B0;&#x901A;&#x8BAF;&#x6545;&#x969C;&#x5E76;&#x5BFC;&#x81F4;&#x7F51;&#x7EDC;&#x65AD;&#x5F00;&#xFF0C;&#x5176;&#x540E;&#x6240;&#x6709;&#x5F85;&#x6267;&#x884C;&#x7684;&#x8BED;&#x53E5;&#x90FD;&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x670D;&#x52A1;&#x5668;&#x6267;&#x884C;&#x3002;&#x7136;&#x800C;&#x5982;&#x679C;&#x7F51;&#x7EDC;&#x4E2D;&#x65AD;&#x4E8B;&#x4EF6;&#x662F;&#x53D1;&#x751F;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x6267;&#x884C; EXEC &#x547D;&#x4EE4;&#x4E4B;&#x540E;&#xFF0C;&#x90A3;&#x4E48;&#x8BE5;&#x4E8B;&#x52A1;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x547D;&#x4EE4;&#x90FD;&#x4F1A;&#x88AB;&#x670D;&#x52A1;&#x5668;&#x6267;&#x884C;&#x3002; 5&#x3001;&#x5F53;&#x4F7F;&#x7528; Append-Only &#x6A21;&#x5F0F;&#x65F6;&#xFF0C;Redis &#x4F1A;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7CFB;&#x7EDF;&#x51FD;&#x6570; write &#x5C06;&#x8BE5;&#x4E8B;&#x52A1;&#x5185;&#x7684;&#x6240;&#x6709;&#x5199;&#x64CD;&#x4F5C;&#x5728;&#x672C;&#x6B21;&#x8C03;&#x7528;&#x4E2D;&#x5168;&#x90E8;&#x5199;&#x5165;&#x78C1;&#x76D8;&#x3002;&#x7136;&#x800C;&#x5982;&#x679C;&#x5728;&#x5199;&#x5165;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x51FA;&#x73B0;&#x7CFB;&#x7EDF;&#x5D29;&#x6E83;&#xFF0C;&#x5982;&#x7535;&#x6E90;&#x6545;&#x969C;&#x5BFC;&#x81F4;&#x7684;&#x5B95;&#x673A;&#xFF0C;&#x90A3;&#x4E48;&#x6B64;&#x65F6;&#x4E5F;&#x8BB8;&#x53EA;&#x6709;&#x90E8;&#x5206;&#x6570;&#x636E;&#x88AB;&#x5199;&#x5165;&#x5230;&#x78C1;&#x76D8;&#xFF0C;&#x800C;&#x53E6;&#x5916;&#x4E00;&#x90E8;&#x5206;&#x6570;&#x636E;&#x5374;&#x5DF2;&#x7ECF;&#x4E22;&#x5931;&#x3002; Redis &#x670D;&#x52A1;&#x5668;&#x4F1A;&#x5728;&#x91CD;&#x65B0;&#x542F;&#x52A8;&#x65F6;&#x6267;&#x884C;&#x4E00;&#x7CFB;&#x5217;&#x5FC5;&#x8981;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x6D4B;&#xFF0C;&#x4E00;&#x65E6;&#x53D1;&#x73B0;&#x7C7B;&#x4F3C;&#x95EE;&#x9898;&#xFF0C;&#x5C31;&#x4F1A;&#x7ACB;&#x5373;&#x9000;&#x51FA;&#x5E76;&#x7ED9;&#x51FA;&#x76F8;&#x5E94;&#x7684;&#x9519;&#x8BEF;&#x63D0;&#x793A;&#x3002;&#x6B64;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x8981;&#x5145;&#x5206;&#x5229;&#x7528; Redis &#x5DE5;&#x5177;&#x5305;&#x4E2D;&#x63D0;&#x4F9B;&#x7684; redis-check-aof &#x5DE5;&#x5177;&#xFF0C;&#x8BE5;&#x5DE5;&#x5177;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x5B9A;&#x4F4D;&#x5230;&#x6570;&#x636E;&#x4E0D;&#x4E00;&#x81F4;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x5E76;&#x5C06;&#x5DF2;&#x7ECF;&#x5199;&#x5165;&#x7684;&#x90E8;&#x5206;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x56DE;&#x6EDA;&#x3002;&#x4FEE;&#x590D;&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x518D;&#x6B21;&#x91CD;&#x65B0;&#x542F;&#x52A8;Redis&#x670D;&#x52A1;&#x5668;&#x4E86;&#x3002; &#x5982;&#x4F55;&#x5B9E;&#x73B0; Redis CAS &#x64CD;&#x4F5C;&#xFF1F; &#x5728; Redis &#x7684;&#x4E8B;&#x52A1;&#x4E2D;&#xFF0C;WATCH &#x547D;&#x4EE4;&#x53EF;&#x7528;&#x4E8E;&#x63D0;&#x4F9B;CAS(check-and-set)&#x529F;&#x80FD;&#x3002; &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x901A;&#x8FC7; WATCH &#x547D;&#x4EE4;&#x5728;&#x4E8B;&#x52A1;&#x6267;&#x884C;&#x4E4B;&#x524D;&#x76D1;&#x63A7;&#x4E86;&#x591A;&#x4E2A; keys &#xFF0C;&#x5018;&#x82E5;&#x5728; WATCH &#x4E4B;&#x540E;&#x6709;&#x4EFB;&#x4F55; Key &#x7684;&#x503C;&#x53D1;&#x751F;&#x4E86;&#x53D8;&#x5316;&#xFF0C;EXEC &#x547D;&#x4EE4;&#x6267;&#x884C;&#x7684;&#x4E8B;&#x52A1;&#x90FD;&#x5C06;&#x88AB;&#x653E;&#x5F03;&#xFF0C;&#x540C;&#x65F6;&#x8FD4;&#x56DE; nil &#x5E94;&#x7B54;&#x4EE5;&#x901A;&#x77E5;&#x8C03;&#x7528;&#x8005;&#x4E8B;&#x52A1;&#x6267;&#x884C;&#x5931;&#x8D25;&#x3002; &#x5177;&#x4F53;&#x7684;&#x793A;&#x4F8B;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Redis &#x4E8B;&#x52A1;&#x9501; CAS &#x5B9E;&#x73B0;&#x4EE5;&#x53CA;&#x6DF1;&#x5165;&#x8BEF;&#x533A;&#x300B; &#x3002; Redis &#x96C6;&#x7FA4;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#x65B9;&#x6848;&#xFF1F;Redis &#x96C6;&#x7FA4;&#x65B9;&#x6848;&#x5982;&#x4E0B;&#xFF1A; 1&#x3001;Redis Sentinel 2&#x3001;Redis Cluster 3&#x3001;Twemproxy 4&#x3001;Codis 5&#x3001;&#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x7247; &#x5173;&#x4E8E;&#x524D;&#x56DB;&#x79CD;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Redis &#x5B9E;&#x6218;&#xFF08;&#x56DB;&#xFF09;&#x96C6;&#x7FA4;&#x673A;&#x5236;&#x300B; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x3002; &#x5173;&#x4E8E;&#x6700;&#x540E;&#x4E00;&#x79CD;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x7247;&#xFF0C;&#x5728; Redis Cluster &#x51FA;&#x73B0;&#x4E4B;&#x524D;&#x4F7F;&#x7528;&#x8F83;&#x591A;&#xFF0C;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x4F7F;&#x7528;&#x6BD4;&#x8F83;&#x5C11;&#x4E86;&#x3002;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A; &#x5728;&#x4E1A;&#x52A1;&#x4EE3;&#x7801;&#x5C42;&#x5B9E;&#x73B0;&#xFF0C;&#x8D77;&#x51E0;&#x4E2A;&#x6BEB;&#x65E0;&#x5173;&#x8054;&#x7684; Redis &#x5B9E;&#x4F8B;&#xFF0C;&#x5728;&#x4EE3;&#x7801;&#x5C42;&#xFF0C;&#x5BF9; Key &#x8FDB;&#x884C; hash &#x8BA1;&#x7B97;&#xFF0C;&#x7136;&#x540E;&#x53BB;&#x5BF9;&#x5E94;&#x7684; Redis &#x5B9E;&#x4F8B;&#x64CD;&#x4F5C;&#x6570;&#x636E;&#x3002; &#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x5BF9; hash &#x5C42;&#x4EE3;&#x7801;&#x8981;&#x6C42;&#x6BD4;&#x8F83;&#x9AD8;&#xFF0C;&#x8003;&#x8651;&#x90E8;&#x5206;&#x5305;&#x62EC;&#xFF0C;&#x8282;&#x70B9;&#x5931;&#x6548;&#x540E;&#x7684;&#x66FF;&#x4EE3;&#x7B97;&#x6CD5;&#x65B9;&#x6848;&#xFF0C;&#x6570;&#x636E;&#x9707;&#x8361;&#x540E;&#x7684;&#x81EA;&#x52A8;&#x811A;&#x672C;&#x6062;&#x590D;&#xFF0C;&#x5B9E;&#x4F8B;&#x7684;&#x76D1;&#x63A7;&#xFF0C;&#x7B49;&#x7B49;&#x3002; &#x9009;&#x62E9; &#x76EE;&#x524D;&#x4E00;&#x822C;&#x5728;&#x9009;&#x578B;&#x4E0A;&#x6765;&#x8BF4;&#xFF1A; &#x4F53;&#x91CF;&#x8F83;&#x5C0F;&#x65F6;&#xFF0C;&#x9009;&#x62E9; Redis Sentinel &#xFF0C;&#x5355;&#x4E3B; Redis &#x8DB3;&#x4EE5;&#x652F;&#x6491;&#x4E1A;&#x52A1;&#x3002; &#x4F53;&#x91CF;&#x8F83;&#x5927;&#x65F6;&#xFF0C;&#x9009;&#x62E9; Redis Cluster &#xFF0C;&#x901A;&#x8FC7;&#x5206;&#x7247;&#xFF0C;&#x4F7F;&#x7528;&#x66F4;&#x591A;&#x5185;&#x5B58;&#x3002; Redis &#x96C6;&#x7FA4;&#x5982;&#x4F55;&#x6269;&#x5BB9;&#xFF1F; &#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x827F;&#x827F;&#x4E86;&#x89E3;&#x7684;&#x4E5F;&#x4E0D;&#x662F;&#x5F88;&#x591A;&#xFF0C;&#x5EFA;&#x8BAE;&#x5728;&#x641C;&#x7D22;&#x6709;&#x4EC0;&#x4E48;&#x65B9;&#x6848;&#x3002; &#x5982;&#x679C; Redis &#x88AB;&#x5F53;&#x505A;&#x7F13;&#x5B58;&#x4F7F;&#x7528;&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x81F4;&#x6027;&#x54C8;&#x5E0C;&#x5B9E;&#x73B0;&#x52A8;&#x6001;&#x6269;&#x5BB9;&#x7F29;&#x5BB9;&#x3002; &#x5982;&#x679C; Redis &#x88AB;&#x5F53;&#x505A;&#x4E00;&#x4E2A;&#x6301;&#x4E45;&#x5316;&#x5B58;&#x50A8;&#x4F7F;&#x7528;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x56FA;&#x5B9A;&#x7684; keys-to-nodes &#x6620;&#x5C04;&#x5173;&#x7CFB;&#xFF0C;&#x8282;&#x70B9;&#x7684;&#x6570;&#x91CF;&#x4E00;&#x65E6;&#x786E;&#x5B9A;&#x4E0D;&#x80FD;&#x53D8;&#x5316;&#x3002;&#x5426;&#x5219;&#x7684;&#x8BDD;(&#x5373;Redis &#x8282;&#x70B9;&#x9700;&#x8981;&#x52A8;&#x6001;&#x53D8;&#x5316;&#x7684;&#x60C5;&#x51B5;&#xFF09;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x53EF;&#x4EE5;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x518D;&#x5E73;&#x8861;&#x7684;&#x4E00;&#x5957;&#x7CFB;&#x7EDF;&#xFF0C;&#x800C;&#x5F53;&#x524D;&#x53EA;&#x6709; Redis Cluster&#x3001;Codis &#x53EF;&#x4EE5;&#x505A;&#x5230;&#x8FD9;&#x6837;&#x3002; &#x4EC0;&#x4E48;&#x662F; Redis &#x4E3B;&#x4ECE;&#x540C;&#x6B65;&#xFF1F;Redis &#x4E3B;&#x4ECE;&#x540C;&#x6B65; Redis &#x7684;&#x4E3B;&#x4ECE;&#x540C;&#x6B65;(replication)&#x673A;&#x5236;&#xFF0C;&#x5141;&#x8BB8; Slave &#x4ECE; Master &#x90A3;&#x91CC;&#xFF0C;&#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#x62F7;&#x8D1D;&#x5230;&#x5B8C;&#x6574;&#x7684;&#x6570;&#x636E;&#x5907;&#x4EFD;&#xFF0C;&#x4ECE;&#x800C;&#x8FBE;&#x5230;&#x4E3B;&#x4ECE;&#x673A;&#x5236;&#x3002; &#x4E3B;&#x6570;&#x636E;&#x5E93;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#xFF0C;&#x5F53;&#x53D1;&#x751F;&#x5199;&#x64CD;&#x4F5C;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x52A8;&#x5C06;&#x6570;&#x636E;&#x540C;&#x6B65;&#x5230;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x800C;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#x4E00;&#x822C;&#x662F;&#x53EA;&#x8BFB;&#x7684;&#xFF0C;&#x5E76;&#x63A5;&#x6536;&#x4E3B;&#x6570;&#x636E;&#x5E93;&#x540C;&#x6B65;&#x8FC7;&#x6765;&#x7684;&#x6570;&#x636E;&#x3002; &#x4E00;&#x4E2A;&#x4E3B;&#x6570;&#x636E;&#x5E93;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x800C;&#x4E00;&#x4E2A;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x4E3B;&#x6570;&#x636E;&#x5E93;&#x3002; &#x7B2C;&#x4E00;&#x6B21;&#x540C;&#x6B65;&#x65F6;&#xFF0C;&#x4E3B;&#x8282;&#x70B9;&#x505A;&#x4E00;&#x6B21; bgsave &#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x540C;&#x65F6;&#x5C06;&#x540E;&#x7EED;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#x8BB0;&#x5F55;&#x5230;&#x5185;&#x5B58; buffer &#xFF0C;&#x5F85;&#x5B8C;&#x6210;&#x540E;&#x5C06; RDB &#x6587;&#x4EF6;&#x5168;&#x91CF;&#x540C;&#x6B65;&#x5230;&#x590D;&#x5236;&#x8282;&#x70B9;&#xFF0C;&#x590D;&#x5236;&#x8282;&#x70B9;&#x63A5;&#x53D7;&#x5B8C;&#x6210;&#x540E;&#x5C06; RDB &#x955C;&#x50CF;&#x52A0;&#x8F7D;&#x5230;&#x5185;&#x5B58;&#x3002;&#x52A0;&#x8F7D;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x518D;&#x901A;&#x77E5;&#x4E3B;&#x8282;&#x70B9;&#x5C06;&#x671F;&#x95F4;&#x4FEE;&#x6539;&#x7684;&#x64CD;&#x4F5C;&#x8BB0;&#x5F55;&#x540C;&#x6B65;&#x5230;&#x590D;&#x5236;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x91CD;&#x653E;&#x5C31;&#x5B8C;&#x6210;&#x4E86;&#x540C;&#x6B65;&#x8FC7;&#x7A0B;&#x3002; &#x597D;&#x5904; &#x901A;&#x8FC7; Redis &#x7684;&#x590D;&#x5236;&#x529F;&#xFF0C;&#x80FD;&#x53EF;&#x4EE5;&#x5F88;&#x597D;&#x7684;&#x5B9E;&#x73B0;&#x6570;&#x636E;&#x5E93;&#x7684;&#x8BFB;&#x5199;&#x5206;&#x79BB;&#xFF0C;&#x63D0;&#x9AD8;&#x670D;&#x52A1;&#x5668;&#x7684;&#x8D1F;&#x8F7D;&#x80FD;&#x529B;&#x3002;&#x4E3B;&#x6570;&#x636E;&#x5E93;&#x4E3B;&#x8981;&#x8FDB;&#x884C;&#x5199;&#x64CD;&#x4F5C;&#xFF0C;&#x800C;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#x8D1F;&#x8D23;&#x8BFB;&#x64CD;&#x4F5C;&#x3002; Redis &#x4E3B;&#x4ECE;&#x540C;&#x6B65;&#xFF0C;&#x662F;&#x5F88;&#x591A; Redis &#x96C6;&#x7FA4;&#x65B9;&#x6848;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x4F8B;&#x5982; Redis Sentinel&#x3001;Redis Cluster &#x7B49;&#x7B49;&#x3002; &#x66F4;&#x591A;&#x8BE6;&#x7EC6;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Redis &#x4E3B;&#x4ECE;&#x67B6;&#x6784;&#x300B; &#x3002; &#x5982;&#x4F55;&#x4F7F;&#x7528; Redis Sentinel &#x5B9E;&#x73B0;&#x9AD8;&#x53EF;&#x7528;&#xFF1F;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Redis &#x54E8;&#x5175;&#x96C6;&#x7FA4;&#x5B9E;&#x73B0;&#x9AD8;&#x53EF;&#x7528;&#x300B; &#x3002; &#x5982;&#x679C;&#x4F7F;&#x7528; Redis Cluster &#x5B9E;&#x73B0;&#x9AD8;&#x53EF;&#x7528;&#xFF1F;&#x53EF;&#x4EE5;&#x770B;&#x770B; &#x300A;Redis &#x96C6;&#x7FA4;&#x6559;&#x7A0B;&#x300B; &#x5B8C;&#x6574;&#x7248; &#x300A;Redis &#x96C6;&#x7FA4;&#x6A21;&#x5F0F;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x80FD;&#x8BF4;&#x4E00;&#x4E0B;&#x4E48;&#xFF1F;&#x300B; &#x7CBE;&#x7B80;&#x7248; &#x8BF4;&#x8BF4; Redis &#x54C8;&#x5E0C;&#x69FD;&#x7684;&#x6982;&#x5FF5;&#xFF1F; Redis Cluster &#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x4E00;&#x81F4;&#x6027; hash &#xFF0C;&#x800C;&#x662F;&#x5F15;&#x5165;&#x4E86;&#x54C8;&#x5E0C;&#x69FD;&#x7684;&#x6982;&#x5FF5;&#x3002; Redis &#x96C6;&#x7FA4;&#x6709; 16384 &#x4E2A;&#x54C8;&#x5E0C;&#x69FD;&#xFF0C;&#x6BCF;&#x4E2A; key &#x901A;&#x8FC7; CRC16 &#x6821;&#x9A8C;&#x540E;&#x5BF9; 16384 &#x53D6;&#x6A21;&#x6765;&#x51B3;&#x5B9A;&#x653E;&#x7F6E;&#x54EA;&#x4E2A;&#x69FD;&#xFF0C;&#x96C6;&#x7FA4;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x8D1F;&#x8D23;&#x4E00;&#x90E8;&#x5206; hash &#x69FD;&#x3002; &#x56E0;&#x4E3A;&#x6700;&#x5927;&#x662F; 16384 &#x4E2A;&#x54C8;&#x5E0C;&#x69FD;&#xFF0C;&#x6240;&#x4EE5;&#x8003;&#x8651; Redis &#x96C6;&#x7FA4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x80FD;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x54C8;&#x5E0C;&#x69FD;&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x591A;&#x652F;&#x6301; 16384 &#x4E2A; Redis &#x8282;&#x70B9;&#x3002; Redis Cluster &#x7684;&#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x6A21;&#x578B;&#x662F;&#x600E;&#x6837;&#x7684;&#xFF1F; &#x4E3A;&#x4E86;&#x4F7F;&#x5728;&#x90E8;&#x5206;&#x8282;&#x70B9;&#x5931;&#x8D25;&#x6216;&#x8005;&#x5927;&#x90E8;&#x5206;&#x8282;&#x70B9;&#x65E0;&#x6CD5;&#x901A;&#x4FE1;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x96C6;&#x7FA4;&#x4ECD;&#x7136;&#x53EF;&#x7528;&#xFF0C;&#x6240;&#x4EE5;&#x96C6;&#x7FA4;&#x4F7F;&#x7528;&#x4E86;&#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x6A21;&#x578B;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x4F1A;&#x6709; N-1 &#x4E2A;&#x590D;&#x5236;&#x8282;&#x70B9;&#x3002; &#x6240;&#x4EE5;&#xFF0C;Redis Cluster &#x53EF;&#x4EE5;&#x8BF4;&#x662F; Redis Sentinel &#x5E26;&#x5206;&#x7247;&#x7684;&#x52A0;&#x5F3A;&#x7248;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x8BF4;&#xFF1A; Redis Sentinel &#x7740;&#x773C;&#x4E8E;&#x9AD8;&#x53EF;&#x7528;&#xFF0C;&#x5728; master &#x5B95;&#x673A;&#x65F6;&#x4F1A;&#x81EA;&#x52A8;&#x5C06; slave &#x63D0;&#x5347;&#x4E3A; master &#xFF0C;&#x7EE7;&#x7EED;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#x3002; Redis Cluster &#x7740;&#x773C;&#x4E8E;&#x6269;&#x5C55;&#x6027;&#xFF0C;&#x5728;&#x5355;&#x4E2A; Redis &#x5185;&#x5B58;&#x4E0D;&#x8DB3;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;Cluster &#x8FDB;&#x884C;&#x5206;&#x7247;&#x5B58;&#x50A8;&#x3002; Redis Cluster &#x65B9;&#x6848;&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x5BFC;&#x81F4;&#x6574;&#x4E2A;&#x96C6;&#x7FA4;&#x4E0D;&#x53EF;&#x7528;&#xFF1F; &#x6709; A&#xFF0C;B&#xFF0C;C &#x4E09;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x96C6;&#x7FA4;&#xFF0C;&#x5728;&#x6CA1;&#x6709;&#x590D;&#x5236;&#x6A21;&#x578B;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x8282;&#x70B9; B &#x5B95;&#x673A;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x6574;&#x4E2A;&#x96C6;&#x7FA4;&#x5C31;&#x4F1A;&#x4EE5;&#x4E3A;&#x7F3A;&#x5C11; 5501-11000 &#x8FD9;&#x4E2A;&#x8303;&#x56F4;&#x7684;&#x69FD;&#x800C;&#x4E0D;&#x53EF;&#x7528;&#x3002; Redis Cluster &#x4F1A;&#x6709;&#x5199;&#x64CD;&#x4F5C;&#x4E22;&#x5931;&#x5417;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F; Redis &#x5E76;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x7684;&#x5F3A;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x800C;&#x662F;&#x3010;&#x5F02;&#x6B65;&#x590D;&#x5236;&#x3011;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x8FD9;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#x96C6;&#x7FA4;&#x5728;&#x7279;&#x5B9A;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x5199;&#x64CD;&#x4F5C;&#x3002; Redis &#x96C6;&#x7FA4;&#x5982;&#x4F55;&#x9009;&#x62E9;&#x6570;&#x636E;&#x5E93;&#xFF1F; Redis &#x96C6;&#x7FA4;&#x76EE;&#x524D;&#x65E0;&#x6CD5;&#x505A;&#x6570;&#x636E;&#x5E93;&#x9009;&#x62E9;&#xFF0C;&#x9ED8;&#x8BA4;&#x5728; 0 &#x6570;&#x636E;&#x5E93;&#x3002; &#x8BF7;&#x8BF4;&#x8BF4;&#x751F;&#x4EA7;&#x73AF;&#x5883;&#x4E2D;&#x7684; Redis &#x662F;&#x600E;&#x4E48;&#x90E8;&#x7F72;&#x7684;&#xFF1F; &#x91CD;&#x70B9;&#x95EE;&#x9898;&#xFF0C;&#x4ED4;&#x7EC6;&#x7406;&#x89E3;&#x3002; Redis Cluster&#xFF0C;10 &#x53F0;&#x673A;&#x5668;&#xFF0C;5 &#x53F0;&#x673A;&#x5668;&#x90E8;&#x7F72;&#x4E86; redis &#x4E3B;&#x5B9E;&#x4F8B;&#xFF0C;&#x53E6;&#x5916; 5 &#x53F0;&#x673A;&#x5668;&#x90E8;&#x7F72;&#x4E86; redis &#x7684;&#x4ECE;&#x5B9E;&#x4F8B;&#xFF0C;&#x6BCF;&#x4E2A;&#x4E3B;&#x5B9E;&#x4F8B;&#x6302;&#x4E86;&#x4E00;&#x4E2A;&#x4ECE;&#x5B9E;&#x4F8B;&#xFF0C;5 &#x4E2A;&#x8282;&#x70B9;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x8BFB;&#x5199;&#x670D;&#x52A1;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x8BFB;&#x5199;&#x9AD8;&#x5CF0; qps &#x53EF;&#x80FD;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x6BCF;&#x79D2; 5 &#x4E07;&#xFF0C;5 &#x53F0;&#x673A;&#x5668;&#x6700;&#x591A;&#x662F; 25 &#x4E07;&#x8BFB;&#x5199;&#x8BF7;&#x6C42;&#x6BCF;&#x79D2;&#x3002; &#x673A;&#x5668;&#x662F;&#x4EC0;&#x4E48;&#x914D;&#x7F6E;&#xFF1F;32G &#x5185;&#x5B58; + 8 &#x6838; CPU + 1T &#x78C1;&#x76D8;&#xFF0C;&#x4F46;&#x662F;&#x5206;&#x914D;&#x7ED9; Redis &#x8FDB;&#x7A0B;&#x7684;&#x662F; 10g &#x5185;&#x5B58;&#xFF0C;&#x4E00;&#x822C;&#x7EBF;&#x4E0A;&#x751F;&#x4EA7;&#x73AF;&#x5883;&#xFF0C;Redis &#x7684;&#x5185;&#x5B58;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x8D85;&#x8FC7; 10g&#xFF0C;&#x8D85;&#x8FC7; 10g &#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x95EE;&#x9898;&#x3002;&#x90A3;&#x4E48;&#xFF0C;5 &#x53F0;&#x673A;&#x5668;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x8BFB;&#x5199;&#xFF0C;&#x4E00;&#x5171;&#x6709; 50g &#x5185;&#x5B58;&#x3002; &#x56E0;&#x4E3A;&#x6BCF;&#x4E2A;&#x4E3B;&#x5B9E;&#x4F8B;&#x90FD;&#x6302;&#x4E86;&#x4E00;&#x4E2A;&#x4ECE;&#x5B9E;&#x4F8B;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x9AD8;&#x53EF;&#x7528;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x4E3B;&#x5B9E;&#x4F8B;&#x5B95;&#x673A;&#xFF0C;&#x90FD;&#x4F1A;&#x81EA;&#x52A8;&#x6545;&#x969C;&#x8FC1;&#x79FB;&#xFF0C;Redis &#x4ECE;&#x5B9E;&#x4F8B;&#x4F1A;&#x81EA;&#x52A8;&#x53D8;&#x6210;&#x4E3B;&#x5B9E;&#x4F8B;&#x7EE7;&#x7EED;&#x63D0;&#x4F9B;&#x8BFB;&#x5199;&#x670D;&#x52A1;&#x3002; &#x4F60;&#x5F80;&#x5185;&#x5B58;&#x91CC;&#x5199;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x6570;&#x636E;&#xFF1F;&#x6BCF;&#x6761;&#x6570;&#x636E;&#x7684;&#x5927;&#x5C0F;&#x662F;&#x591A;&#x5C11;&#xFF1F;&#x5546;&#x54C1;&#x6570;&#x636E;&#xFF0C;&#x6BCF;&#x6761;&#x6570;&#x636E;&#x662F; 10kb &#x3002;100 &#x6761;&#x6570;&#x636E;&#x662F; 1mb &#xFF0C;10 &#x4E07;&#x6761;&#x6570;&#x636E;&#x662F; 1g &#x3002;&#x5E38;&#x9A7B;&#x5185;&#x5B58;&#x7684;&#x662F; 200 &#x4E07;&#x6761;&#x5546;&#x54C1;&#x6570;&#x636E;&#xFF0C;&#x5360;&#x7528;&#x5185;&#x5B58;&#x662F; 20g&#xFF0C;&#x4EC5;&#x4EC5;&#x4E0D;&#x5230;&#x603B;&#x5185;&#x5B58;&#x7684; 50%&#x3002;&#x76EE;&#x524D;&#x9AD8;&#x5CF0;&#x671F;&#x6BCF;&#x79D2;&#x5C31;&#x662F; 3500 &#x5DE6;&#x53F3;&#x7684;&#x8BF7;&#x6C42;&#x91CF;&#x3002; &#x5176;&#x5B9E;&#x5927;&#x578B;&#x7684;&#x516C;&#x53F8;&#xFF0C;&#x4F1A;&#x6709;&#x57FA;&#x7840;&#x67B6;&#x6784;&#x7684; team &#x8D1F;&#x8D23;&#x7F13;&#x5B58;&#x96C6;&#x7FA4;&#x7684;&#x8FD0;&#x7EF4;&#x3002; &#x4EC0;&#x4E48;&#x662F; Redis &#x5206;&#x533A;&#xFF1F; &#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x548C; &#x300C;Redis &#x96C6;&#x7FA4;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#x65B9;&#x6848;&#xFF1F;&#x300D; &#x662F;&#x540C;&#x7C7B;&#x95EE;&#x9898;&#x3002; &#x5173;&#x4E8E;&#x5982;&#x4E0B;&#x56DB;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x76F4;&#x63A5;&#x770B; &#x300A;Redis &#x5206;&#x533A;&#x300B; &#x6587;&#x7AE0;&#x3002; Redis &#x5206;&#x533A;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; &#x5206;&#x533A;&#x7684;&#x4F18;&#x52BF;&#xFF1F; &#x5206;&#x533A;&#x7684;&#x4E0D;&#x8DB3;&#xFF1F; &#x5206;&#x533A;&#x7C7B;&#x578B;&#xFF1F; &#x53EF;&#x80FD;&#x6709;&#x80D6;&#x53CB;&#x4F1A;&#x61F5;&#x903C;&#xFF0C;&#x53C8;&#x662F; Redis &#x4E3B;&#x4ECE;&#x590D;&#x5236;&#xFF0C;&#x53C8;&#x662F; Redis &#x5206;&#x533A;&#xFF0C;&#x53C8;&#x662F; Redis &#x96C6;&#x7FA4;&#x3002;&#x50BB;&#x50BB;&#x5206;&#x4E0D;&#x6E05;&#x554A;&#xFF01; Redis &#x5206;&#x533A;&#x662F;&#x4E00;&#x79CD;&#x6A21;&#x5F0F;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x5206;&#x533A;&#x5230;&#x4E0D;&#x540C;&#x7684; Redis &#x8282;&#x70B9;&#x4E0A;&#xFF0C;&#x800C; Redis &#x96C6;&#x7FA4;&#x7684; Redis Cluster&#x3001;Twemproxy&#x3001;Codis&#x3001;&#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x7247;( &#x4E0D;&#x5305;&#x62EC; Redis Sentinel ) &#x8FD9;&#x56DB;&#x79CD;&#x65B9;&#x6848;&#xFF0C;&#x662F; Redis &#x5206;&#x533A;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x3002; Redis &#x6BCF;&#x4E2A;&#x5206;&#x533A;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8981;&#x5B9E;&#x73B0;&#x9AD8;&#x53EF;&#x7528;&#xFF0C;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x5230; Redis &#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x3002; &#x4F60;&#x77E5;&#x9053;&#x6709;&#x54EA;&#x4E9B; Redis &#x5206;&#x533A;&#x5B9E;&#x73B0;&#x65B9;&#x6848;&#xFF1F; Redis &#x5206;&#x533A;&#x65B9;&#x6848;&#xFF0C;&#x4E3B;&#x8981;&#x5206;&#x6210;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#xFF1A; &#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x533A;&#xFF0C;&#x5C31;&#x662F;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x5C31;&#x5DF2;&#x7ECF;&#x51B3;&#x5B9A;&#x6570;&#x636E;&#x4F1A;&#x88AB;&#x5B58;&#x50A8;&#x5230;&#x54EA;&#x4E2A; Redis &#x8282;&#x70B9;&#x6216;&#x8005;&#x4ECE;&#x54EA;&#x4E2A; Redis &#x8282;&#x70B9;&#x8BFB;&#x53D6;&#x3002;&#x5927;&#x591A;&#x6570;&#x5BA2;&#x6237;&#x7AEF;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#x4E86;&#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x533A;&#x3002; &#x6848;&#x4F8B;&#xFF1A;Redis Cluster &#x548C;&#x5BA2;&#x6237;&#x7AEF;&#x5206;&#x533A;&#x3002; &#x4EE3;&#x7406;&#x5206;&#x533A;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x5BA2;&#x6237;&#x7AEF;&#x5C06;&#x8BF7;&#x6C42;&#x53D1;&#x9001;&#x7ED9;&#x4EE3;&#x7406;&#xFF0C;&#x7136;&#x540E;&#x4EE3;&#x7406;&#x51B3;&#x5B9A;&#x53BB;&#x54EA;&#x4E2A;&#x8282;&#x70B9;&#x5199;&#x6570;&#x636E;&#x6216;&#x8005;&#x8BFB;&#x6570;&#x636E;&#x3002;&#x4EE3;&#x7406;&#x6839;&#x636E;&#x5206;&#x533A;&#x89C4;&#x5219;&#x51B3;&#x5B9A;&#x8BF7;&#x6C42;&#x54EA;&#x4E9B; Redis &#x5B9E;&#x4F8B;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E; Redis &#x7684;&#x54CD;&#x5E94;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#x3002; &#x6848;&#x4F8B;&#xFF1A;Twemproxy &#x548C; Codis &#x3002; &#x67E5;&#x8BE2;&#x8DEF;&#x7531;(Query routing)&#x7684;&#x610F;&#x601D;&#xFF0C;&#x662F;&#x5BA2;&#x6237;&#x7AEF;&#x968F;&#x673A;&#x5730;&#x8BF7;&#x6C42;&#x4EFB;&#x610F;&#x4E00;&#x4E2A; Redis &#x5B9E;&#x4F8B;&#xFF0C;&#x7136;&#x540E;&#x7531; Redis &#x5C06;&#x8BF7;&#x6C42;&#x8F6C;&#x53D1;&#x7ED9;&#x6B63;&#x786E;&#x7684; Redis &#x8282;&#x70B9;&#x3002;Redis Cluster &#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x79CD;&#x6DF7;&#x5408;&#x5F62;&#x5F0F;&#x7684;&#x67E5;&#x8BE2;&#x8DEF;&#x7531;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x5C06;&#x8BF7;&#x6C42;&#x4ECE;&#x4E00;&#x4E2A;Redis &#x8282;&#x70B9;&#x8F6C;&#x53D1;&#x5230;&#x53E6;&#x4E00;&#x4E2A; Redis &#x8282;&#x70B9;&#xFF0C;&#x800C;&#x662F;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x5E2E;&#x52A9;&#x4E0B;&#x76F4;&#x63A5; redirect &#x5230;&#x6B63;&#x786E;&#x7684; Redis &#x8282;&#x70B9;&#x3002; &#x5206;&#x5E03;&#x5F0F; Redis &#x662F;&#x524D;&#x671F;&#x505A;&#x8FD8;&#x662F;&#x540E;&#x671F;&#x89C4;&#x6A21;&#x4E0A;&#x6765;&#x4E86;&#x518D;&#x505A;&#x597D;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#xFF1F; &#x5982;&#x4E0B;&#x662F;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x5927;&#x7B54;&#x6848;&#xFF1A; &#x65E2;&#x7136; Redis &#x662F;&#x5982;&#x6B64;&#x7684;&#x8F7B;&#x91CF;&#xFF08;&#x5355;&#x5B9E;&#x4F8B;&#x53EA;&#x4F7F;&#x7528;1M&#x5185;&#x5B58;&#xFF09;&#xFF0C;&#x4E3A;&#x9632;&#x6B62;&#x4EE5;&#x540E;&#x7684;&#x6269;&#x5BB9;&#xFF0C;&#x6700;&#x597D;&#x7684;&#x529E;&#x6CD5;&#x5C31;&#x662F;&#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x542F;&#x52A8;&#x8F83;&#x591A;&#x5B9E;&#x4F8B;&#x3002;&#x5373;&#x4FBF;&#x4F60;&#x53EA;&#x6709;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x8BA9; Redis &#x4EE5;&#x5206;&#x5E03;&#x5F0F;&#x7684;&#x65B9;&#x5F0F;&#x8FD0;&#x884C;&#xFF0C;&#x4F7F;&#x7528;&#x5206;&#x533A;&#xFF0C;&#x5728;&#x540C;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x542F;&#x52A8;&#x591A;&#x4E2A;&#x5B9E;&#x4F8B;&#x3002; &#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x591A;&#x8BBE;&#x7F6E;&#x51E0;&#x4E2A; Redis &#x5B9E;&#x4F8B;&#xFF0C;&#x4F8B;&#x5982; 32 &#x6216;&#x8005; 64 &#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x5BF9;&#x5927;&#x591A;&#x6570;&#x7528;&#x6237;&#x6765;&#x8BF4;&#x8FD9;&#x64CD;&#x4F5C;&#x8D77;&#x6765;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x9EBB;&#x70E6;&#xFF0C;&#x4F46;&#x662F;&#x4ECE;&#x957F;&#x4E45;&#x6765;&#x770B;&#x505A;&#x8FD9;&#x70B9;&#x727A;&#x7272;&#x662F;&#x503C;&#x5F97;&#x7684;&#x3002; &#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x5F53;&#x4F60;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x65AD;&#x589E;&#x957F;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x591A;&#x7684; Redis &#x670D;&#x52A1;&#x5668;&#x65F6;&#xFF0C;&#x4F60;&#x9700;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x4EC5;&#x4EC5;&#x5C06; Redis &#x5B9E;&#x4F8B;&#x4ECE;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x8FC1;&#x79FB;&#x5230;&#x53E6;&#x5916;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x800C;&#x5DF2;&#xFF08;&#x800C;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x91CD;&#x65B0;&#x5206;&#x533A;&#x7684;&#x95EE;&#x9898;&#xFF09;&#x3002;&#x4E00;&#x65E6;&#x4F60;&#x6DFB;&#x52A0;&#x4E86;&#x53E6;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4F60;&#x9700;&#x8981;&#x5C06;&#x4F60;&#x4E00;&#x534A;&#x7684; Redis &#x5B9E;&#x4F8B;&#x4ECE;&#x7B2C;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x8FC1;&#x79FB;&#x5230;&#x7B2C;&#x4E8C;&#x53F0;&#x673A;&#x5668;&#x3002; &#x548C;&#x98DE;&#x54E5;&#x6C9F;&#x901A;&#x4E86;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x4E0D;&#x662F;&#x5F88;&#x5408;&#x7406;&#x3002; &#x65E0;&#x8BBA;&#x600E;&#x4E48;&#x8BF4;&#xFF0C;&#x5EFA;&#x8BAE;&#xFF0C;&#x9700;&#x8981;&#x642D;&#x5EFA;&#x4E0B; Redis Sentinel &#x9AD8;&#x53EF;&#x7528;&#xFF0C;&#x81F3;&#x4E8E;&#x62D3;&#x5C55;&#x6027;&#xFF0C;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x662F;&#x5426;&#x4F7F;&#x7528; Redis Cluster &#x96C6;&#x7FA4; Redis &#x6709;&#x54EA;&#x4E9B;&#x91CD;&#x8981;&#x7684;&#x5065;&#x5EB7;&#x6307;&#x6807;&#xFF1F;&#x63A8;&#x8350;&#x9605;&#x8BFB; &#x300A;Redis &#x51E0;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x5065;&#x5EB7;&#x6307;&#x6807;&#x300B; &#x5B58;&#x6D3B;&#x60C5;&#x51B5; &#x8FDE;&#x63A5;&#x6570; &#x963B;&#x585E;&#x5BA2;&#x6237;&#x7AEF;&#x6570;&#x91CF; &#x4F7F;&#x7528;&#x5185;&#x5B58;&#x5CF0;&#x503C; &#x5185;&#x5B58;&#x788E;&#x7247;&#x7387; &#x7F13;&#x5B58;&#x547D;&#x4E2D;&#x7387; OPS &#x6301;&#x4E45;&#x5316; &#x5931;&#x6548;KEY &#x6162;&#x65E5;&#x5FD7; &#x5982;&#x4F55;&#x63D0;&#x9AD8; Redis &#x547D;&#x4E2D;&#x7387;&#xFF1F; &#x63A8;&#x8350;&#x9605;&#x8BFB; &#x300A;&#x5982;&#x4F55;&#x63D0;&#x9AD8;&#x7F13;&#x5B58;&#x547D;&#x4E2D;&#x7387;&#xFF08;Redis&#xFF09;&#x300B; &#x3002; &#x600E;&#x4E48;&#x4F18;&#x5316; Redis &#x7684;&#x5185;&#x5B58;&#x5360;&#x7528;&#x63A8;&#x8350;&#x9605;&#x8BFB; &#x300A;Redis &#x7684;&#x5185;&#x5B58;&#x4F18;&#x5316;&#x300B; redisObject &#x5BF9;&#x8C61; &#x7F29;&#x51CF;&#x952E;&#x503C;&#x5BF9;&#x8C61; &#x5171;&#x4EAB;&#x5BF9;&#x8C61;&#x6C60; &#x5B57;&#x7B26;&#x4E32;&#x4F18;&#x5316; &#x7F16;&#x7801;&#x4F18;&#x5316; &#x63A7;&#x5236; key &#x7684;&#x6570;&#x91CF; &#x4E00;&#x4E2A; Redis &#x5B9E;&#x4F8B;&#x6700;&#x591A;&#x80FD;&#x5B58;&#x653E;&#x591A;&#x5C11;&#x7684; keys&#xFF1F;List&#x3001;Set&#x3001;Sorted Set &#x4ED6;&#x4EEC;&#x6700;&#x591A;&#x80FD;&#x5B58;&#x653E;&#x591A;&#x5C11;&#x5143;&#x7D20;&#xFF1F; &#x4E00;&#x4E2A; Redis &#x5B9E;&#x4F8B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x5B58;&#x653E;&#x591A;&#x5C11;&#x7684; keys &#xFF0C;List&#x3001;Set&#x3001;Sorted Set &#x4ED6;&#x4EEC;&#x6700;&#x591A;&#x80FD;&#x5B58;&#x653E;&#x591A;&#x5C11;&#x5143;&#x7D20;&#x3002; &#x7406;&#x8BBA;&#x4E0A;&#xFF0C;Redis &#x53EF;&#x4EE5;&#x5904;&#x7406;&#x591A;&#x8FBE; 2^32 &#x7684; keys &#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x5B9E;&#x9645;&#x4E2D;&#x8FDB;&#x884C;&#x4E86;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B9E;&#x4F8B;&#x81F3;&#x5C11;&#x5B58;&#x653E;&#x4E86; 2 &#x4EBF; 5 &#x5343;&#x4E07;&#x7684; keys&#x3002; &#x4EFB;&#x4F55; list&#x3001;set&#x3001;&#x548C; sorted set &#x90FD;&#x53EF;&#x4EE5;&#x653E; 2^32 &#x4E2A;&#x5143;&#x7D20;&#x3002; &#x5047;&#x5982; Redis &#x91CC;&#x9762;&#x6709; 1 &#x4EBF;&#x4E2A; key&#xFF0C;&#x5176;&#x4E2D;&#x6709; 10w &#x4E2A; key &#x662F;&#x4EE5;&#x67D0;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x5DF2;&#x77E5;&#x7684;&#x524D;&#x7F00;&#x5F00;&#x5934;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5C06;&#x5B83;&#x4EEC;&#x5168;&#x90E8;&#x627E;&#x51FA;&#x6765;&#xFF1F; &#x4F7F;&#x7528; keys &#x6307;&#x4EE4;&#x53EF;&#x4EE5;&#x626B;&#x51FA;&#x6307;&#x5B9A;&#x6A21;&#x5F0F;&#x7684; key &#x5217;&#x8868;&#x3002; &#x5BF9;&#x65B9;&#x63A5;&#x7740;&#x8FFD;&#x95EE;&#xFF1A;&#x5982;&#x679C;&#x8FD9;&#x4E2A; Redis &#x6B63;&#x5728;&#x7ED9;&#x7EBF;&#x4E0A;&#x7684;&#x4E1A;&#x52A1;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#xFF0C;&#x90A3;&#x4F7F;&#x7528;keys&#x6307;&#x4EE4;&#x4F1A;&#x6709;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF1F; &#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x4F60;&#x8981;&#x56DE;&#x7B54; Redis &#x5173;&#x952E;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x6027;&#xFF1A;Redis &#x7684;&#x5355;&#x7EBF;&#x7A0B;&#x7684;&#x3002;keys &#x6307;&#x4EE4;&#x4F1A;&#x5BFC;&#x81F4;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x7EBF;&#x4E0A;&#x670D;&#x52A1;&#x4F1A;&#x505C;&#x987F;&#xFF0C;&#x76F4;&#x5230;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#xFF0C;&#x670D;&#x52A1;&#x624D;&#x80FD;&#x6062;&#x590D;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; scan &#x6307;&#x4EE4;&#xFF0C;scan &#x6307;&#x4EE4;&#x53EF;&#x4EE5;&#x65E0;&#x963B;&#x585E;&#x7684;&#x63D0;&#x53D6;&#x51FA;&#x6307;&#x5B9A;&#x6A21;&#x5F0F;&#x7684; key &#x5217;&#x8868;&#xFF0C;&#x4F46;&#x662F;&#x4F1A;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x91CD;&#x590D;&#x6982;&#x7387;&#xFF0C;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x505A;&#x4E00;&#x6B21;&#x53BB;&#x91CD;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x6574;&#x4F53;&#x6240;&#x82B1;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#x4F1A;&#x6BD4;&#x76F4;&#x63A5;&#x7528; keys &#x6307;&#x4EE4;&#x957F;&#x3002; Redis &#x5E38;&#x89C1;&#x7684;&#x6027;&#x80FD;&#x95EE;&#x9898;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#xFF1F;&#x5982;&#x4F55;&#x89E3;&#x51B3;&#xFF1F;1&#x3001;Master &#x6700;&#x597D;&#x4E0D;&#x8981;&#x505A;&#x4EFB;&#x4F55;&#x6301;&#x4E45;&#x5316;&#x5DE5;&#x4F5C;&#xFF0C;&#x5982; RDB &#x5185;&#x5B58;&#x5FEB;&#x7167;&#x548C; AOF &#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x3002; Master &#x5199;&#x5185;&#x5B58;&#x5FEB;&#x7167;&#xFF0C;save &#x547D;&#x4EE4;&#x8C03;&#x5EA6; rdbSave &#x51FD;&#x6570;&#xFF0C;&#x4F1A;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x5F53;&#x5FEB;&#x7167;&#x6BD4;&#x8F83;&#x5927;&#x65F6;&#x5BF9;&#x6027;&#x80FD;&#x5F71;&#x54CD;&#x662F;&#x975E;&#x5E38;&#x5927;&#x7684;&#xFF0C;&#x4F1A;&#x95F4;&#x65AD;&#x6027;&#x6682;&#x505C;&#x670D;&#x52A1;&#xFF0C;&#x6240;&#x4EE5; Master &#x6700;&#x597D;&#x4E0D;&#x8981;&#x5199;&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x3002; Master AOF &#x6301;&#x4E45;&#x5316;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x91CD;&#x5199; AOF &#x6587;&#x4EF6;&#xFF0C;&#x8FD9;&#x4E2A;&#x6301;&#x4E45;&#x5316;&#x65B9;&#x5F0F;&#x5BF9;&#x6027;&#x80FD;&#x7684;&#x5F71;&#x54CD;&#x662F;&#x6700;&#x5C0F;&#x7684;&#xFF0C;&#x4F46;&#x662F; AOF &#x6587;&#x4EF6;&#x4F1A;&#x4E0D;&#x65AD;&#x589E;&#x5927;&#xFF0C;AOF &#x6587;&#x4EF6;&#x8FC7;&#x5927;&#x4F1A;&#x5F71;&#x54CD; Master &#x91CD;&#x542F;&#x7684;&#x6062;&#x590D;&#x901F;&#x5EA6;&#x3002; &#x6240;&#x4EE5;&#xFF0C;Master &#x6700;&#x597D;&#x4E0D;&#x8981;&#x505A;&#x4EFB;&#x4F55;&#x6301;&#x4E45;&#x5316;&#x5DE5;&#x4F5C;&#xFF0C;&#x5305;&#x62EC;&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x548C; AOF &#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x4E0D;&#x8981;&#x542F;&#x7528;&#x5185;&#x5B58;&#x5FEB;&#x7167;&#x505A;&#x6301;&#x4E45;&#x5316;&#x3002;&#x5982;&#x679C;&#x6570;&#x636E;&#x6BD4;&#x8F83;&#x5173;&#x952E;&#xFF0C;&#x67D0;&#x4E2A; Slave &#x5F00;&#x542F;AOF&#x5907;&#x4EFD;&#x6570;&#x636E;&#xFF0C;&#x7B56;&#x7565;&#x4E3A;&#x6BCF;&#x79D2;&#x540C;&#x6B65;&#x4E00;&#x6B21; 2&#x3001;Master &#x8C03;&#x7528; BGREWRITEAOF &#x91CD;&#x5199; AOF &#x6587;&#x4EF6;&#xFF0C;AOF &#x5728;&#x91CD;&#x5199;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5360;&#x5927;&#x91CF;&#x7684; CPU &#x548C;&#x5185;&#x5B58;&#x8D44;&#x6E90;&#xFF0C;&#x5BFC;&#x81F4;&#x670D;&#x52A1; load &#x8FC7;&#x9AD8;&#xFF0C;&#x51FA;&#x73B0;&#x77ED;&#x6682;&#x670D;&#x52A1;&#x6682;&#x505C;&#x73B0;&#x8C61;&#x3002; 3&#x3001;&#x5C3D;&#x91CF;&#x907F;&#x514D;&#x5728;&#x538B;&#x529B;&#x5F88;&#x5927;&#x7684;&#x4E3B;&#x5E93;&#x4E0A;&#x589E;&#x52A0;&#x4ECE;&#x5E93;&#x3002; 4&#x3001;&#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x4E0D;&#x8981;&#x7528;&#x56FE;&#x72B6;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7ED3;&#x6784;&#x66F4;&#x4E3A;&#x7A33;&#x5B9A;&#xFF0C;&#x5373;&#xFF1A;Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3... &#x3002; &#x8FD9;&#x6837;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x4E5F;&#x65B9;&#x4FBF;&#x89E3;&#x51B3;&#x5355;&#x70B9;&#x6545;&#x969C;&#x95EE;&#x9898;&#xFF0C;&#x5B9E;&#x73B0; Slave &#x5BF9; Master &#x7684;&#x66FF;&#x6362;&#x3002;&#x5982;&#x679C; Master&#x6302;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x7ACB;&#x523B;&#x542F;&#x7528; Slave1 &#x505A; Master &#xFF0C;&#x5176;&#x4ED6;&#x4E0D;&#x53D8;&#x3002; 5&#x3001;Redis &#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x7684;&#x6027;&#x80FD;&#x95EE;&#x9898;&#xFF0C;&#x4E3A;&#x4E86;&#x4E3B;&#x4ECE;&#x590D;&#x5236;&#x7684;&#x901F;&#x5EA6;&#x548C;&#x8FDE;&#x63A5;&#x7684;&#x7A33;&#x5B9A;&#x6027;&#xFF0C;Slave &#x548C; Master &#x6700;&#x597D;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x5C40;&#x57DF;&#x7F51;&#x5185;&#x3002; &#x548C;&#x98DE;&#x54E5;&#x6C9F;&#x901A;&#x8FC7;&#x540E;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E3B;&#x8282;&#x70B9;&#x5F00;&#x542F; AOF &#xFF0C;&#x4ECE;&#x8282;&#x70B9;&#x5F00;&#x542F; AOF + RDB &#x3002; &#x548C;&#x6653;&#x5CF0;&#x6C9F;&#x901A;&#x540E;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E3B;&#x8282;&#x70B9;&#x5F00;&#x542F; AOF &#xFF0C;&#x4ECE;&#x8282;&#x70B9;&#x5F00;&#x542F; RDB &#x5C45;&#x591A;&#xFF0C;&#x4E5F;&#x6709;&#x5F00;&#x542F; AOF + RDB &#x7684;&#x3002; &#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x4E0D;&#x91CD;&#x542F; Redis &#x4F1A;&#x5B9E;&#x65F6;&#x751F;&#x6548;&#x5417;&#xFF1F;&#x9488;&#x5BF9;&#x8FD0;&#x884C;&#x5B9E;&#x4F8B;&#xFF0C;&#x6709;&#x8BB8;&#x591A;&#x914D;&#x7F6E;&#x9009;&#x9879;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; CONFIG SET &#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x800C;&#x65E0;&#x9700;&#x6267;&#x884C;&#x4EFB;&#x4F55;&#x5F62;&#x5F0F;&#x7684;&#x91CD;&#x542F;&#x3002; &#x4ECE; Redis 2.2 &#x5F00;&#x59CB;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE; AOF &#x5207;&#x6362;&#x5230; RDB &#x7684;&#x5FEB;&#x7167;&#x6301;&#x4E45;&#x6027;&#x6216;&#x5176;&#x4ED6;&#x65B9;&#x5F0F;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x91CD;&#x542F; Redis&#x3002;&#x68C0;&#x7D22; CONFIG GET * &#x547D;&#x4EE4;&#x83B7;&#x53D6;&#x66F4;&#x591A;&#x4FE1;&#x606F;&#x3002; &#x4F46;&#x5076;&#x5C14;&#x91CD;&#x65B0;&#x542F;&#x52A8;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x5982;&#x4E3A;&#x5347;&#x7EA7; Redis &#x7A0B;&#x5E8F;&#x5230;&#x65B0;&#x7684;&#x7248;&#x672C;&#xFF0C;&#x6216;&#x8005;&#x5F53;&#x4F60;&#x9700;&#x8981;&#x4FEE;&#x6539;&#x67D0;&#x4E9B;&#x76EE;&#x524D; CONFIG &#x547D;&#x4EE4;&#x8FD8;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x914D;&#x7F6E;&#x53C2;&#x6570;&#x7684;&#x65F6;&#x5019;&#x3002; &#x5176;&#x4ED6;&#x95EE;&#x9898;&#x6709;&#x4E9B;&#x6BD4;&#x8F83;&#x51F6;&#x6B8B;&#x7684;&#x9762;&#x8BD5;&#x5B98;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x95EE;&#x6211;&#x4EEC;&#x4E00;&#x4E9B; Redis &#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A; Skiplist &#x63D2;&#x5165;&#x548C;&#x67E5;&#x8BE2;&#x539F;&#x7406;&#xFF1F; &#x538B;&#x7F29;&#x5217;&#x8868;&#x7684;&#x539F;&#x7406;&#xFF1F; Redis &#x5E95;&#x5C42;&#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528;&#x8DF3;&#x8DC3;&#x8868;&#x800C;&#x4E0D;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#xFF1F; &#x8DF3;&#x8DC3;&#x8868;&#x5728;&#x8303;&#x56F4;&#x67E5;&#x627E;&#x7684;&#x65F6;&#x5019;&#x6027;&#x80FD;&#x6BD4;&#x8F83;&#x9AD8;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5; &#x7CBE;&#x5C3D; Redis &#x9762;&#x8BD5;&#x9898;]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java后端核心知识]]></title>
    <url>%2F2019%2F02%2F23%2FJava%E5%90%8E%E7%AB%AF%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[&#x7B97;&#x6CD5;&#x5251;&#x6307; Offer &#x9898;&#x89E3;Leetcode &#x9898;&#x89E3;&#x7B97;&#x6CD5;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x8BA1;&#x7B97;&#x673A;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;Linux&#x7F51;&#x7EDC;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;HTTP Brief History of HTTP Socket&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x601D;&#x60F3;&#x6570;&#x636E;&#x5E93;&#x6570;&#x636E;&#x5E93;&#x7CFB;&#x7EDF;&#x539F;&#x7406;SQLLeetcode-Database &#x9898;&#x89E3;MySQL MySQL&#x6570;&#x636E;&#x7C7B;&#x578B;&#x53CA;&#x540E;&#x9762;&#x5C0F;&#x62EC;&#x53F7;&#x7684;&#x610F;&#x4E49; RedisJavaJava &#x57FA;&#x7840; &#x804A;&#x804A;&#x5F15;&#x7528;&#x548C;Threadlocal&#x7684;&#x90A3;&#x4E9B;&#x4E8B; Java &#x5BB9;&#x5668;Java &#x5E76;&#x53D1; Java&#x5E76;&#x53D1;&#x7F16;&#x7A0B;&#xFF1A;volatile&#x5173;&#x952E;&#x5B57;&#x89E3;&#x6790; &#x5927;&#x767D;&#x8BDD;&#x804A;&#x804A;Java&#x5E76;&#x53D1;&#x9762;&#x8BD5;&#x95EE;&#x9898;&#x4E4B;volatile&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; &#x5927;&#x767D;&#x8BDD;&#x804A;&#x804A;Java&#x5E76;&#x53D1;&#x9762;&#x8BD5;&#x95EE;&#x9898;&#x4E4B;Java 8&#x5982;&#x4F55;&#x4F18;&#x5316;CAS&#x6027;&#x80FD;&#xFF1F; &#x5927;&#x767D;&#x8BDD;&#x804A;&#x804A;Java&#x5E76;&#x53D1;&#x9762;&#x8BD5;&#x95EE;&#x9898;&#x4E4B;&#x8C08;&#x8C08;&#x4F60;&#x5BF9;AQS&#x7684;&#x7406;&#x89E3;&#xFF1F; &#x5927;&#x767D;&#x8BDD;&#x804A;&#x804A;Java&#x5E76;&#x53D1;&#x9762;&#x8BD5;&#x95EE;&#x9898;&#x4E4B;&#x516C;&#x5E73;&#x9501;&#x4E0E;&#x975E;&#x516C;&#x5E73;&#x9501;&#x662F;&#x5565;&#xFF1F; &#x5927;&#x767D;&#x8BDD;&#x804A;&#x804A;Java&#x5E76;&#x53D1;&#x9762;&#x8BD5;&#x95EE;&#x9898;&#x4E4B;&#x5FAE;&#x670D;&#x52A1;&#x6CE8;&#x518C;&#x4E2D;&#x5FC3;&#x7684;&#x8BFB;&#x5199;&#x9501;&#x4F18;&#x5316; Java &#x865A;&#x62DF;&#x673A; JVM&#x4E2D;&#x7684;&#x65B0;&#x751F;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#xFF08;Eden&#x7A7A;&#x95F4;&#x3001;&#x4E24;&#x4E2A;Survior&#x7A7A;&#x95F4;&#xFF09; Java&#x5BF9;&#x8C61;&#x7ED3;&#x6784;&#x4E0E;&#x9501;&#x5B9E;&#x73B0;&#x539F;&#x7406;&#x53CA;MarkWord&#x8BE6;&#x89E3; Java I/O NIO &#x5165;&#x95E8; &#x6846;&#x67B6;Spring Spring&#x4E8B;&#x52A1;&#x4F20;&#x64AD;&#x884C;&#x4E3A;&#x8BE6;&#x89E3; &#x4E2D;&#x95F4;&#x4EF6;Netty It&#x2019;s all about buffers: zero-copy, mmap and Java NIO Efficient data transfer through zero copy Scalable IO in Java Netty &#x90A3;&#x4E9B;&#x4E8B;&#x513F; &#x2014;&#x2014;&#x2014; Reactor&#x6A21;&#x5F0F;&#x8BE6;&#x89E3; &#x7CFB;&#x7EDF;&#x8BBE;&#x8BA1;&#x7CFB;&#x7EDF;&#x8BBE;&#x8BA1;&#x57FA;&#x7840;&#x5206;&#x5E03;&#x5F0F;&#x96C6;&#x7FA4;&#x653B;&#x51FB;&#x6280;&#x672F;&#x7F13;&#x5B58;&#x6D88;&#x606F;&#x961F;&#x5217;&#x5DE5;&#x5177;GitDocker&#x6784;&#x5EFA;&#x5DE5;&#x5177;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;]]></content>
      <categories>
        <category>知识图谱</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2F2019%2F02%2F22%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[&#x6570;&#x636E;&#x5E93;&#x67B6;&#x6784;&#x6570;&#x636E;&#x5E93;&#x67B6;&#x6784;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x5B58;&#x50A8;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x548C;&#x7A0B;&#x5E8F;&#x5B9E;&#x4F8B;&#x4E24;&#x5927;&#x5757;&#xFF0C;&#x800C;&#x7A0B;&#x5E8F;&#x5B9E;&#x4F8B;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x529F;&#x80FD;&#x53C8;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x5982;&#x4E0B;&#x5C0F;&#x6A21;&#x5757;&#x3002; &#x7D22;&#x5F15;&#x6A21;&#x5757;&#x5E38;&#x89C1;&#x7684;&#x95EE;&#x9898;&#x6709;&#xFF1A; &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;&#x7D22;&#x5F15; &#x4EC0;&#x4E48;&#x6837;&#x7684;&#x4FE1;&#x606F;&#x80FD;&#x6210;&#x4E3A;&#x7D22;&#x5F15; &#x7D22;&#x5F15;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x5BC6;&#x96C6;&#x7D22;&#x5F15;&#x548C;&#x7A00;&#x758F;&#x7D22;&#x5F15;&#x7684;&#x533A;&#x522B; &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x5C31;&#x50CF;&#x67E5;&#x5B57;&#x5178;&#x4E00;&#x6837;&#xFF0C;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x67E5;&#x8BE2;&#x6570;&#x636E; &#x4EC0;&#x4E48;&#x6837;&#x7684;&#x4FE1;&#x606F;&#x80FD;&#x6210;&#x4E3A;&#x7D22;&#x5F15;&#x4E3B;&#x952E;&#x3001;&#x552F;&#x4E00;&#x952E;&#x4EE5;&#x53CA;&#x666E;&#x901A;&#x952E;&#x7B49; &#x7D22;&#x5F15;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x751F;&#x6210;&#x7D22;&#x5F15;&#xFF0C;&#x5EFA;&#x7ACB;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#x8FDB;&#x884C;&#x4E8C;&#x5206;&#x67E5;&#x627E; &#x751F;&#x6210;&#x7D22;&#x5F15;&#xFF0C;&#x5EFA;&#x7ACB; B Tree &#x7ED3;&#x6784;&#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x67E5;&#x627E; &#x751F;&#x6210;&#x7D22;&#x5F15;&#xFF0C;&#x5EFA;&#x7ACB; B+ Tree &#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x67E5;&#x627E; &#x751F;&#x6210;&#x7D22;&#x5F15;&#xFF0C;&#x5EFA;&#x7ACB; Hash &#x7ED3;&#x6784;&#x8FDB;&#x884C;&#x67E5;&#x627E; &#x4EC0;&#x4E48;&#x662F; B Tree &#x7D22;&#x5F15;&#xFF1F;B-Tree &#x662F;&#x4E3A;&#x78C1;&#x76D8;&#x7B49;&#x5916;&#x5B58;&#x50A8;&#x8BBE;&#x5907;&#x8BBE;&#x8BA1;&#x7684;&#x4E00;&#x79CD;&#x5E73;&#x8861;&#x67E5;&#x627E;&#x6811;&#x3002;&#x56E0;&#x6B64;&#x5728;&#x8BB2; B-Tree &#x4E4B;&#x524D;&#x5148;&#x4E86;&#x89E3;&#x4E0B;&#x78C1;&#x76D8;&#x7684;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#x3002; &#x7CFB;&#x7EDF;&#x4ECE;&#x78C1;&#x76D8;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x5230;&#x5185;&#x5B58;&#x65F6;&#x662F;&#x4EE5;&#x78C1;&#x76D8;&#x5757;&#xFF08;block&#xFF09;&#x4E3A;&#x57FA;&#x672C;&#x5355;&#x4F4D;&#x7684;&#xFF0C;&#x4F4D;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x78C1;&#x76D8;&#x5757;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x4F1A;&#x88AB;&#x4E00;&#x6B21;&#x6027;&#x8BFB;&#x53D6;&#x51FA;&#x6765;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x9700;&#x8981;&#x4EC0;&#x4E48;&#x53D6;&#x4EC0;&#x4E48;&#x3002; InnoDB&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x4E2D;&#x6709;&#x9875;&#xFF08;Page&#xFF09;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x9875;&#x662F;&#x5176;&#x78C1;&#x76D8;&#x7BA1;&#x7406;&#x7684;&#x6700;&#x5C0F;&#x5355;&#x4F4D;&#x3002;InnoDB &#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x4E2D;&#x9ED8;&#x8BA4;&#x6BCF;&#x4E2A;&#x9875;&#x7684;&#x5927;&#x5C0F;&#x4E3A; 16 KB&#xFF0C;&#x53EF;&#x901A;&#x8FC7;&#x53C2;&#x6570; innodb_page_size &#x5C06;&#x9875;&#x7684;&#x5927;&#x5C0F;&#x8BBE;&#x7F6E;&#x4E3A; 4K&#x3001;8K&#x3001;16K &#xFF0C;&#x5728; MySQL &#x4E2D;&#x53EF;&#x901A;&#x8FC7;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x67E5;&#x770B;&#x9875;&#x7684;&#x5927;&#x5C0F;&#xFF1A; 1mysql&gt; show variables like &apos;innodb_page_size&apos;; &#x800C;&#x7CFB;&#x7EDF;&#x4E00;&#x4E2A;&#x78C1;&#x76D8;&#x5757;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x5F80;&#x5F80;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5927;&#xFF0C;&#x56E0;&#x6B64; InnoDB &#x6BCF;&#x6B21;&#x7533;&#x8BF7;&#x78C1;&#x76D8;&#x7A7A;&#x95F4;&#x65F6;&#x90FD;&#x4F1A;&#x662F;&#x82E5;&#x5E72;&#x5730;&#x5740;&#x8FDE;&#x7EED;&#x78C1;&#x76D8;&#x5757;&#x6765;&#x8FBE;&#x5230;&#x9875;&#x7684;&#x5927;&#x5C0F; 16KB &#x3002;InnoDB &#x5728;&#x628A;&#x78C1;&#x76D8;&#x6570;&#x636E;&#x8BFB;&#x5165;&#x5230;&#x78C1;&#x76D8;&#x65F6;&#x4F1A;&#x4EE5;&#x9875;&#x4E3A;&#x57FA;&#x672C;&#x5355;&#x4F4D;&#xFF0C;&#x5728;&#x67E5;&#x8BE2;&#x6570;&#x636E;&#x65F6;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x9875;&#x4E2D;&#x7684;&#x6BCF;&#x6761;&#x6570;&#x636E;&#x90FD;&#x80FD;&#x6709;&#x52A9;&#x4E8E;&#x5B9A;&#x4F4D;&#x6570;&#x636E;&#x8BB0;&#x5F55;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x5C06;&#x4F1A;&#x51CF;&#x5C11;&#x78C1;&#x76D8; I/O &#x6B21;&#x6570;&#xFF0C;&#x63D0;&#x9AD8;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#x3002; B-Tree &#x7ED3;&#x6784;&#x7684;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x8BA9;&#x7CFB;&#x7EDF;&#x9AD8;&#x6548;&#x7684;&#x627E;&#x5230;&#x6570;&#x636E;&#x6240;&#x5728;&#x7684;&#x78C1;&#x76D8;&#x5757;&#x3002;&#x4E3A;&#x4E86;&#x63CF;&#x8FF0;B-Tree&#xFF0C;&#x9996;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x6761;&#x8BB0;&#x5F55;&#x4E3A;&#x4E00;&#x4E2A;&#x4E8C;&#x5143;&#x7EC4; [key, data] &#xFF0C;key &#x4E3A;&#x8BB0;&#x5F55;&#x7684;&#x952E;&#x503C;&#xFF0C;&#x5BF9;&#x5E94;&#x8868;&#x4E2D;&#x7684;&#x4E3B;&#x952E;&#x503C;&#xFF0C;data &#x4E3A;&#x4E00;&#x884C;&#x8BB0;&#x5F55;&#x4E2D;&#x9664;&#x4E3B;&#x952E;&#x5916;&#x7684;&#x6570;&#x636E;&#x3002;&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x8BB0;&#x5F55;&#xFF0C;key&#x503C;&#x4E92;&#x4E0D;&#x76F8;&#x540C;&#x3002; &#x4E00;&#x68F5; m &#x9636;&#x7684; B-Tree &#x6709;&#x5982;&#x4E0B;&#x7279;&#x6027;&#xFF1A; &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6700;&#x591A;&#x6709; m &#x4E2A;&#x5B69;&#x5B50; &#x9664;&#x4E86;&#x6839;&#x8282;&#x70B9;&#x548C;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5916;&#xFF0C;&#x5176;&#x5B83;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x81F3;&#x5C11;&#x6709; Ceil(m/2) &#x4E2A;&#x5B69;&#x5B50; &#x82E5;&#x6839;&#x8282;&#x70B9;&#x4E0D;&#x662F;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x81F3;&#x5C11;&#x6709; 2 &#x4E2A;&#x5B69;&#x5B50; &#x6240;&#x6709;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x90FD;&#x5728;&#x540C;&#x4E00;&#x5C42;&#xFF0C;&#x4E14;&#x4E0D;&#x5305;&#x542B;&#x5176;&#x5B83;&#x5173;&#x952E;&#x5B57;&#x4FE1;&#x606F; &#x6BCF;&#x4E2A;&#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5305;&#x542B; n &#x4E2A;&#x5173;&#x952E;&#x5B57;&#x4FE1;&#x606F;&#xFF08;P0,P1,&#x2026;Pn, k1,&#x2026;kn&#xFF09; &#x5173;&#x952E;&#x5B57;&#x7684;&#x4E2A;&#x6570; n &#x6EE1;&#x8DB3;&#xFF1A;ceil(m/2)-1 &lt;= n &lt;= m-1 ki(i=1,&#x2026;n) &#x4E3A;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4E14;&#x5173;&#x952E;&#x5B57;&#x5347;&#x5E8F;&#x6392;&#x5E8F; Pi(i=0,&#x2026;n) &#x4E3A;&#x6307;&#x5411;&#x5B50;&#x6811;&#x6839;&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488;&#x3002;P(i-1) &#x6307;&#x5411;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6240;&#x6709;&#x8282;&#x70B9;&#x5173;&#x952E;&#x5B57;&#x5747;&#x5C0F;&#x4E8E; ki &#xFF0C;&#x4F46;&#x90FD;&#x5927;&#x4E8E; k(i-1) B-Tree &#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6839;&#x636E;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x5927;&#x91CF;&#x7684;&#x5173;&#x952E;&#x5B57;&#x4FE1;&#x606F;&#x548C;&#x5206;&#x652F;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x4E3A;&#x4E00;&#x4E2A; 3 &#x9636;&#x7684; B-Tree&#xFF1A; &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5360;&#x7528;&#x4E00;&#x4E2A;&#x76D8;&#x5757;&#x7684;&#x78C1;&#x76D8;&#x7A7A;&#x95F4;&#xFF0C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x4E0A;&#x6709;&#x4E24;&#x4E2A;&#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x7684; key &#x548C;&#x4E09;&#x4E2A;&#x6307;&#x5411;&#x5B50;&#x6811;&#x6839;&#x8282;&#x70B9;&#x7684; point &#xFF0C;point &#x5B58;&#x50A8;&#x7684;&#x662F;&#x5B50;&#x8282;&#x70B9;&#x6240;&#x5728;&#x78C1;&#x76D8;&#x5757;&#x7684;&#x5730;&#x5740;&#x3002;&#x4E24;&#x4E2A; key &#x5212;&#x5206;&#x6210;&#x7684;&#x4E09;&#x4E2A;&#x8303;&#x56F4;&#x57DF;&#xFF0C;&#x5BF9;&#x5E94;&#x4E09;&#x4E2A; point &#x6307;&#x5411;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6570;&#x636E;&#x7684;&#x8303;&#x56F4;&#x57DF;&#x3002; &#x4EE5;&#x6839;&#x8282;&#x70B9;&#x4E3A;&#x4F8B;&#xFF0C;key &#x4E3A; 17 &#x548C; 35 &#xFF0C;P1 &#x6307;&#x9488;&#x6307;&#x5411;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6570;&#x636E;&#x8303;&#x56F4;&#x4E3A;&#x5C0F;&#x4E8E; 17 &#xFF0C;P2 &#x6307;&#x9488;&#x6307;&#x5411;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6570;&#x636E;&#x8303;&#x56F4;&#x4E3A; [17~35] &#xFF0C;P3 &#x6307;&#x9488;&#x6307;&#x5411;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6570;&#x636E;&#x8303;&#x56F4;&#x4E3A;&#x5927;&#x4E8E; 35 &#x3002; &#x6A21;&#x62DF;&#x67E5;&#x627E; key &#x4E3A; 29 &#x7684;&#x8FC7;&#x7A0B;&#xFF1A; 1&#x3001;&#x6839;&#x636E;&#x6839;&#x8282;&#x70B9;&#x627E;&#x5230;&#x78C1;&#x76D8;&#x5757; 1 &#xFF0C;&#x8BFB;&#x5165;&#x5185;&#x5B58;&#x3002;&#x3010;&#x78C1;&#x76D8;I/O&#x64CD;&#x4F5C;&#x7B2C;1&#x6B21;&#x3011; 2&#x3001;&#x6BD4;&#x8F83; key 29 &#x5728;&#x533A;&#x95F4;&#xFF08;17,35&#xFF09;&#xFF0C;&#x627E;&#x5230;&#x78C1;&#x76D8;&#x5757; 1 &#x7684;&#x6307;&#x9488; P2 &#x3002; 3&#x3001;&#x6839;&#x636E; P2 &#x6307;&#x9488;&#x627E;&#x5230;&#x78C1;&#x76D8;&#x5757; 3 &#xFF0C;&#x8BFB;&#x5165;&#x5185;&#x5B58;&#x3002;&#x3010;&#x78C1;&#x76D8;I/O&#x64CD;&#x4F5C;&#x7B2C;2&#x6B21;&#x3011; 4&#x3001;&#x6BD4;&#x8F83; key 29 &#x5728;&#x533A;&#x95F4;&#xFF08;26,30&#xFF09;&#xFF0C;&#x627E;&#x5230;&#x78C1;&#x76D8;&#x5757;3&#x7684;&#x6307;&#x9488;P2&#x3002; 5&#x3001;&#x6839;&#x636E; P2 &#x6307;&#x9488;&#x627E;&#x5230;&#x78C1;&#x76D8;&#x5757; 8 &#xFF0C;&#x8BFB;&#x5165;&#x5185;&#x5B58;&#x3002;&#x3010;&#x78C1;&#x76D8;I/O&#x64CD;&#x4F5C;&#x7B2C;3&#x6B21;&#x3011; 6&#x3001;&#x5728;&#x78C1;&#x76D8;&#x5757; 8 &#x4E2D;&#x7684; key &#x5217;&#x8868;&#x4E2D;&#x627E;&#x5230; eky 29 &#x3002; &#x5206;&#x6790;&#x4E0A;&#x9762;&#x8FC7;&#x7A0B;&#xFF0C;&#x53D1;&#x73B0;&#x9700;&#x8981; 3 &#x6B21;&#x78C1;&#x76D8; I/O &#x64CD;&#x4F5C;&#xFF0C;&#x548C; 3 &#x6B21;&#x5185;&#x5B58;&#x67E5;&#x627E;&#x64CD;&#x4F5C;&#x3002;&#x7531;&#x4E8E;&#x5185;&#x5B58;&#x4E2D;&#x7684; key &#x662F;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x8868;&#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x6CD5;&#x67E5;&#x627E;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#x3002;&#x800C; 3 &#x6B21;&#x78C1;&#x76D8; I/O &#x64CD;&#x4F5C;&#x662F;&#x5F71;&#x54CD;&#x6574;&#x4E2A; B-Tree &#x67E5;&#x627E;&#x6548;&#x7387;&#x7684;&#x51B3;&#x5B9A;&#x56E0;&#x7D20;&#x3002;B-Tree &#x76F8;&#x5BF9;&#x4E8E; AVLTree &#x7F29;&#x51CF;&#x4E86;&#x8282;&#x70B9;&#x4E2A;&#x6570;&#xFF0C;&#x4F7F;&#x6BCF;&#x6B21;&#x78C1;&#x76D8; I/O &#x53D6;&#x5230;&#x5185;&#x5B58;&#x7684;&#x6570;&#x636E;&#x90FD;&#x53D1;&#x6325;&#x4E86;&#x4F5C;&#x7528;&#xFF0C;&#x4ECE;&#x800C;&#x63D0;&#x9AD8;&#x4E86;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#x3002; &#x4EC0;&#x4E48;&#x662F; B+Tree &#x7D22;&#x5F15;&#xFF1F;B+Tree &#x662F;&#x5728; B-Tree &#x57FA;&#x7840;&#x4E0A;&#x7684;&#x4E00;&#x79CD;&#x4F18;&#x5316;&#xFF0C;&#x4F7F;&#x5176;&#x66F4;&#x9002;&#x5408;&#x5B9E;&#x73B0;&#x5916;&#x5B58;&#x50A8;&#x7D22;&#x5F15;&#x7ED3;&#x6784;&#xFF0C;InnoDB&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x5C31;&#x662F;&#x7528; B+Tree &#x5B9E;&#x73B0;&#x5176;&#x7D22;&#x5F15;&#x7ED3;&#x6784;&#x3002; &#x4ECE;&#x4E0A;&#x4E00;&#x8282;&#x4E2D;&#x7684; B-Tree &#x7ED3;&#x6784;&#x56FE;&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x4E2D;&#x4E0D;&#x4EC5;&#x5305;&#x542B;&#x6570;&#x636E;&#x7684; key &#x503C;&#xFF0C;&#x8FD8;&#x6709; data &#x503C;&#x3002;&#x800C;&#x6BCF;&#x4E00;&#x4E2A;&#x9875;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x662F;&#x6709;&#x9650;&#x7684;&#xFF0C;&#x5982;&#x679C; data &#x6570;&#x636E;&#x8F83;&#x5927;&#x65F6;&#x5C06;&#x4F1A;&#x5BFC;&#x81F4;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x4E00;&#x4E2A;&#x9875;&#xFF09;&#x80FD;&#x5B58;&#x50A8;&#x7684; key &#x7684;&#x6570;&#x91CF;&#x5F88;&#x5C0F;&#xFF0C;&#x5F53;&#x5B58;&#x50A8;&#x7684;&#x6570;&#x636E;&#x91CF;&#x5F88;&#x5927;&#x65F6;&#x540C;&#x6837;&#x4F1A;&#x5BFC;&#x81F4; B-Tree &#x7684;&#x6DF1;&#x5EA6;&#x8F83;&#x5927;&#xFF0C;&#x589E;&#x5927;&#x67E5;&#x8BE2;&#x65F6;&#x7684;&#x78C1;&#x76D8; I/O &#x6B21;&#x6570;&#xFF0C;&#x8FDB;&#x800C;&#x5F71;&#x54CD;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#x3002;&#x5728; B+Tree &#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x6570;&#x636E;&#x8BB0;&#x5F55;&#x8282;&#x70B9;&#x90FD;&#x662F;&#x6309;&#x7167;&#x952E;&#x503C;&#x5927;&#x5C0F;&#x987A;&#x5E8F;&#x5B58;&#x653E;&#x5728;&#x540C;&#x4E00;&#x5C42;&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x4E0A;&#xFF0C;&#x800C;&#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x4E0A;&#x53EA;&#x5B58;&#x50A8; key &#x503C;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x52A0;&#x5927;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5B58;&#x50A8;&#x7684; key &#x503C;&#x6570;&#x91CF;&#xFF0C;&#x964D;&#x4F4E; B+Tree &#x7684;&#x9AD8;&#x5EA6;&#x3002; B+Tree &#x76F8;&#x5BF9;&#x4E8E; B-Tree &#x6709;&#x51E0;&#x70B9;&#x4E0D;&#x540C;&#xFF1A; &#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x53EA;&#x5B58;&#x50A8;&#x952E;&#x503C;&#x4FE1;&#x606F;&#x3002; &#x6240;&#x6709;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x4E4B;&#x95F4;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x94FE;&#x6307;&#x9488;&#x3002; &#x6570;&#x636E;&#x8BB0;&#x5F55;&#x90FD;&#x5B58;&#x653E;&#x5728;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x4E2D;&#x3002; B+ Tree &#x66F4;&#x9002;&#x5408;&#x7528;&#x6765;&#x505A;&#x5B58;&#x50A8;&#x7D22;&#x5F15;&#xFF1A; B+ &#x6570;&#x7684;&#x78C1;&#x76D8;&#x8BFB;&#x5199;&#x4EE3;&#x4EF7;&#x66F4;&#x4F4E; B+ &#x6570;&#x7684;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#x66F4;&#x52A0;&#x7A33;&#x5B9A; B+ &#x6570;&#x66F4;&#x6709;&#x5229;&#x4E8E;&#x5BF9;&#x6570;&#x636E;&#x5E93;&#x7684;&#x626B;&#x63CF;&#xFF08;&#x8303;&#x56F4;&#x67E5;&#x8BE2;&#xFF09; &#x5C06;&#x4E0A;&#x4E00;&#x8282;&#x4E2D;&#x7684; B-Tree &#x4F18;&#x5316;&#xFF0C;&#x7531;&#x4E8E; B+Tree &#x7684;&#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x53EA;&#x5B58;&#x50A8;&#x952E;&#x503C;&#x4FE1;&#x606F;&#xFF0C;&#x5047;&#x8BBE;&#x6BCF;&#x4E2A;&#x78C1;&#x76D8;&#x5757;&#x80FD;&#x5B58;&#x50A8; 4 &#x4E2A;&#x952E;&#x503C;&#x53CA;&#x6307;&#x9488;&#x4FE1;&#x606F;&#xFF0C;&#x5219;&#x53D8;&#x6210; B+Tree &#x540E;&#x5176;&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF1A; &#x78C1;&#x76D8;&#x5757;4&#x4E2D;&#x7684;10&#x6570;&#x636E;&#xFF0C;&#x753B;&#x9519;&#x4E86;&#xFF0C;&#x8303;&#x56F4;&#x5728;[K[i], K[i+1])&#xFF0C;&#x5DE6;&#x95ED;&#x53F3;&#x5F00; &#x901A;&#x5E38;&#x5728; B+Tree &#x4E0A;&#x6709;&#x4E24;&#x4E2A;&#x5934;&#x6307;&#x9488;&#xFF0C;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x5173;&#x952E;&#x5B57;&#x6700;&#x5C0F;&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x6709;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x6570;&#x636E;&#x8282;&#x70B9;&#xFF09;&#x4E4B;&#x95F4;&#x662F;&#x4E00;&#x79CD;&#x94FE;&#x5F0F;&#x73AF;&#x7ED3;&#x6784;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5BF9; B+Tree &#x8FDB;&#x884C;&#x4E24;&#x79CD;&#x67E5;&#x627E;&#x8FD0;&#x7B97;&#xFF1A;&#x4E00;&#x79CD;&#x662F;&#x5BF9;&#x4E8E;&#x4E3B;&#x952E;&#x7684;&#x8303;&#x56F4;&#x67E5;&#x627E;&#x548C;&#x5206;&#x9875;&#x67E5;&#x627E;&#xFF0C;&#x53E6;&#x4E00;&#x79CD;&#x662F;&#x4ECE;&#x6839;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x8FDB;&#x884C;&#x968F;&#x673A;&#x67E5;&#x627E;&#x3002; &#x53EF;&#x80FD;&#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x4E2D;&#x53EA;&#x6709; 22 &#x6761;&#x6570;&#x636E;&#x8BB0;&#x5F55;&#xFF0C;&#x770B;&#x4E0D;&#x51FA; B+Tree &#x7684;&#x4F18;&#x70B9;&#xFF0C;&#x4E0B;&#x9762;&#x505A;&#x4E00;&#x4E2A;&#x63A8;&#x7B97;&#xFF1A; InnoDB &#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x4E2D;&#x9875;&#x7684;&#x5927;&#x5C0F;&#x4E3A; 16KB&#xFF0C;&#x4E00;&#x822C;&#x8868;&#x7684;&#x4E3B;&#x952E;&#x7C7B;&#x578B;&#x4E3A; INT&#xFF08;&#x5360;&#x7528;4&#x4E2A;&#x5B57;&#x8282;&#xFF09; &#x6216; BIGINT&#xFF08;&#x5360;&#x7528;8&#x4E2A;&#x5B57;&#x8282;&#xFF09;&#xFF0C;&#x6307;&#x9488;&#x7C7B;&#x578B;&#x4E5F;&#x4E00;&#x822C;&#x4E3A; 4 &#x6216; 8 &#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E00;&#x4E2A;&#x9875;&#xFF08;B+Tree &#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF09;&#x4E2D;&#x5927;&#x6982;&#x5B58;&#x50A8; 16KB/(8B+8B)=1K &#x4E2A;&#x952E;&#x503C;&#xFF08;&#x56E0;&#x4E3A;&#x662F;&#x4F30;&#x503C;&#xFF0C;&#x4E3A;&#x65B9;&#x4FBF;&#x8BA1;&#x7B97;&#xFF0C;&#x8FD9;&#x91CC;&#x7684; K &#x53D6;&#x503C;&#x4E3A;&#x3016;10&#x3017;^3&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E00;&#x4E2A;&#x6DF1;&#x5EA6;&#x4E3A; 3 &#x7684; B+Tree &#x7D22;&#x5F15;&#x53EF;&#x4EE5;&#x7EF4;&#x62A4;10^3 10^3 10^3 = 10&#x4EBF; &#x6761;&#x8BB0;&#x5F55;&#x3002; &#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x4E2D;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x53EF;&#x80FD;&#x4E0D;&#x80FD;&#x586B;&#x5145;&#x6EE1;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#xFF0C;B+Tree &#x7684;&#x9AD8;&#x5EA6;&#x4E00;&#x822C;&#x90FD;&#x5728; 2~4 &#x5C42;&#x3002;MySQL &#x7684; InnoDB &#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x5728;&#x8BBE;&#x8BA1;&#x65F6;&#x662F;&#x5C06;&#x6839;&#x8282;&#x70B9;&#x5E38;&#x9A7B;&#x5185;&#x5B58;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x67E5;&#x627E;&#x67D0;&#x4E00;&#x952E;&#x503C;&#x7684;&#x884C;&#x8BB0;&#x5F55;&#x65F6;&#x6700;&#x591A;&#x53EA;&#x9700;&#x8981; 1~3 &#x6B21;&#x78C1;&#x76D8; I/O &#x64CD;&#x4F5C;&#x3002; &#x4EC0;&#x4E48;&#x662F; hash &#x7D22;&#x5F15;&#xFF1F;&#x57FA;&#x4E8E;&#x54C8;&#x5E0C;&#x8868;&#x5B9E;&#x73B0;&#xFF0C;&#x4F18;&#x70B9;&#x662F;&#x67E5;&#x627E;&#x975E;&#x5E38;&#x5FEB;&#x3002;&#x5982;&#x4E0B;&#x56FE; &#xFF1A; &#x54C8;&#x5E0C;&#x7D22;&#x5F15;&#x5C31;&#x662F;&#x91C7;&#x7528;&#x4E00;&#x5B9A;&#x7684;&#x54C8;&#x5E0C;&#x7B97;&#x6CD5;&#xFF0C;&#x5C06;&#x952E;&#x503C;&#x6362;&#x7B97;&#x6210;&#x65B0;&#x7684;&#x54C8;&#x5E0C;&#x503C;&#xFF0C;&#x68C0;&#x7D22;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x60F3;B+Tree&#x90A3;&#x6837;&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x67E5;&#x627E;&#xFF0C;&#x800C;&#x662F;&#x7ECF;&#x8FC7;&#x8BA1;&#x7B97;&#x76F4;&#x63A5;&#x5B9A;&#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002; &#x4F46;&#x662F;&#x4E5F;&#x6709;&#x9650;&#x5236;&#xFF1A; &#x53EA;&#x652F;&#x6301;&#x7CBE;&#x786E;&#x67E5;&#x627E;&#xFF0C;&#x4E0D;&#x80FD;&#x7528;&#x4E8E;&#x90E8;&#x5206;&#x67E5;&#x627E;&#x548C;&#x8303;&#x56F4;&#x67E5;&#x627E;&#x3002;&#x65E0;&#x6CD5;&#x6392;&#x5E8F;&#x548C;&#x5206;&#x7EC4;&#x3002;&#x56E0;&#x4E3A;&#x539F;&#x6765;&#x6709;&#x5E8F;&#x7684;&#x952E;&#x503C;&#x7ECF;&#x8FC7;&#x54C8;&#x5E0C;&#x7B97;&#x6CD5;&#x5F88;&#x53EF;&#x80FD;&#x6253;&#x4E71;&#x3002; &#x5982;&#x679C;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x5F88;&#x591A;&#xFF0C;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x5F88;&#x6162;&#x3002;&#x6BD4;&#x5982;&#x5728;&#x6709;&#x5927;&#x91CF;&#x91CD;&#x590D;&#x952E;&#x503C;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x3002; &#x4E0D;&#x80FD;&#x5229;&#x7528;&#x90E8;&#x5206;&#x7D22;&#x5F15;&#x67E5;&#x8BE2; &#x4E0D;&#x80FD; &#x805A;&#x96C6;&#x7D22;&#x5F15;&#x4E0E;&#x975E;&#x805A;&#x96C6;&#x7D22;&#x5F15; MyISAM &#x7D22;&#x5F15;&#x4E0E; InnoDB &#x7D22;&#x5F15;&#x7684;&#x533A;&#x522B;&#xFF1F; InnoDB &#x7D22;&#x5F15;&#x662F;&#x805A;&#x7C07;&#x7D22;&#x5F15;&#xFF0C;MyISAM &#x7D22;&#x5F15;&#x662F;&#x975E;&#x805A;&#x7C07;&#x7D22;&#x5F15;&#x3002; InnoDB &#x7684;&#x4E3B;&#x952E;&#x7D22;&#x5F15;&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5B58;&#x50A8;&#x7740;&#x884C;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;&#x4E3B;&#x952E;&#x7D22;&#x5F15;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x3002; MyISAM &#x7D22;&#x5F15;&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x884C;&#x6570;&#x636E;&#x5730;&#x5740;&#xFF0C;&#x9700;&#x8981;&#x518D;&#x5BFB;&#x5740;&#x4E00;&#x6B21;&#x624D;&#x80FD;&#x5F97;&#x5230;&#x6570;&#x636E;&#x3002; InnoDB &#x975E;&#x4E3B;&#x952E;&#x7D22;&#x5F15;&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x4E3B;&#x952E;&#x548C;&#x5176;&#x4ED6;&#x5E26;&#x7D22;&#x5F15;&#x7684;&#x5217;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;&#x67E5;&#x8BE2;&#x65F6;&#x505A;&#x5230;&#x8986;&#x76D6;&#x7D22;&#x5F15;&#x4F1A;&#x975E;&#x5E38;&#x9AD8;&#x6548; &#x5982;&#x4F55;&#x5B9A;&#x4F4D;&#x5E76;&#x4F18;&#x5316;&#x6162;&#x67E5;&#x8BE2;&#x7684; Sql&#x9700;&#x8981;&#x5177;&#x4F53;&#x573A;&#x666F;&#x5177;&#x4F53;&#x5206;&#x6790;&#xFF0C;&#x5176;&#x5927;&#x81F4;&#x601D;&#x8DEF; &#x6839;&#x636E;&#x6162;&#x65E5;&#x5FD7;&#x5B9A;&#x4F4D;&#x5230;&#x6162;&#x67E5;&#x8BE2;&#x7684; sql &#x4F7F;&#x7528; explain &#x7B49;&#x5DE5;&#x5177;&#x5206;&#x6790; sql &#x4FEE;&#x6539; sql &#x6216;&#x8005;&#x5C3D;&#x91CF;&#x8BA9; sql &#x8D70;&#x7D22;&#x5F15; &#x5B9A;&#x4F4D;&#x6162;&#x67E5;&#x8BE2;sql&#x5F00;&#x542F;&#x6162;&#x67E5;&#x8BE2;&#x65E5;&#x5FD7;&#x5373;&#x53EF; &#x6587;&#x4EF6;&#x65B9;&#x5F0F;&#x914D;&#x7F6E; MySQL &#x6162;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x6CD5;&#xFF1A; &#x67E5;&#x8BE2; MySQL &#x6162;&#x67E5;&#x8BE2;&#x72B6;&#x6001;&#x7684;&#x65B9;&#x6CD5;&#xFF1A; 1SHOW VARIABLES LIKE &apos;%query%&apos;; &#x5728; mysql &#x914D;&#x7F6E;&#x6587;&#x4EF6; my.cnf &#x4E2D;&#x589E;&#x52A0;&#xFF1A; 123log-slow-queries=/opt/data/slowquery.loglong_query_time=2 log-queries-not-using-indexes &#x547D;&#x4EE4;&#x65B9;&#x5F0F;&#x914D;&#x7F6E; MySQL &#x6162;&#x67E5;&#x8BE2;&#x7684;&#x65B9;&#x6CD5;&#xFF1A; 123set global slow_query_log=on; set global long_query_time=1; set global slow_query_log_file=&#x2018;/opt/data/slow_query.log&#x2019;; &#x89E3;&#x6790; MySQL &#x6162;&#x67E5;&#x8BE2;&#x65E5;&#x5FD7;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6309;&#x7167; sql &#x6267;&#x884C;&#x65F6;&#x95F4;&#x6700;&#x957F;&#x7684;&#x524D; 20 &#x6761; sql&#xFF1A; 1mysqldumpslow -s t -t 20 -g &apos;select&apos; /opt/data/slowquery.log &#x5728; log &#x4E2D;&#x5C31;&#x80FD;&#x627E;&#x5230;&#x6162;&#x67E5;&#x8BE2;&#x7684; sql&#x3002; Explian &#x5173;&#x952E;&#x5B57; Explain&#x547D;&#x4EE4;&#x5728;&#x89E3;&#x51B3;&#x6570;&#x636E;&#x5E93;&#x6027;&#x80FD;&#x4E0A;&#x662F;&#x7B2C;&#x4E00;&#x63A8;&#x8350;&#x4F7F;&#x7528;&#x547D;&#x4EE4;&#xFF0C;&#x5927;&#x90E8;&#x5206;&#x7684;&#x6027;&#x80FD;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6B64;&#x547D;&#x4EE4;&#x6765;&#x7B80;&#x5355;&#x7684;&#x89E3;&#x51B3;&#xFF0C;Explain&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x67E5;&#x770B;SQL&#x8BED;&#x53E5;&#x7684;&#x6267;&#x884C;&#x6548; &#x679C;&#xFF0C;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x9009;&#x62E9;&#x66F4;&#x597D;&#x7684;&#x7D22;&#x5F15;&#x548C;&#x4F18;&#x5316;&#x67E5;&#x8BE2;&#x8BED;&#x53E5;&#xFF0C;&#x5199;&#x51FA;&#x66F4;&#x597D;&#x7684;&#x4F18;&#x5316;&#x8BED;&#x53E5;&#x3002; Explain&#x8BED;&#x6CD5;&#xFF1A;explain select &#x2026; from &#x2026; [where &#x2026;] &#x4F8B;&#x5982;&#xFF1A;explain select * from news; &#x8F93;&#x51FA;&#xFF1A; 123+----+-------------+-------+-------+-------------------+---------+---------+-------+------| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+-------+-------+-------------------+---------+---------+-------+------ &#x4E0B;&#x9762;&#x5BF9;&#x5404;&#x4E2A;&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x4E86;&#x89E3;&#xFF1A; 1&#x3001;id&#xFF1A;&#x8FD9;&#x662F;SELECT&#x7684;&#x67E5;&#x8BE2;&#x5E8F;&#x5217;&#x53F7; 2&#x3001;select_type&#xFF1A;select_type&#x5C31;&#x662F;select&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#xFF1A; SIMPLE&#xFF1A;&#x7B80;&#x5355;SELECT(&#x4E0D;&#x4F7F;&#x7528;UNION&#x6216;&#x5B50;&#x67E5;&#x8BE2;&#x7B49;) PRIMARY&#xFF1A;&#x6700;&#x5916;&#x9762;&#x7684;SELECT UNION&#xFF1A;UNION&#x4E2D;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6216;&#x540E;&#x9762;&#x7684;SELECT&#x8BED;&#x53E5; DEPENDENT UNION&#xFF1A;UNION&#x4E2D;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6216;&#x540E;&#x9762;&#x7684;SELECT&#x8BED;&#x53E5;&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x5916;&#x9762;&#x7684;&#x67E5;&#x8BE2; UNION RESULT&#xFF1A;UNION&#x7684;&#x7ED3;&#x679C;&#x3002; SUBQUERY&#xFF1A;&#x5B50;&#x67E5;&#x8BE2;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;SELECT DEPENDENT SUBQUERY&#xFF1A;&#x5B50;&#x67E5;&#x8BE2;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;SELECT&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x5916;&#x9762;&#x7684;&#x67E5;&#x8BE2; DERIVED&#xFF1A;&#x5BFC;&#x51FA;&#x8868;&#x7684;SELECT(FROM&#x5B50;&#x53E5;&#x7684;&#x5B50;&#x67E5;&#x8BE2;) 3&#x3001;table&#xFF1A;&#x663E;&#x793A;&#x8FD9;&#x4E00;&#x884C;&#x7684;&#x6570;&#x636E;&#x662F;&#x5173;&#x4E8E;&#x54EA;&#x5F20;&#x8868;&#x7684; 4&#x3001;type&#xFF1A;&#x8FD9;&#x5217;&#x6700;&#x91CD;&#x8981;&#xFF0C;&#x663E;&#x793A;&#x4E86;&#x8FDE;&#x63A5;&#x4F7F;&#x7528;&#x4E86;&#x54EA;&#x79CD;&#x7C7B;&#x522B;,&#x6709;&#x65E0;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#xFF0C;&#x662F;&#x4F7F;&#x7528;Explain&#x547D;&#x4EE4;&#x5206;&#x6790;&#x6027;&#x80FD;&#x74F6;&#x9888;&#x7684;&#x5173;&#x952E;&#x9879;&#x4E4B;&#x4E00;&#x3002; &#x7ED3;&#x679C;&#x503C;&#x4ECE;&#x597D;&#x5230;&#x574F;&#x4F9D;&#x6B21;&#x662F;&#xFF1A; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL &#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x5F97;&#x4FDD;&#x8BC1;&#x67E5;&#x8BE2;&#x81F3;&#x5C11;&#x8FBE;&#x5230;range&#x7EA7;&#x522B;&#xFF0C;&#x6700;&#x597D;&#x80FD;&#x8FBE;&#x5230;ref&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6027;&#x80FD;&#x95EE;&#x9898;&#x3002; 5&#x3001;possible_keys&#xFF1A;&#x5217;&#x6307;&#x51FA;MySQL&#x80FD;&#x4F7F;&#x7528;&#x54EA;&#x4E2A;&#x7D22;&#x5F15;&#x5728;&#x8BE5;&#x8868;&#x4E2D;&#x627E;&#x5230;&#x884C; 6&#x3001;key&#xFF1A;&#x663E;&#x793A;MySQL&#x5B9E;&#x9645;&#x51B3;&#x5B9A;&#x4F7F;&#x7528;&#x7684;&#x952E;&#xFF08;&#x7D22;&#x5F15;&#xFF09;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x9009;&#x62E9;&#x7D22;&#x5F15;&#xFF0C;&#x952E;&#x662F;NULL 7&#x3001;key_len&#xFF1A;&#x663E;&#x793A;MySQL&#x51B3;&#x5B9A;&#x4F7F;&#x7528;&#x7684;&#x952E;&#x957F;&#x5EA6;&#x3002;&#x5982;&#x679C;&#x952E;&#x662F;NULL&#xFF0C;&#x5219;&#x957F;&#x5EA6;&#x4E3A;NULL&#x3002;&#x4F7F;&#x7528;&#x7684;&#x7D22;&#x5F15;&#x7684;&#x957F;&#x5EA6;&#x3002;&#x5728;&#x4E0D;&#x635F;&#x5931;&#x7CBE;&#x786E;&#x6027;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x957F;&#x5EA6;&#x8D8A;&#x77ED;&#x8D8A;&#x597D; 8&#x3001;ref&#xFF1A;&#x663E;&#x793A;&#x4F7F;&#x7528;&#x54EA;&#x4E2A;&#x5217;&#x6216;&#x5E38;&#x6570;&#x4E0E;key&#x4E00;&#x8D77;&#x4ECE;&#x8868;&#x4E2D;&#x9009;&#x62E9;&#x884C;&#x3002; 9&#x3001;rows&#xFF1A;&#x663E;&#x793A;MySQL&#x8BA4;&#x4E3A;&#x5B83;&#x6267;&#x884C;&#x67E5;&#x8BE2;&#x65F6;&#x5FC5;&#x987B;&#x68C0;&#x67E5;&#x7684;&#x884C;&#x6570;&#x3002; 10&#x3001;Extra&#xFF1A;&#x5305;&#x542B;MySQL&#x89E3;&#x51B3;&#x67E5;&#x8BE2;&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#xFF0C;&#x4E5F;&#x662F;&#x5173;&#x952E;&#x53C2;&#x8003;&#x9879;&#x4E4B;&#x4E00;&#x3002; Distinct&#x4E00;&#x65E6;MYSQL&#x627E;&#x5230;&#x4E86;&#x4E0E;&#x884C;&#x76F8;&#x8054;&#x5408;&#x5339;&#x914D;&#x7684;&#x884C;&#xFF0C;&#x5C31;&#x4E0D;&#x518D;&#x641C;&#x7D22;&#x4E86; Not existsMYSQL &#x4F18;&#x5316;&#x4E86;LEFT JOIN&#xFF0C;&#x4E00;&#x65E6;&#x5B83;&#x627E;&#x5230;&#x4E86;&#x5339;&#x914D;LEFT JOIN&#x6807;&#x51C6;&#x7684;&#x884C;&#xFF0C; &#x5C31;&#x4E0D;&#x518D;&#x641C;&#x7D22;&#x4E86; Range checked for each Record&#xFF08;index map:#&#xFF09;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x7406;&#x60F3;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x4ECE;&#x524D;&#x9762;&#x8868;&#x4E2D;&#x6765;&#x7684;&#x6BCF;&#x4E00; &#x4E2A;&#x884C;&#x7EC4;&#x5408;&#xFF0C;MYSQL&#x68C0;&#x67E5;&#x4F7F;&#x7528;&#x54EA;&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x5E76;&#x7528;&#x5B83;&#x6765;&#x4ECE;&#x8868;&#x4E2D;&#x8FD4;&#x56DE;&#x884C;&#x3002;&#x8FD9;&#x662F;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x7684;&#x6700;&#x6162;&#x7684;&#x8FDE;&#x63A5;&#x4E4B;&#x4E00; Using filesort&#x770B; &#x5230;&#x8FD9;&#x4E2A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x8BE2;&#x5C31;&#x9700;&#x8981;&#x4F18;&#x5316;&#x4E86;&#x3002;MYSQL&#x9700;&#x8981;&#x8FDB;&#x884C;&#x989D;&#x5916;&#x7684;&#x6B65;&#x9AA4;&#x6765;&#x53D1;&#x73B0;&#x5982;&#x4F55;&#x5BF9;&#x8FD4;&#x56DE;&#x7684;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x5B83;&#x6839;&#x636E;&#x8FDE;&#x63A5;&#x7C7B;&#x578B;&#x4EE5;&#x53CA;&#x5B58;&#x50A8;&#x6392;&#x5E8F;&#x952E;&#x503C;&#x548C;&#x5339;&#x914D;&#x6761;&#x4EF6;&#x7684;&#x5168;&#x90E8;&#x884C;&#x7684;&#x884C;&#x6307;&#x9488;&#x6765; &#x6392;&#x5E8F;&#x5168;&#x90E8;&#x884C; Using index&#x5217;&#x6570;&#x636E;&#x662F;&#x4ECE;&#x4EC5;&#x4EC5;&#x4F7F;&#x7528;&#x4E86;&#x7D22;&#x5F15;&#x4E2D;&#x7684;&#x4FE1;&#x606F;&#x800C;&#x6CA1;&#x6709;&#x8BFB;&#x53D6;&#x5B9E;&#x9645;&#x7684;&#x884C;&#x52A8;&#x7684;&#x8868;&#x8FD4;&#x56DE;&#x7684;&#xFF0C;&#x8FD9;&#x53D1;&#x751F;&#x5728;&#x5BF9;&#x8868; &#x7684;&#x5168;&#x90E8;&#x7684;&#x8BF7;&#x6C42;&#x5217;&#x90FD;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x7684;&#x90E8;&#x5206;&#x7684;&#x65F6;&#x5019; Using temporary&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x67E5;&#x8BE2;&#x9700;&#x8981;&#x4F18;&#x5316;&#x4E86;&#x3002;&#x8FD9; &#x91CC;&#xFF0C;MYSQL&#x9700;&#x8981;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x8868;&#x6765;&#x5B58;&#x50A8;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x901A;&#x5E38;&#x53D1;&#x751F;&#x5728;&#x5BF9;&#x4E0D;&#x540C;&#x7684;&#x5217;&#x96C6;&#x8FDB;&#x884C;ORDER BY&#x4E0A;&#xFF0C;&#x800C;&#x4E0D;&#x662F;GROUP BY&#x4E0A; Using where&#x4F7F;&#x7528;&#x4E86;WHERE&#x4ECE;&#x53E5;&#x6765;&#x9650;&#x5236;&#x54EA;&#x4E9B;&#x884C;&#x5C06;&#x4E0E;&#x4E0B;&#x4E00;&#x5F20;&#x8868;&#x5339;&#x914D;&#x6216;&#x8005;&#x662F;&#x8FD4;&#x56DE;&#x7ED9;&#x7528;&#x6237;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x60F3;&#x8FD4;&#x56DE;&#x8868;&#x4E2D;&#x7684;&#x5168;&#x90E8;&#x884C;&#xFF0C;&#x5E76;&#x4E14;&#x8FDE;&#x63A5;&#x7C7B;&#x578B;ALL&#x6216;index&#xFF0C; &#x8FD9;&#x5C31;&#x4F1A;&#x53D1;&#x751F;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x67E5;&#x8BE2;&#x6709;&#x95EE;&#x9898; &#x5176;&#x4ED6;&#x4E00;&#x4E9B;Tip&#xFF1A; &#x5F53;type &#x663E;&#x793A;&#x4E3A; &#x201C;index&#x201D; &#x65F6;&#xFF0C;&#x5E76;&#x4E14;Extra&#x663E;&#x793A;&#x4E3A; &#x201C;Using Index&#x201D;&#xFF0C; &#x8868;&#x660E;&#x4F7F;&#x7528;&#x4E86;&#x8986;&#x76D6;&#x7D22;&#x5F15;&#x3002; &#x8054;&#x5408;&#x7D22;&#x5F15;&#x7684;&#x6700;&#x5DE6;&#x5339;&#x914D;&#x539F;&#x5219;&#x7684;&#x6210;&#x56E0;&#x770B;&#x770B;&#x5982;&#x4E0B;&#x535A;&#x5BA2;&#x5373;&#x53EF; &#x8054;&#x5408;&#x7D22;&#x5F15;&#x7684;&#x6700;&#x5DE6;&#x524D;&#x7F00;&#x5339;&#x914D;&#x539F;&#x5219; mysql&#x7D22;&#x5F15;&#x6700;&#x5DE6;&#x5339;&#x914D;&#x539F;&#x5219;&#x7684;&#x7406;&#x89E3;? &#x7D22;&#x5F15;&#x662F;&#x5EFA;&#x7ACB;&#x5F97;&#x8D8A;&#x591A;&#x8D8A;&#x597D;&#x7684;&#x5417; &#x6570;&#x636E;&#x91CF;&#x5C0F;&#x7684;&#x8868;&#x4E0D;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#xFF0C;&#x5EFA;&#x7ACB;&#x4F1A;&#x589E;&#x52A0;&#x989D;&#x5916;&#x7684;&#x7D22;&#x5F15;&#x5F00;&#x9500; &#x6570;&#x636E;&#x53D8;&#x66F4;&#x9700;&#x8981;&#x7EF4;&#x62A4;&#x7D22;&#x5F15;&#xFF0C;&#x56E0;&#x6B64;&#x66F4;&#x591A;&#x7684;&#x7D22;&#x5F15;&#x610F;&#x5473;&#x7740;&#x66F4;&#x591A;&#x7684;&#x7EF4;&#x62A4;&#x6210;&#x672C; &#x66F4;&#x591A;&#x7684;&#x7D22;&#x5F15;&#x610F;&#x5473;&#x7740;&#x4E5F;&#x9700;&#x8981;&#x66F4;&#x591A;&#x7684;&#x7A7A;&#x95F4; &#x9501;&#x6A21;&#x5757;&#x5E38;&#x89C1;&#x95EE;&#x9898; MyISAM &#x4E0E; InnoDB &#x5173;&#x4E8E;&#x9501;&#x65B9;&#x9762;&#x7684;&#x533A;&#x522B;&#x662F;&#x4EC0;&#x4E48; &#x6570;&#x636E;&#x5E93;&#x4E8B;&#x52A1;&#x7684;&#x56DB;&#x5927;&#x7279;&#x6027; &#x4E8B;&#x52A1;&#x9694;&#x79BB;&#x7EA7;&#x522B;&#x4EE5;&#x53CA;&#x5404;&#x7EA7;&#x522B;&#x4E0B;&#x7684;&#x5E76;&#x53D1;&#x8BBF;&#x95EE;&#x95EE;&#x9898; InnoDB &#x53EF;&#x91CD;&#x590D;&#x8BFB;&#x9694;&#x79BB;&#x7EA7;&#x522B;&#x4E0B;&#x5982;&#x4F55;&#x907F;&#x514D;&#x5E7B;&#x8BFB; RC&#x3001;RR &#x7EA7;&#x522B;&#x4E0B;&#x7684; InnoDB &#x7684;&#x975E;&#x5835;&#x585E;&#x5982;&#x679C;&#x5B9E;&#x73B0; MyISAM &#x4E0E; InnoDB &#x5173;&#x4E8E;&#x9501;&#x65B9;&#x9762;&#x7684;&#x533A;&#x522B;&#x662F;&#x4EC0;&#x4E48; MyISAM &#x9ED8;&#x8BA4;&#x7528;&#x7684;&#x662F;&#x8868;&#x7EA7;&#x9501;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x884C;&#x7EA7;&#x9501; InnoDB &#x9ED8;&#x8BA4;&#x7528;&#x7684;&#x662F;&#x884C;&#x7EA7;&#x9501;&#xFF0C;&#x4E5F;&#x652F;&#x6301;&#x8868;&#x7EA7;&#x9501; &#x6570;&#x636E;&#x5E93;&#x9501;&#x7684;&#x5206;&#x7C7B; &#x6309;&#x9501;&#x7684;&#x7C92;&#x5EA6;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x5206;&#x4E3A;&#x8868;&#x7EA7;&#x9501;&#x3001;&#x884C;&#x7EA7;&#x9501;&#x548C;&#x9875;&#x7EA7;&#x9501; &#x6309;&#x9501;&#x7684;&#x7EA7;&#x522B;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x5206;&#x4E3A;&#x5171;&#x4EAB;&#x9501;&#x548C;&#x6392;&#x4ED6;&#x9501; &#x6309;&#x52A0;&#x9501;&#x7684;&#x65B9;&#x5F0F;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x5206;&#x4E3A;&#x81EA;&#x52A8;&#x9501;&#x548C;&#x663E;&#x793A;&#x9501; &#x6309;&#x64CD;&#x4F5C;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x5206;&#x4E3A; DML &#x9501;&#x548C; DDL &#x9501; &#x6309;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x5206;&#x4E3A;&#x4E50;&#x89C2;&#x9501;&#x548C;&#x60B2;&#x89C2;&#x9501; ACID1. &#x539F;&#x5B50;&#x6027;&#xFF08;Atomicity&#xFF09;&#x4E8B;&#x52A1;&#x88AB;&#x89C6;&#x4E3A;&#x4E0D;&#x53EF;&#x5206;&#x5272;&#x7684;&#x6700;&#x5C0F;&#x5355;&#x5143;&#xFF0C;&#x4E8B;&#x52A1;&#x7684;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x8981;&#x4E48;&#x5168;&#x90E8;&#x63D0;&#x4EA4;&#x6210;&#x529F;&#xFF0C;&#x8981;&#x4E48;&#x5168;&#x90E8;&#x5931;&#x8D25;&#x56DE;&#x6EDA;&#x3002; &#x56DE;&#x6EDA;&#x53EF;&#x4EE5;&#x7528;&#x56DE;&#x6EDA;&#x65E5;&#x5FD7;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x56DE;&#x6EDA;&#x65E5;&#x5FD7;&#x8BB0;&#x5F55;&#x7740;&#x4E8B;&#x52A1;&#x6240;&#x6267;&#x884C;&#x7684;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#xFF0C;&#x5728;&#x56DE;&#x6EDA;&#x65F6;&#x53CD;&#x5411;&#x6267;&#x884C;&#x8FD9;&#x4E9B;&#x4FEE;&#x6539;&#x64CD;&#x4F5C;&#x5373;&#x53EF;&#x3002; 2. &#x4E00;&#x81F4;&#x6027;&#xFF08;Consistency&#xFF09;&#x6570;&#x636E;&#x5E93;&#x5728;&#x4E8B;&#x52A1;&#x6267;&#x884C;&#x524D;&#x540E;&#x90FD;&#x4FDD;&#x6301;&#x4E00;&#x81F4;&#x6027;&#x72B6;&#x6001;&#x3002;&#x5728;&#x4E00;&#x81F4;&#x6027;&#x72B6;&#x6001;&#x4E0B;&#xFF0C;&#x6240;&#x6709;&#x4E8B;&#x52A1;&#x5BF9;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x90FD;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002; 3. &#x9694;&#x79BB;&#x6027;&#xFF08;Isolation&#xFF09;&#x4E00;&#x4E2A;&#x4E8B;&#x52A1;&#x6240;&#x505A;&#x7684;&#x4FEE;&#x6539;&#x5728;&#x6700;&#x7EC8;&#x63D0;&#x4EA4;&#x4EE5;&#x524D;&#xFF0C;&#x5BF9;&#x5176;&#x5B83;&#x4E8B;&#x52A1;&#x662F;&#x4E0D;&#x53EF;&#x89C1;&#x7684;&#x3002; 4. &#x6301;&#x4E45;&#x6027;&#xFF08;Durability&#xFF09;&#x4E00;&#x65E6;&#x4E8B;&#x52A1;&#x63D0;&#x4EA4;&#xFF0C;&#x5219;&#x5176;&#x6240;&#x505A;&#x7684;&#x4FEE;&#x6539;&#x5C06;&#x4F1A;&#x6C38;&#x8FDC;&#x4FDD;&#x5B58;&#x5230;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x3002;&#x5373;&#x4F7F;&#x7CFB;&#x7EDF;&#x53D1;&#x751F;&#x5D29;&#x6E83;&#xFF0C;&#x4E8B;&#x52A1;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4E5F;&#x4E0D;&#x80FD;&#x4E22;&#x5931;&#x3002; &#x4F7F;&#x7528;&#x91CD;&#x505A;&#x65E5;&#x5FD7;&#x6765;&#x4FDD;&#x8BC1;&#x6301;&#x4E45;&#x6027;&#x3002; &#x5E76;&#x53D1;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#x5728;&#x5E76;&#x53D1;&#x73AF;&#x5883;&#x4E0B;&#xFF0C;&#x4E8B;&#x52A1;&#x7684;&#x9694;&#x79BB;&#x6027;&#x5F88;&#x96BE;&#x4FDD;&#x8BC1;&#xFF0C;&#x56E0;&#x6B64;&#x4F1A;&#x51FA;&#x73B0;&#x5F88;&#x591A;&#x5E76;&#x53D1;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#x3002; &#x4E22;&#x5931;&#x4FEE;&#x6539;T1 &#x548C; T2 &#x4E24;&#x4E2A;&#x4E8B;&#x52A1;&#x90FD;&#x5BF9;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;T1 &#x5148;&#x4FEE;&#x6539;&#xFF0C;T2 &#x968F;&#x540E;&#x4FEE;&#x6539;&#xFF0C;T2 &#x7684;&#x4FEE;&#x6539;&#x8986;&#x76D6;&#x4E86; T1 &#x7684;&#x4FEE;&#x6539;&#x3002; &#x8BFB;&#x810F;&#x6570;&#x636E;T1 &#x4FEE;&#x6539;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#xFF0C;T2 &#x968F;&#x540E;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x3002;&#x5982;&#x679C; T1 &#x64A4;&#x9500;&#x4E86;&#x8FD9;&#x6B21;&#x4FEE;&#x6539;&#xFF0C;&#x90A3;&#x4E48; T2 &#x8BFB;&#x53D6;&#x7684;&#x6570;&#x636E;&#x662F;&#x810F;&#x6570;&#x636E;&#x3002; &#x4E0D;&#x53EF;&#x91CD;&#x590D;&#x8BFB;T2 &#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#xFF0C;T1 &#x5BF9;&#x8BE5;&#x6570;&#x636E;&#x505A;&#x4E86;&#x4FEE;&#x6539;&#x3002;&#x5982;&#x679C; T2 &#x518D;&#x6B21;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x6B64;&#x65F6;&#x8BFB;&#x53D6;&#x7684;&#x7ED3;&#x679C;&#x548C;&#x7B2C;&#x4E00;&#x6B21;&#x8BFB;&#x53D6;&#x7684;&#x7ED3;&#x679C;&#x4E0D;&#x540C;&#x3002; &#x5E7B;&#x5F71;&#x8BFB;T1 &#x8BFB;&#x53D6;&#x67D0;&#x4E2A;&#x8303;&#x56F4;&#x7684;&#x6570;&#x636E;&#xFF0C;T2 &#x5728;&#x8FD9;&#x4E2A;&#x8303;&#x56F4;&#x5185;&#x63D2;&#x5165;&#x65B0;&#x7684;&#x6570;&#x636E;&#xFF0C;T1 &#x518D;&#x6B21;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x8303;&#x56F4;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6B64;&#x65F6;&#x8BFB;&#x53D6;&#x7684;&#x7ED3;&#x679C;&#x548C;&#x548C;&#x7B2C;&#x4E00;&#x6B21;&#x8BFB;&#x53D6;&#x7684;&#x7ED3;&#x679C;&#x4E0D;&#x540C;&#x3002; &#x9694;&#x79BB;&#x7EA7;&#x522B;&#x672A;&#x63D0;&#x4EA4;&#x8BFB;&#xFF08;READ UNCOMMITTED&#xFF09;&#x4E8B;&#x52A1;&#x4E2D;&#x7684;&#x4FEE;&#x6539;&#xFF0C;&#x5373;&#x4F7F;&#x6CA1;&#x6709;&#x63D0;&#x4EA4;&#xFF0C;&#x5BF9;&#x5176;&#x5B83;&#x4E8B;&#x52A1;&#x4E5F;&#x662F;&#x53EF;&#x89C1;&#x7684;&#x3002; &#x63D0;&#x4EA4;&#x8BFB;&#xFF08;READ COMMITTED&#xFF09;&#x4E00;&#x4E2A;&#x4E8B;&#x52A1;&#x53EA;&#x80FD;&#x8BFB;&#x53D6;&#x5DF2;&#x7ECF;&#x63D0;&#x4EA4;&#x7684;&#x4E8B;&#x52A1;&#x6240;&#x505A;&#x7684;&#x4FEE;&#x6539;&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x4E8B;&#x52A1;&#x6240;&#x505A;&#x7684;&#x4FEE;&#x6539;&#x5728;&#x63D0;&#x4EA4;&#x4E4B;&#x524D;&#x5BF9;&#x5176;&#x5B83;&#x4E8B;&#x52A1;&#x662F;&#x4E0D;&#x53EF;&#x89C1;&#x7684;&#x3002; &#x53EF;&#x91CD;&#x590D;&#x8BFB;&#xFF08;REPEATABLE READ&#xFF09;&#x4FDD;&#x8BC1;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x4E8B;&#x52A1;&#x4E2D;&#x591A;&#x6B21;&#x8BFB;&#x53D6;&#x540C;&#x6837;&#x6570;&#x636E;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002; &#x53EF;&#x4E32;&#x884C;&#x5316;&#xFF08;SERIALIZABLE&#xFF09;&#x5F3A;&#x5236;&#x4E8B;&#x52A1;&#x4E32;&#x884C;&#x6267;&#x884C;&#x3002; &#x9694;&#x79BB;&#x7EA7;&#x522B; &#x810F;&#x8BFB; &#x4E0D;&#x53EF;&#x91CD;&#x590D;&#x8BFB; &#x5E7B;&#x5F71;&#x8BFB; &#x52A0;&#x9501;&#x8BFB; &#x672A;&#x63D0;&#x4EA4;&#x8BFB; &#x221A; &#x221A; &#x221A; &#xD7; &#x63D0;&#x4EA4;&#x8BFB; &#xD7; &#x221A; &#x221A; &#xD7; &#x53EF;&#x91CD;&#x590D;&#x8BFB; &#xD7; &#xD7; &#x221A; &#xD7; &#x53EF;&#x4E32;&#x884C;&#x5316; &#xD7; &#xD7; &#xD7; &#x221A; &#x53C2;&#x8003;&#x94FE;&#x63A5; &#x6570;&#x636E;&#x5E93;&#x7CFB;&#x7EDF;&#x539F;&#x7406;]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2F2019%2F02%2F19%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x4F53;&#x7CFB;&#x7ED3;&#x6784; OSI&#x5176;&#x4E2D;&#x8868;&#x793A;&#x5C42;&#x548C;&#x4F1A;&#x8BDD;&#x5C42;&#x7528;&#x9014;&#x5982;&#x4E0B;&#xFF1A; &#x8868;&#x793A;&#x5C42; &#xFF1A;&#x6570;&#x636E;&#x538B;&#x7F29;&#x3001;&#x52A0;&#x5BC6;&#x4EE5;&#x53CA;&#x6570;&#x636E;&#x63CF;&#x8FF0;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x4E0D;&#x5FC5;&#x5173;&#x5FC3;&#x5728;&#x5404;&#x53F0;&#x4E3B;&#x673A;&#x4E2D;&#x6570;&#x636E;&#x5185;&#x90E8;&#x683C;&#x5F0F;&#x4E0D;&#x540C;&#x7684;&#x95EE;&#x9898;&#x3002; &#x4F1A;&#x8BDD;&#x5C42; &#xFF1A;&#x5EFA;&#x7ACB;&#x53CA;&#x7BA1;&#x7406;&#x4F1A;&#x8BDD;&#x3002; &#x4E94;&#x5C42;&#x534F;&#x8BAE;&#x6CA1;&#x6709;&#x8868;&#x793A;&#x5C42;&#x548C;&#x4F1A;&#x8BDD;&#x5C42;&#xFF0C;&#x800C;&#x662F;&#x5C06;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x7559;&#x7ED9;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x5F00;&#x53D1;&#x8005;&#x5904;&#x7406;&#x3002; &#x4E94;&#x5C42;&#x534F;&#x8BAE; &#x5E94;&#x7528;&#x5C42; &#xFF1A;&#x4E3A;&#x7279;&#x5B9A;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#xFF0C;&#x4F8B;&#x5982; HTTP&#x3001;DNS &#x7B49;&#x3002;&#x6570;&#x636E;&#x5355;&#x4F4D;&#x4E3A;&#x62A5;&#x6587;&#x3002; &#x4F20;&#x8F93;&#x5C42; &#xFF1A;&#x4E3A;&#x8FDB;&#x7A0B;&#x63D0;&#x4F9B;&#x901A;&#x7528;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#x3002;&#x7531;&#x4E8E;&#x5E94;&#x7528;&#x5C42;&#x534F;&#x8BAE;&#x5F88;&#x591A;&#xFF0C;&#x5B9A;&#x4E49;&#x901A;&#x7528;&#x7684;&#x4F20;&#x8F93;&#x5C42;&#x534F;&#x8BAE;&#x5C31;&#x53EF;&#x4EE5;&#x652F;&#x6301;&#x4E0D;&#x65AD;&#x589E;&#x591A;&#x7684;&#x5E94;&#x7528;&#x5C42;&#x534F;&#x8BAE;&#x3002;&#x8FD0;&#x8F93;&#x5C42;&#x5305;&#x62EC;&#x4E24;&#x79CD;&#x534F;&#x8BAE;&#xFF1A;&#x4F20;&#x8F93;&#x63A7;&#x5236;&#x534F;&#x8BAE; TCP&#xFF0C;&#x63D0;&#x4F9B;&#x9762;&#x5411;&#x8FDE;&#x63A5;&#x3001;&#x53EF;&#x9760;&#x7684;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#xFF0C;&#x6570;&#x636E;&#x5355;&#x4F4D;&#x4E3A;&#x62A5;&#x6587;&#x6BB5;&#xFF1B;&#x7528;&#x6237;&#x6570;&#x636E;&#x62A5;&#x534F;&#x8BAE; UDP&#xFF0C;&#x63D0;&#x4F9B;&#x65E0;&#x8FDE;&#x63A5;&#x3001;&#x5C3D;&#x6700;&#x5927;&#x52AA;&#x529B;&#x7684;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#xFF0C;&#x6570;&#x636E;&#x5355;&#x4F4D;&#x4E3A;&#x7528;&#x6237;&#x6570;&#x636E;&#x62A5;&#x3002;TCP &#x4E3B;&#x8981;&#x63D0;&#x4F9B;&#x5B8C;&#x6574;&#x6027;&#x670D;&#x52A1;&#xFF0C;UDP &#x4E3B;&#x8981;&#x63D0;&#x4F9B;&#x53CA;&#x65F6;&#x6027;&#x670D;&#x52A1;&#x3002; &#x7F51;&#x7EDC;&#x5C42; &#xFF1A;&#x4E3A;&#x4E3B;&#x673A;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#x3002;&#x800C;&#x4F20;&#x8F93;&#x5C42;&#x534F;&#x8BAE;&#x662F;&#x4E3A;&#x4E3B;&#x673A;&#x4E2D;&#x7684;&#x8FDB;&#x7A0B;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#x3002;&#x7F51;&#x7EDC;&#x5C42;&#x628A;&#x4F20;&#x8F93;&#x5C42;&#x4F20;&#x9012;&#x4E0B;&#x6765;&#x7684;&#x62A5;&#x6587;&#x6BB5;&#x6216;&#x8005;&#x7528;&#x6237;&#x6570;&#x636E;&#x62A5;&#x5C01;&#x88C5;&#x6210;&#x5206;&#x7EC4;&#x3002; &#x6570;&#x636E;&#x94FE;&#x8DEF;&#x5C42; &#xFF1A;&#x7F51;&#x7EDC;&#x5C42;&#x9488;&#x5BF9;&#x7684;&#x8FD8;&#x662F;&#x4E3B;&#x673A;&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#xFF0C;&#x800C;&#x4E3B;&#x673A;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x6709;&#x5F88;&#x591A;&#x94FE;&#x8DEF;&#xFF0C;&#x94FE;&#x8DEF;&#x5C42;&#x534F;&#x8BAE;&#x5C31;&#x662F;&#x4E3A;&#x540C;&#x4E00;&#x94FE;&#x8DEF;&#x7684;&#x4E3B;&#x673A;&#x63D0;&#x4F9B;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x670D;&#x52A1;&#x3002;&#x6570;&#x636E;&#x94FE;&#x8DEF;&#x5C42;&#x628A;&#x7F51;&#x7EDC;&#x5C42;&#x4F20;&#x4E0B;&#x6765;&#x7684;&#x5206;&#x7EC4;&#x5C01;&#x88C5;&#x6210;&#x5E27;&#x3002; &#x7269;&#x7406;&#x5C42; &#xFF1A;&#x8003;&#x8651;&#x7684;&#x662F;&#x600E;&#x6837;&#x5728;&#x4F20;&#x8F93;&#x5A92;&#x4F53;&#x4E0A;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x6BD4;&#x7279;&#x6D41;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x6307;&#x5177;&#x4F53;&#x7684;&#x4F20;&#x8F93;&#x5A92;&#x4F53;&#x3002;&#x7269;&#x7406;&#x5C42;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x5C3D;&#x53EF;&#x80FD;&#x5C4F;&#x853D;&#x4F20;&#x8F93;&#x5A92;&#x4F53;&#x548C;&#x901A;&#x4FE1;&#x624B;&#x6BB5;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x4F7F;&#x6570;&#x636E;&#x94FE;&#x8DEF;&#x5C42;&#x611F;&#x89C9;&#x4E0D;&#x5230;&#x8FD9;&#x4E9B;&#x5DEE;&#x5F02;&#x3002; TCP/IP&#x5B83;&#x53EA;&#x6709;&#x56DB;&#x5C42;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x4E94;&#x5C42;&#x534F;&#x8BAE;&#x4E2D;&#x6570;&#x636E;&#x94FE;&#x8DEF;&#x5C42;&#x548C;&#x7269;&#x7406;&#x5C42;&#x5408;&#x5E76;&#x4E3A;&#x7F51;&#x7EDC;&#x63A5;&#x53E3;&#x5C42;&#x3002; TCP/IP &#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x4E0D;&#x4E25;&#x683C;&#x9075;&#x5FAA; OSI &#x5206;&#x5C42;&#x6982;&#x5FF5;&#xFF0C;&#x5E94;&#x7528;&#x5C42;&#x53EF;&#x80FD;&#x4F1A;&#x76F4;&#x63A5;&#x4F7F;&#x7528; IP &#x5C42;&#x6216;&#x8005;&#x7F51;&#x7EDC;&#x63A5;&#x53E3;&#x5C42;&#x3002; TCP/IP &#x662F; Internet&#x4E0A;&#x7684;&#x6807;&#x51C6;&#x901A;&#x4FE1;&#x534F;&#x8BAE;&#x96C6;&#xFF0C;&#x8BE5;&#x534F;&#x8BAE;&#x96C6;&#x7531;&#x6570;&#x5341;&#x4E2A;&#x5177;&#x6709;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x7684;&#x534F;&#x8BAE;&#x7EC4;&#x6210;&#xFF0C;&#x5176;&#x4E2D; TCP &#x548C; IP &#x662F;&#x8BE5;&#x534F;&#x8BAE;&#x96C6;&#x4E2D;&#x7684;&#x4E24;&#x4E2A;&#x6700;&#x91CD;&#x8981;&#x7684;&#x6838;&#x5FC3;&#x534F;&#x8BAE;&#x3002;TCP/IP&#x534F;&#x8BAE;&#x65CF;&#x6309;&#x5C42;&#x6B21;&#x53EF;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x56DB;&#x5C42;&#xFF1A;&#x5E94;&#x7528;&#x5C42;&#x3001;&#x4F20;&#x8F93;&#x5C42;&#x3001;&#x7F51;&#x7EDC;&#x5C42;&#x548C;&#x7F51;&#x7EDC;&#x63A5;&#x53E3;&#x5C42;&#xFF0C;&#x5404;&#x5C42;&#x5BF9;&#x5E94;&#x7684; PDU &#x6570;&#x636E;&#x5355;&#x5143;&#x7684;&#x540D;&#x79F0;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x3002; &#x5C0F;&#x7ED3;OSI &#x4E03;&#x5C42;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x5177;&#x6709;&#x6982;&#x5FF5;&#x6E05;&#x695A;&#x3001;&#x7406;&#x8BBA;&#x5B8C;&#x6574;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7406;&#x8BBA;&#x4E0A;&#x7684;&#x56FD;&#x9645;&#x6807;&#x51C6;&#xFF0C;&#x4F46;&#x5374;&#x4E0D;&#x662F;&#x4E8B;&#x5B9E;&#x4E0A;&#x7684;&#x56FD;&#x9645;&#x6807;&#x51C6;&#xFF1B;&#x800C;&#x5177;&#x6709;&#x7B80;&#x5355;&#x6613;&#x7528;&#x7279;&#x70B9;&#x7684; TCP/IP &#x56DB;&#x5C42;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x5219;&#x662F;&#x4E8B;&#x5B9E;&#x4E0A;&#x7684;&#x6807;&#x51C6;&#x3002; &#x9700;&#x8981;&#x6307;&#x51FA;&#x7684;&#x662F;&#xFF0C;&#x4E94;&#x5C42;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x867D;&#x7136;&#x7EFC;&#x5408;&#x4E86; OSI &#x548C; TCP/IP &#x7684;&#x4F18;&#x70B9;&#xFF0C;&#x4F46;&#x5176;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x5B66;&#x672F;&#x5B66;&#x4E60;&#x7814;&#x7A76;&#x800C;&#x63D0;&#x51FA;&#x7684;&#xFF0C;&#x6CA1;&#x6709;&#x5177;&#x4F53;&#x7684;&#x5B9E;&#x9645;&#x610F;&#x4E49;&#x3002; &#x8BF4;&#x8BF4; TCP &#x7684;&#x4E09;&#x6B21;&#x63E1;&#x624B;&#x8FD9;&#x4E00;&#x5230;&#x5F88;&#x5E38;&#x89C1;&#x7684;&#x9762;&#x8BD5;&#x9898;&#x3002; &#x4F20;&#x8F93;&#x63A7;&#x5236;&#x534F;&#x8BAE; TCP &#x7B80;&#x4ECB; &#x9762;&#x5411;&#x8FDE;&#x63A5;&#x7684;&#x3001;&#x53EF;&#x9760;&#x7684;&#x57FA;&#x4E8E;&#x5B57;&#x8282;&#x6D41;&#x7684;&#x4F20;&#x8F93;&#x5C42;&#x901A;&#x4FE1;&#x534F;&#x8BAE; &#x5C06;&#x5E94;&#x7528;&#x5C42;&#x7684;&#x6570;&#x636E;&#x6D41;&#x5206;&#x5272;&#x6210;&#x62A5;&#x6587;&#x6BB5;&#x5E76;&#x53D1;&#x9001;&#x7ED9;&#x76EE;&#x6807;&#x8282;&#x70B9;&#x7684; TCP &#x5C42; &#x6570;&#x636E;&#x5305;&#x90FD;&#x662F;&#x7531;&#x5E8F;&#x53F7;&#xFF0C;&#x5BF9;&#x65B9;&#x6536;&#x5230;&#x5219;&#x53D1;&#x9001; ACK &#x786E;&#x8BA4;&#xFF0C;&#x672A;&#x6536;&#x5230;&#x5219;&#x91CD;&#x4F20; &#x4F7F;&#x7528;&#x6821;&#x9A8C;&#x548C;&#x6765;&#x68C0;&#x9A8C;&#x6570;&#x636E;&#x5728;&#x4F20;&#x8F93;&#x8FC7;&#x7A0B;&#x4E2D;&#x662F;&#x5426;&#x6709;&#x8BEF; TCP &#x62A5;&#x6587;&#x5934; &#x6E90;&#x7AEF;&#x53E3;&#x3001;&#x76EE;&#x7684;&#x7AEF;&#x53E3; &#xFF1A;&#x6807;&#x8BB0;&#x8FDB;&#x7A0B;&#x3002; &#x5E8F;&#x53F7; &#xFF1A;&#x7528;&#x4E8E;&#x5BF9;&#x5B57;&#x8282;&#x6D41;&#x8FDB;&#x884C;&#x7F16;&#x53F7;&#xFF0C;&#x4F8B;&#x5982;&#x5E8F;&#x53F7;&#x4E3A; 301&#xFF0C;&#x8868;&#x793A;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x7F16;&#x53F7;&#x4E3A; 301&#xFF0C;&#x5982;&#x679C;&#x643A;&#x5E26;&#x7684;&#x6570;&#x636E;&#x957F;&#x5EA6;&#x4E3A; 100 &#x5B57;&#x8282;&#xFF0C;&#x90A3;&#x4E48;&#x4E0B;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x5E8F;&#x53F7;&#x5E94;&#x4E3A; 401&#x3002; &#x786E;&#x8BA4;&#x53F7; &#xFF1A;&#x671F;&#x671B;&#x6536;&#x5230;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x5E8F;&#x53F7;&#x3002;&#x4F8B;&#x5982; B &#x6B63;&#x786E;&#x6536;&#x5230; A &#x53D1;&#x9001;&#x6765;&#x7684;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x6BB5;&#xFF0C;&#x5E8F;&#x53F7;&#x4E3A; 501&#xFF0C;&#x643A;&#x5E26;&#x7684;&#x6570;&#x636E;&#x957F;&#x5EA6;&#x4E3A; 200 &#x5B57;&#x8282;&#xFF0C;&#x56E0;&#x6B64; B &#x671F;&#x671B;&#x4E0B;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x5E8F;&#x53F7;&#x4E3A; 701&#xFF0C;B &#x53D1;&#x9001;&#x7ED9; A &#x7684;&#x786E;&#x8BA4;&#x62A5;&#x6587;&#x6BB5;&#x4E2D;&#x786E;&#x8BA4;&#x53F7;&#x5C31;&#x4E3A; 701&#x3002; &#x6570;&#x636E;&#x504F;&#x79FB; &#xFF1A;&#x6307;&#x7684;&#x662F;&#x6570;&#x636E;&#x90E8;&#x5206;&#x8DDD;&#x79BB;&#x62A5;&#x6587;&#x6BB5;&#x8D77;&#x59CB;&#x5904;&#x7684;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x6307;&#x7684;&#x662F;&#x9996;&#x90E8;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x8FDE;&#x63A5;&#x6807;&#x5FD7;&#xFF08;TCP Flags&#xFF09;&#xFF1A;&#x8868;&#x793A;&#x63A7;&#x5236;&#x529F;&#x80FD;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x5E38;&#x89C1;&#x7684;&#x8FDE;&#x63A5;&#x6807;&#x5FD7;&#x3002; &#x786E;&#x8BA4; ACK &#xFF1A;&#x5F53; ACK=1 &#x65F6;&#x786E;&#x8BA4;&#x53F7;&#x5B57;&#x6BB5;&#x6709;&#x6548;&#xFF0C;&#x5426;&#x5219;&#x65E0;&#x6548;&#x3002;TCP &#x89C4;&#x5B9A;&#xFF0C;&#x5728;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x540E;&#x6240;&#x6709;&#x4F20;&#x9001;&#x7684;&#x62A5;&#x6587;&#x6BB5;&#x90FD;&#x5FC5;&#x987B;&#x628A; ACK &#x7F6E; 1&#x3002; &#x540C;&#x6B65; SYN &#xFF1A;&#x5728;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x65F6;&#x7528;&#x6765;&#x540C;&#x6B65;&#x5E8F;&#x53F7;&#x3002;&#x5F53; SYN=a1&#xFF0C;ACK=0 &#x65F6;&#x8868;&#x793A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x62A5;&#x6587;&#x6BB5;&#x3002;&#x82E5;&#x5BF9;&#x65B9;&#x540C;&#x610F;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#xFF0C;&#x5219;&#x54CD;&#x5E94;&#x62A5;&#x6587;&#x4E2D; SYN=1&#xFF0C;ACK=1&#x3002; &#x7EC8;&#x6B62; FIN &#xFF1A;&#x7528;&#x6765;&#x91CA;&#x653E;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#xFF0C;&#x5F53; FIN=1 &#x65F6;&#xFF0C;&#x8868;&#x793A;&#x6B64;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x53D1;&#x9001;&#x65B9;&#x7684;&#x6570;&#x636E;&#x5DF2;&#x53D1;&#x9001;&#x5B8C;&#x6BD5;&#xFF0C;&#x5E76;&#x8981;&#x6C42;&#x91CA;&#x653E;&#x8FDE;&#x63A5;&#x3002; &#x7A97;&#x53E3; &#xFF1A;&#x7A97;&#x53E3;&#x503C;&#x4F5C;&#x4E3A;&#x63A5;&#x6536;&#x65B9;&#x8BA9;&#x53D1;&#x9001;&#x65B9;&#x8BBE;&#x7F6E;&#x5176;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x7684;&#x4F9D;&#x636E;&#x3002;&#x4E4B;&#x6240;&#x4EE5;&#x8981;&#x6709;&#x8FD9;&#x4E2A;&#x9650;&#x5236;&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x63A5;&#x6536;&#x65B9;&#x7684;&#x6570;&#x636E;&#x7F13;&#x5B58;&#x7A7A;&#x95F4;&#x662F;&#x6709;&#x9650;&#x7684;&#x3002; &#x4E09;&#x6B21;&#x63E1;&#x624B; &#x5728; TCP/IP &#x534F;&#x8BAE;&#x4E2D;&#xFF0C; TCP &#x534F;&#x8BAE;&#x63D0;&#x4F9B;&#x53EF;&#x9760;&#x7684;&#x8FDE;&#x63A5;&#x670D;&#x52A1;&#xFF0C;&#x91C7;&#x7528;&#x4E09;&#x6B21;&#x63E1;&#x624B;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#x3002; &#x5047;&#x8BBE; A &#x4E3A;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;B &#x4E3A;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x3002; &#x9996;&#x5148; B &#x5904;&#x4E8E; LISTEN&#xFF08;&#x76D1;&#x542C;&#xFF09;&#x72B6;&#x6001;&#xFF0C;&#x7B49;&#x5F85;&#x5BA2;&#x6237;&#x7684;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x3002; A &#x5411; B &#x53D1;&#x9001;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x62A5;&#x6587;&#xFF0C;SYN=1&#xFF0C;ACK=0&#xFF0C;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x7684;&#x5E8F;&#x53F7; x&#x3002; B &#x6536;&#x5230;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x62A5;&#x6587;&#xFF0C;&#x5982;&#x679C;&#x540C;&#x610F;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#xFF0C;&#x5219;&#x5411; A &#x53D1;&#x9001;&#x8FDE;&#x63A5;&#x786E;&#x8BA4;&#x62A5;&#x6587;&#xFF0C;SYN=1&#xFF0C;ACK=1&#xFF0C;&#x786E;&#x8BA4;&#x53F7;&#x4E3A; x+1&#xFF0C;&#x540C;&#x65F6;&#x4E5F;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x7684;&#x5E8F;&#x53F7; y&#x3002; A &#x6536;&#x5230; B &#x7684;&#x8FDE;&#x63A5;&#x786E;&#x8BA4;&#x62A5;&#x6587;&#x540E;&#xFF0C;&#x8FD8;&#x8981;&#x5411; B &#x53D1;&#x51FA;&#x786E;&#x8BA4;&#xFF0C;&#x786E;&#x8BA4;&#x53F7;&#x4E3A; y+1&#xFF0C;&#x5E8F;&#x53F7;&#x4E3A; x+1&#x3002; B &#x6536;&#x5230; A &#x7684;&#x786E;&#x8BA4;&#x540E;&#xFF0C;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x3002; &#x5BF9;&#x4E8E;&#x5EFA;&#x94FE;&#x63A5;&#x7684;3&#x6B21;&#x63E1;&#x624B;&#x4E3B;&#x8981;&#x662F;&#x8981;&#x521D;&#x59CB;&#x5316;Sequence Number &#x7684;&#x521D;&#x59CB;&#x503C;&#x3002;&#x901A;&#x4FE1;&#x7684;&#x53CC;&#x65B9;&#x8981;&#x4E92;&#x76F8;&#x901A;&#x77E5;&#x5BF9;&#x65B9;&#x81EA;&#x5DF1;&#x7684;&#x521D;&#x59CB;&#x5316;&#x7684; Sequence Number&#xFF08;&#x7F29;&#x5199;&#x4E3A;ISN&#xFF1A;Inital Sequence Number&#xFF09;&#x2014;&#x2014;&#x6240;&#x4EE5;&#x53EB;SYN&#xFF0C;&#x5168;&#x79F0;Synchronize Sequence Numbers&#x3002;&#x4E5F;&#x5C31;&#x4E0A;&#x56FE;&#x4E2D;&#x7684; x &#x548C; y&#x3002;&#x8FD9;&#x4E2A;&#x53F7;&#x8981;&#x4F5C;&#x4E3A;&#x4EE5;&#x540E;&#x7684;&#x6570;&#x636E;&#x901A;&#x4FE1;&#x7684;&#x5E8F;&#x53F7;&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;&#x5E94;&#x7528;&#x5C42;&#x63A5;&#x6536;&#x5230;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x4F1A;&#x56E0;&#x4E3A;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x4F20;&#x8F93;&#x7684;&#x95EE;&#x9898;&#x800C;&#x4E71;&#x5E8F;&#xFF08;TCP&#x4F1A;&#x7528;&#x8FD9;&#x4E2A;&#x5E8F;&#x53F7;&#x6765;&#x62FC;&#x63A5;&#x6570;&#x636E;&#xFF09;&#x3002; &#x5173;&#x4E8E;&#x5EFA;&#x8FDE;&#x63A5;&#x65F6;SYN&#x8D85;&#x65F6;&#x8BD5;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x5982;&#x679C;server&#x7AEF;&#x63A5;&#x5230;&#x4E86; client &#x53D1;&#x7684; SYN &#x540E;&#x56DE;&#x4E86; SYN-ACK &#x540E; client &#x6389;&#x7EBF;&#x4E86;&#xFF0C;server &#x7AEF;&#x6CA1;&#x6709;&#x6536;&#x5230; client &#x56DE;&#x6765;&#x7684;ACK&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FDE;&#x63A5;&#x5904;&#x4E8E;&#x4E00;&#x4E2A;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#xFF0C;&#x5373;&#x6CA1;&#x6210;&#x529F;&#xFF0C;&#x4E5F;&#x6CA1;&#x5931;&#x8D25;&#x3002;&#x4E8E;&#x662F;&#xFF0C;server &#x7AEF;&#x5982;&#x679C;&#x5728;&#x4E00;&#x5B9A;&#x65F6;&#x95F4;&#x5185;&#x6CA1;&#x6709;&#x6536;&#x5230;&#x7684;TCP&#x4F1A;&#x91CD;&#x53D1; SYN-ACK&#x3002;&#x5728;Linux&#x4E0B;&#xFF0C;&#x9ED8;&#x8BA4;&#x91CD;&#x8BD5;&#x6B21;&#x6570;&#x4E3A;5&#x6B21;&#xFF0C;&#x91CD;&#x8BD5;&#x7684;&#x95F4;&#x9694;&#x65F6;&#x95F4;&#x4ECE; 1s &#x5F00;&#x59CB;&#x6BCF;&#x6B21;&#x90FD;&#x7FFB;&#x552E;&#xFF0C;5 &#x6B21;&#x7684;&#x91CD;&#x8BD5;&#x65F6;&#x95F4;&#x95F4;&#x9694;&#x4E3A;1s, 2s, 4s, 8s, 16s&#xFF0C;&#x603B;&#x5171;31s&#xFF0C;&#x7B2C;5&#x6B21;&#x53D1;&#x51FA;&#x540E;&#x8FD8;&#x8981;&#x7B49;32s&#x90FD;&#x77E5;&#x9053;&#x7B2C;5&#x6B21;&#x4E5F;&#x8D85;&#x65F6;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x603B;&#x5171;&#x9700;&#x8981; 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s&#xFF0C;TCP&#x624D;&#x4F1A;&#x628A;&#x65AD;&#x5F00;&#x8FD9;&#x4E2A;&#x8FDE;&#x63A5;&#x3002; &#x5173;&#x4E8E;SYN Flood&#x653B;&#x51FB;&#x4E00;&#x4E9B;&#x6076;&#x610F;&#x7684;&#x4EBA;&#x5C31;&#x4E3A;&#x6B64;&#x5236;&#x9020;&#x4E86;SYN Flood&#x653B;&#x51FB;&#xFF0C;&#x7ED9;&#x670D;&#x52A1;&#x5668;&#x53D1;&#x4E86;&#x4E00;&#x4E2A;SYN&#x540E;&#xFF0C;&#x5C31;&#x4E0B;&#x7EBF;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x670D;&#x52A1;&#x5668;&#x9700;&#x8981;&#x9ED8;&#x8BA4;&#x7B49; 63s &#x624D;&#x4F1A;&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x653B;&#x51FB;&#x8005;&#x5C31;&#x53EF;&#x4EE5;&#x628A;&#x670D;&#x52A1;&#x5668;&#x7684; syn &#x8FDE;&#x63A5;&#x7684;&#x961F;&#x5217;&#x8017;&#x5C3D;&#xFF0C;&#x8BA9;&#x6B63;&#x5E38;&#x7684;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x4E0D;&#x80FD;&#x5904;&#x7406;&#x3002;&#x4E8E;&#x662F;&#xFF0C;Linux&#x4E0B;&#x7ED9;&#x4E86;&#x4E00;&#x4E2A;&#x53EB; tcp_syncookies &#x7684;&#x53C2;&#x6570;&#x6765;&#x5E94;&#x5BF9;&#x8FD9;&#x4E2A;&#x4E8B;&#x2014;&#x2014;&#x5F53;SYN&#x961F;&#x5217;&#x6EE1;&#x4E86;&#x540E;&#xFF0C;TCP&#x4F1A;&#x901A;&#x8FC7;&#x6E90;&#x5730;&#x5740;&#x7AEF;&#x53E3;&#x3001;&#x76EE;&#x6807;&#x5730;&#x5740;&#x7AEF;&#x53E3;&#x548C;&#x65F6;&#x95F4;&#x6233;&#x6253;&#x9020;&#x51FA;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;Sequence Number&#x53D1;&#x56DE;&#x53BB;&#xFF08;&#x53C8;&#x53EB;cookie&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x653B;&#x51FB;&#x8005;&#x5219;&#x4E0D;&#x4F1A;&#x6709;&#x54CD;&#x5E94;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x6B63;&#x5E38;&#x8FDE;&#x63A5;&#xFF0C;&#x5219;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A; SYN Cookie&#x53D1;&#x56DE;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x670D;&#x52A1;&#x7AEF;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;cookie&#x5EFA;&#x8FDE;&#x63A5;&#xFF08;&#x5373;&#x4F7F;&#x4F60;&#x4E0D;&#x5728;SYN&#x961F;&#x5217;&#x4E2D;&#xFF09;&#x3002; &#x8BF7;&#x6CE8;&#x610F;&#xFF0C;&#x8BF7;&#x5148;&#x5343;&#x4E07;&#x522B;&#x7528; tcp_syncookies &#x6765;&#x5904;&#x7406;&#x6B63;&#x5E38;&#x7684;&#x5927;&#x8D1F;&#x8F7D;&#x7684;&#x8FDE;&#x63A5;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x56E0;&#x4E3A;&#xFF0C;synccookies &#x662F;&#x59A5;&#x534F;&#x7248;&#x7684;TCP&#x534F;&#x8BAE;&#xFF0C;&#x5E76;&#x4E0D;&#x4E25;&#x8C28;&#x3002;&#x5BF9;&#x4E8E;&#x6B63;&#x5E38;&#x7684;&#x8BF7;&#x6C42;&#xFF0C;&#x4F60;&#x5E94;&#x8BE5;&#x8C03;&#x6574;&#x4E09;&#x4E2A;TCP&#x53C2;&#x6570;&#x53EF;&#x4F9B;&#x4F60;&#x9009;&#x62E9;&#x3002; &#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#xFF1A;tcp_synack_retries &#x53EF;&#x4EE5;&#x7528;&#x4ED6;&#x6765;&#x51CF;&#x5C11;&#x91CD;&#x8BD5;&#x6B21;&#x6570;&#xFF1B; &#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#xFF1A;tcp_max_syn_backlog&#xFF0C;&#x53EF;&#x4EE5;&#x589E;&#x5927;SYN&#x8FDE;&#x63A5;&#x6570;&#xFF1B; &#x7B2C;&#x4E09;&#x4E2A;&#x662F;&#xFF1A;tcp_abort_on_overflow &#x5904;&#x7406;&#x4E0D;&#x8FC7;&#x6765;&#x5E72;&#x8106;&#x5C31;&#x76F4;&#x63A5;&#x62D2;&#x7EDD;&#x8FDE;&#x63A5;&#x4E86; &#xFF1B; &#x4FDD;&#x6D3B;&#x673A;&#x5236; &#x5411;&#x5BF9;&#x65B9;&#x53D1;&#x9001;&#x4FDD;&#x6D3B;&#x63A2;&#x6D4B;&#x62A5;&#x6587;&#xFF0C;&#x5982;&#x679C;&#x672A;&#x6536;&#x5230;&#x54CD;&#x5E94;&#x5219;&#x7EE7;&#x7EED;&#x53D1;&#x9001; &#x5C1D;&#x8BD5;&#x6B21;&#x6570;&#x8FBE;&#x5230;&#x4FDD;&#x6D3B;&#x63A2;&#x6D4B;&#x6570;&#x4ECD;&#x7136;&#x672A;&#x6536;&#x5230;&#x54CD;&#x5E94;&#x5219;&#x4E2D;&#x65AD;&#x8FDE;&#x63A5; &#x8C08;&#x8C08;&#x56DB;&#x6B21;&#x6325;&#x624B; &#x4EE5;&#x4E0B;&#x63CF;&#x8FF0;&#x4E0D;&#x8BA8;&#x8BBA;&#x5E8F;&#x53F7;&#x548C;&#x786E;&#x8BA4;&#x53F7;&#xFF0C;&#x56E0;&#x4E3A;&#x5E8F;&#x53F7;&#x548C;&#x786E;&#x8BA4;&#x53F7;&#x7684;&#x89C4;&#x5219;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x3002;&#x5E76;&#x4E14;&#x4E0D;&#x8BA8;&#x8BBA; ACK&#xFF0C;&#x56E0;&#x4E3A; ACK &#x5728;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x4E4B;&#x540E;&#x90FD;&#x4E3A; 1&#x3002; A &#x53D1;&#x9001;&#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x62A5;&#x6587;&#xFF0C;FIN=1&#x3002; B &#x6536;&#x5230;&#x4E4B;&#x540E;&#x53D1;&#x51FA;&#x786E;&#x8BA4;&#xFF0C;&#x6B64;&#x65F6; TCP &#x5C5E;&#x4E8E;&#x534A;&#x5173;&#x95ED;&#x72B6;&#x6001;&#xFF0C;B &#x80FD;&#x5411; A &#x53D1;&#x9001;&#x6570;&#x636E;&#x4F46;&#x662F; A &#x4E0D;&#x80FD;&#x5411; B &#x53D1;&#x9001;&#x6570;&#x636E;&#x3002; &#x5F53; B &#x4E0D;&#x518D;&#x9700;&#x8981;&#x8FDE;&#x63A5;&#x65F6;&#xFF0C;&#x53D1;&#x9001;&#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x62A5;&#x6587;&#xFF0C;FIN=1&#x3002; A &#x6536;&#x5230;&#x540E;&#x53D1;&#x51FA;&#x786E;&#x8BA4;&#xFF0C;&#x8FDB;&#x5165; TIME-WAIT &#x72B6;&#x6001;&#xFF0C;&#x7B49;&#x5F85; 2 MSL&#xFF08;&#x6700;&#x5927;&#x62A5;&#x6587;&#x5B58;&#x6D3B;&#x65F6;&#x95F4;&#xFF09;&#x540E;&#x91CA;&#x653E;&#x8FDE;&#x63A5;&#x3002; B &#x6536;&#x5230; A &#x7684;&#x786E;&#x8BA4;&#x540E;&#x91CA;&#x653E;&#x8FDE;&#x63A5;&#x3002; &#x56DB;&#x6B21;&#x6325;&#x624B;&#x7684;&#x539F;&#x56E0;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x4E86; FIN &#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x62A5;&#x6587;&#x4E4B;&#x540E;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x6536;&#x5230;&#x4E86;&#x8FD9;&#x4E2A;&#x62A5;&#x6587;&#xFF0C;&#x5C31;&#x8FDB;&#x5165;&#x4E86; CLOSE-WAIT &#x72B6;&#x6001;&#x3002;&#x8FD9;&#x4E2A;&#x72B6;&#x6001;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x53D1;&#x9001;&#x8FD8;&#x672A;&#x4F20;&#x9001;&#x5B8C;&#x6BD5;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4F20;&#x9001;&#x5B8C;&#x6BD5;&#x4E4B;&#x540E;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4F1A;&#x53D1;&#x9001; FIN &#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x62A5;&#x6587;&#x3002; TCP&#x8FDE;&#x63A5;&#x662F;&#x5168;&#x53CC;&#x5DE5;&#x7684;&#xFF0C;&#x670D;&#x52A1;&#x7AEF;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x6570;&#x636E;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x4E5F;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x6570;&#x636E;&#x5230;&#x670D;&#x52A1;&#x7AEF;&#xFF0C;&#x53D1;&#x9001;&#x65B9;&#x548C;&#x63A5;&#x6536;&#x65B9;&#x90FD;&#x9700;&#x8981;&#x4E24;&#x6B21;&#x6325;&#x624B;&#x624D;&#x80FD;&#x5173;&#x95ED; &#x3002; TIME_WAIT&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x6536;&#x5230;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684; FIN &#x62A5;&#x6587;&#x540E;&#x8FDB;&#x5165;&#x6B64;&#x72B6;&#x6001;&#xFF0C;&#x6B64;&#x65F6;&#x5E76;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x8FDB;&#x5165; CLOSED &#x72B6;&#x6001;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x7B49;&#x5F85;&#x4E00;&#x4E2A;&#x65F6;&#x95F4;&#x8BA1;&#x65F6;&#x5668;&#x8BBE;&#x7F6E;&#x7684;&#x65F6;&#x95F4; 2MSL&#x3002;&#x8FD9;&#x4E48;&#x505A;&#x6709;&#x4E24;&#x4E2A;&#x7406;&#x7531;&#xFF1A; &#x786E;&#x4FDD;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x786E;&#x8BA4;&#x62A5;&#x6587;&#x80FD;&#x591F;&#x5230;&#x8FBE;&#x3002;&#x5982;&#x679C; B &#x6CA1;&#x6536;&#x5230; A &#x53D1;&#x9001;&#x6765;&#x7684;&#x786E;&#x8BA4;&#x62A5;&#x6587;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x91CD;&#x65B0;&#x53D1;&#x9001;&#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x8BF7;&#x6C42;&#x62A5;&#x6587;&#xFF0C;A &#x7B49;&#x5F85;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x5904;&#x7406;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x7684;&#x53D1;&#x751F;&#x3002; &#x7B49;&#x5F85;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x672C;&#x8FDE;&#x63A5;&#x6301;&#x7EED;&#x65F6;&#x95F4;&#x5185;&#x6240;&#x4EA7;&#x751F;&#x7684;&#x6240;&#x6709;&#x62A5;&#x6587;&#x90FD;&#x4ECE;&#x7F51;&#x7EDC;&#x4E2D;&#x6D88;&#x5931;&#xFF0C;&#x4F7F;&#x5F97;&#x4E0B;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8FDE;&#x63A5;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x65E7;&#x7684;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x62A5;&#x6587;&#x3002; TCP &#x548C; UDP &#x7684;&#x533A;&#x522B;&#x524D;&#x9762;&#x6211;&#x4EEC;&#x8BF4;&#x4E86; TCP &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6765;&#x8BA4;&#x8BC6;&#x4E00;&#x4E0B; UDP&#x3002; UPD &#x7684;&#x7279;&#x70B9; &#x9762;&#x5411;&#x975E;&#x8FDE;&#x63A5;&#x7684; &#x4E0D;&#x7EF4;&#x62A4;&#x8FDE;&#x63A5;&#x72B6;&#x6001;&#xFF0C;&#x652F;&#x6301;&#x540C;&#x65F6;&#x5411;&#x591A;&#x4E2A;&#x5BA2;&#x6237;&#x7AEF;&#x4F20;&#x8F93;&#x76F8;&#x540C;&#x7684;&#x6D88;&#x606F; &#x6570;&#x636E;&#x5305;&#x62A5;&#x5934;&#x53EA;&#x6709; 8 &#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x989D;&#x5916;&#x5F00;&#x9500;&#x8F83;&#x5C0F; &#x541E;&#x5410;&#x91CF;&#x53EA;&#x53D7;&#x9650;&#x4E8E;&#x6570;&#x636E;&#x751F;&#x6210;&#x7387;&#x3001;&#x4F20;&#x8F93;&#x901F;&#x7387;&#x4EE5;&#x53CA;&#x673A;&#x5668;&#x6027;&#x80FD; &#x5C3D;&#x6700;&#x5927;&#x52AA;&#x529B;&#x4EA4;&#x4ED8;&#xFF0C;&#x4E0D;&#x4FDD;&#x8BC1;&#x53EF;&#x9760;&#x4EA4;&#x4ED8;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x7EF4;&#x6301;&#x590D;&#x6742;&#x7684;&#x94FE;&#x63A5;&#x72B6;&#x6001;&#x8868; &#x9762;&#x5411;&#x62A5;&#x6587;&#xFF0C;&#x4E0D;&#x5BF9;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x63D0;&#x4EA4;&#x7684;&#x62A5;&#x6587;&#x4FE1;&#x606F;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#x6216;&#x5219;&#x5408;&#x5E76; &#x5BF9;&#x6BD4; TCP &#x662F;&#x9762;&#x5411;&#x8FDE;&#x63A5;&#x7684;&#xFF1B;UDP &#x662F;&#x65E0;&#x8FDE;&#x63A5;&#x7684;&#x3002; TCP &#x662F;&#x53EF;&#x9760;&#x7684;&#xFF1B;UDP &#x662F;&#x4E0D;&#x53EF;&#x9760;&#x7684;&#x3002; TCP &#x53EA;&#x652F;&#x6301;&#x70B9;&#x5BF9;&#x70B9;&#x901A;&#x4FE1;&#xFF1B;UDP &#x652F;&#x6301;&#x4E00;&#x5BF9;&#x4E00;&#x3001;&#x4E00;&#x5BF9;&#x591A;&#x3001;&#x591A;&#x5BF9;&#x4E00;&#x3001;&#x591A;&#x5BF9;&#x591A;&#x7684;&#x901A;&#x4FE1;&#x6A21;&#x5F0F;&#x3002; TCP &#x662F;&#x9762;&#x5411;&#x5B57;&#x8282;&#x6D41;&#x7684;&#xFF1B;UDP &#x662F;&#x9762;&#x5411;&#x62A5;&#x6587;&#x7684;&#x3002; TCP &#x6709;&#x62E5;&#x585E;&#x63A7;&#x5236;&#x673A;&#x5236;&#xFF1B;UDP &#x6CA1;&#x6709;&#x62E5;&#x585E;&#x63A7;&#x5236;&#xFF0C;&#x9002;&#x5408;&#x5A92;&#x4F53;&#x901A;&#x4FE1;&#x3002; TCP &#x9996;&#x90E8;&#x5F00;&#x9500;(20 &#x4E2A;&#x5B57;&#x8282;)&#xFF0C;&#x6BD4; UDP &#x7684;&#x9996;&#x90E8;&#x5F00;&#x9500;(8 &#x4E2A;&#x5B57;&#x8282;)&#x8981;&#x5927;&#x3002; TCP &#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x9996;&#x5148;&#x660E;&#x786E;&#xFF1A; TCP&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5206;&#x4E3A;&#x63A5;&#x53D7;&#x7A97;&#x53E3;&#xFF0C;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x3002; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x534F;&#x8BAE;&#x662F;&#x4F20;&#x8F93;&#x5C42;&#x8FDB;&#x884C;&#x6D41;&#x63A7;&#x7684;&#x4E00;&#x79CD;&#x63AA;&#x65BD;&#xFF0C;&#x63A5;&#x6536;&#x65B9;&#x901A;&#x8FC7;&#x901A;&#x544A;&#x53D1;&#x9001;&#x65B9;&#x81EA;&#x5DF1;&#x7684;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#xFF0C;&#x4ECE;&#x800C;&#x63A7;&#x5236;&#x53D1;&#x9001;&#x65B9;&#x7684;&#x53D1;&#x9001;&#x901F;&#x5EA6;&#xFF0C;&#x4ECE;&#x800C;&#x8FBE;&#x5230;&#x9632;&#x6B62;&#x53D1;&#x9001;&#x65B9;&#x53D1;&#x9001;&#x901F;&#x5EA6;&#x8FC7;&#x5FEB;&#x800C;&#x5BFC;&#x81F4;&#x81EA;&#x5DF1;&#x88AB;&#x6DF9;&#x6CA1;&#x7684;&#x76EE;&#x7684;&#x3002; &#x91CD;&#x8981;&#x6982;&#x5FF5;&#x5BF9;ACK&#x7684;&#x518D;&#x8BA4;&#x8BC6;&#xFF0C;ack&#x901A;&#x5E38;&#x88AB;&#x7406;&#x89E3;&#x4E3A;&#x6536;&#x5230;&#x6570;&#x636E;&#x540E;&#x7ED9;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x786E;&#x8BA4;ACK&#xFF0C;ACK&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4FE1;&#x606F;&#xFF1A; &#x4E00;&#x662F;&#x671F;&#x671B;&#x63A5;&#x6536;&#x5230;&#x7684;&#x4E0B;&#x4E00;&#x5B57;&#x8282;&#x7684;&#x5E8F;&#x53F7;n&#xFF0C;&#x8BE5;n&#x4EE3;&#x8868;&#x63A5;&#x6536;&#x65B9;&#x5DF2;&#x7ECF;&#x63A5;&#x6536;&#x5230;&#x4E86;&#x524D;n-1&#x5B57;&#x8282;&#x6570;&#x636E;&#xFF0C;&#x6B64;&#x65F6;&#x5982;&#x679C;&#x63A5;&#x6536;&#x65B9;&#x6536;&#x5230;&#x7B2C;n+1&#x5B57;&#x8282;&#x6570;&#x636E;&#x800C;&#x4E0D;&#x662F;&#x7B2C;n&#x5B57;&#x8282;&#x6570;&#x636E;&#xFF0C;&#x63A5;&#x6536;&#x65B9;&#x662F;&#x4E0D;&#x4F1A;&#x53D1;&#x9001;&#x5E8F;&#x53F7;&#x4E3A;n+2&#x7684;ACK&#x7684;&#x3002;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x5047;&#x5982;&#x63A5;&#x6536;&#x7AEF;&#x6536;&#x5230;1-1024&#x5B57;&#x8282;&#xFF0C;&#x5B83;&#x4F1A;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x786E;&#x8BA4;&#x53F7;&#x4E3A;1025&#x7684;ACK,&#x4F46;&#x662F;&#x63A5;&#x4E0B;&#x6765;&#x6536;&#x5230;&#x7684;&#x662F;2049-3072&#xFF0C;&#x5B83;&#x662F;&#x4E0D;&#x4F1A;&#x53D1;&#x9001;&#x786E;&#x8BA4;&#x53F7;&#x4E3A;3072&#x7684;ACK,&#x800C;&#x4F9D;&#x65E7;&#x53D1;&#x9001;1025&#x7684;ACK&#x3002; &#x4E8C;&#x662F;&#x5F53;&#x524D;&#x7684;&#x7A97;&#x53E3;&#x5927;&#x5C0F;m&#xFF0C;&#x5982;&#x6B64;&#x53D1;&#x9001;&#x65B9;&#x5728;&#x63A5;&#x6536;&#x5230;ACK&#x5305;&#x542B;&#x7684;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x8FD8;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x591A;&#x5C11;&#x5B57;&#x8282;&#x7684;&#x6570;&#x636E;&#x7ED9;&#x5BF9;&#x65B9;&#xFF0C;&#x5047;&#x5B9A;&#x5F53;&#x524D;&#x53D1;&#x9001;&#x65B9;&#x5DF2;&#x53D1;&#x9001;&#x5230;&#x7B2C;x&#x5B57;&#x8282;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x7684;&#x5B57;&#x8282;&#x6570;&#x5C31;&#x662F;y=m-(x-n).&#x8FD9;&#x5C31;&#x662F;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x63A7;&#x5236;&#x6D41;&#x91CF;&#x7684;&#x57FA;&#x672C;&#x539F;&#x7406; &#x91CD;&#x70B9;&#xFF1A;&#x53D1;&#x9001;&#x65B9;&#x6839;&#x636E;&#x6536;&#x5230;ACK&#x5F53;&#x4E2D;&#x7684;&#x671F;&#x671B;&#x6536;&#x5230;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x5E8F;&#x53F7;n&#x4EE5;&#x53CA;&#x7A97;&#x53E3;m&#xFF0C;&#x8FD8;&#x6709;&#x5F53;&#x524D;&#x5DF2;&#x7ECF;&#x53D1;&#x9001;&#x7684;&#x5B57;&#x8282;&#x5E8F;&#x53F7;x&#xFF0C;&#x7B97;&#x51FA;&#x8FD8;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x7684;&#x5B57;&#x8282;&#x6570;&#x3002; &#x53D1;&#x9001;&#x7AEF;&#x7A97;&#x53E3;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x5E8F;&#x53F7;&#x4E00;&#x5B9A;&#x662F;ACK&#x4E2D;&#x671F;&#x671B;&#x6536;&#x5230;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x5E8F;&#x53F7;&#xFF0C;&#x6BD4;&#x5982;&#x4E0B;&#x56FE;&#xFF1A; &#x4E0A;&#x56FE;52 53 54 55 &#x5B57;&#x8282;&#x90FD;&#x662F;&#x53EF;&#x4EE5;&#x65B0;&#x53D1;&#x9001;&#x7684;&#x5B57;&#x8282;&#x5E8F;&#x3002; &#x63A5;&#x53D7;&#x7AEF;&#x7A97;&#x53E3;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x5E8F;&#x4E4B;&#x524D;&#x4E00;&#x5B9A;&#x662F;&#x5DF2;&#x7ECF;&#x5B8C;&#x5168;&#x63A5;&#x6536;&#x7684;&#xFF0C;&#x540E;&#x9762;&#x7A97;&#x53E3;&#x91CC;&#x9762;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x5E0C;&#x671B;&#x63A5;&#x53D7;&#x7684;&#xFF0C;&#x7A97;&#x53E3;&#x540E;&#x9762;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x4E0D;&#x5E0C;&#x671B;&#x63A5;&#x53D7;&#x7684;&#x3002; TCP&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5206;&#x4E3A;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x548C;&#x53D1;&#x9001;&#x7A97;&#x53E3; &#x4E0D;&#x5206;&#x6790;&#x8FD9;&#x4E24;&#x79CD;&#x7A97;&#x53E3;&#x5C31;&#x8BA8;&#x8BBA;&#x662F;&#x4E0D;&#x59A5;&#x5F53;&#x7684;&#x3002; TCP&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x4E3B;&#x8981;&#x6709;&#x4E24;&#x4E2A;&#x4F5C;&#x7528;&#xFF0C;&#x4E00;&#x662F;&#x63D0;&#x4F9B;TCP&#x7684;&#x53EF;&#x9760;&#x6027;&#xFF0C;&#x4E8C;&#x662F;&#x63D0;&#x4F9B;TCP&#x7684;&#x6D41;&#x63A7;&#x7279;&#x6027;&#x3002;&#x540C;&#x65F6;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x673A;&#x5236;&#x8FD8;&#x4F53;&#x73B0;&#x4E86;TCP&#x9762;&#x5411;&#x5B57;&#x8282;&#x6D41;&#x7684;&#x8BBE;&#x8BA1;&#x601D;&#x8DEF;&#x3002;TCP &#x6BB5;&#x4E2D;&#x7A97;&#x53E3;&#x7684;&#x76F8;&#x5173;&#x5B57;&#x6BB5;&#x3002; TCP&#x7684;Window&#x662F;&#x4E00;&#x4E2A;16bit&#x4F4D;&#x5B57;&#x6BB5;&#xFF0C;&#x5B83;&#x4EE3;&#x8868;&#x7684;&#x662F;&#x7A97;&#x53E3;&#x7684;&#x5B57;&#x8282;&#x5BB9;&#x91CF;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;TCP&#x7684;&#x6807;&#x51C6;&#x7A97;&#x53E3;&#x6700;&#x5927;&#x4E3A;2^16-1=65535&#x4E2A;&#x5B57;&#x8282;&#x3002; &#x53E6;&#x5916;&#x5728;TCP&#x7684;&#x9009;&#x9879;&#x5B57;&#x6BB5;&#x4E2D;&#x8FD8;&#x5305;&#x542B;&#x4E86;&#x4E00;&#x4E2A;TCP&#x7A97;&#x53E3;&#x6269;&#x5927;&#x56E0;&#x5B50;&#xFF0C;option-kind&#x4E3A;3&#xFF0C;option-length&#x4E3A;3&#x4E2A;&#x5B57;&#x8282;&#xFF0C;option-data&#x53D6;&#x503C;&#x8303;&#x56F4;0-14&#x3002;&#x7A97;&#x53E3;&#x6269;&#x5927;&#x56E0;&#x5B50;&#x7528;&#x6765;&#x6269;&#x5927;TCP&#x7A97;&#x53E3;&#xFF0C;&#x53EF;&#x628A;&#x539F;&#x6765;16bit&#x7684;&#x7A97;&#x53E3;&#xFF0C;&#x6269;&#x5927;&#x4E3A;31bit&#x3002; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x57FA;&#x672C;&#x539F;&#x7406;&#x5BF9;&#x4E8E;TCP&#x4F1A;&#x8BDD;&#x7684;&#x53D1;&#x9001;&#x65B9;&#xFF0C;&#x4EFB;&#x4F55;&#x65F6;&#x5019;&#x5728;&#x5176;&#x53D1;&#x9001;&#x7F13;&#x5B58;&#x5185;&#x7684;&#x6570;&#x636E;&#x90FD;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;4&#x7C7B;&#xFF0C;&#x201C;&#x5DF2;&#x7ECF;&#x53D1;&#x9001;&#x5E76;&#x5F97;&#x5230;&#x5BF9;&#x7AEF;ACK&#x7684;&#x201D;&#xFF0C;&#x201C;&#x5DF2;&#x7ECF;&#x53D1;&#x9001;&#x4F46;&#x8FD8;&#x672A;&#x6536;&#x5230;&#x5BF9;&#x7AEF;ACK&#x7684;&#x201D;&#xFF0C;&#x201C;&#x672A;&#x53D1;&#x9001;&#x4F46;&#x5BF9;&#x7AEF;&#x5141;&#x8BB8;&#x53D1;&#x9001;&#x7684;&#x201D;&#xFF0C;&#x201C;&#x672A;&#x53D1;&#x9001;&#x4E14;&#x5BF9;&#x7AEF;&#x4E0D;&#x5141;&#x8BB8;&#x53D1;&#x9001;&#x201D;&#x3002;&#x201C;&#x5DF2;&#x7ECF;&#x53D1;&#x9001;&#x4F46;&#x8FD8;&#x672A;&#x6536;&#x5230;&#x5BF9;&#x7AEF;ACK&#x7684;&#x201D;&#x548C;&#x201C;&#x672A;&#x53D1;&#x9001;&#x4F46;&#x5BF9;&#x7AEF;&#x5141;&#x8BB8;&#x53D1;&#x9001;&#x7684;&#x201D;&#x8FD9;&#x4E24;&#x90E8;&#x5206;&#x6570;&#x636E;&#x79F0;&#x4E4B;&#x4E3A;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x3002; &#x5F53;&#x6536;&#x5230;&#x63A5;&#x6536;&#x65B9;&#x65B0;&#x7684;ACK&#x5BF9;&#x4E8E;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x4E2D;&#x540E;&#x7EED;&#x5B57;&#x8282;&#x7684;&#x786E;&#x8BA4;&#x662F;&#xFF0C;&#x7A97;&#x53E3;&#x6ED1;&#x52A8;&#xFF0C;&#x6ED1;&#x52A8;&#x539F;&#x7406;&#x5982;&#x4E0B;&#x56FE;&#x3002; &#x5F53;&#x6536;&#x5230;ACK=36&#x65F6;&#x7A97;&#x53E3;&#x6ED1;&#x52A8;&#x3002; 2&#xFF09;&#x5BF9;&#x4E8E;TCP&#x7684;&#x63A5;&#x6536;&#x65B9;&#xFF0C;&#x5728;&#x67D0;&#x4E00;&#x65F6;&#x523B;&#x5728;&#x5B83;&#x7684;&#x63A5;&#x6536;&#x7F13;&#x5B58;&#x5185;&#x5B58;&#x5728;3&#x79CD;&#x3002;&#x201C;&#x5DF2;&#x63A5;&#x6536;&#x201D;&#xFF0C;&#x201C;&#x672A;&#x63A5;&#x6536;&#x51C6;&#x5907;&#x63A5;&#x6536;&#x201D;&#xFF0C;&#x201C;&#x672A;&#x63A5;&#x6536;&#x5E76;&#x672A;&#x51C6;&#x5907;&#x63A5;&#x6536;&#x201D;&#xFF08;&#x7531;&#x4E8E;ACK&#x76F4;&#x63A5;&#x7531;TCP&#x534F;&#x8BAE;&#x6808;&#x56DE;&#x590D;&#xFF0C;&#x9ED8;&#x8BA4;&#x65E0;&#x5E94;&#x7528;&#x5EF6;&#x8FDF;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x201C;&#x5DF2;&#x63A5;&#x6536;&#x672A;&#x56DE;&#x590D;ACK&#x201D;&#xFF09;&#x3002;&#x5176;&#x4E2D;&#x201C;&#x672A;&#x63A5;&#x6536;&#x51C6;&#x5907;&#x63A5;&#x6536;&#x201D;&#x79F0;&#x4E4B;&#x4E3A;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x3002; &#x53D1;&#x9001;&#x7A97;&#x53E3;&#x4E0E;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x5173;&#x7CFB;TCP&#x662F;&#x53CC;&#x5DE5;&#x7684;&#x534F;&#x8BAE;&#xFF0C;&#x4F1A;&#x8BDD;&#x7684;&#x53CC;&#x65B9;&#x90FD;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x63A5;&#x6536;&#x3001;&#x53D1;&#x9001;&#x6570;&#x636E;&#x3002;TCP&#x4F1A;&#x8BDD;&#x7684;&#x53CC;&#x65B9;&#x90FD;&#x5404;&#x81EA;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x201C;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x201D;&#x548C;&#x4E00;&#x4E2A;&#x201C;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x201D;&#x3002;&#x5176;&#x4E2D;&#x5404;&#x81EA;&#x7684;&#x201C;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x201D;&#x5927;&#x5C0F;&#x53D6;&#x51B3;&#x4E8E;&#x5E94;&#x7528;&#x3001;&#x7CFB;&#x7EDF;&#x3001;&#x786C;&#x4EF6;&#x7684;&#x9650;&#x5236;&#xFF08;TCP&#x4F20;&#x8F93;&#x901F;&#x7387;&#x4E0D;&#x80FD;&#x5927;&#x4E8E;&#x5E94;&#x7528;&#x7684;&#x6570;&#x636E;&#x5904;&#x7406;&#x901F;&#x7387;&#xFF09;&#x3002;&#x5404;&#x81EA;&#x7684;&#x201C;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x201D;&#x5219;&#x8981;&#x6C42;&#x53D6;&#x51B3;&#x4E8E;&#x5BF9;&#x7AEF;&#x901A;&#x544A;&#x7684;&#x201C;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x201D;&#xFF0C;&#x8981;&#x6C42;&#x76F8;&#x540C;&#x3002; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5B9E;&#x73B0;&#x9762;&#x5411;&#x6D41;&#x7684;&#x53EF;&#x9760;&#x6027; &#x6700;&#x57FA;&#x672C;&#x7684;&#x4F20;&#x8F93;&#x53EF;&#x9760;&#x6027;&#x6765;&#x6E90;&#x4E8E;&#x201C;&#x786E;&#x8BA4;&#x91CD;&#x4F20;&#x201D;&#x673A;&#x5236;&#x3002; TCP&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x53EF;&#x9760;&#x6027;&#x4E5F;&#x662F;&#x5EFA;&#x7ACB;&#x5728;&#x201C;&#x786E;&#x8BA4;&#x91CD;&#x4F20;&#x201D;&#x57FA;&#x7840;&#x4E0A;&#x7684;&#x3002; &#x53D1;&#x9001;&#x7A97;&#x53E3;&#x53EA;&#x6709;&#x6536;&#x5230;&#x5BF9;&#x7AEF;&#x5BF9;&#x4E8E;&#x672C;&#x6BB5;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x5185;&#x5B57;&#x8282;&#x7684;ACK&#x786E;&#x8BA4;&#xFF0C;&#x624D;&#x4F1A;&#x79FB;&#x52A8;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x7684;&#x5DE6;&#x8FB9;&#x754C;&#x3002; &#x63A5;&#x6536;&#x7A97;&#x53E3;&#x53EA;&#x6709;&#x5728;&#x524D;&#x9762;&#x6240;&#x6709;&#x7684;&#x6BB5;&#x90FD;&#x786E;&#x8BA4;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x624D;&#x4F1A;&#x79FB;&#x52A8;&#x5DE6;&#x8FB9;&#x754C;&#x3002;&#x5F53;&#x5728;&#x524D;&#x9762;&#x8FD8;&#x6709;&#x5B57;&#x8282;&#x672A;&#x63A5;&#x6536;&#x4F46;&#x6536;&#x5230;&#x540E;&#x9762;&#x5B57;&#x8282;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7A97;&#x53E3;&#x4E0D;&#x4F1A;&#x79FB;&#x52A8;&#xFF0C;&#x5E76;&#x4E0D;&#x5BF9;&#x540E;&#x7EED;&#x5B57;&#x8282;&#x786E;&#x8BA4;&#x3002;&#x4EE5;&#x6B64;&#x786E;&#x4FDD;&#x5BF9;&#x7AEF;&#x4F1A;&#x5BF9;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x91CD;&#x4F20;&#x3002; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x6D41;&#x63A7;&#x7279;&#x6027;TCP&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x662F;&#x52A8;&#x6001;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x60F3;&#x8C61;&#x6210;&#x5C0F;&#x5B66;&#x5E38;&#x89C1;&#x7684;&#x4E00;&#x4E2A;&#x6570;&#x5B66;&#x9898;&#xFF0C;&#x4E00;&#x4E2A;&#x6C34;&#x6C60;&#xFF0C;&#x4F53;&#x79EF;V&#xFF0C;&#x6BCF;&#x5C0F;&#x65F6;&#x8FDB;&#x6C34;&#x91CF;V1&#xFF0C;&#x51FA;&#x6C34;&#x91CF;V2&#x3002;&#x5F53;&#x6C34;&#x6C60;&#x6EE1;&#x4E86;&#x5C31;&#x4E0D;&#x5141;&#x8BB8;&#x518D;&#x6CE8;&#x5165;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E2A;&#x6DB2;&#x538B;&#x7CFB;&#x7EDF;&#x63A7;&#x5236;&#x6C34;&#x6C60;&#x5927;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x6C34;&#x7684;&#x6CE8;&#x5165;&#x901F;&#x7387;&#x548C;&#x91CF;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x6C34;&#x6C60;&#x5C31;&#x7C7B;&#x4F3C;TCP&#x7684;&#x7A97;&#x53E3;&#x3002;&#x5E94;&#x7528;&#x6839;&#x636E;&#x81EA;&#x8EAB;&#x7684;&#x5904;&#x7406;&#x80FD;&#x529B;&#x53D8;&#x5316;&#xFF0C;&#x901A;&#x8FC7;&#x672C;&#x7AEF;TCP&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#x63A7;&#x5236;&#x6765;&#x5BF9;&#x5BF9;&#x5BF9;&#x7AEF;&#x7684;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#x6D41;&#x91CF;&#x9650;&#x5236;&#x3002; &#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x5728;&#x9700;&#x8981;&#xFF08;&#x5982;&#x5185;&#x5B58;&#x4E0D;&#x8DB3;&#xFF09;&#x65F6;&#xFF0C;&#x901A;&#x8FC7;API&#x901A;&#x77E5;TCP&#x534F;&#x8BAE;&#x6808;&#x7F29;&#x5C0F;TCP&#x7684;&#x63A5;&#x6536;&#x7A97;&#x53E3;&#x3002;&#x7136;&#x540E;TCP&#x534F;&#x8BAE;&#x6808;&#x5728;&#x4E0B;&#x4E2A;&#x6BB5;&#x53D1;&#x9001;&#x65F6;&#x5305;&#x542B;&#x65B0;&#x7684;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#x901A;&#x77E5;&#x7ED9;&#x5BF9;&#x7AEF;&#xFF0C;&#x5BF9;&#x7AEF;&#x6309;&#x901A;&#x77E5;&#x7684;&#x7A97;&#x53E3;&#x6765;&#x6539;&#x53D8;&#x53D1;&#x9001;&#x7A97;&#x53E3;&#xFF0C;&#x4EE5;&#x6B64;&#x8FBE;&#x5230;&#x51CF;&#x7F13;&#x53D1;&#x9001;&#x901F;&#x7387;&#x7684;&#x76EE;&#x7684;&#x3002; HTTPHTTP &#x534F;&#x8BAE;&#xFF0C;&#x662F; Hyper Text Transfer Protocol&#xFF08;&#x8D85;&#x6587;&#x672C;&#x4F20;&#x8F93;&#x534F;&#x8BAE;&#xFF09;&#x7684;&#x7F29;&#x5199;&#xFF0C;&#x662F;&#x7528;&#x4E8E;&#x4ECE;&#x4E07;&#x7EF4;&#x7F51;&#xFF08;WWW:World Wide Web &#xFF09;&#x670D;&#x52A1;&#x5668;&#x4F20;&#x8F93;&#x8D85;&#x6587;&#x672C;&#x5230;&#x672C;&#x5730;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x4F20;&#x9001;&#x534F;&#x8BAE;&#x3002; &#x4E3B;&#x8981;&#x7279;&#x70B9;&#x5982;&#x4E0B;&#xFF1A; &#x7B80;&#x5355;&#x5FEB;&#x901F;&#xFF1A;&#x5BA2;&#x6237;&#x5411;&#x670D;&#x52A1;&#x5668;&#x8BF7;&#x6C42;&#x670D;&#x52A1;&#x65F6;&#xFF0C;&#x53EA;&#x9700;&#x4F20;&#x9001;&#x8BF7;&#x6C42;&#x65B9;&#x6CD5;&#x548C;&#x8DEF;&#x5F84;&#x3002;&#x8BF7;&#x6C42;&#x65B9;&#x6CD5;&#x5E38;&#x7528;&#x7684;&#x6709; GET&#x3001;HEAD&#x3001;POST &#x7B49;&#x7B49;&#x3002;&#x6BCF;&#x79CD;&#x65B9;&#x6CD5;&#x89C4;&#x5B9A;&#x4E86;&#x5BA2;&#x6237;&#x4E0E;&#x670D;&#x52A1;&#x5668;&#x8054;&#x7CFB;&#x7684;&#x7C7B;&#x578B;&#x4E0D;&#x540C;&#x3002;&#x7531;&#x4E8E; HTTP &#x534F;&#x8BAE;&#x7B80;&#x5355;&#xFF0C;&#x4F7F;&#x5F97; HTTP &#x670D;&#x52A1;&#x5668;&#x7684;&#x7A0B;&#x5E8F;&#x89C4;&#x6A21;&#x5C0F;&#xFF0C;&#x56E0;&#x800C;&#x901A;&#x4FE1;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002; &#x6570;&#x636E;&#x683C;&#x5F0F;&#x7075;&#x6D3B;&#xFF1A;HTTP &#x5141;&#x8BB8;&#x4F20;&#x8F93;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x5BF9;&#x8C61;&#x3002;&#x6B63;&#x5728;&#x4F20;&#x8F93;&#x7684;&#x7C7B;&#x578B;&#x7531;Content-Type &#x52A0;&#x4EE5;&#x6807;&#x8BB0;&#x3002; &#x65E0;&#x8FDE;&#x63A5;&#xFF1A;&#x65E0;&#x8FDE;&#x63A5;&#x7684;&#x542B;&#x4E49;&#x662F;&#x9650;&#x5236;&#x6BCF;&#x6B21;&#x8FDE;&#x63A5;&#x53EA;&#x5904;&#x7406;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x3002;&#x670D;&#x52A1;&#x5668;&#x5904;&#x7406;&#x5B8C;&#x5BA2;&#x6237;&#x7684;&#x8BF7;&#x6C42;&#xFF0C;&#x5E76;&#x6536;&#x5230;&#x5BA2;&#x6237;&#x7684;&#x5E94;&#x7B54;&#x540E;&#xFF0C;&#x5373;&#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x3002;&#x91C7;&#x7528;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x4F20;&#x8F93;&#x65F6;&#x95F4;&#x3002; &#x65E0;&#x72B6;&#x6001;&#xFF1A;HTTP &#x534F;&#x8BAE;&#x662F;&#x65E0;&#x72B6;&#x6001;&#x534F;&#x8BAE;&#x3002;&#x65E0;&#x72B6;&#x6001;&#xFF0C;&#x662F;&#x6307;&#x534F;&#x8BAE;&#x5BF9;&#x4E8E;&#x4E8B;&#x52A1;&#x5904;&#x7406;&#x6CA1;&#x6709;&#x8BB0;&#x5FC6;&#x80FD;&#x529B;&#x3002;&#x65E0;&#x72B6;&#x6001;&#x610F;&#x5473;&#x7740;&#x5982;&#x679C;&#x540E;&#x7EED;&#x5904;&#x7406;&#x9700;&#x8981;&#x524D;&#x9762;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5219;&#x5B83;&#x5FC5;&#x987B;&#x91CD;&#x4F20;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x6BCF;&#x6B21;&#x8FDE;&#x63A5;&#x4F20;&#x9001;&#x7684;&#x6570;&#x636E;&#x91CF;&#x589E;&#x5927;&#x3002;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0D;&#x9700;&#x8981;&#x5148;&#x524D;&#x4FE1;&#x606F;&#x65F6;&#x5B83;&#x7684;&#x5E94;&#x7B54;&#x5C31;&#x8F83;&#x5FEB;&#x3002; &#x652F;&#x6301; B/S &#x53CA; C/S &#x6A21;&#x5F0F;&#x3002; GET &#x548C; POST &#x533A;&#x522B;&#x4ECE;&#x4E09;&#x4E2A;&#x5C42;&#x9762;&#x6765;&#x89E3;&#x7B54;&#xFF1A; Http &#x62A5;&#x6587;&#x5C42;&#x9762;&#xFF1A;GET &#x5C06;&#x8BF7;&#x6C42;&#x4FE1;&#x606F;&#x653E;&#x5728; URL&#x4E2D;&#xFF0C;POST &#x65B9;&#x6CD5;&#x62A5;&#x6587;&#x4E2D; &#x6570;&#x636E;&#x5E93;&#x5C42;&#x9762;&#xFF1A;GET &#x7B26;&#x5408;&#x5E42;&#x7B49;&#x6027;&#x548C;&#x5B89;&#x5168;&#x6027;&#xFF0C;POST &#x4E0D;&#x7B26;&#x5408; &#x5176;&#x4ED6;&#x5C42;&#x9762;&#xFF1A;GET &#x53EF;&#x4EE5;&#x88AB;&#x7F13;&#x5B58;&#x3001;&#x88AB;&#x5B58;&#x50A8;&#xFF08;&#x4E66;&#x7B7E;&#xFF09;&#xFF0C;&#x800C; POST &#x4E0D;&#x884C; Cookie &#x548C; Session &#x7684;&#x533A;&#x522B;Cookie &#x7B80;&#x4ECB;&#xFF1A; &#x662F;&#x7531;&#x670D;&#x52A1;&#x5668;&#x53D1;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x7279;&#x6B8A;&#x4FE1;&#x606F;&#xFF0C;&#x4EE5;&#x6587;&#x672C;&#x7684;&#x5F62;&#x5F0F;&#x5B58;&#x653E;&#x5728;&#x5BA2;&#x6237;&#x7AEF; &#x5BA2;&#x6237;&#x7AEF;&#x518D;&#x6B21;&#x8BF7;&#x6C42;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x628A; Cookie &#x56DE;&#x53D1;&#x7ED9;&#x670D;&#x52A1;&#x7AEF; &#x670D;&#x52A1;&#x5668;&#x63A5;&#x6536;&#x5230;&#x540E;&#xFF0C;&#x4F1A;&#x89E3;&#x6790; Cookie &#x751F;&#x6210;&#x4E0E;&#x5BA2;&#x6237;&#x7AEF;&#x76F8;&#x5BF9;&#x7684;&#x5185;&#x5BB9; Cookiet &#x7684;&#x8BBE;&#x7F6E;&#x4EE5;&#x53CA;&#x53D1;&#x9001;&#x8FC7;&#x7A0B;&#xFF1A; Session &#x7B80;&#x4ECB;&#xFF1A; &#x670D;&#x52A1;&#x7AEF;&#x7684;&#x673A;&#x5236;&#xFF0C;&#x5728;&#x670D;&#x52A1;&#x7AEF;&#x4FDD;&#x5B58;&#x7684;&#x4FE1;&#x606F; &#x89E3;&#x6790;&#x5BA2;&#x6237;&#x7AEF;&#x8BF7;&#x6C42;&#x5E76;&#x64CD;&#x4F5C; Session id &#xFF0C;&#x6309;&#x9700;&#x4FDD;&#x5B58;&#x72B6;&#x6001;&#x4FE1;&#x606F; Session &#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A; &#x4F7F;&#x7528; Cookie &#x6765;&#x5B9E;&#x73B0; &#x4F7F;&#x7528; URL &#x56DE;&#x5199;&#x6765;&#x5B9E;&#x73B0;&#xFF0C;&#x6BCF;&#x6B21;&#x5728; URL &#x6DFB;&#x52A0; Session id &#x4FE1;&#x606F; &#x533A;&#x522B;&#xFF1A; Cookie &#x6570;&#x636E;&#x5B58;&#x653E;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x6D4F;&#x89C8;&#x5668;&#x4E0A;&#xFF0C;Session &#x6570;&#x636E;&#x5B58;&#x653E;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A; Session &#x76F8;&#x5BF9;&#x4E8E; Cookie &#x66F4;&#x5B89;&#x5168; &#x82E5;&#x8003;&#x8651;&#x51CF;&#x8F7B;&#x670D;&#x52A1;&#x5668;&#x8D1F;&#x62C5;&#xFF0C;&#x5E94;&#x5F53;&#x4F7F;&#x7528; Cookie HTTP &#x548C; HTTPs &#x7684;&#x533A;&#x522B; SSL (Security Sockets Layer) &#x5B89;&#x5168;&#x5957;&#x63A5;&#x5C42; &#x4E3A;&#x7F51;&#x7EDC;&#x901A;&#x4FE1;&#x63D0;&#x4F9B;&#x5B89;&#x5168;&#x53CA;&#x6570;&#x636E;&#x5B8C;&#x6574;&#x6027;&#x7684;&#x4E00;&#x79CD;&#x5B89;&#x5168;&#x534F;&#x8BAE; &#x662F;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5BF9;&#x5916;&#x7684; API&#xFF0C;SSL 3.0 &#x66F4;&#x540D;&#x4E3A; TLS &#x91C7;&#x7528;&#x8EAB;&#x4EFD;&#x9A8C;&#x8BC1;&#x548C;&#x6570;&#x636E;&#x52A0;&#x5BC6;&#x6765;&#x4FDD;&#x8BC1;&#x7F51;&#x7EDC;&#x7684;&#x901A;&#x4FE1;&#x7684;&#x5B89;&#x5168;&#x548C;&#x6570;&#x636E;&#x7684;&#x5B8C;&#x6574;&#x6027; &#x533A;&#x522B; HTTPS &#x9700;&#x8981;&#x5230; CA &#x7533;&#x8BF7;&#x8BC1;&#x4E66;&#xFF0C;HTTP &#x4E0D;&#x9700;&#x8981; HTTPS &#x5BC6;&#x6587;&#x4F20;&#x8F93;&#xFF0C;HTTP &#x660E;&#x6587;&#x4F20;&#x8F93; &#x8FDE;&#x63A5;&#x65B9;&#x5F0F;&#x4E0D;&#x540C;&#xFF0C;HTTPS &#x9ED8;&#x8BA4;&#x4F7F;&#x7528; 443 &#x7AEF;&#x53E3;&#xFF0C;HTTP &#x4F7F;&#x7528; 80 &#x7AEF;&#x53E3; HTTPS = HTTP + &#x52A0;&#x5BC6; + &#x8BA4;&#x8BC1; + &#x5B8C;&#x6574;&#x6027;&#x4FDD;&#x62A4;&#xFF0C;&#x8F83; HTTP &#x5B89;&#x5168; &#x5176;&#x4ED6;&#x5185;&#x5BB9; &#x4E00; &#x3001;&#x57FA;&#x7840;&#x6982;&#x5FF5; URI &#x8BF7;&#x6C42;&#x548C;&#x54CD;&#x5E94;&#x62A5;&#x6587; &#x4E8C;&#x3001;HTTP &#x65B9;&#x6CD5; GET HEAD POST PUT PATCH DELETE OPTIONS CONNECT TRACE &#x4E09;&#x3001;HTTP &#x72B6;&#x6001;&#x7801; 1XX &#x4FE1;&#x606F; 2XX &#x6210;&#x529F; 3XX &#x91CD;&#x5B9A;&#x5411; 4XX &#x5BA2;&#x6237;&#x7AEF;&#x9519;&#x8BEF; 5XX &#x670D;&#x52A1;&#x5668;&#x9519;&#x8BEF; &#x56DB;&#x3001;HTTP &#x9996;&#x90E8; &#x901A;&#x7528;&#x9996;&#x90E8;&#x5B57;&#x6BB5; &#x8BF7;&#x6C42;&#x9996;&#x90E8;&#x5B57;&#x6BB5; &#x54CD;&#x5E94;&#x9996;&#x90E8;&#x5B57;&#x6BB5; &#x5B9E;&#x4F53;&#x9996;&#x90E8;&#x5B57;&#x6BB5; &#x4E94;&#x3001;&#x5177;&#x4F53;&#x5E94;&#x7528; &#x8FDE;&#x63A5;&#x7BA1;&#x7406; Cookie &#x7F13;&#x5B58; &#x5185;&#x5BB9;&#x534F;&#x5546; &#x5185;&#x5BB9;&#x7F16;&#x7801; &#x8303;&#x56F4;&#x8BF7;&#x6C42; &#x5206;&#x5757;&#x4F20;&#x8F93;&#x7F16;&#x7801; &#x591A;&#x90E8;&#x5206;&#x5BF9;&#x8C61;&#x96C6;&#x5408; &#x865A;&#x62DF;&#x4E3B;&#x673A; &#x901A;&#x4FE1;&#x6570;&#x636E;&#x8F6C;&#x53D1; &#x516D;&#x3001;HTTPs &#x52A0;&#x5BC6; &#x8BA4;&#x8BC1; &#x5B8C;&#x6574;&#x6027;&#x4FDD;&#x62A4; HTTPs &#x7684;&#x7F3A;&#x70B9; &#x4E03;&#x3001;HTTP/2.0 HTTP/1.x &#x7F3A;&#x9677; &#x4E8C;&#x8FDB;&#x5236;&#x5206;&#x5E27;&#x5C42; &#x670D;&#x52A1;&#x7AEF;&#x63A8;&#x9001; &#x9996;&#x90E8;&#x538B;&#x7F29; &#x516B;&#x3001;HTTP/1.1 &#x65B0;&#x7279;&#x6027; &#x4E5D;&#x3001;GET &#x548C; POST &#x6BD4;&#x8F83; &#x4F5C;&#x7528; &#x53C2;&#x6570; &#x5B89;&#x5168; &#x5E42;&#x7B49;&#x6027; &#x53EF;&#x7F13;&#x5B58; XMLHttpRequest &#x6D4F;&#x89C8;&#x5668;&#x8F93;&#x5165;&#x5730;&#x5740;&#x56DE;&#x8F66;&#x540E;&#x53D1;&#x751F;&#x7684;&#x4E8B;&#x60C5; DNS&#x89E3;&#x6790; TCP&#x8FDE;&#x63A5; &#x53D1;&#x9001;HTTP&#x8BF7;&#x6C42; &#x670D;&#x52A1;&#x5668;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#x5E76;&#x8FD4;&#x56DE;HTTP&#x62A5;&#x6587; &#x6D4F;&#x89C8;&#x5668;&#x89E3;&#x6790;&#x6E32;&#x67D3;&#x9875;&#x9762; &#x8FDE;&#x63A5;&#x7ED3;&#x675F; Socket &#x901A;&#x4FE1;TCP/IP&#xFF08;Transmission Control Protocol/Internet Protocol&#xFF09;&#x5373;&#x4F20;&#x8F93;&#x63A7;&#x5236;&#x534F;&#x8BAE;/&#x7F51;&#x95F4;&#x534F;&#x8BAE;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5DE5;&#x4E1A;&#x6807;&#x51C6;&#x7684;&#x534F;&#x8BAE;&#x96C6;&#xFF0C;&#x5B83;&#x662F;&#x4E3A;&#x5E7F;&#x57DF;&#x7F51;&#xFF08;WANs&#xFF09;&#x8BBE;&#x8BA1;&#x7684;&#x3002;UDP&#xFF08;User Data Protocol&#xFF0C;&#x7528;&#x6237;&#x6570;&#x636E;&#x62A5;&#x534F;&#x8BAE;&#xFF09;&#x662F;&#x4E0E;TCP&#x76F8;&#x5BF9;&#x5E94;&#x7684;&#x534F;&#x8BAE;&#x3002;&#x5B83;&#x662F;&#x5C5E;&#x4E8E; TCP/IP &#x534F;&#x8BAE;&#x65CF;&#x4E2D;&#x7684;&#x4E00;&#x79CD;&#x3002; &#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x5F20;&#x56FE;&#xFF0C;&#x8868;&#x660E;&#x4E86;&#x8FD9;&#x4E9B;&#x534F;&#x8BAE;&#x7684;&#x5173;&#x7CFB;&#x3002; TCP/IP&#x534F;&#x8BAE;&#x65CF;&#x5305;&#x62EC;&#x8FD0;&#x8F93;&#x5C42;&#x3001;&#x7F51;&#x7EDC;&#x5C42;&#x3001;&#x94FE;&#x8DEF;&#x5C42;&#x3002;&#x73B0;&#x5728;&#x4F60;&#x77E5;&#x9053;TCP/IP&#x4E0E;UDP&#x7684;&#x5173;&#x7CFB;&#x4E86;&#x5427;&#x3002; Socket&#x5728;&#x54EA;&#x91CC;&#x5462;&#xFF1F; &#x4E0A;&#x56FE;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x770B;&#x5230; Socket &#x7684;&#x5F71;&#x5B50;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5230;&#x5E95;&#x5728;&#x54EA;&#x91CC;&#x5462;&#xFF1F;&#x8FD8;&#x662F;&#x7528;&#x56FE;&#x6765;&#x8BF4;&#x8BDD;&#xFF0C;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#x3002; Socket &#x662F;&#x4EC0;&#x4E48;&#x5462;&#xFF1F; Socket &#x662F;&#x5E94;&#x7528;&#x5C42;&#x4E0E; TCP/IP &#x534F;&#x8BAE;&#x65CF;&#x901A;&#x4FE1;&#x7684;&#x4E2D;&#x95F4;&#x8F6F;&#x4EF6;&#x62BD;&#x8C61;&#x5C42;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x7EC4;&#x63A5;&#x53E3;&#x3002;&#x5728;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4E2D;&#xFF0C;Socket &#x5176;&#x5B9E;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x95E8;&#x9762;&#x6A21;&#x5F0F;&#xFF0C;&#x5B83;&#x628A;&#x590D;&#x6742;&#x7684; TCP/IP &#x534F;&#x8BAE;&#x65CF;&#x9690;&#x85CF;&#x5728; Socket &#x63A5;&#x53E3;&#x540E;&#x9762;&#xFF0C;&#x5BF9;&#x7528;&#x6237;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x7EC4;&#x7B80;&#x5355;&#x7684;&#x63A5;&#x53E3;&#x5C31;&#x662F;&#x5168;&#x90E8;&#xFF0C;&#x8BA9;Socket&#x53BB;&#x7EC4;&#x7EC7;&#x6570;&#x636E;&#xFF0C;&#x4EE5;&#x7B26;&#x5408;&#x6307;&#x5B9A;&#x7684;&#x534F;&#x8BAE;&#x3002; Socket &#x901A;&#x4FE1;&#x539F;&#x7406; &#x5148;&#x4ECE;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x8BF4;&#x8D77;&#x3002;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x5148;&#x521D;&#x59CB;&#x5316;Socket&#xFF0C;&#x7136;&#x540E;&#x4E0E;&#x7AEF;&#x53E3;&#x7ED1;&#x5B9A;(bind)&#xFF0C;&#x5BF9;&#x7AEF;&#x53E3;&#x8FDB;&#x884C;&#x76D1;&#x542C;(listen)&#xFF0C;&#x8C03;&#x7528;accept&#x963B;&#x585E;&#xFF0C;&#x7B49;&#x5F85;&#x5BA2;&#x6237;&#x7AEF;&#x8FDE;&#x63A5;&#x3002;&#x5728;&#x8FD9;&#x65F6;&#x5982;&#x679C;&#x6709;&#x4E2A;&#x5BA2;&#x6237;&#x7AEF;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;Socket&#xFF0C;&#x7136;&#x540E;&#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x5668;(connect)&#xFF0C;&#x5982;&#x679C;&#x8FDE;&#x63A5;&#x6210;&#x529F;&#xFF0C;&#x8FD9;&#x65F6;&#x5BA2;&#x6237;&#x7AEF;&#x4E0E;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684;&#x8FDE;&#x63A5;&#x5C31;&#x5EFA;&#x7ACB;&#x4E86;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x6570;&#x636E;&#x8BF7;&#x6C42;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x63A5;&#x6536;&#x8BF7;&#x6C42;&#x5E76;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x56DE;&#x5E94;&#x6570;&#x636E;&#x53D1;&#x9001;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x6700;&#x540E;&#x5173;&#x95ED;&#x8FDE;&#x63A5;&#xFF0C;&#x4E00;&#x6B21;&#x4EA4;&#x4E92;&#x7ED3;&#x675F;&#x3002; TCP &#x5B9E;&#x73B0;&#x670D;&#x52A1;&#x7AEF; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * @Author: cuzz * @Date: 2019/2/19 22:36 * @Description: */public class TCPServer { public static void main(String[] args) throws IOException { // &#x521B;&#x5EFA;socket&#xFF0C;&#x5E76;&#x5C06;socket&#x7ED1;&#x5B9A;&#x5230;65000&#x7AEF;&#x53E3; ServerSocket serverSocket = new ServerSocket(65000); // &#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x4F7F;socket&#x4E00;&#x76F4;&#x7B49;&#x5F85;&#x5E76;&#x5904;&#x7406;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x8FC7;&#x6765;&#x7684;&#x8BF7;&#x6C42; while (true) { // &#x76D1;&#x542C;6500&#x7AEF;&#x53E3;&#xFF0C;&#x76F4;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x8FD4;&#x56DE;&#x8FDE;&#x63A5;&#x4FE1;&#x606F;&#x540E;&#x624D;&#x8FD4;&#x56DE; Socket socket = serverSocket.accept(); // &#x83B7;&#x53D6;&#x5BA2;&#x6237;&#x7AEF;&#x8BF7;&#x6C42;&#x4FE1;&#x606F;&#x540E;&#xFF0C;&#x6267;&#x884C;&#x76F8;&#x5173;&#x903B;&#x8F91; new LengthCalculator(socket).start(); } }}class LengthCalculator extends Thread { private Socket socket; public LengthCalculator(Socket socket) { this.socket = socket; } @Override public void run() { try { // &#x83B7;&#x53D6;socket&#x7684;&#x8F93;&#x51FA;&#x6D41; OutputStream os = socket.getOutputStream(); // &#x83B7;&#x53D6;socket&#x7684;&#x8F93;&#x5165;&#x6D41; InputStream is = socket.getInputStream(); byte[] bytes = new byte[1024]; int len = 0; StringBuilder sb = new StringBuilder(); while ((len = is.read(bytes)) != -1) { os.write(bytes, 0 , len); System.out.println(new String(bytes, 0 , len)); } // &#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x5173;&#x95ED;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x6D41; os.close(); is.close(); socket.close(); } catch (IOException e) { e.printStackTrace(); } }} &#x5BA2;&#x670D;&#x7AEF; 12345678910111213141516171819public class TCPClinet { public static void main(String[] args) throws IOException { // &#x521B;&#x5EFA;socket&#xFF0C;&#x5E76;&#x6307;&#x5B9A;&#x8FDE;&#x63A5;&#x7684;&#x662F;ip&#x548C;&#x7AEF;&#x53E3;&#x53F7; Socket socket = new Socket(&quot;127.0.0.1&quot;, 65000); // &#x83B7;&#x53D6;&#x8F93;&#x51FA;&#x6D41; OutputStream os = socket.getOutputStream(); // &#x83B7;&#x53D6;&#x8F93;&#x5165;&#x6D41; InputStream is = socket.getInputStream(); os.write(&quot;hello world&quot;.getBytes()); int len = 0; byte[] bytes = new byte[1024]; len = is.read(bytes); String content = new String(bytes, 0, len); System.out.println(content); is.close(); os.close(); socket.close(); }} UDP &#x5B9E;&#x73B0;&#x670D;&#x52A1;&#x7AEF; 12345678910111213141516171819202122public class UDPServer { public static void main(String[] args) throws Exception { // &#x670D;&#x52A1;&#x7AEF;&#x63A5;&#x53D7;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x62A5; DatagramSocket socket = new DatagramSocket(65001); //&#x76D1;&#x542C;&#x7684;&#x7AEF;&#x53E3;&#x53F7; byte[] buff = new byte[100]; //&#x5B58;&#x50A8;&#x4ECE;&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x53D7;&#x5230;&#x7684;&#x5185;&#x5BB9; DatagramPacket packet = new DatagramPacket(buff, buff.length); //&#x63A5;&#x53D7;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x8FC7;&#x6765;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x5E76;&#x5C06;&#x5185;&#x5BB9;&#x5C01;&#x88C5;&#x8FDB;DatagramPacket&#x5BF9;&#x8C61;&#x4E2D; socket.receive(packet); byte[] data = packet.getData(); //&#x4ECE;DatagramPacket&#x5BF9;&#x8C61;&#x4E2D;&#x83B7;&#x53D6;&#x5230;&#x771F;&#x6B63;&#x5B58;&#x50A8;&#x7684;&#x6570;&#x636E; //&#x5C06;&#x6570;&#x636E;&#x4ECE;&#x4E8C;&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F; String content = new String(data, 0, packet.getLength()); System.out.println(content); //&#x5C06;&#x8981;&#x53D1;&#x9001;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x6570;&#x636E;&#x8F6C;&#x6362;&#x6210;&#x4E8C;&#x8FDB;&#x5236; byte[] sendedContent = String.valueOf(content.length()).getBytes(); // &#x670D;&#x52A1;&#x7AEF;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001;&#x6570;&#x636E;&#x62A5; //&#x4ECE;DatagramPacket&#x5BF9;&#x8C61;&#x4E2D;&#x83B7;&#x53D6;&#x5230;&#x6570;&#x636E;&#x7684;&#x6765;&#x6E90;&#x5730;&#x5740;&#x4E0E;&#x7AEF;&#x53E3;&#x53F7; DatagramPacket packetToClient = new DatagramPacket(sendedContent, sendedContent.length, packet.getAddress(), packet.getPort()); socket.send(packetToClient); //&#x53D1;&#x9001;&#x6570;&#x636E;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF; }} &#x5BA2;&#x670D;&#x7AEF; 1234567891011121314151617181920212223242526public class UDPClient { public static void main(String[] args) throws Exception { // &#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x6570;&#x636E;&#x62A5;&#x7ED9;&#x670D;&#x52A1;&#x7AEF; DatagramSocket socket = new DatagramSocket(); // &#x8981;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF;&#x7684;&#x6570;&#x636E; byte[] buf = &quot;Hello World&quot;.getBytes(); // &#x5C06;IP&#x5730;&#x5740;&#x5C01;&#x88C5;&#x6210;InetAddress&#x5BF9;&#x8C61; InetAddress address = InetAddress.getByName(&quot;127.0.0.1&quot;); // &#x5C06;&#x8981;&#x53D1;&#x9001;&#x7ED9;&#x670D;&#x52A1;&#x7AEF;&#x7684;&#x6570;&#x636E;&#x5C01;&#x88C5;&#x6210;DatagramPacket&#x5BF9;&#x8C61; &#x9700;&#x8981;&#x586B;&#x5199;&#x4E0A;ip&#x5730;&#x5740;&#x4E0E;&#x7AEF;&#x53E3;&#x53F7; DatagramPacket packet = new DatagramPacket(buf, buf.length, address, 65001); // &#x53D1;&#x9001;&#x6570;&#x636E;&#x7ED9;&#x670D;&#x52A1;&#x7AEF; socket.send(packet); // &#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x53D7;&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x8FC7;&#x6765;&#x7684;&#x6570;&#x636E;&#x62A5; byte[] data = new byte[100]; // &#x521B;&#x5EFA;DatagramPacket&#x5BF9;&#x8C61;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x670D;&#x52A1;&#x7AEF;&#x53D1;&#x9001;&#x8FC7;&#x6765;&#x7684;&#x6570;&#x636E; DatagramPacket receivedPacket = new DatagramPacket(data, data.length); // &#x5C06;&#x63A5;&#x53D7;&#x5230;&#x7684;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x5230;DatagramPacket&#x5BF9;&#x8C61;&#x4E2D; socket.receive(receivedPacket); // &#x5C06;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x53D1;&#x9001;&#x8FC7;&#x6765;&#x7684;&#x6570;&#x636E;&#x53D6;&#x51FA;&#x6765;&#x5E76;&#x6253;&#x5370;&#x5230;&#x63A7;&#x5236;&#x53F0; String content = new String(receivedPacket.getData(), 0, receivedPacket.getLength()); System.out.println(content); }} &#x53C2;&#x8003;&#x94FE;&#x63A5; &#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC; &#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x7EFC;&#x8FF0;&#xFF08;&#x4E0B;&#xFF09; TCP &#x7684;&#x90A3;&#x4E9B;&#x4E8B;&#x513F; TCP&#x534F;&#x8BAE;&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5177;&#x4F53;&#x662F;&#x600E;&#x6837;&#x63A7;&#x5236;&#x6D41;&#x91CF;&#x7684;&#xFF1F; Socket&#x901A;&#x4FE1;&#x539F;&#x7406;]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 中是如何实现线程通信？]]></title>
    <url>%2F2019%2F02%2F14%2FJava%20%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[&#x6B63;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x7EBF;&#x7A0B;&#x5B8C;&#x6210;&#x5404;&#x81EA;&#x7684;&#x4EFB;&#x52A1;&#x5C31;&#x53EF;&#x4EE5;&#x7ED3;&#x675F;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x534F;&#x540C;&#x5DE5;&#x4F5C;&#x6765;&#x5B8C;&#x6210;&#x67D0;&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x8FD9;&#x65F6;&#x5C31;&#x6D89;&#x53CA;&#x5230;&#x4E86;&#x7EBF;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x4E86;&#x3002; &#x672C;&#x6587;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;thread.join(), object.wait(), object.notify(), CountdownLatch, CyclicBarrier, FutureTask, Callable &#x7B49;&#x3002; &#x539F;&#x6587;&#x94FE;&#x63A5;&#xFF1A;Java &#x4E2D;&#x662F;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x7EBF;&#x7A0B;&#x901A;&#x4FE1;&#xFF1F; &#x672C;&#x6587;&#x6D89;&#x53CA;&#x4EE3;&#x7801;&#xFF1A;https://github.com/wingjay/HelloJava/blob/master/multi-thread/src/ForArticle.java &#x4E0B;&#x9762;&#x6211;&#x4ECE;&#x51E0;&#x4E2A;&#x4F8B;&#x5B50;&#x4F5C;&#x4E3A;&#x5207;&#x5165;&#x70B9;&#x6765;&#x8BB2;&#x89E3;&#x4E0B; Java &#x91CC;&#x6709;&#x54EA;&#x4E9B;&#x65B9;&#x6CD5;&#x6765;&#x5B9E;&#x73B0;&#x7EBF;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x3002; &#x5982;&#x4F55;&#x8BA9;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x4F9D;&#x6B21;&#x6267;&#x884C;&#xFF1F; &#x90A3;&#x5982;&#x4F55;&#x8BA9;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x6309;&#x7167;&#x6307;&#x5B9A;&#x65B9;&#x5F0F;&#x6709;&#x5E8F;&#x4EA4;&#x53C9;&#x8FD0;&#x884C;&#x5462;&#xFF1F; &#x56DB;&#x4E2A;&#x7EBF;&#x7A0B; A B C D&#xFF0C;&#x5176;&#x4E2D; D &#x8981;&#x7B49;&#x5230; A B C &#x5168;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#x624D;&#x6267;&#x884C;&#xFF0C;&#x800C;&#x4E14; A B C &#x662F;&#x540C;&#x6B65;&#x8FD0;&#x884C;&#x7684; &#x4E09;&#x4E2A;&#x8FD0;&#x52A8;&#x5458;&#x5404;&#x81EA;&#x51C6;&#x5907;&#xFF0C;&#x7B49;&#x5230;&#x4E09;&#x4E2A;&#x4EBA;&#x90FD;&#x51C6;&#x5907;&#x597D;&#x540E;&#xFF0C;&#x518D;&#x4E00;&#x8D77;&#x8DD1; &#x5B50;&#x7EBF;&#x7A0B;&#x5B8C;&#x6210;&#x67D0;&#x4EF6;&#x4EFB;&#x52A1;&#x540E;&#xFF0C;&#x628A;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x56DE;&#x4F20;&#x7ED9;&#x4E3B;&#x7EBF;&#x7A0B; &#x5982;&#x4F55;&#x8BA9;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x4F9D;&#x6B21;&#x6267;&#x884C;&#xFF1F;&#x5047;&#x8BBE;&#x6709;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x7EBF;&#x7A0B; A&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x662F;&#x7EBF;&#x7A0B; B&#xFF0C;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x5206;&#x522B;&#x4F9D;&#x6B21;&#x6253;&#x5370; 1-3 &#x4E09;&#x4E2A;&#x6570;&#x5B57;&#x5373;&#x53EF;&#x3002;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x4E0B;&#x4EE3;&#x7801;&#xFF1A; 123456789101112131415161718private static void demo1() { Thread A = new Thread(new Runnable() { @Override public void run() { printNumber(&quot;A&quot;); } }); Thread B = new Thread(new Runnable() { @Override public void run() { printNumber(&quot;B&quot;); } }); A.start(); B.start();} &#x5176;&#x4E2D;&#x7684; printNumber(String) &#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF0C;&#x7528;&#x6765;&#x4F9D;&#x6B21;&#x6253;&#x5370; 1, 2, 3 &#x4E09;&#x4E2A;&#x6570;&#x5B57;&#xFF1A; 1234567891011private static void printNumber(String threadName) { int i=0; while (i++ &lt; 3) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(threadName + &quot; print: &quot; + i); }} &#x8FD9;&#x65F6;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x662F;&#xFF1A; B print: 1A print: 1B print: 2A print: 2B print: 3A print: 3 &#x53EF;&#x4EE5;&#x770B;&#x5230; A &#x548C; B &#x662F;&#x540C;&#x65F6;&#x6253;&#x5370;&#x7684;&#x3002; &#x90A3;&#x4E48;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5E0C;&#x671B; B &#x5728; A &#x5168;&#x90E8;&#x6253;&#x5370;&#x5B8C;&#x540E;&#x518D;&#x5F00;&#x59CB;&#x6253;&#x5370;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528; thread.join() &#x65B9;&#x6CD5;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;: 12345678910111213141516171819202122232425private static void demo2() { Thread A = new Thread(new Runnable() { @Override public void run() { printNumber(&quot;A&quot;); } }); Thread B = new Thread(new Runnable() { @Override public void run() { System.out.println(&quot;B &#x5F00;&#x59CB;&#x7B49;&#x5F85; A&quot;); try { A.join(); } catch (InterruptedException e) { e.printStackTrace(); } printNumber(&quot;B&quot;); } }); B.start(); A.start();} &#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; B &#x5F00;&#x59CB;&#x7B49;&#x5F85; AA print: 1A print: 2A print: 3 B print: 1B print: 2B print: 3 A.join &#x628A;&#x6307;&#x5B9A;&#x7684;&#x7EBF;&#x7A0B;&#x52A0;&#x5165;&#x5230;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x4E24;&#x4E2A;&#x4EA4;&#x66FF;&#x6267;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x5408;&#x5E76;&#x4E3A;&#x987A;&#x5E8F;&#x6267;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x3002;&#x6BD4;&#x5982;&#x5728;&#x7EBF;&#x7A0B;B&#x4E2D;&#x8C03;&#x7528;&#x4E86;&#x7EBF;&#x7A0B;A&#x7684; join() &#x65B9;&#x6CD5;&#xFF0C;&#x76F4;&#x5230;&#x7EBF;&#x7A0B;A&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x624D;&#x4F1A;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x7EBF;&#x7A0B;B&#x3002; t.join(); &#x8C03;&#x7528; join &#x65B9;&#x6CD5;&#xFF0C;&#x7B49;&#x5F85;&#x7EBF;&#x7A0B; t &#x6267;&#x884C;&#x5B8C;&#x6BD5; t.join(1000); &#x7B49;&#x5F85; t &#x7EBF;&#x7A0B;&#xFF0C;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x662F;1000&#x6BEB;&#x79D2;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x80FD;&#x770B;&#x5230; A.join() &#x65B9;&#x6CD5;&#x4F1A;&#x8BA9; B &#x4E00;&#x76F4;&#x7B49;&#x5F85;&#x76F4;&#x5230; A &#x8FD0;&#x884C;&#x5B8C;&#x6BD5;&#x3002; &#x90A3;&#x5982;&#x4F55;&#x8BA9;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x6309;&#x7167;&#x6307;&#x5B9A;&#x65B9;&#x5F0F;&#x6709;&#x5E8F;&#x4EA4;&#x53C9;&#x8FD0;&#x884C;&#x5462;&#xFF1F;&#x8FD8;&#x662F;&#x4E0A;&#x9762;&#x90A3;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x73B0;&#x5728;&#x5E0C;&#x671B; A &#x5728;&#x6253;&#x5370;&#x5B8C; 1 &#x540E;&#xFF0C;&#x518D;&#x8BA9; B &#x6253;&#x5370; 1, 2, 3&#xFF0C;&#x6700;&#x540E;&#x518D;&#x56DE;&#x5230; A &#x7EE7;&#x7EED;&#x6253;&#x5370; 2, 3&#x3002;&#x8FD9;&#x79CD;&#x9700;&#x6C42;&#x4E0B;&#xFF0C;&#x663E;&#x7136; Thread.join() &#x5DF2;&#x7ECF;&#x4E0D;&#x80FD;&#x6EE1;&#x8DB3;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x66F4;&#x7EC6;&#x7C92;&#x5EA6;&#x7684;&#x9501;&#x6765;&#x63A7;&#x5236;&#x6267;&#x884C;&#x987A;&#x5E8F;&#x3002; &#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528; object.wait() &#x548C; object.notify() &#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x5B9E;&#x73B0;&#x3002;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940/** * A 1, B 1, B 2, B 3, A 2, A 3 */private static void demo3() { Object lock = new Object(); Thread A = new Thread(new Runnable() { @Override public void run() { synchronized (lock) { System.out.println(&quot;A 1&quot;); try { lock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(&quot;A 2&quot;); System.out.println(&quot;A 3&quot;); } } }); Thread B = new Thread(new Runnable() { @Override public void run() { synchronized (lock) { System.out.println(&quot;B 1&quot;); System.out.println(&quot;B 2&quot;); System.out.println(&quot;B 3&quot;); lock.notify(); } } }); A.start(); B.start();} &#x6253;&#x5370;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; A 1A waiting&#x2026; B 1B 2B 3A 2A 3 &#x6B63;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x90A3;&#x4E48;&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x53D1;&#x751F;&#x4E86;&#x4EC0;&#x4E48;&#x5462;&#xFF1F; &#x9996;&#x5148;&#x521B;&#x5EFA;&#x4E00;&#x4E2A; A &#x548C; B &#x5171;&#x4EAB;&#x7684;&#x5BF9;&#x8C61;&#x9501; lock = new Object(); &#x5F53; A &#x5F97;&#x5230;&#x9501;&#x540E;&#xFF0C;&#x5148;&#x6253;&#x5370; 1&#xFF0C;&#x7136;&#x540E;&#x8C03;&#x7528; lock.wait() &#x65B9;&#x6CD5;&#xFF0C;&#x4EA4;&#x51FA;&#x9501;&#x7684;&#x63A7;&#x5236;&#x6743;&#xFF0C;&#x8FDB;&#x5165; wait &#x72B6;&#x6001;&#xFF1B; &#x5BF9; B &#x800C;&#x8A00;&#xFF0C;&#x7531;&#x4E8E; A &#x6700;&#x5F00;&#x59CB;&#x5F97;&#x5230;&#x4E86;&#x9501;&#xFF0C;&#x5BFC;&#x81F4; B &#x65E0;&#x6CD5;&#x6267;&#x884C;&#xFF1B;&#x76F4;&#x5230; A &#x8C03;&#x7528; lock.wait() &#x91CA;&#x653E;&#x63A7;&#x5236;&#x6743;&#x540E;&#xFF0C; B &#x624D;&#x5F97;&#x5230;&#x4E86;&#x9501;&#xFF1B; B &#x5728;&#x5F97;&#x5230;&#x9501;&#x540E;&#x6253;&#x5370; 1&#xFF0C; 2&#xFF0C; 3&#xFF1B;&#x7136;&#x540E;&#x8C03;&#x7528; lock.notify() &#x65B9;&#x6CD5;&#xFF0C;&#x5524;&#x9192;&#x6B63;&#x5728; wait &#x7684; A; A &#x88AB;&#x5524;&#x9192;&#x540E;&#xFF0C;&#x7EE7;&#x7EED;&#x6253;&#x5370;&#x5269;&#x4E0B;&#x7684; 2&#xFF0C;3&#x3002; &#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x6211;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#x52A0;&#x4E0A; log &#x65B9;&#x4FBF;&#x8BFB;&#x8005;&#x67E5;&#x770B;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940private static void demo3() { Object lock = new Object(); Thread A = new Thread(new Runnable() { @Override public void run() { System.out.println(&quot;INFO: A &#x7B49;&#x5F85;&#x9501; &quot;); synchronized (lock) { System.out.println(&quot;INFO: A &#x5F97;&#x5230;&#x4E86;&#x9501; lock&quot;); System.out.println(&quot;A 1&quot;); try { System.out.println(&quot;INFO: A &#x51C6;&#x5907;&#x8FDB;&#x5165;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#xFF0C;&#x653E;&#x5F03;&#x9501; lock &#x7684;&#x63A7;&#x5236;&#x6743; &quot;); lock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(&quot;INFO: &#x6709;&#x4EBA;&#x5524;&#x9192;&#x4E86; A, A &#x91CD;&#x65B0;&#x83B7;&#x5F97;&#x9501; lock&quot;); System.out.println(&quot;A 2&quot;); System.out.println(&quot;A 3&quot;); } } }); Thread B = new Thread(new Runnable() { @Override public void run() { System.out.println(&quot;INFO: B &#x7B49;&#x5F85;&#x9501; &quot;); synchronized (lock) { System.out.println(&quot;INFO: B &#x5F97;&#x5230;&#x4E86;&#x9501; lock&quot;); System.out.println(&quot;B 1&quot;); System.out.println(&quot;B 2&quot;); System.out.println(&quot;B 3&quot;); System.out.println(&quot;INFO: B &#x6253;&#x5370;&#x5B8C;&#x6BD5;&#xFF0C;&#x8C03;&#x7528; notify &#x65B9;&#x6CD5; &quot;); lock.notify(); } } }); A.start(); B.start();} &#x6253;&#x5370;&#x7ED3;&#x679C;&#x5982;&#x4E0B;: INFO: A &#x7B49;&#x5F85;&#x9501;INFO: A &#x5F97;&#x5230;&#x4E86;&#x9501; lockA 1INFO: A &#x51C6;&#x5907;&#x8FDB;&#x5165;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#xFF0C;&#x8C03;&#x7528; lock.wait() &#x653E;&#x5F03;&#x9501; lock &#x7684;&#x63A7;&#x5236;&#x6743;INFO: B &#x7B49;&#x5F85;&#x9501;INFO: B &#x5F97;&#x5230;&#x4E86;&#x9501; lockB 1B 2B 3INFO: B &#x6253;&#x5370;&#x5B8C;&#x6BD5;&#xFF0C;&#x8C03;&#x7528; lock.notify() &#x65B9;&#x6CD5;INFO: &#x6709;&#x4EBA;&#x5524;&#x9192;&#x4E86; A, A &#x91CD;&#x65B0;&#x83B7;&#x5F97;&#x9501; lockA 2A 3 &#x56DB;&#x4E2A;&#x7EBF;&#x7A0B; A B C D&#xFF0C;&#x5176;&#x4E2D; D &#x8981;&#x7B49;&#x5230; A B C &#x5168;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#x624D;&#x6267;&#x884C;&#xFF0C;&#x800C;&#x4E14; A B C &#x662F;&#x540C;&#x6B65;&#x8FD0;&#x884C;&#x7684;&#x6700;&#x5F00;&#x59CB;&#x6211;&#x4EEC;&#x4ECB;&#x7ECD;&#x4E86; thread.join()&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7B49;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FD0;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#x518D;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728; D &#x7EBF;&#x7A0B;&#x91CC;&#x4F9D;&#x6B21; join A B C&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x4E5F;&#x5C31;&#x4F7F;&#x5F97; A B C &#x5FC5;&#x987B;&#x4F9D;&#x6B21;&#x6267;&#x884C;&#xFF0C;&#x800C;&#x6211;&#x4EEC;&#x8981;&#x7684;&#x662F;&#x8FD9;&#x4E09;&#x8005;&#x80FD;&#x540C;&#x6B65;&#x8FD0;&#x884C;&#x3002; &#x6216;&#x8005;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x8FBE;&#x5230;&#x7684;&#x76EE;&#x7684;&#x662F;&#xFF1A;A B C &#x4E09;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x8FD0;&#x884C;&#xFF0C;&#x5404;&#x81EA;&#x72EC;&#x7ACB;&#x8FD0;&#x884C;&#x5B8C;&#x540E;&#x901A;&#x77E5; D&#xFF1B;&#x5BF9; D &#x800C;&#x8A00;&#xFF0C;&#x53EA;&#x8981; A B C &#x90FD;&#x8FD0;&#x884C;&#x5B8C;&#x4E86;&#xFF0C;D &#x518D;&#x5F00;&#x59CB;&#x8FD0;&#x884C;&#x3002;&#x9488;&#x5BF9;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528; CountdownLatch &#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x7C7B;&#x901A;&#x4FE1;&#x65B9;&#x5F0F;&#x3002;&#x5B83;&#x7684;&#x57FA;&#x672C;&#x7528;&#x6CD5;&#x662F;&#xFF1A; &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x8BA1;&#x6570;&#x5668;&#xFF0C;&#x8BBE;&#x7F6E;&#x521D;&#x59CB;&#x503C;&#xFF0C;CountdownLatch countDownLatch = new CountDownLatch(2); &#x5728; &#x7B49;&#x5F85;&#x7EBF;&#x7A0B;&#x91CC;&#x8C03;&#x7528; countDownLatch.await() &#x65B9;&#x6CD5;&#xFF0C;&#x8FDB;&#x5165;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#xFF0C;&#x76F4;&#x5230;&#x8BA1;&#x6570;&#x503C;&#x53D8;&#x6210; 0&#xFF1B; &#x5728; &#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x91CC;&#xFF0C;&#x8C03;&#x7528; countDownLatch.countDown() &#x65B9;&#x6CD5;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x4F1A;&#x5C06;&#x8BA1;&#x6570;&#x503C;&#x51CF;&#x5C0F; 1&#xFF1B; &#x5F53; &#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7684; countDown() &#x65B9;&#x6CD5;&#x628A;&#x8BA1;&#x6570;&#x503C;&#x53D8;&#x6210; 0 &#x65F6;&#xFF0C;&#x7B49;&#x5F85;&#x7EBF;&#x7A0B; &#x91CC;&#x7684; countDownLatch.await() &#x7ACB;&#x5373;&#x9000;&#x51FA;&#xFF0C;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536private static void runDAfterABC() { int worker = 3; CountDownLatch countDownLatch = new CountDownLatch(worker); new Thread(new Runnable() { @Override public void run() { System.out.println(&quot;D is waiting for other three threads&quot;); try { countDownLatch.await(); System.out.println(&quot;All done, D starts working&quot;); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); for (char threadName=&apos;A&apos;; threadName &lt;= &apos;C&apos;; threadName++) { final String tN = String.valueOf(threadName); new Thread(new Runnable() { @Override public void run() { System.out.println(tN + &quot; is working&quot;); try { Thread.sleep(100); } catch (Exception e) { e.printStackTrace(); } System.out.println(tN + &quot; finished&quot;); countDownLatch.countDown(); } }).start(); }} &#x4E0B;&#x9762;&#x662F;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; D is waiting for other three threadsA is workingB is workingC is working A finishedC finishedB finishedAll done, D starts working &#x5176;&#x5B9E;&#x7B80;&#x5355;&#x70B9;&#x6765;&#x8BF4;&#xFF0C;CountDownLatch &#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5012;&#x8BA1;&#x6570;&#x5668;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x521D;&#x59CB;&#x8BA1;&#x6570;&#x503C;&#x8BBE;&#x7F6E;&#x4E3A;3&#xFF0C;&#x5F53; D &#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x5148;&#x8C03;&#x7528; countDownLatch.await() &#x68C0;&#x67E5;&#x8BA1;&#x6570;&#x5668;&#x503C;&#x662F;&#x5426;&#x4E3A; 0&#xFF0C;&#x82E5;&#x4E0D;&#x4E3A; 0 &#x5219;&#x4FDD;&#x6301;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#xFF1B;&#x5F53;A B C &#x5404;&#x81EA;&#x8FD0;&#x884C;&#x5B8C;&#x540E;&#x90FD;&#x4F1A;&#x5229;&#x7528;countDownLatch.countDown()&#xFF0C;&#x5C06;&#x5012;&#x8BA1;&#x6570;&#x5668;&#x51CF; 1&#xFF0C;&#x5F53;&#x4E09;&#x4E2A;&#x90FD;&#x8FD0;&#x884C;&#x5B8C;&#x540E;&#xFF0C;&#x8BA1;&#x6570;&#x5668;&#x88AB;&#x51CF;&#x81F3; 0&#xFF1B;&#x6B64;&#x65F6;&#x7ACB;&#x5373;&#x89E6;&#x53D1; D&#x7684; await() &#x8FD0;&#x884C;&#x7ED3;&#x675F;&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x6267;&#x884C;&#x3002; &#x56E0;&#x6B64;&#xFF0C;CountDownLatch &#x9002;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53BB;&#x7B49;&#x5F85;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x4E09;&#x4E2A;&#x8FD0;&#x52A8;&#x5458;&#x5404;&#x81EA;&#x51C6;&#x5907;&#xFF0C;&#x7B49;&#x5230;&#x4E09;&#x4E2A;&#x4EBA;&#x90FD;&#x51C6;&#x5907;&#x597D;&#x540E;&#xFF0C;&#x518D;&#x4E00;&#x8D77;&#x8DD1;&#x4E0A;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x5F62;&#x8C61;&#x7684;&#x6BD4;&#x55BB;&#xFF0C;&#x9488;&#x5BF9; &#x7EBF;&#x7A0B; A B C &#x5404;&#x81EA;&#x5F00;&#x59CB;&#x51C6;&#x5907;&#xFF0C;&#x76F4;&#x5230;&#x4E09;&#x8005;&#x90FD;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x540C;&#x65F6;&#x8FD0;&#x884C;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8981;&#x5B9E;&#x73B0;&#x4E00;&#x79CD;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x4E92;&#x76F8;&#x7B49;&#x5F85;&#x7684;&#x6548;&#x679C;&#xFF0C;&#x90A3;&#x5E94;&#x8BE5;&#x600E;&#x4E48;&#x6765;&#x5B9E;&#x73B0;&#x5462;&#xFF1F; &#x4E0A;&#x9762;&#x7684; CountDownLatch &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5012;&#x8BA1;&#x6570;&#xFF0C;&#x4F46;&#x5F53;&#x8BA1;&#x6570;&#x5B8C;&#x6BD5;&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684; await() &#x4F1A;&#x5F97;&#x5230;&#x54CD;&#x5E94;&#xFF0C;&#x65E0;&#x6CD5;&#x8BA9;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x89E6;&#x53D1;&#x3002; &#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x7EBF;&#x7A0B;&#x95F4;&#x4E92;&#x76F8;&#x7B49;&#x5F85;&#x8FD9;&#x79CD;&#x9700;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528; CyclicBarrier &#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5B83;&#x7684;&#x57FA;&#x672C;&#x7528;&#x6CD5;&#x662F;&#xFF1A; &#x5148;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x516C;&#x5171; CyclicBarrier &#x5BF9;&#x8C61;&#xFF0C;&#x8BBE;&#x7F6E; &#x540C;&#x65F6;&#x7B49;&#x5F85;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;CyclicBarrier cyclicBarrier = new CyclicBarrier(3); &#x8FD9;&#x4E9B;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x5F00;&#x59CB;&#x81EA;&#x5DF1;&#x505A;&#x51C6;&#x5907;&#xFF0C;&#x81EA;&#x8EAB;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x9700;&#x8981;&#x7B49;&#x5F85;&#x522B;&#x4EBA;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#xFF0C;&#x8FD9;&#x65F6;&#x8C03;&#x7528; cyclicBarrier.await(); &#x5373;&#x53EF;&#x5F00;&#x59CB;&#x7B49;&#x5F85;&#x522B;&#x4EBA;&#xFF1B; &#x5F53;&#x6307;&#x5B9A;&#x7684; &#x540C;&#x65F6;&#x7B49;&#x5F85;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x90FD;&#x8C03;&#x7528;&#x4E86; cyclicBarrier.await();&#x65F6;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x7EBF;&#x7A0B;&#x90FD;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#x597D;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E9B;&#x7EBF;&#x7A0B;&#x624D; &#x540C;&#x65F6;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF0C;&#x8BBE;&#x60F3;&#x6709;&#x4E09;&#x4E2A;&#x8DD1;&#x6B65;&#x8FD0;&#x52A8;&#x5458;&#xFF0C;&#x5404;&#x81EA;&#x51C6;&#x5907;&#x597D;&#x540E;&#x7B49;&#x5F85;&#x5176;&#x4ED6;&#x4EBA;&#xFF0C;&#x5168;&#x90E8;&#x51C6;&#x5907;&#x597D;&#x540E;&#x624D;&#x5F00;&#x59CB;&#x8DD1;&#xFF1A; 1234567891011121314151617181920212223242526272829303132private static void runABCWhenAllReady() { int runner = 3; CyclicBarrier cyclicBarrier = new CyclicBarrier(runner); final Random random = new Random(); for (char runnerName=&apos;A&apos;; runnerName &lt;= &apos;C&apos;; runnerName++) { final String rN = String.valueOf(runnerName); new Thread(new Runnable() { @Override public void run() { long prepareTime = random.nextInt(10000) + 100; System.out.println(rN + &quot; is preparing for time: &quot; + prepareTime); try { Thread.sleep(prepareTime); } catch (Exception e) { e.printStackTrace(); } try { System.out.println(rN + &quot; is prepared, waiting for others&quot;); cyclicBarrier.await(); // &#x5F53;&#x524D;&#x8FD0;&#x52A8;&#x5458;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#xFF0C;&#x7B49;&#x5F85;&#x522B;&#x4EBA;&#x51C6;&#x5907;&#x597D; } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } System.out.println(rN + &quot; starts running&quot;); // &#x6240;&#x6709;&#x8FD0;&#x52A8;&#x5458;&#x90FD;&#x51C6;&#x5907;&#x597D;&#x4E86;&#xFF0C;&#x4E00;&#x8D77;&#x5F00;&#x59CB;&#x8DD1; } }).start(); }} &#x6253;&#x5370;&#x7684;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; A is preparing for time: 4131B is preparing for time: 6349C is preparing for time: 8206 A is prepared, waiting for others B is prepared, waiting for others C is prepared, waiting for others C starts runningA starts runningB starts running &#x5B50;&#x7EBF;&#x7A0B;&#x5B8C;&#x6210;&#x67D0;&#x4EF6;&#x4EFB;&#x52A1;&#x540E;&#xFF0C;&#x628A;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x56DE;&#x4F20;&#x7ED9;&#x4E3B;&#x7EBF;&#x7A0B;&#x5B9E;&#x9645;&#x7684;&#x5F00;&#x53D1;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x7ECF;&#x5E38;&#x8981;&#x521B;&#x5EFA;&#x5B50;&#x7EBF;&#x7A0B;&#x6765;&#x505A;&#x4E00;&#x4E9B;&#x8017;&#x65F6;&#x4EFB;&#x52A1;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x56DE;&#x4F20;&#x7ED9;&#x4E3B;&#x7EBF;&#x7A0B;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x5728; Java &#x91CC;&#x8981;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x5462;&#xFF1F; &#x56DE;&#x987E;&#x7EBF;&#x7A0B;&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x4F1A;&#x628A; Runnable &#x5BF9;&#x8C61;&#x4F20;&#x7ED9; Thread &#x53BB;&#x6267;&#x884C;&#x3002;Runnable&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; 123public interface Runnable { public abstract void run();} &#x53EF;&#x4EE5;&#x770B;&#x5230; run() &#x5728;&#x6267;&#x884C;&#x5B8C;&#x540E;&#x4E0D;&#x4F1A;&#x8FD4;&#x56DE;&#x4EFB;&#x4F55;&#x7ED3;&#x679C;&#x3002;&#x90A3;&#x5982;&#x679C;&#x5E0C;&#x671B;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x5462;&#xFF1F;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C;&#x7684;&#x63A5;&#x53E3;&#x7C7B; Callable&#xFF1A; 12345678910@FunctionalInterfacepublic interface Callable&lt;V&gt; { /** * Computes a result, or throws an exception if unable to do so. * * @return computed result * @throws Exception if unable to compute a result */ V call() throws Exception;} &#x53EF;&#x4EE5;&#x770B;&#x51FA; Callable &#x6700;&#x5927;&#x533A;&#x522B;&#x5C31;&#x662F;&#x8FD4;&#x56DE;&#x8303;&#x578B; V &#x7ED3;&#x679C;&#x3002; &#x90A3;&#x4E48;&#x4E0B;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x5C31;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x628A;&#x5B50;&#x7EBF;&#x7A0B;&#x7684;&#x7ED3;&#x679C;&#x56DE;&#x4F20;&#x56DE;&#x6765;&#x5462;&#xFF1F;&#x5728; Java &#x91CC;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x662F;&#x914D;&#x5408; Callable &#x4F7F;&#x7528;&#x7684;&#xFF1A;FutureTask&#xFF0C;&#x4E0D;&#x8FC7;&#x6CE8;&#x610F;&#xFF0C;&#x5B83;&#x83B7;&#x53D6;&#x7ED3;&#x679C;&#x7684; get &#x65B9;&#x6CD5;&#x4F1A;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#x3002; &#x4E3E;&#x4F8B;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x8BA9;&#x5B50;&#x7EBF;&#x7A0B;&#x53BB;&#x8BA1;&#x7B97;&#x4ECE; 1 &#x52A0;&#x5230; 100&#xFF0C;&#x5E76;&#x628A;&#x7B97;&#x51FA;&#x7684;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x5230;&#x4E3B;&#x7EBF;&#x7A0B;&#x3002; 1234567891011121314151617181920212223242526272829private static void doTaskWithResultInWorker() { Callable&lt;Integer&gt; callable = new Callable&lt;Integer&gt;() { @Override public Integer call() throws Exception { System.out.println(&quot;Task starts&quot;); Thread.sleep(1000); int result = 0; for (int i=0; i&lt;=100; i++) { result += i; } System.out.println(&quot;Task finished and return result&quot;); return result; } }; FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(callable); new Thread(futureTask).start(); try { System.out.println(&quot;Before futureTask.get()&quot;); System.out.println(&quot;Result: &quot; + futureTask.get()); System.out.println(&quot;After futureTask.get()&quot;); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); }} &#x6253;&#x5370;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; Before futureTask.get() Task startsTask finished and return result Result: 5050After futureTask.get() &#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x4E3B;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; futureTask.get() &#x65B9;&#x6CD5;&#x65F6;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#xFF1B;&#x7136;&#x540E; Callable &#x5185;&#x90E8;&#x5F00;&#x59CB;&#x6267;&#x884C;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#xFF1B;&#x6B64;&#x65F6; futureTask.get() &#x5F97;&#x5230;&#x7ED3;&#x679C;&#xFF0C;&#x4E3B;&#x7EBF;&#x7A0B;&#x6062;&#x590D;&#x8FD0;&#x884C;&#x3002; &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B66;&#x5230;&#xFF0C;&#x901A;&#x8FC7; FutureTask &#x548C; Callable &#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x4E3B;&#x7EBF;&#x7A0B;&#x83B7;&#x5F97;&#x5B50;&#x7EBF;&#x7A0B;&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x9700;&#x8981;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5E0C;&#x671B;&#x963B;&#x585E;&#x4E3B;&#x7EBF;&#x7A0B;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5229;&#x7528; ExecutorService&#xFF0C;&#x628A; FutureTask &#x653E;&#x5230;&#x7EBF;&#x7A0B;&#x6C60;&#x53BB;&#x7BA1;&#x7406;&#x6267;&#x884C;&#x3002; &#x5C0F;&#x7ED3;&#x591A;&#x7EBF;&#x7A0B;&#x662F;&#x73B0;&#x4EE3;&#x8BED;&#x8A00;&#x7684;&#x5171;&#x540C;&#x7279;&#x6027;&#xFF0C;&#x800C;&#x7EBF;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x3001;&#x7EBF;&#x7A0B;&#x540C;&#x6B65;&#x3001;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x662F;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x8BDD;&#x9898;&#x3002;&#x672C;&#x6587;&#x9488;&#x5BF9; Java &#x7684;&#x7EBF;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x8FDB;&#x884C;&#x4E86;&#x5927;&#x81F4;&#x7684;&#x8BB2;&#x89E3;&#xFF0C;&#x540E;&#x7EED;&#x8FD8;&#x4F1A;&#x5BF9;&#x7EBF;&#x7A0B;&#x540C;&#x6B65;&#x3001;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x8FDB;&#x884C;&#x8BB2;&#x89E3;&#x3002;]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>多线程</tag>
        <tag>线程通信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 中的锁]]></title>
    <url>%2F2019%2F02%2F13%2FJava%20%E4%B8%AD%E7%9A%84%E9%94%81%2F</url>
    <content type="text"><![CDATA[Java&#x4E2D;&#x7684;&#x9501;&#x5206;&#x7C7B;&#x5728;&#x8BFB;&#x5F88;&#x591A;&#x5E76;&#x53D1;&#x6587;&#x7AE0;&#x4E2D;&#xFF0C;&#x4F1A;&#x63D0;&#x53CA;&#x5404;&#x79CD;&#x5404;&#x6837;&#x9501;&#x5982;&#x516C;&#x5E73;&#x9501;&#xFF0C;&#x4E50;&#x89C2;&#x9501;&#x7B49;&#x7B49;&#xFF0C;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4ECB;&#x7ECD;&#x5404;&#x79CD;&#x9501;&#x7684;&#x5206;&#x7C7B;&#x3002;&#x4ECB;&#x7ECD;&#x7684;&#x5185;&#x5BB9;&#x5982;&#x4E0B;&#xFF1A; &#x516C;&#x5E73;&#x9501;/&#x975E;&#x516C;&#x5E73;&#x9501; &#x53EF;&#x91CD;&#x5165;&#x9501; &#x72EC;&#x4EAB;&#x9501;/&#x5171;&#x4EAB;&#x9501; &#x4E92;&#x65A5;&#x9501;/&#x8BFB;&#x5199;&#x9501; &#x4E50;&#x89C2;&#x9501;/&#x60B2;&#x89C2;&#x9501; &#x5206;&#x6BB5;&#x9501; &#x504F;&#x5411;&#x9501;/&#x8F7B;&#x91CF;&#x7EA7;&#x9501;/&#x91CD;&#x91CF;&#x7EA7;&#x9501; &#x81EA;&#x65CB;&#x9501; &#x4E0A;&#x9762;&#x662F;&#x5F88;&#x591A;&#x9501;&#x7684;&#x540D;&#x8BCD;&#xFF0C;&#x8FD9;&#x4E9B;&#x5206;&#x7C7B;&#x5E76;&#x4E0D;&#x662F;&#x5168;&#x662F;&#x6307;&#x9501;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x6709;&#x7684;&#x6307;&#x9501;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x6709;&#x7684;&#x6307;&#x9501;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x4E0B;&#x9762;&#x603B;&#x7ED3;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5BF9;&#x6BCF;&#x4E2A;&#x9501;&#x7684;&#x540D;&#x8BCD;&#x8FDB;&#x884C;&#x4E00;&#x5B9A;&#x7684;&#x89E3;&#x91CA;&#x3002; &#x516C;&#x5E73;&#x9501;/&#x975E;&#x516C;&#x5E73;&#x9501;&#x516C;&#x5E73;&#x9501;&#x662F;&#x6307;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x6309;&#x7167;&#x7533;&#x8BF7;&#x9501;&#x7684;&#x987A;&#x5E8F;&#x6765;&#x83B7;&#x53D6;&#x9501;&#x3002;&#x975E;&#x516C;&#x5E73;&#x9501;&#x662F;&#x6307;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x83B7;&#x53D6;&#x9501;&#x7684;&#x987A;&#x5E8F;&#x5E76;&#x4E0D;&#x662F;&#x6309;&#x7167;&#x7533;&#x8BF7;&#x9501;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x540E;&#x7533;&#x8BF7;&#x7684;&#x7EBF;&#x7A0B;&#x6BD4;&#x5148;&#x7533;&#x8BF7;&#x7684;&#x7EBF;&#x7A0B;&#x4F18;&#x5148;&#x83B7;&#x53D6;&#x9501;&#x3002;&#x6709;&#x53EF;&#x80FD;&#xFF0C;&#x4F1A;&#x9020;&#x6210;&#x4F18;&#x5148;&#x7EA7;&#x53CD;&#x8F6C;&#x6216;&#x8005;&#x9965;&#x997F;&#x73B0;&#x8C61;&#x3002;&#x5BF9;&#x4E8E;Java ReentrantLock&#x800C;&#x8A00;&#xFF0C;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6307;&#x5B9A;&#x8BE5;&#x9501;&#x662F;&#x5426;&#x662F;&#x516C;&#x5E73;&#x9501;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x975E;&#x516C;&#x5E73;&#x9501;&#x3002;&#x975E;&#x516C;&#x5E73;&#x9501;&#x7684;&#x4F18;&#x70B9;&#x5728;&#x4E8E;&#x541E;&#x5410;&#x91CF;&#x6BD4;&#x516C;&#x5E73;&#x9501;&#x5927;&#x3002;&#x5BF9;&#x4E8E;Synchronized&#x800C;&#x8A00;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x516C;&#x5E73;&#x9501;&#x3002;&#x7531;&#x4E8E;&#x5176;&#x5E76;&#x4E0D;&#x50CF;ReentrantLock&#x662F;&#x901A;&#x8FC7;AQS&#x7684;&#x6765;&#x5B9E;&#x73B0;&#x7EBF;&#x7A0B;&#x8C03;&#x5EA6;&#xFF0C;&#x6240;&#x4EE5;&#x5E76;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x529E;&#x6CD5;&#x4F7F;&#x5176;&#x53D8;&#x6210;&#x516C;&#x5E73;&#x9501;&#x3002; &#x53EF;&#x91CD;&#x5165;&#x9501;/&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x6700;&#x8FD1;&#x6B63;&#x5728;&#x9605;&#x8BFB;Java ReentrantLock&#x6E90;&#x7801;&#xFF0C;&#x59CB;&#x7EC8;&#x5BF9;&#x53EF;&#x91CD;&#x5165;&#x548C;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x6982;&#x5FF5;&#x7406;&#x89E3;&#x4E0D;&#x900F;&#x5F7B;&#xFF0C;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#x540E;&#x8BB0;&#x5F55;&#x5728;&#x8FD9;&#x91CC;&#x3002; &#x57FA;&#x7840;&#x77E5;&#x8BC6;Java&#x591A;&#x7EBF;&#x7A0B;&#x7684; wait() &#x65B9;&#x6CD5;&#x548C; notify() &#x65B9;&#x6CD5;&#x3002;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x6210;&#x5BF9;&#x51FA;&#x73B0;&#x548C;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x8981;&#x6267;&#x884C;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x524D;&#x63D0;&#x5C31;&#x662F;&#xFF0C;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x5FC5;&#x987B;&#x83B7;&#x5176;&#x5BF9;&#x8C61;&#x7684;monitor&#xFF08;&#x4FD7;&#x79F0;&#x201C;&#x9501;&#x201D;&#xFF09;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x629B;&#x51FA; IllegalMonitorStateException &#x5F02;&#x5E38;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x5FC5;&#x987B;&#x5728;&#x540C;&#x6B65;&#x5757;&#x4EE3;&#x7801;&#x91CC;&#x9762;&#x8C03;&#x7528;&#x3002; wait()&#xFF1A;&#x963B;&#x585E;&#x5F53;&#x524D;&#x7EBF;&#x7A0B; notify()&#xFF1A;&#x5524;&#x8D77;&#x88AB;wait()&#x963B;&#x585E;&#x7684;&#x7EBF;&#x7A0B; &#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x6240;&#x8C13;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF0C;&#x5373;&#x82E5;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x67D0;&#x4E2A;&#x65B9;&#x6CD5;&#x5DF2;&#x7ECF;&#x83B7;&#x53D6;&#x4E86;&#x8BE5;&#x9501;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x65B9;&#x6CD5;&#x4E2D;&#x5C1D;&#x8BD5;&#x518D;&#x6B21;&#x83B7;&#x53D6;&#x9501;&#x65F6;&#xFF0C;&#x5C31;&#x4F1A;&#x83B7;&#x53D6;&#x4E0D;&#x5230;&#x88AB;&#x963B;&#x585E;&#x3002;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#xFF1A; 12345678910111213public class Lock{ private boolean isLocked = false; public synchronized void lock() throws InterruptedException { while(isLocked){ wait(); } isLocked = true; } public synchronized void unlock(){ isLocked = false; notify(); }} &#x4F7F;&#x7528;&#x8BE5;&#x9501;&#xFF1A; 12345678910111213public class Count{ Lock lock = new Lock(); public void print(){ lock.lock(); doAdd(); lock.unlock(); } public void doAdd(){ lock.lock(); //do something lock.unlock(); }} &#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x6267;&#x884C;print()&#x65B9;&#x6CD5;&#x9996;&#x5148;&#x83B7;&#x53D6;lock&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x6267;&#x884C;doAdd()&#x65B9;&#x6CD5;&#x5C31;&#x65E0;&#x6CD5;&#x6267;&#x884C;doAdd()&#x4E2D;&#x7684;&#x903B;&#x8F91;&#xFF0C;&#x5FC5;&#x987B;&#x5148;&#x91CA;&#x653E;&#x9501;&#x3002;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x5F88;&#x597D;&#x7684;&#x8BF4;&#x660E;&#x4E86;&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x3002; &#x53EF;&#x91CD;&#x5165;&#x9501;&#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x8BBE;&#x8BA1;&#x4E00;&#x79CD;&#x53EF;&#x91CD;&#x5165;&#x9501; 123456789101112131415161718192021222324public class Lock{ boolean isLocked = false; Thread lockedBy = null; int lockedCount = 0; public synchronized void lock() throws InterruptedException{ Thread thread = Thread.currentThread(); while(isLocked &amp;&amp; lockedBy != thread){ wait(); } isLocked = true; lockedCount++; lockedBy = thread; } public synchronized void unlock(){ if(Thread.currentThread() == this.lockedBy){ lockedCount--; if(lockedCount == 0){ isLocked = false; notify(); } } }} &#x6240;&#x8C13;&#x53EF;&#x91CD;&#x5165;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x8FDB;&#x5165;&#x5B83;&#x5DF2;&#x7ECF;&#x62E5;&#x6709;&#x7684;&#x9501;&#x7684;&#x540C;&#x6B65;&#x4EE3;&#x7801;&#x5757;&#x513F;&#x3002; &#x6211;&#x4EEC;&#x8BBE;&#x8BA1;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; print() &#x65B9;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528; print() &#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x9501;&#xFF0C;&#x8FDB;&#x5165; lock() &#x65B9;&#x6CD5;&#xFF0C;&#x7531;&#x4E8E;&#x521D;&#x59CB; lockedBy &#x662F; null&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x8FDB;&#x5165; while &#x800C;&#x6302;&#x8D77;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#xFF0C;&#x800C;&#x662F;&#x662F;&#x589E;&#x91CF; lockedCount &#x5E76;&#x8BB0;&#x5F55; lockBy &#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x3002;&#x63A5;&#x7740;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FDB;&#x5165; doAdd() &#x65B9;&#x6CD5;&#xFF0C;&#x7531;&#x4E8E;&#x540C;&#x4E00;&#x8FDB;&#x7A0B;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x8FDB;&#x5165; while &#x800C;&#x6302;&#x8D77;&#xFF0C;&#x63A5;&#x7740;&#x589E;&#x91CF; lockedCount&#xFF0C;&#x5F53;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EBF;&#x7A0B;&#x5C1D;&#x8BD5;lock&#xFF0C;&#x7531;&#x4E8E; isLocked=true&#xFF0C;&#x6240;&#x4EE5;&#x4ED6;&#x4E0D;&#x4F1A;&#x83B7;&#x53D6;&#x8BE5;&#x9501;&#xFF0C;&#x76F4;&#x5230;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x4E24;&#x6B21; unlock() &#x5C06; lockCount &#x9012;&#x51CF;&#x4E3A;0&#xFF0C;&#x624D;&#x5C06;&#x6807;&#x8BB0;&#x4E3A; isLocked &#x8BBE;&#x7F6E;&#x4E3A; false&#x3002; &#x53EF;&#x91CD;&#x5165;&#x9501;&#x7684;&#x6982;&#x5FF5;&#x548C;&#x8BBE;&#x8BA1;&#x601D;&#x60F3;&#x5927;&#x4F53;&#x5982;&#x6B64;&#xFF0C;Java &#x4E2D;&#x7684;&#x53EF;&#x91CD;&#x5165;&#x9501; ReentrantLock &#x8BBE;&#x8BA1;&#x601D;&#x8DEF;&#x4E5F;&#x662F;&#x8FD9;&#x6837;&#x3002; &#x72EC;&#x4EAB;&#x9501;/&#x5171;&#x4EAB;&#x9501;&#x72EC;&#x4EAB;&#x9501;&#x662F;&#x6307;&#x8BE5;&#x9501;&#x4E00;&#x6B21;&#x53EA;&#x80FD;&#x88AB;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6240;&#x6301;&#x6709;&#x3002;&#x5171;&#x4EAB;&#x9501;&#x662F;&#x6307;&#x8BE5;&#x9501;&#x53EF;&#x88AB;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x6240;&#x6301;&#x6709;&#x3002; &#x5BF9;&#x4E8E;Java ReentrantLock&#x800C;&#x8A00;&#xFF0C;&#x5176;&#x662F;&#x72EC;&#x4EAB;&#x9501;&#x3002;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;Lock&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#x7C7B;ReadWriteLock&#xFF0C;&#x5176;&#x8BFB;&#x9501;&#x662F;&#x5171;&#x4EAB;&#x9501;&#xFF0C;&#x5176;&#x5199;&#x9501;&#x662F;&#x72EC;&#x4EAB;&#x9501;&#x3002; &#x8BFB;&#x9501;&#x7684;&#x5171;&#x4EAB;&#x9501;&#x53EF;&#x4FDD;&#x8BC1;&#x5E76;&#x53D1;&#x8BFB;&#x662F;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x7684;&#xFF0C;&#x8BFB;&#x5199;&#xFF0C;&#x5199;&#x8BFB; &#xFF0C;&#x5199;&#x5199;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x4E92;&#x65A5;&#x7684;&#x3002; &#x72EC;&#x4EAB;&#x9501;&#x4E0E;&#x5171;&#x4EAB;&#x9501;&#x4E5F;&#x662F;&#x901A;&#x8FC7;AQS&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x5B9E;&#x73B0;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x72EC;&#x4EAB;&#x6216;&#x8005;&#x5171;&#x4EAB;&#x3002; &#x5BF9;&#x4E8E;Synchronized&#x800C;&#x8A00;&#xFF0C;&#x5F53;&#x7136;&#x662F;&#x72EC;&#x4EAB;&#x9501;&#x3002; &#x4E92;&#x65A5;&#x9501;/&#x8BFB;&#x5199;&#x9501;&#x4E0A;&#x9762;&#x8BB2;&#x7684;&#x72EC;&#x4EAB;&#x9501;/&#x5171;&#x4EAB;&#x9501;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x5E7F;&#x4E49;&#x7684;&#x8BF4;&#x6CD5;&#xFF0C;&#x4E92;&#x65A5;&#x9501;/&#x8BFB;&#x5199;&#x9501;&#x5C31;&#x662F;&#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x4E92;&#x65A5;&#x9501;&#x5728;Java&#x4E2D;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5C31;&#x662F;ReentrantLock &#x8BFB;&#x5199;&#x9501;&#x5728;Java&#x4E2D;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5C31;&#x662F;ReadWriteLock &#x4E50;&#x89C2;&#x9501;/&#x60B2;&#x89C2;&#x9501;&#x4E50;&#x89C2;&#x9501;&#x4E0E;&#x60B2;&#x89C2;&#x9501;&#x4E0D;&#x662F;&#x6307;&#x5177;&#x4F53;&#x7684;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684;&#x9501;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x770B;&#x5F85;&#x5E76;&#x53D1;&#x540C;&#x6B65;&#x7684;&#x89D2;&#x5EA6;&#x3002;&#x60B2;&#x89C2;&#x9501;&#x8BA4;&#x4E3A;&#x5BF9;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#xFF0C;&#x4E00;&#x5B9A;&#x662F;&#x4F1A;&#x53D1;&#x751F;&#x4FEE;&#x6539;&#x7684;&#xFF0C;&#x54EA;&#x6015;&#x6CA1;&#x6709;&#x4FEE;&#x6539;&#xFF0C;&#x4E5F;&#x4F1A;&#x8BA4;&#x4E3A;&#x4FEE;&#x6539;&#x3002;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#xFF0C;&#x60B2;&#x89C2;&#x9501;&#x91C7;&#x53D6;&#x52A0;&#x9501;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x60B2;&#x89C2;&#x7684;&#x8BA4;&#x4E3A;&#xFF0C;&#x4E0D;&#x52A0;&#x9501;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#x4E00;&#x5B9A;&#x4F1A;&#x51FA;&#x95EE;&#x9898;&#x3002;&#x4E50;&#x89C2;&#x9501;&#x5219;&#x8BA4;&#x4E3A;&#x5BF9;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#xFF0C;&#x662F;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x4FEE;&#x6539;&#x7684;&#x3002;&#x5728;&#x66F4;&#x65B0;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x91C7;&#x7528;&#x5C1D;&#x8BD5;&#x66F4;&#x65B0;&#xFF0C;&#x4E0D;&#x65AD;&#x91CD;&#x65B0;&#x7684;&#x65B9;&#x5F0F;&#x66F4;&#x65B0;&#x6570;&#x636E;&#x3002;&#x4E50;&#x89C2;&#x7684;&#x8BA4;&#x4E3A;&#xFF0C;&#x4E0D;&#x52A0;&#x9501;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#x662F;&#x6CA1;&#x6709;&#x4E8B;&#x60C5;&#x7684;&#x3002; &#x4ECE;&#x4E0A;&#x9762;&#x7684;&#x63CF;&#x8FF0;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x60B2;&#x89C2;&#x9501;&#x9002;&#x5408;&#x5199;&#x64CD;&#x4F5C;&#x975E;&#x5E38;&#x591A;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x4E50;&#x89C2;&#x9501;&#x9002;&#x5408;&#x8BFB;&#x64CD;&#x4F5C;&#x975E;&#x5E38;&#x591A;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x4E0D;&#x52A0;&#x9501;&#x4F1A;&#x5E26;&#x6765;&#x5927;&#x91CF;&#x7684;&#x6027;&#x80FD;&#x63D0;&#x5347;&#x3002; &#x60B2;&#x89C2;&#x9501;&#x5728;Java&#x4E2D;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x5C31;&#x662F;&#x5229;&#x7528;&#x5404;&#x79CD;&#x9501;&#x3002; &#x4E50;&#x89C2;&#x9501;&#x5728;Java&#x4E2D;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x662F;&#x65E0;&#x9501;&#x7F16;&#x7A0B;&#xFF0C;&#x5E38;&#x5E38;&#x91C7;&#x7528;&#x7684;&#x662F;CAS&#x7B97;&#x6CD5;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x4F8B;&#x5B50;&#x5C31;&#x662F;&#x539F;&#x5B50;&#x7C7B;&#xFF0C;&#x901A;&#x8FC7;CAS&#x81EA;&#x65CB;&#x5B9E;&#x73B0;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x7684;&#x66F4;&#x65B0;&#x3002; &#x5206;&#x6BB5;&#x9501;&#x5206;&#x6BB5;&#x9501;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x79CD;&#x9501;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x5177;&#x4F53;&#x7684;&#x4E00;&#x79CD;&#x9501;&#xFF0C;&#x5BF9;&#x4E8E;ConcurrentHashMap &#x800C;&#x8A00;&#xFF0C;&#x5176;&#x5E76;&#x53D1;&#x7684;&#x5B9E;&#x73B0;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5206;&#x6BB5;&#x9501;&#x7684;&#x5F62;&#x5F0F;&#x6765;&#x5B9E;&#x73B0;&#x9AD8;&#x6548;&#x7684;&#x5E76;&#x53D1;&#x64CD;&#x4F5C;&#x3002; &#x6211;&#x4EEC;&#x4EE5;ConcurrentHashMap&#x6765;&#x8BF4;&#x4E00;&#x4E0B;&#x5206;&#x6BB5;&#x9501;&#x7684;&#x542B;&#x4E49;&#x4EE5;&#x53CA;&#x8BBE;&#x8BA1;&#x601D;&#x60F3;&#xFF0C;ConcurrentHashMap&#x4E2D;&#x7684;&#x5206;&#x6BB5;&#x9501;&#x79F0;&#x4E3A;Segment&#xFF0C;&#x5B83;&#x5373;&#x7C7B;&#x4F3C;&#x4E8E;HashMap&#xFF08;JDK7&#x4E0E;JDK8&#x4E2D;HashMap&#x7684;&#x5B9E;&#x73B0;&#xFF09;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5373;&#x5185;&#x90E8;&#x62E5;&#x6709;&#x4E00;&#x4E2A;Entry&#x6570;&#x7EC4;&#xFF0C;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x53C8;&#x662F;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#xFF1B;&#x540C;&#x65F6;&#x53C8;&#x662F;&#x4E00;&#x4E2A;ReentrantLock&#xFF08;Segment&#x7EE7;&#x627F;&#x4E86;ReentrantLock)&#x3002;&#x5F53;&#x9700;&#x8981;put&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x5BF9;&#x6574;&#x4E2A;hashmap&#x8FDB;&#x884C;&#x52A0;&#x9501;&#xFF0C;&#x800C;&#x662F;&#x5148;&#x901A;&#x8FC7; hashcode &#x6765;&#x77E5;&#x9053;&#x4ED6;&#x8981;&#x653E;&#x5728;&#x90A3;&#x4E00;&#x4E2A;&#x5206;&#x6BB5;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x8FD9;&#x4E2A;&#x5206;&#x6BB5;&#x8FDB;&#x884C;&#x52A0;&#x9501;&#xFF0C;&#x6240;&#x4EE5;&#x5F53;&#x591A;&#x7EBF;&#x7A0B;put&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EA;&#x8981;&#x4E0D;&#x662F;&#x653E;&#x5728;&#x4E00;&#x4E2A;&#x5206;&#x6BB5;&#x4E2D;&#xFF0C;&#x5C31;&#x5B9E;&#x73B0;&#x4E86;&#x771F;&#x6B63;&#x7684;&#x5E76;&#x884C;&#x7684;&#x63D2;&#x5165;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;size&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x5C31;&#x662F;&#x83B7;&#x53D6; hashmap &#x5168;&#x5C40;&#x4FE1;&#x606F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x83B7;&#x53D6;&#x6240;&#x6709;&#x7684;&#x5206;&#x6BB5;&#x9501;&#x624D;&#x80FD;&#x7EDF;&#x8BA1;&#x3002;&#x5206;&#x6BB5;&#x9501;&#x7684;&#x8BBE;&#x8BA1;&#x76EE;&#x7684;&#x662F;&#x7EC6;&#x5316;&#x9501;&#x7684;&#x7C92;&#x5EA6;&#xFF0C;&#x5F53;&#x64CD;&#x4F5C;&#x4E0D;&#x9700;&#x8981;&#x66F4;&#x65B0;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x4EC5;&#x4EC5;&#x9488;&#x5BF9;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4E00;&#x9879;&#x8FDB;&#x884C;&#x52A0;&#x9501;&#x64CD;&#x4F5C;&#x3002; &#x504F;&#x5411;&#x9501;/&#x8F7B;&#x91CF;&#x7EA7;&#x9501;/&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x504F;&#x5411;&#x9501;&#x5728;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD8;&#x80FD;&#x591F;&#x9488;&#x5BF9;&#x90E8;&#x5206;&#x573A;&#x666F;&#x7EE7;&#x7EED;&#x4F18;&#x5316;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x4EC5;&#x4EC5;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#xFF0C;&#x81EA;&#x59CB;&#x81F3;&#x7EC8;&#xFF0C;&#x4F7F;&#x7528;&#x9501;&#x7684;&#x7EBF;&#x7A0B;&#x90FD;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x7EF4;&#x62A4;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x90FD;&#x662F;&#x6D6A;&#x8D39;&#x7684;&#x3002;&#x504F;&#x5411;&#x9501;&#x7684;&#x76EE;&#x6807;&#x662F;&#xFF0C;&#x51CF;&#x5C11;&#x65E0;&#x7ADE;&#x4E89;&#x4E14;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4F7F;&#x7528;&#x9501;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F7F;&#x7528;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x4EA7;&#x751F;&#x7684;&#x6027;&#x80FD;&#x6D88;&#x8017;&#x3002;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x6BCF;&#x6B21;&#x7533;&#x8BF7;&#x3001;&#x91CA;&#x653E;&#x9501;&#x90FD;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x4E00;&#x6B21;CAS&#xFF0C;&#x4F46;&#x504F;&#x5411;&#x9501;&#x53EA;&#x6709;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x9700;&#x8981;&#x4E00;&#x6B21;CAS&#x3002; &#x201C;&#x504F;&#x5411;&#x201D;&#x7684;&#x610F;&#x601D;&#x662F;&#xFF0C;&#x504F;&#x5411;&#x9501;&#x5047;&#x5B9A;&#x5C06;&#x6765;&#x53EA;&#x6709;&#x7B2C;&#x4E00;&#x4E2A;&#x7533;&#x8BF7;&#x9501;&#x7684;&#x7EBF;&#x7A0B;&#x4F1A;&#x4F7F;&#x7528;&#x9501;&#xFF08;&#x4E0D;&#x4F1A;&#x6709;&#x4EFB;&#x4F55;&#x7EBF;&#x7A0B;&#x518D;&#x6765;&#x7533;&#x8BF7;&#x9501;&#xFF09;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5728;Mark Word&#x4E2D; CAS &#x8BB0;&#x5F55;owner&#xFF08;&#x672C;&#x8D28;&#x4E0A;&#x4E5F;&#x662F;&#x66F4;&#x65B0;&#xFF0C;&#x4F46;&#x521D;&#x59CB;&#x503C;&#x4E3A;&#x7A7A;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x8BB0;&#x5F55;&#x6210;&#x529F;&#xFF0C;&#x5219;&#x504F;&#x5411;&#x9501;&#x83B7;&#x53D6;&#x6210;&#x529F;&#xFF0C;&#x8BB0;&#x5F55;&#x9501;&#x72B6;&#x6001;&#x4E3A;&#x504F;&#x5411;&#x9501;&#xFF0C;&#x4EE5;&#x540E;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7B49;&#x4E8E;owner&#x5C31;&#x53EF;&#x4EE5;&#x96F6;&#x6210;&#x672C;&#x7684;&#x76F4;&#x63A5;&#x83B7;&#x5F97;&#x9501;&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x8BF4;&#x660E;&#x6709;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7ADE;&#x4E89;&#xFF0C;&#x81A8;&#x80C0;&#x4E3A;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3002; &#x504F;&#x5411;&#x9501;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x81EA;&#x65CB;&#x9501;&#x4F18;&#x5316;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x65E6;&#x6709;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7533;&#x8BF7;&#x9501;&#xFF0C;&#x5C31;&#x7834;&#x574F;&#x4E86;&#x504F;&#x5411;&#x9501;&#x7684;&#x5047;&#x5B9A;&#x3002; &#x7F3A;&#x70B9;&#xFF1A; &#x540C;&#x6837;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x660E;&#x663E;&#x5B58;&#x5728;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7533;&#x8BF7;&#x9501;&#xFF0C;&#x90A3;&#x4E48;&#x504F;&#x5411;&#x9501;&#x5C06;&#x5F88;&#x5FEB;&#x81A8;&#x80C0;&#x4E3A;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3002; &#x4E0D;&#x8FC7;&#x8FD9;&#x4E2A;&#x526F;&#x4F5C;&#x7528;&#x5DF2;&#x7ECF;&#x5C0F;&#x7684;&#x591A;&#x3002; &#x5982;&#x679C;&#x9700;&#x8981;&#xFF0C;&#x4F7F;&#x7528;&#x53C2;&#x6570;-XX:-UseBiasedLocking&#x7981;&#x6B62;&#x504F;&#x5411;&#x9501;&#x4F18;&#x5316;&#xFF08;&#x9ED8;&#x8BA4;&#x6253;&#x5F00;&#xFF09;&#x3002; &#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x81EA;&#x65CB;&#x9501;&#x7684;&#x76EE;&#x6807;&#x662F;&#x964D;&#x4F4E;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x7684;&#x6210;&#x672C;&#x3002;&#x5982;&#x679C;&#x9501;&#x7ADE;&#x4E89;&#x6FC0;&#x70C8;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x5F97;&#x4E0D;&#x4F9D;&#x8D56;&#x4E8E;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#xFF0C;&#x8BA9;&#x7ADE;&#x4E89;&#x5931;&#x8D25;&#x7684;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#xFF1B;&#x5982;&#x679C;&#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x7684;&#x9501;&#x7ADE;&#x4E89;&#xFF0C;&#x90A3;&#x4E48;&#x7533;&#x8BF7;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x90FD;&#x662F;&#x6D6A;&#x8D39;&#x7684;&#x3002;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x7684;&#x76EE;&#x6807;&#x662F;&#xFF0C;&#x51CF;&#x5C11;&#x65E0;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4F7F;&#x7528;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x4EA7;&#x751F;&#x7684;&#x6027;&#x80FD;&#x6D88;&#x8017;&#xFF0C;&#x5305;&#x62EC;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x5F15;&#x8D77;&#x7684;&#x5185;&#x6838;&#x6001;&#x4E0E;&#x7528;&#x6237;&#x6001;&#x5207;&#x6362;&#x3001;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x9020;&#x6210;&#x7684;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x7B49;&#x3002; &#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x662F;&#x76F8;&#x5BF9;&#x4E8E;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x800C;&#x8A00;&#x7684;&#x3002;&#x4F7F;&#x7528;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x65F6;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x7533;&#x8BF7;&#x4E92;&#x65A5;&#x91CF;&#xFF0C;&#x4EC5;&#x4EC5;&#x5C06; Mark Word &#x4E2D;&#x7684;&#x90E8;&#x5206;&#x5B57;&#x8282;CAS&#x66F4;&#x65B0;&#x6307;&#x5411;&#x7EBF;&#x7A0B;&#x6808;&#x4E2D;&#x7684;Lock Record&#xFF0C;&#x5982;&#x679C;&#x66F4;&#x65B0;&#x6210;&#x529F;&#xFF0C;&#x5219;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x83B7;&#x53D6;&#x6210;&#x529F;&#xFF0C;&#x8BB0;&#x5F55;&#x9501;&#x72B6;&#x6001;&#x4E3A;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x6709;&#x7EBF;&#x7A0B;&#x83B7;&#x5F97;&#x4E86;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#xFF0C;&#x76EE;&#x524D;&#x53D1;&#x751F;&#x4E86;&#x9501;&#x7ADE;&#x4E89;&#xFF08;&#x4E0D;&#x9002;&#x5408;&#x7EE7;&#x7EED;&#x4F7F;&#x7528;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#xFF09;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x81A8;&#x80C0;&#x4E3A;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x3002; Mark Word&#x662F;&#x5BF9;&#x8C61;&#x5934;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF1B;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x90FD;&#x62E5;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x7EBF;&#x7A0B;&#x6808;&#xFF08;&#x865A;&#x62DF;&#x673A;&#x6808;&#xFF09;&#xFF0C;&#x8BB0;&#x5F55;&#x7EBF;&#x7A0B;&#x548C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x7684;&#x57FA;&#x672C;&#x4FE1;&#x606F;&#x3002;&#x4E8C;&#x8005;&#x5C5E;&#x4E8E;JVM&#x7684;&#x57FA;&#x7840;&#x5185;&#x5BB9;&#xFF0C;&#x6B64;&#x5904;&#x4E0D;&#x505A;&#x4ECB;&#x7ECD;&#x3002; &#x5F53;&#x7136;&#xFF0C;&#x7531;&#x4E8E;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x5929;&#x7136;&#x7784;&#x51C6;&#x4E0D;&#x5B58;&#x5728;&#x9501;&#x7ADE;&#x4E89;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x9501;&#x7ADE;&#x4E89;&#x4F46;&#x4E0D;&#x6FC0;&#x70C8;&#xFF0C;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x7528;&#x81EA;&#x65CB;&#x9501;&#x4F18;&#x5316;&#xFF0C;&#x81EA;&#x65CB;&#x5931;&#x8D25;&#x540E;&#x518D;&#x81A8;&#x80C0;&#x4E3A;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x3002; &#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x5185;&#x7F6E;&#x9501;&#x5728;Java&#x4E2D;&#x88AB;&#x62BD;&#x8C61;&#x4E3A;&#x76D1;&#x89C6;&#x5668;&#x9501;&#xFF08;monitor&#xFF09;&#x3002;&#x5728;JDK 1.6&#x4E4B;&#x524D;&#xFF0C;&#x76D1;&#x89C6;&#x5668;&#x9501;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x76F4;&#x63A5;&#x5BF9;&#x5E94;&#x5E95;&#x5C42;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x4E92;&#x65A5;&#x91CF;&#xFF08;mutex&#xFF09;&#x3002;&#x8FD9;&#x79CD;&#x540C;&#x6B65;&#x65B9;&#x5F0F;&#x7684;&#x6210;&#x672C;&#x975E;&#x5E38;&#x9AD8;&#xFF0C;&#x5305;&#x62EC;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x5F15;&#x8D77;&#x7684;&#x5185;&#x6838;&#x6001;&#x4E0E;&#x7528;&#x6237;&#x6001;&#x5207;&#x6362;&#x3001;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x9020;&#x6210;&#x7684;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x7B49;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x540E;&#x6765;&#x79F0;&#x8FD9;&#x79CD;&#x9501;&#x4E3A;&#x201C;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x201D;&#x3002; &#x5C0F;&#x7ED3; &#x504F;&#x5411;&#x9501;&#x3001;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3001;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x5206;&#x914D;&#x548C;&#x81A8;&#x80C0;&#x7684;&#x8BE6;&#x7EC6;&#x8FC7;&#x7A0B;&#x89C1;&#x540E;&#x3002;&#x4F1A;&#x6D89;&#x53CA;&#x4E00;&#x4E9B;Mark Word&#x4E0E;CAS&#x7684;&#x77E5;&#x8BC6;&#x3002; &#x504F;&#x5411;&#x9501;&#x3001;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3001;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x9002;&#x7528;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x5E76;&#x53D1;&#x573A;&#x666F;&#xFF1A; &#x504F;&#x5411;&#x9501;&#xFF1A;&#x65E0;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#xFF0C;&#x4E14;&#x5C06;&#x6765;&#x53EA;&#x6709;&#x7B2C;&#x4E00;&#x4E2A;&#x7533;&#x8BF7;&#x9501;&#x7684;&#x7EBF;&#x7A0B;&#x4F1A;&#x4F7F;&#x7528;&#x9501;&#x3002; &#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#xFF1A;&#x65E0;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#xFF0C;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x4EA4;&#x66FF;&#x4F7F;&#x7528;&#x9501;&#xFF1B;&#x5141;&#x8BB8;&#x77ED;&#x65F6;&#x95F4;&#x7684;&#x9501;&#x7ADE;&#x4E89;&#x3002; &#x91CD;&#x91CF;&#x7EA7;&#x9501;&#xFF1A;&#x6709;&#x5B9E;&#x9645;&#x7ADE;&#x4E89;&#xFF0C;&#x4E14;&#x9501;&#x7ADE;&#x4E89;&#x65F6;&#x95F4;&#x957F;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x5982;&#x679C;&#x9501;&#x7ADE;&#x4E89;&#x65F6;&#x95F4;&#x77ED;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x81EA;&#x65CB;&#x9501;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3001;&#x91CD;&#x91CF;&#x7EA7;&#x9501;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x51CF;&#x5C11;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x3002; &#x5982;&#x679C;&#x9501;&#x7ADE;&#x4E89;&#x7A0B;&#x5EA6;&#x9010;&#x6E10;&#x63D0;&#x9AD8;&#xFF08;&#x7F13;&#x6162;&#xFF09;&#xFF0C;&#x90A3;&#x4E48;&#x4ECE;&#x504F;&#x5411;&#x9501;&#x9010;&#x6B65;&#x81A8;&#x80C0;&#x5230;&#x91CD;&#x91CF;&#x9501;&#xFF0C;&#x80FD;&#x591F;&#x63D0;&#x9AD8;&#x7CFB;&#x7EDF;&#x7684;&#x6574;&#x4F53;&#x6027;&#x80FD;&#x3002; &#x81EA;&#x65CB;&#x9501;&#x9996;&#x5148;&#xFF0C;&#x5185;&#x6838;&#x6001;&#x4E0E;&#x7528;&#x6237;&#x6001;&#x7684;&#x5207;&#x6362;&#x4E0A;&#x4E0D;&#x5BB9;&#x6613;&#x4F18;&#x5316;&#x3002;&#x4F46;&#x901A;&#x8FC7;&#x81EA;&#x65CB;&#x9501;&#xFF0C;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x9020;&#x6210;&#x7684;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#xFF08;&#x5305;&#x62EC;&#x6302;&#x8D77;&#x7EBF;&#x7A0B;&#x548C;&#x6062;&#x590D;&#x7EBF;&#x7A0B;&#xFF09;&#x3002; &#x5982;&#x679C;&#x9501;&#x7684;&#x7C92;&#x5EA6;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x9501;&#x7684;&#x6301;&#x6709;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x77ED;&#xFF08;&#x5C3D;&#x7BA1;&#x5177;&#x4F53;&#x7684;&#x6301;&#x6709;&#x65F6;&#x95F4;&#x65E0;&#x6CD5;&#x5F97;&#x77E5;&#xFF0C;&#x4F46;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#xFF0C;&#x901A;&#x5E38;&#x6709;&#x4E00;&#x90E8;&#x5206;&#x9501;&#x80FD;&#x6EE1;&#x8DB3;&#x4E0A;&#x8FF0;&#x6027;&#x8D28;&#xFF09;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x5BF9;&#x4E8E;&#x7ADE;&#x4E89;&#x8FD9;&#x4E9B;&#x9501;&#x7684;&#x800C;&#x8A00;&#xFF0C;&#x56E0;&#x4E3A;&#x9501;&#x963B;&#x585E;&#x9020;&#x6210;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x7684;&#x65F6;&#x95F4;&#x4E0E;&#x9501;&#x6301;&#x6709;&#x7684;&#x65F6;&#x95F4;&#x76F8;&#x5F53;&#xFF0C;&#x51CF;&#x5C11;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x9020;&#x6210;&#x7684;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#xFF0C;&#x80FD;&#x5F97;&#x5230;&#x8F83;&#x5927;&#x7684;&#x6027;&#x80FD;&#x63D0;&#x5347;&#x3002;&#x5177;&#x4F53;&#x5982;&#x4E0B;&#xFF1A; &#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7ADE;&#x4E89;&#x9501;&#x5931;&#x8D25;&#x65F6;&#xFF0C;&#x6253;&#x7B97;&#x963B;&#x585E;&#x81EA;&#x5DF1; &#x4E0D;&#x76F4;&#x63A5;&#x963B;&#x585E;&#x81EA;&#x5DF1;&#xFF0C;&#x800C;&#x662F;&#x81EA;&#x65CB;&#xFF08;&#x7A7A;&#x7B49;&#x5F85;&#xFF0C;&#x6BD4;&#x5982;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6709;&#x9650;for&#x5FAA;&#x73AF;&#xFF09;&#x4E00;&#x4F1A; &#x5728;&#x81EA;&#x65CB;&#x7684;&#x540C;&#x65F6;&#x91CD;&#x65B0;&#x7ADE;&#x4E89;&#x9501; &#x5982;&#x679C;&#x81EA;&#x65CB;&#x7ED3;&#x675F;&#x524D;&#x83B7;&#x5F97;&#x4E86;&#x9501;&#xFF0C;&#x90A3;&#x4E48;&#x9501;&#x83B7;&#x53D6;&#x6210;&#x529F;&#xFF1B;&#x5426;&#x5219;&#xFF0C;&#x81EA;&#x65CB;&#x7ED3;&#x675F;&#x540E;&#x963B;&#x585E;&#x81EA;&#x5DF1; &#x5982;&#x679C;&#x5728;&#x81EA;&#x65CB;&#x7684;&#x65F6;&#x95F4;&#x5185;&#xFF0C;&#x9501;&#x5C31;&#x88AB;&#x65E7;owner&#x91CA;&#x653E;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x963B;&#x585E;&#x81EA;&#x5DF1;&#xFF08;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x5728;&#x672A;&#x6765;&#x9501;&#x91CA;&#x653E;&#x65F6;&#x6062;&#x590D;&#xFF09;&#xFF0C;&#x51CF;&#x5C11;&#x4E86;&#x4E00;&#x6B21;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x3002; &#x201C;&#x9501;&#x7684;&#x6301;&#x6709;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x77ED;&#x201C;&#x8FD9;&#x4E00;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x653E;&#x5BBD;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x53EA;&#x8981;&#x9501;&#x7ADE;&#x4E89;&#x7684;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x77ED;&#xFF08;&#x6BD4;&#x5982;&#x7EBF;&#x7A0B;1&#x5FEB;&#x91CA;&#x653E;&#x9501;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7EBF;&#x7A0B;2&#x624D;&#x4F1A;&#x6765;&#x7ADE;&#x4E89;&#x9501;&#xFF09;&#xFF0C;&#x5C31;&#x80FD;&#x591F;&#x63D0;&#x9AD8;&#x81EA;&#x65CB;&#x83B7;&#x5F97;&#x9501;&#x7684;&#x6982;&#x7387;&#x3002;&#x8FD9;&#x901A;&#x5E38;&#x53D1;&#x751F;&#x5728;&#x9501;&#x6301;&#x6709;&#x65F6;&#x95F4;&#x957F;&#xFF0C;&#x4F46;&#x7ADE;&#x4E89;&#x4E0D;&#x6FC0;&#x70C8;&#x7684;&#x573A;&#x666F;&#x4E2D;&#x3002; &#x5178;&#x578B;&#x7684;&#x81EA;&#x65CB;&#x9501;&#x5B9E;&#x73B0;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x81EA;&#x65CB;&#x9501;&#x7684;&#x5B9E;&#x73B0; &#x9501;&#x5206;&#x914D;&#x548C;&#x81A8;&#x80C0;&#x8FC7;&#x7A0B; &#x53C2;&#x8003;&#x94FE;&#x63A5; Java&#x4E2D;&#x7684;&#x9501;&#x5206;&#x7C7B; Java&#x4E0D;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x548C;&#x53EF;&#x91CD;&#x5165;&#x9501;&#x7406;&#x89E3; &#x6D45;&#x8C08;&#x504F;&#x5411;&#x9501;&#x3001;&#x8F7B;&#x91CF;&#x7EA7;&#x9501;&#x3001;&#x91CD;&#x91CF;&#x7EA7;&#x9501;]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>锁</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 反射]]></title>
    <url>%2F2019%2F02%2F11%2FJava%20%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5F53;&#x7A0B;&#x5E8F;&#x6709;&#x4F7F;&#x7528;&#x67D0;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x7C7B;&#x8FD8;&#x6CA1;&#x6709;&#x88AB;&#x52A0;&#x8F7D;&#x5230;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x5219;&#x7CFB;&#x7EDF;&#x4F1A;&#x901A;&#x8FC7;&#x52A0;&#x8F7D;&#xFF0C;&#x8FDE;&#x63A5;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E09;&#x6B65;&#x6765;&#x5B9E;&#x73B0;&#x5BF9;&#x8FD9;&#x4E2A;&#x7C7B;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316; &#x52A0;&#x8F7D;&#x5C31;&#x662F;&#x6307;&#x5C06;class&#x6587;&#x4EF6;&#x8BFB;&#x5165;&#x5185;&#x5B58;&#xFF0C;&#x5E76;&#x4E3A;&#x4E4B;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;Class&#x5BF9;&#x8C61;&#xFF0C;&#x4EFB;&#x4F55;&#x7C7B;&#x88AB;&#x4F7F;&#x7528;&#x65F6;&#x7CFB;&#x7EDF;&#x90FD;&#x4F1A;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Class&#x5BF9;&#x8C61; &#x8FDE;&#x63A5;&#x9A8C;&#x8BC1; &#x662F;&#x5426;&#x6709;&#x6B63;&#x786E;&#x7684;&#x5185;&#x90E8;&#x7ED3;&#x6784;&#xFF0C;&#x5E76;&#x548C;&#x5176;&#x4ED6;&#x7C7B;&#x534F;&#x8C03;&#x4E00;&#x81F4;&#x51C6;&#x5907; &#x8D1F;&#x8D23;&#x4E3A;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x6210;&#x5458;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x5E76;&#x8BBE;&#x7F6E;&#x9ED8;&#x8BA4;&#x521D;&#x59CB;&#x5316;&#x503C;&#x89E3;&#x6790; &#x5C06;&#x7C7B;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x4E2D;&#x7684;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x66FF;&#x6362;&#x4E3A;&#x76F4;&#x63A5;&#x5F15;&#x7528; &#x521D;&#x59CB;&#x5316;&#x5BF9;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF0C;&#x9759;&#x6001;&#x4EE3;&#x7801;&#x5757;&#x6267;&#x884C;&#x521D;&#x59CB;&#x5316;&#x64CD;&#x4F5C;&#x7C7B;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x673A; &#x521B;&#x5EFA;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B; &#x7C7B;&#x7684;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF0C;&#x6216;&#x8005;&#x4E3A;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x8D4B;&#x503C; &#x7C7B;&#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5; &#x4F7F;&#x7528;&#x53CD;&#x5C04;&#x65B9;&#x5F0F;&#x6765;&#x5F3A;&#x5236;&#x521B;&#x5EFA;&#x67D0;&#x4E2A;&#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x5BF9;&#x5E94;&#x7684;java.lang.Class&#x5BF9;&#x8C61; &#x521D;&#x59CB;&#x5316;&#x67D0;&#x4E2A;&#x7C7B;&#x7684;&#x5B50;&#x7C7B; &#x76F4;&#x63A5;&#x4F7F;&#x7528;java.exe&#x547D;&#x4EE4;&#x6765;&#x8FD0;&#x884C;&#x67D0;&#x4E2A;&#x4E3B;&#x7C7B;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; &#x8D1F;&#x8D23;&#x5C06;.class&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x5230;&#x5185;&#x5728;&#x4E2D;&#xFF0C;&#x5E76;&#x4E3A;&#x4E4B;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;Class&#x5BF9;&#x8C61; &#x867D;&#x7136;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x5173;&#x5FC3;&#x7C7B;&#x52A0;&#x8F7D;&#x673A;&#x5236;&#xFF0C;&#x4F46;&#x662F;&#x4E86;&#x89E3;&#x8FD9;&#x4E2A;&#x673A;&#x5236;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x66F4;&#x597D;&#x7684;&#x7406;&#x89E3;&#x7A0B;&#x5E8F;&#x7684;&#x8FD0;&#x884C;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x7EC4;&#x6210; Bootstrap ClassLoader &#x6839;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4E5F;&#x88AB;&#x79F0;&#x4E3A;&#x5F15;&#x5BFC;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x8D1F;&#x8D23;Java&#x6838;&#x5FC3;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x6BD4;&#x5982;System&#xFF0C;String&#x7B49;&#x3002;&#x5728; JDK &#x4E2D; JRE &#x7684; lib &#x76EE;&#x5F55;&#x4E0B; rt.jar &#x6587;&#x4EF6;&#x4E2D; Extension ClassLoader&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x8D1F;&#x8D23; JRE &#x7684;&#x6269;&#x5C55;&#x76EE;&#x5F55;&#x4E2D; jar &#x5305;&#x7684;&#x52A0;&#x8F7D;&#x3002;&#x5728; JDK &#x4E2D; JRE &#x7684; lib &#x76EE;&#x5F55;&#x4E0B; ext &#x76EE;&#x5F55; System ClassLoader&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x8D1F;&#x8D23;&#x5728;JVM&#x542F;&#x52A8;&#x65F6;&#x52A0;&#x8F7D;&#x6765;&#x81EA;java&#x547D;&#x4EE4;&#x7684;class&#x6587;&#x4EF6;&#xFF0C;&#x4EE5;&#x53CA;classpath&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x6240;&#x6307;&#x5B9A;&#x7684;jar&#x5305;&#x548C;&#x7C7B;&#x8DEF;&#x5F84; &#x901A;&#x8FC7;&#x8FD9;&#x4E9B;&#x63CF;&#x8FF0;&#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x5E38;&#x7528;&#x7684;&#x7C7B;&#xFF0C;&#x90FD;&#x662F;&#x7531;&#x8C01;&#x6765;&#x52A0;&#x8F7D;&#x5B8C;&#x6210;&#x7684;&#x3002; &#x5230;&#x76EE;&#x524D;&#x4E3A;&#x6B62;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x77E5;&#x9053;&#x628A;class&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x5230;&#x5185;&#x5B58;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4EC5;&#x4EC5;&#x7AD9;&#x5728;&#x8FD9;&#x4E9B;class&#x6587;&#x4EF6;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x6765;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;class&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x5462;? &#x8FD9;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x53CD;&#x5C04;&#x8981;&#x7814;&#x7A76;&#x7684;&#x5185;&#x5BB9; &#x53CD;&#x5C04;JAVA&#x53CD;&#x5C04;&#x673A;&#x5236;&#x662F;&#x5728;&#x8FD0;&#x884C;&#x72B6;&#x6001;&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x90FD;&#x80FD;&#x591F;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#xFF1B;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x90FD;&#x80FD;&#x591F;&#x8C03;&#x7528;&#x5B83;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x548C;&#x5C5E;&#x6027;&#xFF1B;&#x8FD9;&#x79CD;&#x52A8;&#x6001;&#x83B7;&#x53D6;&#x7684;&#x4FE1;&#x606F;&#x4EE5;&#x53CA;&#x52A8;&#x6001;&#x8C03;&#x7528;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x529F;&#x80FD;&#x79F0;&#x4E3A;java&#x8BED;&#x8A00;&#x7684;&#x53CD;&#x5C04;&#x673A;&#x5236;&#x3002;&#x8981;&#x60F3;&#x89E3;&#x5256;&#x4E00;&#x4E2A;&#x7C7B;,&#x5FC5;&#x987B;&#x5148;&#x8981;&#x83B7;&#x53D6;&#x5230;&#x8BE5;&#x7C7B;&#x7684;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x5BF9;&#x8C61;&#x3002;&#x800C;&#x89E3;&#x5256;&#x4F7F;&#x7528;&#x7684;&#x5C31;&#x662F;Class&#x7C7B;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;.&#x6240;&#x4EE5;&#x5148;&#x8981;&#x83B7;&#x53D6;&#x5230;&#x6BCF;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x5BF9;&#x5E94;&#x7684;Class&#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61; Class&#x7C7B;&#x9605;&#x8BFB;API&#x7684;Class&#x7C7B;&#x5F97;&#x77E5;&#xFF0C;Class &#x6CA1;&#x6709;&#x516C;&#x5171;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x3002;Class &#x5BF9;&#x8C61;&#x662F;&#x5728;&#x52A0;&#x8F7D;&#x7C7B;&#x65F6;&#x7531; Java &#x865A;&#x62DF;&#x673A;&#x4EE5;&#x53CA;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4E2D;&#x7684; defineClass &#x65B9;&#x6CD5;&#x81EA;&#x52A8;&#x6784;&#x9020;&#x7684; &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61;&#x7684;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#x65B9;&#x5F0F;&#x4E00;: &#x901A;&#x8FC7;Object&#x7C7B;&#x4E2D;&#x7684;getObject()&#x65B9;&#x6CD5;12Person p = new Person();Class c = p.getClass(); &#x65B9;&#x5F0F;&#x4E8C;: &#x901A;&#x8FC7; &#x7C7B;&#x540D;.class &#x83B7;&#x53D6;&#x5230;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x5BF9;&#x8C61;&#xFF08;&#x4EFB;&#x610F;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x90FD;&#x5177;&#x5907;&#x4E00;&#x4E2A;class&#x9759;&#x6001;&#x5C5E;&#x6027;,&#x770B;&#x4E0A;&#x53BB;&#x8981;&#x6BD4;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x7B80;&#x5355;&#xFF09;1Class c2 = Person.class; &#x65B9;&#x5F0F;&#x4E09;: &#x901A;&#x8FC7;Class&#x7C7B;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF08;&#x5C06;&#x7C7B;&#x540D;&#x4F5C;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x4F20;&#x9012;&#x7ED9;Class&#x7C7B;&#x4E2D;&#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5;forName&#x5373;&#x53EF;&#xFF09;1Class c3 = Class.forName(&quot;cn.cuzz.Person&quot;); &#x6CE8;&#x610F;&#xFF1A;&#x7B2C;&#x4E09;&#x79CD;&#x548C;&#x524D;&#x4E24;&#x79CD;&#x7684;&#x533A;&#x522B; &#x524D;&#x4E24;&#x79CD;&#x4F60;&#x5FC5;&#x987B;&#x660E;&#x786E;Person&#x7C7B;&#x578B; &#x540E;&#x9762;&#x662F;&#x6307;&#x5B9A;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5C31;&#x884C;(&#x8981;&#x5305;&#x542B;&#x5305;&#x540D;)&#xFF0C;&#x8FD9;&#x79CD;&#x6269;&#x5C55;&#x66F4;&#x5F3A;&#xFF0C;&#x6211;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x4F60;&#x7684;&#x7C7B;&#xFF0C;&#x6211;&#x53EA;&#x63D0;&#x4F9B;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6309;&#x7167;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x5C31;&#x53EF;&#x4EE5;&#x4E86; Person&#x7C7B;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class Person { // &#x6210;&#x5458;&#x53D8;&#x91CF; public String name; public int age; private String address; // &#x6784;&#x9020;&#x65B9;&#x6CD5; public Person() { System.out.println(&quot;&#x7A7A;&#x53C2;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5;&quot;); } public Person(String name) { this.name = name; System.out.println(&quot;&#x5E26;&#x6709;String&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&quot;); } // &#x79C1;&#x6709;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5; private Person(String name, int age){ this.name = name; this.age = age; System.out.println(&quot;&#x5E26;&#x6709;String&#xFF0C;int&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&quot;); } public Person(String name, int age, String address){ this.name = name; this.age = age; this.address = address; System.out.println(&quot;&#x5E26;&#x6709;String, int, String&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&quot;); } // &#x6210;&#x5458;&#x65B9;&#x6CD5; // &#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5; public void method1(){ System.out.println(&quot;&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&quot;); } // &#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5; public void method2(String name){ System.out.println(&quot;&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5; name= &quot;+ name); } // &#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570; public int method3(){ System.out.println(&quot;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&quot;); return 123; } // &#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5; public String method4(String name){ System.out.println(&quot;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6709;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&quot;); return &quot;&#x54C8;&#x54C8;&quot; + name; } // &#x79C1;&#x6709;&#x65B9;&#x6CD5; private void method5(){ System.out.println(&quot;&#x79C1;&#x6709;&#x65B9;&#x6CD5;&quot;); } @Override public String toString() { return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;, address=&quot; + address+ &quot;]&quot;; }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5E76;&#x4F7F;&#x7528;&#x5728;&#x53CD;&#x5C04;&#x673A;&#x5236;&#x4E2D;&#xFF0C;&#x628A;&#x7C7B;&#x4E2D;&#x7684;&#x6210;&#x5458;&#xFF08;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x3001;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x3001;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF09;&#x90FD;&#x5C01;&#x88C5;&#x6210;&#x4E86;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x8FDB;&#x884C;&#x8868;&#x793A;&#x3002;&#x5176;&#x4E2D;&#xFF0C;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4F7F;&#x7528;&#x7C7B;Constructor&#x8868;&#x793A;&#x3002;&#x53EF;&#x901A;&#x8FC7;Class&#x7C7B;&#x4E2D;&#x63D0;&#x4F9B;&#x7684;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF1A; &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5; public Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes) &#x83B7;&#x53D6;public&#x4FEE;&#x9970;, &#x6307;&#x5B9A;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5; public Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes) &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;(&#x5305;&#x542B;&#x79C1;&#x6709;&#x7684;) &#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5; public Constructor&lt;?&gt;[] getConstructors()&#x83B7;&#x53D6;&#x6240;&#x6709;&#x7684;public &#x4FEE;&#x9970;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5; public Constructor&lt;?&gt;[] getDeclaredConstructors() &#x83B7;&#x53D6;&#x6240;&#x6709;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;(&#x5305;&#x542B;&#x79C1;&#x6709;&#x7684;)123456789101112131415161718192021222324252627282930313233package cn.cuzz;import java.lang.reflect.Constructor;public class Test { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, SecurityException { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; &#x5305;&#x540D;.&#x7C7B; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x6240;&#x6709;&#x6784;&#x9020;&#x65B9;&#x6CD5; // &#x53EA;&#x5305;&#x62EC;public Constructor[] cons = c.getConstructors(); // &#x5373;&#x5305;&#x62EC;public&#x4E5F;&#x5305;&#x62EC;private Constructor[] conss = c.getDeclaredConstructors(); // &#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5; // public Person() Constructor con1 = c.getConstructor(null); System.out.println(con1); // public Person(String name) Constructor con2 = c.getConstructor(String.class); System.out.println(con2); // private Person(String name, int age) Constructor con3 = c.getDeclaredConstructor(String.class, int.class); System.out.println(con3); // public Person(String name, int age, String address) Constructor con4 = c.getDeclaredConstructor(String.class, int.class, String.class); System.out.println(con4); }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x65B9;&#x5F0F;&#xFF0C;&#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#xFF1A; &#x83B7;&#x53D6;&#x5230;Class&#x5BF9;&#x8C61; &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5; &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x7C7B;Constructor&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;public T newInstance(Object... initargs)123456789101112131415161718package cn.cuzz;import java.lang.reflect.Constructor;public class Test2 { public static void main(String[] args) throws Exception { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x6784;&#x9020;&#x5668; Constructor con = c.getConstructor(String.class, int.class, String.class); // &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E2D;&#x7684;Constructor&#x7684;&#x65B9;&#x6CD5; &#x521B;&#x5EFA;&#x5BF9;&#x8C61; Object obj = con.newInstance(&quot;cuzz&quot;, 18, &quot;&#x6B66;&#x6C49;&quot;); System.out.println(obj); // Person [name=cuzz, age=18, address=&#x6B66;&#x6C49;] }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x5E76;&#x4F7F;&#x7528;&#x5728;&#x53CD;&#x5C04;&#x673A;&#x5236;&#x4E2D;&#xFF0C;&#x628A;&#x7C7B;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x4F7F;&#x7528;&#x7C7B;Field&#x8868;&#x793A;&#x3002;&#x53EF;&#x901A;&#x8FC7;Class&#x7C7B;&#x4E2D;&#x63D0;&#x4F9B;&#x7684;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF1A; &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF; public Field getField(String name) &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;public&#x4FEE;&#x9970;&#x7684;&#x53D8;&#x91CF; public Field getDeclaredField(String name) &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x4EFB;&#x610F;&#x53D8;&#x91CF; &#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF; public Field[] getFields() &#x83B7;&#x53D6;&#x6240;&#x6709;public &#x4FEE;&#x9970;&#x7684;&#x53D8;&#x91CF; public Field[] getDeclaredFields() &#x83B7;&#x53D6;&#x6240;&#x6709;&#x7684; &#x53D8;&#x91CF; (&#x5305;&#x542B;&#x79C1;&#x6709;)1234567891011121314151617181920212223package cn.cuzz;import java.lang.reflect.Field;public class Test3 { public static void main(String[] args) throws Exception { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x591A;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF; Field[] fields = c.getFields(); Field[] fieldss = c.getDeclaredFields(); // &#x4E00;&#x4E2A;&#x53D8;&#x91CF; // public int age Field ageField = c.getField(&quot;age&quot;); System.out.println(ageField); // public int cn.cuzz.Person.age // private String address Field addressField = c.getDeclaredField(&quot;address&quot;); System.out.println(addressField); // private java.lang.String cn.cuzz.Person.address }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#x4E0E;&#x83B7;&#x53D6;&#x503C;&#x64CD;&#x4F5C;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#xFF1A; &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; &#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5; &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61; &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF08;&#x79C1;&#x6709;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x901A;&#x8FC7;setAccessible(boolean flag)&#x65B9;&#x6CD5;&#x66B4;&#x529B;&#x8BBF;&#x95EE;&#xFF09; &#x901A;&#x8FC7;&#x65B9;&#x6CD5;&#xFF0C;&#x7ED9;&#x6307;&#x5B9A;&#x5BF9;&#x8C61;&#x7684;&#x6307;&#x5B9A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x8D4B;&#x503C;&#x6216;&#x8005;&#x83B7;&#x53D6;&#x503C;public void set(Object obj, Object value)&#x5728;&#x6307;&#x5B9A;&#x5BF9;&#x8C61;obj&#x4E2D;&#xFF0C;&#x5C06;&#x6B64; Field &#x5BF9;&#x8C61;&#x8868;&#x793A;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x8BBE;&#x7F6E;&#x4E3A;&#x6307;&#x5B9A;&#x7684;&#x65B0;&#x503C;public Object get(Object obj)&#x8FD4;&#x56DE;&#x6307;&#x5B9A;&#x5BF9;&#x8C61;obj&#x4E2D;&#xFF0C;&#x6B64; Field &#x5BF9;&#x8C61;&#x8868;&#x793A;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7684;&#x503C;123456789101112131415161718192021222324252627282930package cn.cuzz;import java.lang.reflect.Constructor;import java.lang.reflect.Field;public class Test4 { public static void main(String[] args) throws IllegalAccessException, Exception { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5; Constructor con = c.getConstructor(String.class); // &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5; &#x521B;&#x5EFA;&#x5BF9;&#x8C61; Object obj = con.newInstance(&quot;cuzz&quot;); // &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x6210;&#x5458;&#x53D8;&#x91CF; // public String name Field nameField = c.getField(&quot;name&quot;); // public int age Field ageField = c.getField(&quot;age&quot;); // &#x8D4B;&#x503C; nameField.set(obj, &quot;Cuzz&quot;); ageField.set(obj, 23); System.out.println(&quot;name = &quot;+ nameField.get(obj)); // name = Cuzz System.out.println(&quot;age = &quot;+ ageField.get(obj)); // age = 23 }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x5E76;&#x4F7F;&#x7528;&#x5728;&#x53CD;&#x5C04;&#x673A;&#x5236;&#x4E2D;&#xFF0C;&#x628A;&#x7C7B;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x4F7F;&#x7528;&#x7C7B;Method&#x8868;&#x793A;&#x3002;&#x53EF;&#x901A;&#x8FC7;Class&#x7C7B;&#x4E2D;&#x63D0;&#x4F9B;&#x7684;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#xFF1A; &#x8FD4;&#x56DE;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; public Method getMethod(String name, Class&lt;?&gt;... parameterTypes) &#x83B7;&#x53D6; public &#x4FEE;&#x9970;&#x7684;&#x65B9;&#x6CD5; public Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) &#x83B7;&#x53D6;&#x4EFB;&#x610F;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5305;&#x542B;&#x79C1;&#x6709;&#x7684; &#x53C2;&#x6570;1: name &#x8981;&#x67E5;&#x627E;&#x7684;&#x65B9;&#x6CD5;&#x540D;&#x79F0;&#xFF1B; &#x53C2;&#x6570;2&#xFF1A; parameterTypes &#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B; &#x8FD4;&#x56DE;&#x83B7;&#x53D6;&#x591A;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; public Method[] getMethods() &#x83B7;&#x53D6;&#x672C;&#x7C7B;&#x4E0E;&#x7236;&#x7C7B;&#x4E2D;&#x6240;&#x6709;public &#x4FEE;&#x9970;&#x7684;&#x65B9;&#x6CD5; public Method[] getDeclaredMethods() &#x83B7;&#x53D6;&#x672C;&#x7C7B;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x65B9;&#x6CD5;(&#x5305;&#x542B;&#x79C1;&#x6709;&#x7684;)12345678910111213141516171819202122232425262728package cn.cuzz;import java.lang.reflect.Method;public class Test5 { public static void main(String[] args) throws Exception { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x591A;&#x4E2A;&#x65B9;&#x6CD5; Method[] methods = c.getMethods(); Method[] methodss = c.getDeclaredMethods(); // &#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; // public void method1() Method method = c.getMethod(&quot;method1&quot;, null); System.out.println(method); // public String method4(String name){ method = c.getMethod(&quot;method4&quot;, String.class); System.out.println(method); // &#x79C1;&#x6709;&#x65B9;&#x6CD5; // private void method5() method = c.getDeclaredMethod(&quot;method5&quot;, null); System.out.println(method); }} &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x8C03;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#xFF0C;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#xFF1A; &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; &#x83B7;&#x53D6;&#x6784;&#x9020;&#x65B9;&#x6CD5; &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61; &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5; &#x6267;&#x884C;&#x627E;&#x5230;&#x7684;&#x65B9;&#x6CD5;(&#x5982;&#x679C;&#x83B7;&#x53D6;&#x7684;&#x662F;&#x79C1;&#x6709;&#x65B9;&#x6CD5;&#x5219;&#x8981;&#x5F00;&#x542F;&#x66B4;&#x529B;&#x8BBF;&#x95EE;m5.setAccessible(true)) public Object invoke(Object obj, Object... args) &#x6267;&#x884C;&#x6307;&#x5B9A;&#x5BF9;&#x8C61;obj&#x4E2D;&#xFF0C;&#x5F53;&#x524D;Method&#x5BF9;&#x8C61;&#x6240;&#x4EE3;&#x8868;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x65B9;&#x6CD5;&#x8981;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x901A;&#x8FC7;args&#x6307;&#x5B9A;12345678910111213141516171819202122232425package cn.cuzz;import java.lang.reflect.Constructor;import java.lang.reflect.Method;public class Test6 { public static void main(String[] args) throws Exception { // &#x83B7;&#x53D6;Class&#x5BF9;&#x8C61; Class c = Class.forName(&quot;cn.cuzz.Person&quot;); // &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x6784;&#x9020;&#x5668; Constructor con = c.getConstructor(String.class, int.class, String.class); // &#x901A;&#x8FC7;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E2D;&#x7684;Constructor&#x7684;&#x65B9;&#x6CD5; &#x521B;&#x5EFA;&#x5BF9;&#x8C61; Object obj = con.newInstance(&quot;cuzz&quot;, 18, &quot;&#x6B66;&#x6C49;&quot;); // &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5; Method m4 = c.getMethod(&quot;method4&quot;, String.class); // &#x6267;&#x884C;&#x627E;&#x5230;&#x7684;&#x65B9;&#x6CD5; Object result = m4.invoke(obj, &quot;2018/03/19&quot;); System.out.println(&quot;result = &quot; + result); // result = &#x54C8;&#x54C8;2018/03/19 }} &#x53CD;&#x5C04;&#x7EC3;&#x4E60;&#x4E0B;&#x9762;&#x5C55;&#x793A;&#x4E00;&#x4E0B;&#x53CD;&#x5C04;&#x7684;&#x5229;&#x7528;&#x573A;&#x666F;&#x3002; &#x6CDB;&#x578B;&#x64E6;&#x9664;&#x601D;&#x8003;&#xFF0C;&#x5C06;&#x5DF2;&#x5B58;&#x5728;&#x7684;ArrayList&lt;Integer&gt;&#x96C6;&#x5408;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x636E;&#xFF0C;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x5462;&#xFF1F; &#x6211;&#x6765;&#x544A;&#x8BC9;&#x5927;&#x5BB6;&#xFF0C;&#x5176;&#x5B9E;&#x7A0B;&#x5E8F;&#x7F16;&#x8BD1;&#x540E;&#x4EA7;&#x751F;&#x7684;.class&#x6587;&#x4EF6;&#x4E2D;&#x662F;&#x6CA1;&#x6709;&#x6CDB;&#x578B;&#x7EA6;&#x675F;&#x7684;&#xFF0C;&#x8FD9;&#x79CD;&#x73B0;&#x8C61;&#x6211;&#x4EEC;&#x79F0;&#x4E3A;&#x6CDB;&#x578B;&#x7684;&#x64E6;&#x9664;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x6280;&#x672F;&#xFF0C;&#x6765;&#x5B8C;&#x6210;&#x5411;&#x6709;&#x6CDB;&#x578B;&#x7EA6;&#x675F;&#x7684;&#x96C6;&#x5408;&#x4E2D;&#xFF0C;&#x6DFB;&#x52A0;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x5143;&#x7D20;123456789101112131415161718192021222324252627package cn.cuzz;import java.lang.reflect.Method;import java.util.ArrayList;public class Test7 { public static void main(String[] args) throws Exception, SecurityException { ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); // &#x6DFB;&#x52A0;&#x5143;&#x7D20; list.add(&quot;cuzz&quot;); // list.add(23); &#x62A5;&#x9519; // &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x6280;&#x672F;&#xFF0C;&#x5B9E;&#x73B0;&#x6DFB;&#x52A0;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x5143;&#x7D20; // &#x83B7;&#x53D6;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x5BF9;&#x8C61; Class c = Class.forName(&quot;java.util.ArrayList&quot;); // &#x627E;&#x5230;add()&#x65B9;&#x6CD5; Method addMethod = c.getMethod(&quot;add&quot;, Object.class); // &#x6267;&#x884C;add()&#x65B9;&#x6CD5; addMethod.invoke(list, 23); System.out.println(list); //[cuzz, 23] }} &#x53CD;&#x5C04;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x901A;&#x8FC7;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x5F97;&#x5230;&#x7C7B;&#x540D;&#x548C;&#x8981;&#x8FD0;&#x884C;&#x7684;&#x65B9;&#x6CD5;&#x540D;,&#x7528;&#x53CD;&#x5C04;&#x7684;&#x64CD;&#x4F5C;&#x7C7B;&#x540D;&#x5F97;&#x5230;&#x5BF9;&#x8C61;&#x548C;&#x8C03;&#x7528;&#x65B9;&#x6CD5; &#x5B9E;&#x73B0;&#x6B65;&#x9AA4;: &#x51C6;&#x5907;&#x914D;&#x7F6E;&#x6587;&#x4EF6;,&#x952E;&#x503C;&#x5BF9; IO&#x6D41;&#x8BFB;&#x53D6;&#x914D;&#x7F6E;&#x6587;&#x4EF6; Reader &#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x5B58;&#x50A8;&#x5230;&#x96C6;&#x5408;&#x4E2D; Properties&#x96C6;&#x5408;&#x4FDD;&#x5B58;&#x7684;&#x952E;&#x503C;&#x5BF9;,&#x5C31;&#x662F;&#x7C7B;&#x540D;&#x548C;&#x65B9;&#x6CD5;&#x540D; &#x53CD;&#x5C04;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7C7B;&#x7684;class&#x6587;&#x4EF6;&#x5BF9;&#x8C61; class&#x6587;&#x4EF6;&#x5BF9;&#x8C61;,&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5; &#x8FD0;&#x884C;&#x65B9;&#x6CD5;1234567891011121314151617181920public class Test8 { public static void main(String[] args) throws Exception{ // IO&#x6D41;&#x8BFB;&#x53D6;&#x914D;&#x7F6E;&#x6587;&#x4EF6; FileReader r = new FileReader(&quot;config.properties&quot;); // &#x521B;&#x5EFA;&#x96C6;&#x5408;&#x5BF9;&#x8C61; Properties pro = new Properties(); // &#x8C03;&#x7528;&#x96C6;&#x5408;&#x65B9;&#x6CD5;load,&#x4F20;&#x9012;&#x6D41;&#x5BF9;&#x8C61; pro.load(r); r.close(); // &#x901A;&#x8FC7;&#x952E;&#x83B7;&#x53D6;&#x503C; String className = pro.getProperty(&quot;className&quot;); String methodName = pro.getProperty(&quot;methodName&quot;); // &#x53CD;&#x5C04;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7C7B;&#x7684;class&#x6587;&#x4EF6;&#x5BF9;&#x8C61; Class c = Class.forName(className); Object obj = c.newInstance(); // &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5;&#x540D; Method method = c.getMethod(methodName); method.invoke(obj); }} &#x914D;&#x7F6E;&#x6587;&#x4EF6;123456# className=cn.cuzz.Student# methodName=studyclassName=cn.cuzz.TeachermethodName=teach# className=cn.cuzz.Worker# methodName=work]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注解驱动开发（四）]]></title>
    <url>%2F2019%2F02%2F10%2FSpring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[AOP&#x9762;&#x5411;&#x5207;&#x9762;&#x7F16;&#x7A0B;AOP&#xFF08;Aspect Oriented Programming&#xFF09;&#xFF0C;&#x5373;&#x9762;&#x5411;&#x5207;&#x9762;&#x7F16;&#x7A0B;&#xFF0C;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;OOP&#xFF08;Object Oriented Programming&#xFF0C;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#xFF09;&#x7684;&#x8865;&#x5145;&#x548C;&#x5B8C;&#x5584;&#x3002;OOP&#x5F15;&#x5165;&#x5C01;&#x88C5;&#x3001;&#x7EE7;&#x627F;&#x3001;&#x591A;&#x6001;&#x7B49;&#x6982;&#x5FF5;&#x6765;&#x5EFA;&#x7ACB;&#x4E00;&#x79CD;&#x5BF9;&#x8C61;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x4E8E;&#x6A21;&#x62DF;&#x516C;&#x5171;&#x884C;&#x4E3A;&#x7684;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x3002;&#x4E0D;&#x8FC7;OOP&#x5141;&#x8BB8;&#x5F00;&#x53D1;&#x8005;&#x5B9A;&#x4E49;&#x7EB5;&#x5411;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x9002;&#x5408;&#x5B9A;&#x4E49;&#x6A2A;&#x5411;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x4F8B;&#x5982;&#x65E5;&#x5FD7;&#x529F;&#x80FD;&#x3002;&#x65E5;&#x5FD7;&#x4EE3;&#x7801;&#x5F80;&#x5F80;&#x6A2A;&#x5411;&#x5730;&#x6563;&#x5E03;&#x5728;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x5C42;&#x6B21;&#x4E2D;&#xFF0C;&#x800C;&#x4E0E;&#x5B83;&#x5BF9;&#x5E94;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x6838;&#x5FC3;&#x529F;&#x80FD;&#x6BEB;&#x65E0;&#x5173;&#x7CFB;&#x5BF9;&#x4E8E;&#x5176;&#x4ED6;&#x7C7B;&#x578B;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5982;&#x5B89;&#x5168;&#x6027;&#x3001;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x548C;&#x900F;&#x660E;&#x7684;&#x6301;&#x7EED;&#x6027;&#x4E5F;&#x90FD;&#x662F;&#x5982;&#x6B64;&#xFF0C;&#x8FD9;&#x79CD;&#x6563;&#x5E03;&#x5728;&#x5404;&#x5904;&#x7684;&#x65E0;&#x5173;&#x7684;&#x4EE3;&#x7801;&#x88AB;&#x79F0;&#x4E3A;&#x6A2A;&#x5207;&#xFF08;cross cutting&#xFF09;&#xFF0C;&#x5728;OOP&#x8BBE;&#x8BA1;&#x4E2D;&#xFF0C;&#x5B83;&#x5BFC;&#x81F4;&#x4E86;&#x5927;&#x91CF;&#x4EE3;&#x7801;&#x7684;&#x91CD;&#x590D;&#xFF0C;&#x800C;&#x4E0D;&#x5229;&#x4E8E;&#x5404;&#x4E2A;&#x6A21;&#x5757;&#x7684;&#x91CD;&#x7528;&#x3002; &#x5E95;&#x5C42;&#x5B9E;&#x73B0;Spring &#x7684; AOP &#x7684;&#x5E95;&#x5C42;&#x7528;&#x5230;&#x4E24;&#x79CD;&#x4EE3;&#x7406;&#x673A;&#x5236;&#xFF1A; JDK &#x7684;&#x52A8;&#x6001;&#x4EE3;&#x7406; &#xFF1A;&#x7C7B;&#x5FC5;&#x987B;&#x5B9E;&#x73B0;&#x63A5;&#x53E3;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x9488;&#x5BF9;&#x5B9E;&#x73B0;&#x4E86;&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x4EA7;&#x751F;&#x4EE3;&#x7406;. Cglib &#x7684;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#xFF1A;&#x9488;&#x5BF9;&#x6CA1;&#x6709;&#x5B9E;&#x73B0;&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x4EA7;&#x751F;&#x4EE3;&#x7406;&#xFF0C;&#x5E94;&#x7528;&#x7684;&#x662F;&#x5E95;&#x5C42;&#x7684;&#x5B57;&#x8282;&#x7801;&#x589E;&#x5F3A;&#x7684;&#x6280;&#x672F;&#x751F;&#x6210;&#x5F53;&#x524D;&#x7C7B;&#x7684;&#x5B50;&#x7C7B;&#x5BF9;&#x8C61; JDK &#x7684;&#x52A8;&#x6001;&#x4EE3;&#x7406; UserService&#x63A5;&#x53E3;&#xFF0C;&#x5B9E;&#x73B0;&#x589E;&#x5220;&#x6539;&#x67E5;&#x7684;&#x529F;&#x80FD; 12345678package com.cuzz.service;public interface UserService { void add(); void delete(); void update(); void get();} UserService&#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x73B0;&#x7684;&#x7C7B; 12345678910111213141516171819202122public class UserServiceImpl implements UserService { @Override public void add() { System.out.println(&quot;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;user&quot;); } @Override public void delete() { System.out.println(&quot;&#x5220;&#x9664;&#x4E00;&#x4E2A;user&quot;); } @Override public void update() { System.out.println(&quot;&#x66F4;&#x65B0;&#x4E00;&#x4E2A;user&quot;); } @Override public void get() { System.out.println(&quot;&#x67E5;&#x8BE2;&#x4E00;&#x4E2A;user&quot;); }} &#x5B9E;&#x73B0;&#x52A8;&#x6001;&#x4EE3;&#x7406; 123456789101112131415161718192021222324252627282930313233package com.cuzz.service;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class UserServiceProxyFactory implements InvocationHandler{ private UserService us; public UserServiceProxyFactory(UserService us) { super(); this.us = us; } // &#x83B7;&#x5F97;&#x52A8;&#x6001;&#x4EE3;&#x7406; public UserService getUserServiceProxy() { // &#x751F;&#x6210;&#x52A8;&#x6001;&#x4EE3;&#x7406; UserService usProxy = (UserService) Proxy.newProxyInstance(UserServiceProxyFactory.class.getClassLoader(), UserServiceImpl.class.getInterfaces(), this); // &#x8FD9;&#x4E2A; this &#x5C31;&#x662F;&#x5B9E;&#x73B0; InvocationHandler &#x7684;&#x5BF9;&#x8C61; return usProxy; } @Override public Object invoke(Object arg0, Method method, Object[] arg2) throws Throwable { System.out.println(&quot;&#x6253;&#x5F00;&#x4E8B;&#x52A1;!&quot;); Object invoke = method.invoke(us, arg2); System.out.println(&quot;&#x63D0;&#x4EA4;&#x4E8B;&#x52A1;!&quot;); return invoke; }} &#x6D4B;&#x8BD5; 123456789public class TestDemo { @Test public void test01(){ UserService us = new UserServiceImpl(); UserServiceProxyFactory factory = new UserServiceProxyFactory(us); UserService usProxy = factory.getUserServiceProxy(); usProxy.add(); }} &#x8F93;&#x51FA; 123&#x6253;&#x5F00;&#x4E8B;&#x52A1;!&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;user&#x63D0;&#x4EA4;&#x4E8B;&#x52A1;! Cglib &#x7684;&#x52A8;&#x6001;&#x4EE3;&#x7406; Cglib &#x7684;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x7684;&#x4EE3;&#x7801;&#x5B9E;&#x73B0; 123456789101112131415161718192021222324252627282930313233package com.cuzz.service;import java.lang.reflect.Method;import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;public class UserServiceProxyFactory2 implements MethodInterceptor { public UserService getUserServiceProxy(){ // &#x5E2E;&#x6211;&#x4EEC;&#x751F;&#x6210;&#x4EE3;&#x7406;&#x5BF9;&#x8C61; Enhancer en = new Enhancer(); // &#x8BBE;&#x7F6E;&#x5BF9;&#x8C01;&#x8FDB;&#x884C;&#x4EE3;&#x7406; en.setSuperclass(UserServiceImpl.class); // &#x4EE3;&#x7406;&#x8981;&#x505A;&#x4EC0;&#x4E48; en.setCallback(this); // &#x521B;&#x5EFA;&#x4EE3;&#x7406;&#x5BF9;&#x8C61; UserService us = (UserService) en.create(); return us; } @Override public Object intercept(Object prxoyobj, Method method, Object[] arg, MethodProxy methodProxy) throws Throwable { // &#x6253;&#x5F00;&#x4E8B;&#x52A1; System.out.println(&quot;&#x6253;&#x5F00;&#x4E8B;&#x52A1;!&quot;); // &#x8C03;&#x7528;&#x539F;&#x6709;&#x65B9;&#x6CD5; Object returnValue = methodProxy.invokeSuper(prxoyobj, arg); // &#x63D0;&#x4EA4;&#x4E8B;&#x52A1; System.out.println(&quot;&#x63D0;&#x4EA4;&#x4E8B;&#x52A1;!&quot;); return returnValue; }} &#x6D4B;&#x8BD5; 123456@Testpublic void test02() { UserServiceProxyFactory2 factory = new UserServiceProxyFactory2(); UserService usProxy = factory.getUserServiceProxy(); usProxy.add();} Spring&#x7684;AOP&#x5F00;&#x53D1;(&#x57FA;&#x4E8E;AspectJ)AOP&#x7684;&#x5F00;&#x53D1;&#x4E2D;&#x7684;&#x76F8;&#x5173;&#x672F;&#x8BED;&#xFF1A; Joinpoint(&#x8FDE;&#x63A5;&#x70B9;)&#xFF1A;&#x6240;&#x8C13;&#x8FDE;&#x63A5;&#x70B9;&#x662F;&#x6307;&#x90A3;&#x4E9B;&#x88AB;&#x62E6;&#x622A;&#x5230;&#x7684;&#x70B9;&#xFF0C;&#x5728; spring &#x4E2D;&#x8FD9;&#x4E9B;&#x70B9;&#x6307;&#x7684;&#x662F;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A; spring &#x53EA;&#x652F;&#x6301;&#x65B9;&#x6CD5;&#x7C7B;&#x578B;&#x7684;&#x8FDE;&#x63A5;&#x70B9; Pointcut(&#x5207;&#x5165;&#x70B9;)&#xFF1A;&#x6240;&#x8C13;&#x5207;&#x5165;&#x70B9;&#x662F;&#x6307;&#x6211;&#x4EEC;&#x8981;&#x5BF9;&#x54EA;&#x4E9B; Joinpoint &#x8FDB;&#x884C;&#x62E6;&#x622A;&#x7684;&#x5B9A;&#x4E49; Advice(&#x901A;&#x77E5;/&#x589E;&#x5F3A;)&#xFF1A;&#x6240;&#x8C13;&#x901A;&#x77E5;&#x662F;&#x6307;&#x62E6;&#x622A;&#x5230; Joinpoint &#x4E4B;&#x540E;&#x6240;&#x8981;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x5C31;&#x662F;&#x901A;&#x77E5;.&#x901A;&#x77E5;&#x5206;&#x4E3A;&#x524D;&#x7F6E;&#x901A;&#x77E5;,&#x540E;&#x7F6E;&#x901A;&#x77E5;,&#x5F02;&#x5E38;&#x901A;&#x77E5;,&#x6700;&#x7EC8;&#x901A;&#x77E5;,&#x73AF;&#x7ED5;&#x901A;&#x77E5;(&#x5207;&#x9762;&#x8981;&#x5B8C;&#x6210;&#x7684;&#x529F;&#x80FD;) Introduction(&#x5F15;&#x4ECB;)&#xFF1A;&#x5F15;&#x4ECB;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x901A;&#x77E5;&#x5728;&#x4E0D;&#x4FEE;&#x6539;&#x7C7B;&#x4EE3;&#x7801;&#x7684;&#x524D;&#x63D0;&#x4E0B;, Introduction &#x53EF;&#x4EE5;&#x5728;&#x8FD0;&#x884C;&#x671F;&#x4E3A;&#x7C7B;&#x52A8;&#x6001;&#x5730;&#x6DFB;&#x52A0;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5;&#x6216; Field Target(&#x76EE;&#x6807;&#x5BF9;&#x8C61;)&#xFF1A;&#x4EE3;&#x7406;&#x7684;&#x76EE;&#x6807;&#x5BF9;&#x8C61; Weaving(&#x7EC7;&#x5165;)&#xFF1A;&#x662F;&#x6307;&#x628A;&#x589E;&#x5F3A;&#x5E94;&#x7528;&#x5230;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x6765;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x4EE3;&#x7406;&#x5BF9;&#x8C61;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;spring &#x91C7;&#x7528;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x7EC7;&#x5165;&#xFF0C;&#x800C; AspectJ &#x91C7;&#x7528;&#x7F16;&#x8BD1;&#x671F;&#x7EC7;&#x5165;&#x548C;&#x7C7B;&#x88C5;&#x5728;&#x671F;&#x7EC7;&#x5165; Proxy&#xFF08;&#x4EE3;&#x7406;&#xFF09;&#xFF1A;&#x4E00;&#x4E2A;&#x7C7B;&#x88AB; AOP &#x7EC7;&#x5165;&#x589E;&#x5F3A;&#x540E;&#xFF0C;&#x5C31;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x7ED3;&#x679C;&#x4EE3;&#x7406;&#x7C7B; Aspect(&#x5207;&#x9762;)&#xFF1A;&#x662F;&#x5207;&#x5165;&#x70B9;&#x548C;&#x901A;&#x77E5;&#xFF08;&#x5F15;&#x4ECB;&#xFF09;&#x7684;&#x7ED3;&#x5408; &#x901A;&#x77E5;&#x7C7B;&#x578B; &#x524D;&#x7F6E;&#x901A;&#x77E5; &#xFF1A;&#x5728;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x4E4B;&#x524D;&#x6267;&#x884C; &#x540E;&#x7F6E;&#x901A;&#x77E5; &#xFF1A;&#x5728;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x4E4B;&#x540E;&#x6267;&#x884C; &#x73AF;&#x7ED5;&#x901A;&#x77E5; &#xFF1A;&#x5728;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x524D;&#x548C;&#x6267;&#x884C;&#x540E;&#x6267;&#x884C; &#x5F02;&#x5E38;&#x629B;&#x51FA;&#x901A;&#x77E5;&#xFF1A;&#x5728;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x7684;&#x65F6;&#x5019;&#x6267;&#x884C; &#x6700;&#x7EC8;&#x901A;&#x77E5; &#xFF1A;&#x65E0;&#x8BBA;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x662F;&#x5426;&#x51FA;&#x73B0;&#x5F02;&#x5E38; &#x6700;&#x7EC8;&#x901A;&#x77E5;&#x90FD;&#x4F1A;&#x6267;&#x884C; &#x4EE3;&#x7801;&#x6F14;&#x793A;&#x901A;&#x77E5;&#x7C7B;&#xFF0C;&#x7ED9;&#x5207;&#x9762;&#x7684;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x6807;&#x6CE8;&#x4F55;&#x65F6;&#x5730;&#x8FD0;&#x884C;&#xFF0C;&#x5FC5;&#x987B;&#x544A;&#x8BC9; Spring &#x54EA;&#x4E2A;&#x7C7B;&#x662F;&#x5207;&#x9762;&#x7C7B;&#xFF0C;&#x6DFB;&#x52A0;&#x6CE8;&#x89E3; @Aspect 12345678910111213141516171819202122232425262728293031323334@Aspect // &#x8868;&#x793A;&#x8BE5;&#x7C7B;&#x662F;&#x4E00;&#x4E2A;&#x901A;&#x77E5;&#x7C7B;public class MyAdvice { // &#x524D;&#x7F6E;&#x901A;&#x77E5; @Before(&quot;execution(* com.cuzz.service..*ServiceImpl.*(..))&quot;) public void before(){ System.out.println(&quot;&#x8FD9;&#x662F;&#x524D;&#x7F6E;&#x901A;&#x77E5;!!&quot;); } // &#x540E;&#x7F6E;&#x901A;&#x77E5; @AfterReturning(&quot;execution(* com.cuzz.service..*ServiceImpl.*(..))&quot;) public void afterReturning(){ System.out.println(&quot;&#x8FD9;&#x662F;&#x540E;&#x7F6E;&#x901A;&#x77E5;(&#x5982;&#x679C;&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x4E0D;&#x4F1A;&#x8C03;&#x7528;)!!&quot;); } // &#x73AF;&#x7ED5;&#x901A;&#x77E5; @Around(&quot;execution(* com.cuzz.service..*ServiceImpl.*(..))&quot;) public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(&quot;&#x8FD9;&#x662F;&#x73AF;&#x7ED5;&#x901A;&#x77E5;&#x4E4B;&#x524D;&#x7684;&#x90E8;&#x5206;!!&quot;); // &#x8C03;&#x7528;&#x76EE;&#x6807;&#x65B9;&#x6CD5; Object proceed = pjp.proceed(); System.out.println(&quot;&#x8FD9;&#x662F;&#x73AF;&#x7ED5;&#x901A;&#x77E5;&#x4E4B;&#x540E;&#x7684;&#x90E8;&#x5206;!!&quot;); return proceed; } // &#x5F02;&#x5E38;&#x901A;&#x77E5; @AfterThrowing(&quot;execution(* com.cuzz.service..*ServiceImpl.*(..))&quot;) public void afterException(){ System.out.println(&quot;&#x51FA;&#x4E8B;&#x5566;!&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x4E86;!!&quot;); } // &#x540E;&#x7F6E;&#x901A;&#x77E5; @After(&quot;execution(* com.cuzz.service..*ServiceImpl.*(..))&quot;) public void after(){ System.out.println(&quot;&#x8FD9;&#x662F;&#x540E;&#x7F6E;&#x901A;&#x77E5;(&#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x4E5F;&#x4F1A;&#x8C03;&#x7528;)!!&quot;); }} &#x914D;&#x7F6E;&#x7C7B;&#xFF0C;&#x5C06;&#x5207;&#x9762;&#x7C7B;&#x548C;&#x4E1A;&#x52A1;&#x903B;&#x8F91;&#x7C7B;&#x90FD;&#x52A0;&#x5165;&#x5230;&#x5BB9;&#x5668;&#x4E2D;&#xFF0C;&#x7ED9;&#x914D;&#x7F6E;&#x7C7B;&#x52A0; @EnableAspectJAutoProxy &#x6CE8;&#x89E3; 12345678910111213141516171819/** * @Author: cuzz * @Date: 2019/2/10 20:43 * @Description: */@Configuration@EnableAspectJAutoProxypublic class MainConfigOfAOP { @Bean public UserService userService() { return new UserServiceImpl(); } @Bean public MyAdvice myAdvice() { return new MyAdvice(); }} &#x6D4B;&#x8BD5; 12345678910@Testpublic void test03() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfigOfAOP.class); UserService userService = (UserService) applicationContext.getBean(&quot;userService&quot;); userService.add(); userService.delete(); userService.update(); userService.get();} &#x5982;&#x679C;&#x62A5;&#x9519;&#x6DFB;&#x52A0;&#x4F9D;&#x8D56; 12345&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.8.4&lt;/version&gt; &lt;/dependency&gt;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>注解</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Java虚拟机（三）]]></title>
    <url>%2F2019%2F02%2F06%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Java &#x5B57;&#x8282;&#x7801;&#x4EE3;&#x7801;&#x7F16;&#x8BD1;&#x7ED3;&#x679C;&#x4ECE;&#x672C;&#x5730;&#x673A;&#x5668;&#x7801;&#x8F6C;&#x53D8;&#x4E3A;&#x5B57;&#x8282;&#x7801;&#xFF0C;&#x662F;&#x5B58;&#x50A8;&#x683C;&#x5F0F;&#x53D1;&#x5C55;&#x7684;&#x4E00;&#x5C0F;&#x6B65;&#xFF0C;&#x786E;&#x662F;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x53D1;&#x5C55;&#x7684;&#x4E00;&#x5927;&#x6B65;&#x3002; &#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x5256;&#x6790;&#x6211;&#x4EEC;&#x4ECE;&#x4E00;&#x6BB5;&#x7B80;&#x5355;&#x7684;&#x4EE3;&#x7801;&#x6765;&#x5165;&#x624B; 123456789101112public class MyTest01 { private int a = 0; public int getA() { return a; } public void setA(int a) { this.a = a; }} &#x6211;&#x8981;&#x8981;&#x770B;&#x4E00;&#x4E0B; java &#x6587;&#x4EF6;&#x5BF9;&#x5E94;&#x7684; class &#x6587;&#x4EF6;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5B9A;&#x4F4D;&#x5230;&#x5DE5;&#x7A0B;&#x7684; out\production\classes &#x4E0B;&#x8FB9;&#x6267;&#x884C;&#xFF1A; javap -c com.cuzz.jvm.bytecode.Mytest01 12345678910111213141516171819202122232425&#x8B66;&#x544A;: &#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;com.cuzz.jvm.bytecode.Mytest01&#x5305;&#x542B;com.cuzz.jvm.bytecode.MyTest01Compiled from &quot;MyTest01.java&quot;public class com.cuzz.jvm.bytecode.MyTest01 { public com.cuzz.jvm.bytecode.MyTest01(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: aload_0 5: iconst_0 6: putfield #2 // Field a:I 9: return public int getA(); Code: 0: aload_0 1: getfield #2 // Field a:I 4: ireturn public void setA(int); Code: 0: aload_0 1: iload_1 2: putfield #2 // Field a:I 5: return} &#x6211;&#x4EEC;&#x5982;&#x679C;&#x9700;&#x8981;&#x83B7;&#x5F97;&#x66F4;&#x591A;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A; javap -verbose com.cuzz.jvm.bytecode.Mytest01 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&#x8B66;&#x544A;: &#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;com.cuzz.jvm.bytecode.Mytest01&#x5305;&#x542B;com.cuzz.jvm.bytecode.MyTest01Classfile /E:/project/learn-demo/demo-10-jvm-lecture/out/production/classes/com/cuzz/jvm/bytecode/Mytest01.class Last modified 2019-2-3; size 492 bytes MD5 checksum cceeac51ae7b6fc46c60faf834de5932 Compiled from &quot;MyTest01.java&quot;public class com.cuzz.jvm.bytecode.MyTest01 minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #4.#20 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Fieldref #3.#21 // com/cuzz/jvm/bytecode/MyTest01.a:I #3 = Class #22 // com/cuzz/jvm/bytecode/MyTest01 #4 = Class #23 // java/lang/Object #5 = Utf8 a #6 = Utf8 I #7 = Utf8 &lt;init&gt; #8 = Utf8 ()V #9 = Utf8 Code #10 = Utf8 LineNumberTable #11 = Utf8 LocalVariableTable #12 = Utf8 this #13 = Utf8 Lcom/cuzz/jvm/bytecode/MyTest01; #14 = Utf8 getA #15 = Utf8 ()I #16 = Utf8 setA #17 = Utf8 (I)V #18 = Utf8 SourceFile #19 = Utf8 MyTest01.java #20 = NameAndType #7:#8 // &quot;&lt;init&gt;&quot;:()V #21 = NameAndType #5:#6 // a:I #22 = Utf8 com/cuzz/jvm/bytecode/MyTest01 #23 = Utf8 java/lang/Object{ public com.cuzz.jvm.bytecode.MyTest01(); descriptor: ()V flags: ACC_PUBLIC Code: stack=2, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: aload_0 5: iconst_0 6: putfield #2 // Field a:I 9: return LineNumberTable: line 8: 0 line 10: 4 LocalVariableTable: Start Length Slot Name Signature 0 10 0 this Lcom/cuzz/jvm/bytecode/MyTest01; public int getA(); descriptor: ()I flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: getfield #2 // Field a:I 4: ireturn LineNumberTable: line 13: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcom/cuzz/jvm/bytecode/MyTest01; public void setA(int); descriptor: (I)V flags: ACC_PUBLIC Code: stack=2, locals=2, args_size=2 0: aload_0 1: iload_1 2: putfield #2 // Field a:I 5: return LineNumberTable: line 17: 0 line 18: 5 LocalVariableTable: Start Length Slot Name Signature 0 6 0 this Lcom/cuzz/jvm/bytecode/MyTest01; 0 6 1 a I}SourceFile: &quot;MyTest01.java&quot; &#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x67E5;&#x770B;&#x5668;&#x67E5;&#x770B;class&#x6587;&#x4EF6;&#x7684;16&#x8FDB;&#x5236;&#x4FE1;&#x606F;&#xFF08;winhex&#x4E0B;&#x8F7D;&#xFF09;&#xFF1A; /1549161558276.png) 16&#x6587;&#x4EF6;&#x67E5;&#x770B;&#x5668;&#x91CC;&#x8FB9;&#x7B2C;&#x4E00;&#x884C;&#x7684;CA &#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x5BB9;&#x91CF;&#xFF08;8&#x4F4D;bit&#xFF09;: &#x4F7F;&#x7528; javap -verbos &#x547D;&#x4EE4;&#x5206;&#x6790;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x65F6;&#xFF0C;&#x5C06;&#x4F1A;&#x5206;&#x6790;&#x8BE5;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x7684;&#x9B54;&#x6570;&#x3001;&#x7248;&#x672C;&#x53F7;&#x3001;&#x5E38;&#x91CF;&#x6C60;&#x3001;&#x7C7B;&#x4FE1;&#x606F;&#x3001;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4FE1;&#x606F;&#x3001;&#x7C7B;&#x53D8;&#x91CF;&#x4E0E;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7B49;&#x4FE1;&#x606F;&#x3002; &#x9B54;&#x6570;&#xFF1A;&#x6240;&#x6709;&#x7684;.class&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x7684;&#x524D;4&#x4E2A;&#x5B57;&#x8282;&#x90FD;&#x662F;&#x9B54;&#x6570;&#xFF0C;&#x9B54;&#x6570;&#x503C;&#x4E3A;&#x56FA;&#x5B9A;&#x503C;&#xFF1A;0xCAFEBABE (&#x8A79;&#x59C6;&#x65AF;.&#x9AD8;&#x65AF;&#x6797;&#x8BBE;&#x8BA1;&#x7684;&#xFF0C;&#x8574;&#x610F;&#xFF1A;&#x5496;&#x5561;&#x5B9D;&#x8D1D;&#xFF0C;java &#x7684;&#x56FE;&#x6807;&#x662F;&#x5496;&#x5561;&#x3002; &#x9B54;&#x6570;&#x4E4B;&#x540E;&#x7684;4&#x4E2A;&#x5B57;&#x8282;&#x4E3A;&#x7248;&#x672C;&#x4FE1;&#x606F;&#xFF0C;&#x524D;2&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A; minor versio&#xFF08;&#x6B21;&#x7248;&#x672C;&#x53F7;&#xFF09;&#xFF0C;&#x540E;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A; major version&#xFF08;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#xFF09;&#x3002; &#x8FD9;&#x91CC;&#x7684;&#x7248;&#x672C;&#x53F7;&#x4E3A; 00 00 00 34&#xFF0C;&#x6362;&#x7B97;&#x6210;&#x5341;&#x8FDB;&#x5236;&#xFF0C;&#x8868;&#x793A;&#x6B21;&#x7248;&#x672C;&#x53F7;&#x4E3A;0&#xFF0C;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#x4E3A;52&#x3002; &#x5B57;&#x8282;&#x5E38;&#x91CF;&#x6C60;&#x5256;&#x6790;&#x5E38;&#x91CF;&#x6C60;&#xFF08;constant pool&#xFF09;&#xFF1A;&#x7D27;&#x63A5;&#x7740;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#x4E4B;&#x540E;&#x7684;&#x5C31;&#x662F;&#x5E38;&#x91CF;&#x6C60;&#x5165;&#x53E3;&#x3002;&#x4E00;&#x4E2A; Java &#x7C7B;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x5F88;&#x591A;&#x4FE1;&#x606F;&#x90FD;&#x662F;&#x7531;&#x5E38;&#x91CF;&#x6C60;&#x6765;&#x7EF4;&#x62A4;&#x548C;&#x63CF;&#x8FF0;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5E38;&#x91CF;&#x6C60;&#x770B;&#x4F5C;&#x662F; Class &#x6587;&#x4EF6;&#x7684;&#x8D44;&#x6E90;&#x4ED3;&#x5E93;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4; Java &#x7C7B;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x65B9;&#x6CD5;&#x4E0E;&#x53D8;&#x91CF;&#x4FE1;&#x606F;&#xFF0C;&#x90FD;&#x662F;&#x5B58;&#x50A8;&#x5728;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x3002;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x7684;&#x4E3B;&#x8981;&#x50A8;&#x5B58;&#x4E24;&#x7C7B;&#x5E38;&#x91CF;&#xFF1A;&#x5B57;&#x9762;&#x91CF;&#x4E0E;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x3002;&#x5B57;&#x9762;&#x91CF;&#x5982;&#x6587;&#x672C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;Java &#x4E2D;&#x58F0;&#x660E;&#x4E3A; final &#x7684;&#x5E38;&#x91CF;&#x503C;&#x7B49;&#xFF0C;&#x800C;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x5982;&#x7C7B;&#x548C;&#x63A5;&#x53E3;&#x7684;&#x5168;&#x5C40;&#x9650;&#x5B9A;&#x540D;&#xFF0C;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x79F0;&#x548C;&#x63CF;&#x8FF0;&#x7B26;&#xFF0C;&#x65B9;&#x6CD5;&#x7684;&#x540D;&#x79F0;&#x548C;&#x63CF;&#x8FF0;&#x7B26;&#x7B49;&#x3002; &#x5E38;&#x91CF;&#x6C60;&#x7684;&#x603B;&#x4F53;&#x7ED3;&#x6784;&#xFF1A;Java &#x7C7B;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x5E38;&#x91CF;&#x6C60;&#x4E3B;&#x8981;&#x7531;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x91CF;&#x4E0E;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x7EC4;&#xFF08;&#x5E38;&#x91CF;&#x8868;&#xFF09;&#x8FD9;&#x4E24;&#x90E8;&#x5206;&#x5171;&#x540C;&#x6784;&#x6210;&#x3002;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x91CF;&#x7D27;&#x8DDF;&#x5728;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#x540E;&#x9762;&#xFF0C;&#x5360;&#x636E; 2 &#x4E2A;&#x5B57;&#x8282;&#xFF1B;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x7EC4;&#x7D27;&#x8DDF;&#x5728;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x91CF;&#x4E4B;&#x540E;&#x3002;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x7EC4;&#x4E0E;&#x4E00;&#x822C;&#x7684;&#x6570;&#x7EC4;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x7EC4;&#x4E2D;&#x4E0D;&#x540C;&#x7684;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x3001;&#x7ED3;&#x6784;&#x90FD;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x957F;&#x5EA6;&#x5F53;&#x7136;&#x4E5F;&#x5C31;&#x4E0D;&#x540C;&#xFF1B;&#x4F46;&#x662F;&#xFF0C;&#x6BCF;&#x4E00;&#x79CD;&#x5143;&#x7D20;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x90FD;&#x662F;&#x4E00;&#x4E2A; u1 &#x7C7B;&#x578B;&#xFF0C;&#x8BE5;&#x5B57;&#x8282;&#x662F;&#x4E00;&#x4E2A;&#x6807;&#x5FD7;&#x4F4D;&#xFF0C;&#x5360;&#x636E; 1 &#x4E2A;&#x5B57;&#x8282;&#x3002;JVM &#x5728;&#x89E3;&#x6790;&#x5E38;&#x91CF;&#x6C60;&#x65F6;&#xFF0C;&#x4F1A;&#x6839;&#x636E;&#x8FD9;&#x4E2A; u1 &#x7C7B;&#x578B;&#x6765;&#x83B7;&#x53D6;&#x5143;&#x7D20;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x3002; &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x7EC4;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570; = &#x5E38;&#x91CF;&#x6C60;&#x6570; - 1 &#xFF08;&#x5176;&#x4E2D;0&#x6682;&#x65F6;&#x4E0D;&#x4F7F;&#x7528;&#xFF09;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x662F; 00 18 &#x8F6C;&#x5316;&#x4E3A;&#x5341;&#x8FDB;&#x5236;&#x4E3A;24&#x4E2A;&#x5E38;&#x91CF;&#xFF0C;&#x800C;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x53EA;&#x6709;23&#x4E2A;&#x3002;&#x76EE;&#x7684;&#x662F;&#x6EE1;&#x8DB3;&#x67D0;&#x4E9B;&#x5E38;&#x91CF;&#x6C60;&#x7D22;&#x5F15;&#x503C;&#x7684;&#x6570;&#x636E;&#x5728;&#x7279;&#x5B9A;&#x60C5;&#x51B5;&#x4E0B;&#x9700;&#x8981;&#x8868;&#x8FBE;&#x201C;&#x4E0D;&#x5F15;&#x7528;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x201D;&#x7684;&#x542B;&#x4E49;&#xFF1B;&#x6839;&#x672C;&#x539F;&#x56E0;&#x5728;&#x4E8E;&#xFF0C;&#x7D22;&#x5F15; 0 &#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#xFF08;&#x4FDD;&#x7559;&#x5E38;&#x91CF;&#xFF09;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x5B83;&#x4E0D;&#x4F4D;&#x4E8E;&#x5E38;&#x91CF;&#x8868;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E38;&#x91CF;&#x5C31;&#x5BF9;&#x5E94; null &#x503C;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5E38;&#x91CF;&#x6C60;&#x7684;&#x7D22;&#x5F15;&#x4ECE; 1 &#x5F00;&#x59CB;&#x800C;&#x4E0D;&#x662F; 0 &#x3002; 123456789101112131415161718192021222324Constant pool: #1 = Methodref #4.#20 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Fieldref #3.#21 // com/cuzz/jvm/bytecode/MyTest01.a:I #3 = Class #22 // com/cuzz/jvm/bytecode/MyTest01 #4 = Class #23 // java/lang/Object #5 = Utf8 a #6 = Utf8 I #7 = Utf8 &lt;init&gt; #8 = Utf8 ()V #9 = Utf8 Code #10 = Utf8 LineNumberTable #11 = Utf8 LocalVariableTable #12 = Utf8 this #13 = Utf8 Lcom/cuzz/jvm/bytecode/MyTest01; #14 = Utf8 getA #15 = Utf8 ()I #16 = Utf8 setA #17 = Utf8 (I)V #18 = Utf8 SourceFile #19 = Utf8 MyTest01.java #20 = NameAndType #7:#8 // &quot;&lt;init&gt;&quot;:()V #21 = NameAndType #5:#6 // a:I #22 = Utf8 com/cuzz/jvm/bytecode/MyTest01 #23 = Utf8 java/lang/Object Class &#x6587;&#x4EF6;&#x7ED3;&#x6784;&#x4E2D;&#x5E38;&#x91CF;&#x6C60;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x7ED3;&#x6784;&#x8868; /c717816f04e3fee14c9745e06356247a.jpg) &#x5728; JVM &#x89C4;&#x8303;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;/&#x5B57;&#x6BB5;&#x90FD;&#x6709;&#x63CF;&#x8FF0;&#x4FE1;&#x606F;&#xFF0C;&#x63CF;&#x8FF0;&#x4FE1;&#x606F;&#x4E3B;&#x8981;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x63CF;&#x8FF0;&#x5B57;&#x6BB5;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3001;&#x65B9;&#x6CD5;&#x7684;&#x53C2;&#x6570;&#x5217;&#x8868;&#xFF08;&#x5305;&#x62EC;&#x6570;&#x91CF;&#x3001;&#x7C7B;&#x578B;&#x4E0E;&#x987A;&#x5E8F;&#xFF09;&#x4E0E;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x6839;&#x636E;&#x63CF;&#x8FF0;&#x7B26;&#x89C4;&#x5219;&#xFF0C;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x548C;&#x4EE3;&#x8868;&#x65E0;&#x8FD4;&#x56DE;&#x7684; void &#x7C7B;&#x578B;&#x90FD;&#x662F;&#x7528;&#x4E00;&#x4E2A;&#x5927;&#x5199;&#x5B57;&#x7B26;&#x6765;&#x8868;&#x793A;&#xFF0C;&#x5BF9;&#x8C61;&#x7C7B;&#x578B;&#x5219;&#x4F7F;&#x7528;&#x5B57;&#x7B26; L &#x52A0;&#x5BF9;&#x8C61;&#x7684;&#x5168;&#x9650;&#x5B9A;&#x540D;&#x79F0;&#x6765;&#x8868;&#x793A;&#x3002;&#x4E3A;&#x4E86;&#x538B;&#x7F29;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x7684;&#x4F53;&#x79EF;&#xFF0C;&#x5BF9;&#x4E8E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;JVM &#x90FD;&#x53EA;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x6765;&#x8868;&#x793A;&#xFF0C;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A;B - byte&#xFF0C;C - char&#xFF0C;D - double&#xFF0C;F - float&#xFF0C;I - int&#xFF0C;J - long&#xFF0C;S - short&#xFF0C;Z - boolean&#xFF0C;V - void&#xFF0C;L - &#x5BF9;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x5982; Ljava/lang/String;&#x3002; &#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x7C7B;&#x578B;&#x6765;&#x8BF4;&#xFF0C;&#x6CA1;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x4F7F;&#x7528;&#x524D;&#x7F6E; [ &#x6765;&#x8868;&#x793A;&#xFF0C;&#x5982; int [] &#x88AB;&#x8BB0;&#x5F55;&#x4E3A; [I &#xFF0C;String[][] &#x88AB;&#x8BB0;&#x5F55;&#x4E3A; [[Ljava/lang/String;&#x3002; &#x7528;&#x63CF;&#x8FF0;&#x7B26;&#x63CF;&#x8FF0;&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x6309;&#x7167;&#x5148;&#x53C2;&#x6570;&#x5217;&#x8868;&#xFF0C;&#x540E;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x987A;&#x5E8F;&#x6765;&#x63CF;&#x8FF0;&#x3002;&#x53C2;&#x6570;&#x5217;&#x8868;&#x6309;&#x7167;&#x53C2;&#x6570;&#x7684;&#x4E25;&#x683C;&#x987A;&#x5E8F;&#x653E;&#x5728;&#x4E00;&#x7EC4;&#x62EC;&#x53F7;&#x5185;&#xFF0C;&#x5982;&#x65B9;&#x6CD5;&#xFF1A;String getRealNameByIdAndNickName(int id, String name) &#x7684;&#x63CF;&#x8FF0;&#x7B26;&#x4E3A;&#xFF1A;(I, Ljava/lang/String;) Ljava/lang/String; &#x6211;&#x4EEC;&#x6765;&#x5206;&#x6790;&#x524D;&#x9762;&#x51E0;&#x4E2A;&#x5E38;&#x91CF;&#xFF0C;&#x5982;&#x56FE;&#xFF1A; /1549183205091.png) &#x6211;&#x53CD;&#x7F16;&#x8BD1;&#x51FA;&#x6765;&#x7684;&#x6587;&#x4EF6;&#x5BF9;&#x6BD4;&#xFF1A; 123456789101112131415161718192021222324Constant pool: #1 = Methodref #4.#20 // java/lang/Object.&quot;&lt;init&gt;&quot;:()V #2 = Fieldref #3.#21 // com/cuzz/jvm/bytecode/MyTest01.a:I #3 = Class #22 // com/cuzz/jvm/bytecode/MyTest01 #4 = Class #23 // java/lang/Object #5 = Utf8 a #6 = Utf8 I #7 = Utf8 &lt;init&gt; #8 = Utf8 ()V #9 = Utf8 Code#10 = Utf8 LineNumberTable#11 = Utf8 LocalVariableTable#12 = Utf8 this#13 = Utf8 Lcom/cuzz/jvm/bytecode/MyTest01;#14 = Utf8 getA#15 = Utf8 ()I#16 = Utf8 setA#17 = Utf8 (I)V#18 = Utf8 SourceFile#19 = Utf8 MyTest01.java#20 = NameAndType #7:#8 // &quot;&lt;init&gt;&quot;:()V#21 = NameAndType #5:#6 // a:I#22 = Utf8 com/cuzz/jvm/bytecode/MyTest01#23 = Utf8 java/lang/Object 0A 00 04 00 14&#xFF0C;&#x5982;&#x56FE;&#x4E2D;&#x7684;&#x6807;&#x6CE8;&#x51FA;&#x6765;&#xFF0C;0A &#x5BF9;&#x5E94;&#x503C;&#x4E3A;10&#xFF0C;&#x5728;&#x4E0A;&#x8868;&#x7684;&#x5E38;&#x91CF;&#x4E2D; CONSTANT_Methodref_info &#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x540E;&#x8FB9;&#x7684;2&#x4E2A;&#x5B57;&#x8282; 00 04 &#xFF08;&#x5341;&#x8FDB;&#x5236;4&#xFF09;&#x5C31;&#x662F; U2&#xFF08;&#x7B2C;&#x4E00;&#x4E2A;index&#xFF09;&#xFF0C;&#x5373;&#x6307;&#x5411;&#x58F0;&#x660E;&#x65B9;&#x6CD5;&#x7684;&#x7C7B;&#x63CF;&#x8FF0;&#x7B26; CONSTANT_Class_info &#x7684;&#x7D22;&#x5F15;&#x9879;&#xFF0C;&#x800C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7D22;&#x5F15;&#xFF08;&#x7B2C;&#x4E8C;&#x4E2A;index&#xFF09;00 14&#xFF08;&#x5341;&#x8FDB;&#x5236;20&#xFF09; &#x6307;&#x5411;&#x540D;&#x79F0;&#x53CA;&#x7C7B;&#x578B;&#x63CF;&#x8FF0;&#x7B26; CONSTANT_NameAndType_info &#x7684;&#x7D22;&#x5F15;&#x9879;&#x3002;&#x7C7B;&#x63CF;&#x8FF0;&#x6307;&#x5411; #4 &#xFF0C;#4 &#x53C8;&#x6307;&#x5411; #23&#xFF0C;&#x6240;&#x4EE5;&#x63CF;&#x8FF0;&#x4E3A; java/lang/Object&#xFF0C;&#x800C;&#x540D;&#x79F0;&#x4EE5;&#x53CA;&#x7C7B;&#x578B;&#x63CF;&#x8FF0;&#x7B26;&#x6307;&#x5411; #20&#xFF0C;#20 &#x6709;&#x6307;&#x5411; #7 &#x548C; #8&#xFF0C;&quot;&lt;init&gt;&quot;:()V &#x8868;&#x793A;&#x4E3A;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x3002; 09 00 03 00 15 &#xFF0C;09 &#x662F;&#x6807;&#x5FD7;&#x4F4D;&#x5BF9;&#x7528;&#x7684;&#x662F; CONSTANT_Fieldref_info&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x6307;&#x5411;&#x7684;&#x662F;&#x58F0;&#x660E;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x63CF;&#x8FF0;&#x7B26;&#xFF0C;CONSTANT_Class_info &#x7684;&#x7D22;&#x5F15;&#x9879;&#xFF0C;&#x6839;&#x4E0A;&#x9762;&#x4E00;&#x6837;&#x5206;&#x6790;&#x3002; 07 00 16 &#xFF0C; 00 16 &#x5341;&#x8FDB;&#x5236;&#x662F;22 &#xFF0C;07&#x662F;&#x5E38;&#x91CF; CONSTANT_CLass_info&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;index&#xFF0C;&#x6307;&#x5411;&#x7684;&#x662F;&#x6307;&#x5B9A;&#x6743;&#x9650;&#x5B9A;&#x540D;&#x5E38;&#x91CF;&#x9879;&#x7684;&#x7D22;&#x5F15;&#xFF0C; 00 16 &#x662F;&#x5341;&#x8FDB;&#x5236;22&#x3002; 07 00 17 &#xFF0C;07&#x662F;&#x5E38;&#x91CF; CONSTANT_CLass_info&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;index&#xFF0C;&#x6307;&#x5411;&#x7684;&#x662F;&#x6307;&#x5B9A;&#x6743;&#x9650;&#x5B9A;&#x540D;&#x5E38;&#x91CF;&#x9879;&#x7684;&#x7D22;&#x5F15;&#xFF0C;00 17 &#x5341;&#x8FDB;&#x5236;&#x662F;23&#x3002; 01 00 01 61&#xFF0C;01 &#x662F; CONSTANT_Utf8_info&#xFF0C;&#x540E;&#x9762; 00 01 &#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A;&#x957F;&#x5EA6;&#xFF0C;&#x6700;&#x540E; 61 &#xFF08;&#x5341;&#x8FDB;&#x5236;&#x4E3A;97&#xFF09;&#x7684;&#x8868;&#x793A; ASCII &#x4E2D;&#x5E26;&#x7D22;&#x5F15;&#xFF0C;&#x5728; ASCII &#x4E2D;&#x4E3A;&#x5B57;&#x6BCD; a&#x3002; 01 00 01 &#x4E3A; I&#x3002; &#x7B49;&#x7B49; Java &#x5B57;&#x8282;&#x7801;&#x7ED3;&#x6784;/class-structure.jpg) Class &#x5B57;&#x8282;&#x7801;&#x4E2D;&#x6709;&#x4E24;&#x79CD;&#x6570;&#x636E;&#x7C7B;&#x578B; &#x5B57;&#x8282;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x91CF;&#xFF1A;&#x8FD9;&#x662F;&#x57FA;&#x672C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;&#x5171;&#x7EC6;&#x5206;&#x4E3A; u1&#x3001;u2&#x3001;u4&#x3001;u8 &#x8FD9;&#x56DB;&#x79CD;&#xFF0C;&#x5206;&#x522B;&#x4EE3;&#x8868;&#x8FDE;&#x7EED;&#x7684; 1 &#x4E2A;&#x5B57;&#x8282;&#x3001;2 &#x4E2A;&#x5B57;&#x8282;&#x3001;4 &#x4E2A;&#x5B57;&#x8282;&#x548C;8 &#x4E2A;&#x5B57;&#x8282;&#x3002; &#x8868;&#xFF08;&#x6570;&#x7EC4;&#xFF09;&#xFF1A;&#x8868;&#x793A;&#x6709;&#x591A;&#x4E2A;&#x57FA;&#x672C;&#x6570;&#x636E;&#x6216;&#x5176;&#x4ED6;&#x8868;&#xFF0C;&#x6309;&#x7167;&#x65E2;&#x5B9A;&#x987A;&#x5E8F;&#x7EC4;&#x6210;&#x7684;&#x5927;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5408;&#x3002;&#x8868;&#x793A;&#x6709;&#x7ED3;&#x6784;&#x7684;&#xFF0C;&#x5B83;&#x7684;&#x7ED3;&#x6784;&#x4F53;&#x73B0;&#x5728;&#xFF0C;&#x7EC4;&#x6210;&#x8868;&#x7684;&#x6210;&#x5206;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x987A;&#x5E8F;&#x90FD;&#x5DF2;&#x7ECF;&#x4E25;&#x683C;&#x5B9A;&#x4E49;&#x597D;&#x7684;&#x3002; &#x8BBF;&#x95EE;&#x6807;&#x5FD7;&#x8BBF;&#x95EE;&#x6807;&#x5FD7;&#xFF08;Access_Flag&#xFF09;&#x4FE1;&#x606F;&#x5305;&#x62EC;&#x8BE5; Class &#x6587;&#x4EF6;&#x662F;&#x7C7B;&#x8FD8;&#x662F;&#x63A5;&#x53E3;&#xFF0C;&#x662F;&#x5426;&#x88AB;&#x5B9A;&#x4E49;&#x6210; public&#xFF0C;&#x662F;&#x5426;&#x662F; abstract&#xFF0C;&#x5982;&#x679C;&#x662F;&#x7C7B;&#xFF0C;&#x662F;&#x5426;&#x88AB;&#x58F0;&#x660E;&#x6210; final&#x3002;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x8BE5;&#x6587;&#x4EF6;&#x662F;&#x7C7B;&#x5E76;&#x4E14;&#x662F; public&#x3002; /access-flag.jpg) &#x5E38;&#x91CF;&#x6C60;&#x4E4B;&#x540E;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x5C31;&#x662F;&#x8BBF;&#x95EE;&#x6807;&#x5FD7;&#xFF0C;&#x6211;&#x4EEC;&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#x662F; 0x 00 21 &#xFF0C;&#x4ECE;&#x4E0A;&#x9762;&#x6765;&#x770B;&#x5E76;&#x6CA1;&#x6709;&#xFF0C;&#x539F;&#x6765;&#x5B83;&#x662F; 0x 00 20 &#x548C; 0x 00 01 &#x7684;&#x5E76;&#x96C6;&#xFF0C;&#x8868;&#x793A; ACC_PUBLIC &#x4E0E; ACC_SUPER&#x3002; &#x7C7B;&#x7D22;&#x5F15;&#x3001;&#x7236;&#x7C7B;&#x7D22;&#x5F15;&#x4E0E;&#x63A5;&#x53E3;&#x7D22;&#x5F15;/1549250272126.png) 00 03 &#x662F;&#x7C7B;&#x7D22;&#x5F15;&#xFF0C;&#x6307;&#x5411; #3 &#x8868;&#x793A;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x5176;&#x540D;&#x5B57;&#x4E3A; com/cuzz/jvm/bytecode/MyTest01 00 04 &#x662F;&#x7236;&#x4EB2;&#x7D22;&#x5F15;&#xFF0C;&#x6307;&#x5411; #4 &#x8868;&#x793A;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x5176;&#x540D;&#x5B57;&#x662F; java/lang/Object 00 00 &#x662F;&#x63A5;&#x53E3;&#xFF0C;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x63A5;&#x53E3; &#x5B57;&#x6BB5;&#x8868;&#x96C6;&#x5408;&#x5B57;&#x6BB5;&#x8868;&#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x7C7B;&#x548C;&#x63A5;&#x53E3;&#x4E2D;&#x58F0;&#x660E;&#x7684;&#x53D8;&#x91CF;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x5B57;&#x6BB5;&#x5305;&#x542B;&#x4E86;&#x7C7B;&#x7EA7;&#x522B;&#x53D8;&#x91CF;&#x4EE5;&#x53CA;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF;&#xFF0C;&#x4F46;&#x4E0D;&#x5305;&#x62EC;&#x65B9;&#x6CD5;&#x5185;&#x90E8;&#x58F0;&#x660E;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3002; /1549339719719.png) &#x5982;&#x4E0B;&#x56FE; /1549340431752.png) 00 01 &#x662F;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x540E;&#x9762;&#x63A5;&#x7740;&#x5C31;&#x662F; field_info &#x6210;&#x5458;&#x53D8;&#x91CF;&#x4FE1;&#x606F; 1234567field_info { u2 access_flags; // 0002 &#x8868;&#x793A;&#x79C1;&#x6709; private u2 name_index; // 0005 &#x8868;&#x793A; a u2 descriptor_index; // 0006 &#x8868;&#x793A; I u2 attributes_count; // 0000 &#x6CA1;&#x6709; attribute_info attributes[attributes_count];} &#x65B9;&#x6CD5;&#x8868;&#x521A;&#x5F00;&#x59CB;&#x7684; 00 03 &#x8868;&#x793A;&#x6709;&#x4E09;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x9664;&#x4E86;getter/setter &#x8FD8;&#x6709;&#x9ED8;&#x8BA4;&#x6784;&#x9020;&#x65B9;&#x6CD5; 1234567methods_count { u2 access_flags; // 0001 &#x8868;&#x793A; public u2 name_index; // 0007 &#x6307;&#x5411;&#x5E38;&#x91CF;&#x6C60;&#x4E2D; #7 &#x7684;&#x5E38;&#x91CF;&#x4E3A; &lt;init&gt; u2 descriptor_index; // 0008 &#x6307;&#x5411;&#x5E38;&#x91CF;&#x6C60;&#x4E2D; #8 &#x7684;&#x5E38;&#x91CF;&#x4E3A; ()V u2 attributes_count; // 0001 &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5C5E;&#x6027; attribute_info attributes[attributes_count];} &#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x5C5E;&#x6027;&#x7ED3;&#x6784; 12345attribute_info { u2 attribute_name_index; // 0009 &#x6307;&#x5411;&#x5E38;&#x91CF;&#x6C60;&#x4E2D; #9 &#x4E3A; Code u4 attribute_length; // 0000 0038 &#x8868;&#x793A;&#x957F;&#x5EA6;&#x4E3A; 0x38 &#x4E3A; 56 &#x957F;&#x5EA6;&#x7684;&#x5B57;&#x8282; u1 info[attribute_length];} Code &#x7ED3;&#x6784;Code attribute &#x7684;&#x4F5C;&#x7528;&#x662F;&#x4FDD;&#x5B58;&#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5982;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x8282;&#x7801; 1234567891011121314151617Code_attribute { u2 attribute_name_index; u4 attribute_length; u2 max_stack; u2 max_locals; u4 code_length; u1 code[code_length]; u2 exception_table_length; { u2 start_pc; u2 end_pc; u2 handler_pc; u2 catch_type; } exception_table[exception_table_length]; u2 attributes_count; attribute_info attributes[attributes_count];} attribute_length &#x8868;&#x793A; attribute &#x6240;&#x5305;&#x542B;&#x7684;&#x5B57;&#x8282;&#x6570;&#xFF0C;&#x4E0D;&#x5305;&#x542B; attribute_name_index &#x548C; attribute_length &#x5B57;&#x6BB5; max_stack &#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x8FD0;&#x884C;&#x7684;&#x4EFB;&#x4F55;&#x65F6;&#x523B;&#x6240;&#x80FD;&#x8FBE;&#x5230;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#x6808;&#x7684;&#x6700;&#x5927;&#x6DF1;&#x5EA6; max_locals &#x8868;&#x793A;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x671F;&#x95F4;&#x521B;&#x5EFA;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x6570;&#x76EE;&#xFF0C;&#x5305;&#x542B;&#x7528;&#x6765;&#x8868;&#x793A;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF; code_length &#x8868;&#x793A;&#x8BE5;&#x65B9;&#x6CD5;&#x6240;&#x5305;&#x542B;&#x7684;&#x5B57;&#x8282;&#x7801;&#x7684;&#x5B57;&#x8282;&#x6570;&#x4EE5;&#x53CA;&#x5177;&#x4F53;&#x7684;&#x6307;&#x4EE4;&#x7801;&#xFF0C;&#x5177;&#x4F53;&#x5B57;&#x8282;&#x7801;&#x5373;&#x662F;&#x8BE5;&#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#x65F6;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x6240;&#x6267;&#x884C;&#x7684;&#x5B57;&#x8282;&#x7801; exception_table &#x8868;&#x793A;&#x5B58;&#x653E;&#x7684;&#x662F;&#x5904;&#x7406;&#x5F02;&#x5E38;&#x7684;&#x4FE1;&#x606F; &#x6BCF;&#x4E2A; exception_table &#x8868;&#x7531; start_pc&#xFF0C;end_pc&#xFF0C;handler_pc&#xFF0C;catch_type &#x7EC4;&#x6210; start_pc &#x548C; end_pc &#x8868;&#x793A;&#x5728; code &#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x4ECE; start_pc &#x5230; end_pc &#x5904;&#xFF08;&#x5305;&#x542B; start_pc&#xFF0C;&#x4E0D;&#x5305;&#x542B; end_pc&#xFF09;&#x7684;&#x6307;&#x4EE4;&#x629B;&#x51FA;&#x7684;&#x5F02;&#x5E38;&#x4F1A;&#x7531;&#x8FD9;&#x4E2A;&#x8868;&#x9879;&#x6765;&#x5904;&#x7406; handler_pc &#x8868;&#x793A;&#x5904;&#x7406;&#x5F02;&#x5E38;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x5F00;&#x59CB;&#x5904;&#xFF0C;catch_type &#x8868;&#x793A;&#x4F1A;&#x88AB;&#x5904;&#x7406;&#x7684;&#x5F02;&#x5E38;&#x7C7B;&#x578B;&#xFF0C;&#x5B83;&#x6307;&#x5411;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5F02;&#x5E38;&#x7C7B;&#xFF0C;&#x5F53; catch_type &#x4E3A; 0 &#x65F6;&#xFF0C;&#x8868;&#x793A;&#x5904;&#x7406;&#x6240;&#x6709;&#x7684;&#x5F02;&#x5E38; &#x5B57;&#x8282;&#x7801;&#x67E5;&#x770B;&#x5DE5;&#x5177;https://github.com/ingokegel/jclasslib]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Java虚拟机（二）]]></title>
    <url>%2F2019%2F01%2F29%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[ClassLoader&#x6587;&#x6863;&#xFF1A;https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html public abstract class ClassLoader extends Object A class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a &#x201C;class file&#x201D; of that name from a file system. Every Class object contains a reference) to the ClassLoader that defined it. Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by Class.getClassLoader()) is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader. Applications implement subclasses of ClassLoader in order to extend the manner in which the Java virtual machine dynamically loads classes. Class loaders may typically be used by security managers to indicate security domains. The ClassLoader class uses a delegation model to search for classes and resources. Each instance of ClassLoader has an associated parent class loader. When requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine&#x2019;s built-in class loader, called the &#x201C;bootstrap class loader&#x201D;, does not itself have a parent but may serve as the parent of a ClassLoader instance. Class loaders that support concurrent loading of classes are known as parallel capable class loaders and are required to register themselves at their class initialization time by invoking the ClassLoader.registerAsParallelCapable) method. Note that the ClassLoader class is registered as parallel capable by default. However, its subclasses still need to register themselves if they are parallel capable. In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see loadClass) methods). Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the virtual machine loads classes from the directory defined by the CLASSPATH environment variable. However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method defineClass) converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using Class.newInstance). The methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java virtual machine invokes the loadClass) method of the class loader that originally created the class. For example, an application could create a network class loader to download class files from a server. Sample code might look like: 1234&gt; ClassLoader loader = new NetworkClassLoader(host, port);&gt; Object main = loader.loadClass(&quot;Main&quot;, true).newInstance();&gt; . . .&gt; &gt; The network class loader subclass must define the methods findClass) and loadClassData to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method defineClass) to create a class instance. A sample implementation is: 123456789101112131415&gt; class NetworkClassLoader extends ClassLoader {&gt; String host;&gt; int port;&gt; &gt; public Class findClass(String name) {&gt; byte[] b = loadClassData(name);&gt; return defineClass(name, b, 0, b.length);&gt; }&gt; &gt; private byte[] loadClassData(String name) {&gt; // load the class data from the connection&gt; . . .&gt; }&gt; }&gt; &gt; Binary names Any class name provided as a String parameter to methods in ClassLoader must be a binary name as defined by The Java&#x2122; Language Specification. Examples of valid class names include: 12345&gt; &quot;java.lang.String&quot; // &#x4E00;&#x4E2A;&#x7C7B;&gt; &quot;javax.swing.JSpinner$DefaultEditor&quot; // &#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x7C7B;&gt; &quot;java.security.KeyStore$Builder$FileBuilder$1&quot; // &#x5185;&#x90E8;&#x7C7B;&#x7684;&#x533F;&#x540D;&#x7C7B;&gt; &quot;java.net.URLClassLoader$3$1&quot; // &#x533F;&#x540D;&#x7C7B;&#x7684;&#x533F;&#x540D;&#x7C7B;&gt; &#x6211;&#x4EEC;&#x77E5;&#x9053;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x662F;&#x53CC;&#x4EB2;&#x59D4;&#x6D3E;&#x673A;&#x5236;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 12345678910public class MyTest15 { public static void main(String[] args) { ClassLoader loader = MyTest15.class.getClassLoader(); System.out.println(loader); ClassLoader loader1 = loader.getParent(); System.out.println(loader1); ClassLoader loader2 = loader1.getParent(); System.out.println(loader2); }} &#x8F93;&#x51FA; 123sun.misc.Launcher$AppClassLoader@dad5dcsun.misc.Launcher$ExtClassLoader@16d3586null &#x5F53;&#x4E3A;&#x6839;&#x52A0;&#x8F7D;&#x5668;&#x65F6;&#xFF0C;&#x8FD4;&#x56DE;null &#x770B;&#x4E86;&#x6587;&#x6863;&#xFF0C;&#x5199;&#x4E00;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49; ClassLoader 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * @Author: cuzz * @Date: 2019/1/28 12:39 * @Description: */public class MyClassLoader extends ClassLoader{ private String classLoaderName; private final String fileExtension = &quot;.class&quot;; public MyClassLoader(String classLoaderName) { super(); // &#x5C06;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5F53;&#x505A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } public MyClassLoader(ClassLoader parent, String classLoaderName) { super(parent); // &#x663E;&#x793A;&#x6307;&#x5B9A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } @Override protected Class&lt;?&gt; findClass(String className) throws ClassNotFoundException { byte[] data = loadClassData(className); return defineClass(className, data,0, data.length); } private byte[] loadClassData(String name) { InputStream is = null; byte[] data = null; ByteArrayOutputStream baos = null; try { this.classLoaderName = this.classLoaderName.replace(&quot;.&quot;, &quot;/&quot;); is = new FileInputStream(new File(name, this.fileExtension)); baos = new ByteArrayOutputStream(); int ch; while (-1 != (ch = is.read())) { baos.write(ch); } data = baos.toByteArray(); } catch (Exception e) { e.printStackTrace(); } finally { try { is.close(); baos.close(); } catch (Exception e) { e.printStackTrace(); } } return data; } public static void main(String[] args) throws Exception{ MyClassLoader myClassLoader = new MyClassLoader(&quot;myLoader&quot;); Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); Object o = clazz.newInstance(); // &#x83B7;&#x53D6;&#x5B9E;&#x4F8B;&#x5BF9;&#x8C61; System.out.println(&quot;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&quot; + clazz.getClassLoader()); System.out.println(o); }} &#x8F93;&#x51FA; 12&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;sun.misc.Launcher$AppClassLoader@dad5dccom.cuzz.jvm.classloader.MyTest01@16d3586 &#x6211;&#x4EEC;&#x7F16;&#x5199;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4E0D;&#x8D77;&#x4F5C;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x53CC;&#x4EB2;&#x59D4;&#x6D3E;&#x673A;&#x5236;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x7F16;&#x5199;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x53BB;&#x52A0;&#x8F7D;&#x65F6;&#xFF0C;&#x5B83;&#x4F1A;&#x59D4;&#x6D3E;&#x81EA;&#x5DF1;&#x7684;&#x53CC;&#x4EB2;&#x53BB;&#x52A0;&#x8F7D;&#xFF0C;&#x521A;&#x597D;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF08;&#x5E94;&#x7528;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF09;&#x5C31;&#x80FD;&#x52A0;&#x8F7D;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x4F7F;&#x7528;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7F16;&#x5199;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x800C;&#x4F7F;&#x7528;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x8DEF;&#x5F84;&#x6362;&#x4E00;&#x4E0B;&#xFF0C;&#x628A;&#x9879;&#x76EE;&#x8DEF;&#x5F84;&#x4E0B; classes &#x4E2D;&#x7684; MyTest01.class &#x6587;&#x4EF6;&#x79FB;&#x52A8;&#x5728;&#x522B;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x8BA9;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x7136;&#x540E;&#x5B83;&#x5C31;&#x4F1A;&#x8C03;&#x7528;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x7F16;&#x5199;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class MyClassLoader extends ClassLoader{ private String classLoaderName; private final String fileExtension = &quot;.class&quot;; private String path; public MyClassLoader(String classLoaderName) { super(); // &#x5C06;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5F53;&#x505A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } public MyClassLoader(ClassLoader parent, String classLoaderName) { super(parent); // &#x663E;&#x793A;&#x6307;&#x5B9A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } public void setPath(String path) { this.path = path; } @Override protected Class&lt;?&gt; findClass(String className) throws ClassNotFoundException { byte[] data = loadClassData(className); return defineClass(className, data,0, data.length); } private byte[] loadClassData(String name) { InputStream is = null; byte[] data = null; ByteArrayOutputStream baos = null; name = name.replace(&quot;.&quot;, &quot;\\&quot;); try { is = new FileInputStream(new File(this.path + name + this.fileExtension)); baos = new ByteArrayOutputStream(); int ch; while (-1 != (ch = is.read())) { baos.write(ch); } data = baos.toByteArray(); } catch (Exception e) { e.printStackTrace(); } finally { try { is.close(); baos.close(); } catch (Exception e) { e.printStackTrace(); } } return data; } public static void main(String[] args) throws Exception{ MyClassLoader myClassLoader = new MyClassLoader(&quot;myLoader&quot;); // Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); String path = &quot;C:/Users/my/Desktop/&quot;; myClassLoader.setPath(path); Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); Object o = clazz.newInstance(); // &#x83B7;&#x53D6;&#x5B9E;&#x4F8B;&#x5BF9;&#x8C61; System.out.println(&quot;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&quot; + clazz.getClassLoader()); System.out.println(&quot;&#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&quot; + myClassLoader.getParent()); System.out.println(o); }} &#x8F93;&#x51FA; 123&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;com.cuzz.jvm.classloader.MyClassLoader@16d3586&#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;sun.misc.Launcher$AppClassLoader@dad5dccom.cuzz.jvm.classloader.MyTest01@a14482 defineClasjava.lang.ClassLoader#defineClass(java.lang.String, byte[], int, int) 123protected final Class&lt;?&gt; defineClass(String name, byte[] b, int off, int len) throws ClassFormatError { return defineClass(name, b, off, len, null);} &#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Class &#x7684;&#x5B9E;&#x4F8B; loadClassjava.lang.ClassLoader#loadClass(java.lang.String, boolean) &#x6587;&#x6863;&#xFF1A; java.lang.ClassLoaderprotected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundExceptionLoads the class with the specified binary name. The default implementation of this method searches for classes in the following order: Invoke findLoadedClass(String) to check if the class has already been loaded. Invoke the loadClass method on the parent class loader. If the parent is null the class loader built-in to the virtual machine is used, instead. Invoke the findClass(String) method to find the class. If the class was found using the above steps, and the resolve flag is true, this method will then invoke the resolveClass(Class) method on the resulting Class object.Subclasses of ClassLoader are encouraged to override findClass(String), rather than this method.Unless overridden, this method synchronizes on the result of getClassLoadingLock method during the entire class loading process.Parameters: name - The binary name of the class resolve - If true then resolve the class 12345678910111213141516171819202122232425262728293031323334353637protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException{ synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class&lt;?&gt; c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // &#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x91CD;&#x5199;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5; // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; }} &#x547D;&#x540D;&#x7A7A;&#x95F4;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6597;&#x9C7C;&#x81EA;&#x5DF1;&#x7684;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#xFF0C;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x7531;&#x8BE5;&#x52A0;&#x8F7D;&#x5668;&#x53CA;&#x6240;&#x6709;&#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x7EC4;&#x6210;&#xFF0C;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x7C7B;&#x7684;&#x5B8C;&#x6574;&#x540D;&#x5B57;&#xFF08;&#x5305;&#x62EC;&#x7C7B;&#x7684;&#x5305;&#x540D;&#xFF09;&#x76F8;&#x540C;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x7C7B;&#x7684;&#x5B8C;&#x6574;&#x540D;&#x5B57;&#xFF08;&#x5305;&#x62EC;&#x7C7B;&#x7684;&#x5305;&#x540D;&#xFF09;&#x76F8;&#x540C;&#x7684;&#x4E24;&#x4E2A;&#x7C7B; 1234567891011public static void main(String[] args) throws Exception{ MyClassLoader myClassLoader = new MyClassLoader(&quot;myLoader&quot;); MyClassLoader myClassLoader1 = new MyClassLoader(&quot;myLoader1&quot;); String path = &quot;C:/Users/my/Desktop/&quot;; myClassLoader.setPath(path); myClassLoader1.setPath(path); Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); Class&lt;?&gt; clazz1 = myClassLoader1.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); System.out.println(&quot;clazz: &quot; + clazz.hashCode()); System.out.println(&quot;clazz1: &quot; + clazz1.hashCode());} &#x8F93;&#x51FA; 12clazz: 24324022clazz1: 21685669 &#x8BF4;&#x660E;&#x7C7B;&#x88AB;&#x52A0;&#x8F7D;&#x4E86;&#x4E24;&#x6B21;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x7531;&#x4E0D;&#x540C;&#x7684;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x5BFC;&#x81F4;&#x7684; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x7ED9; myClassLoader1 &#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7236;&#x52A0;&#x8F7D;&#x5668; 123456789101112public static void main(String[] args) throws Exception{ MyClassLoader myClassLoader = new MyClassLoader(&quot;myLoader&quot;); // &#x628A; myClassLoader &#x5F53;&#x505A;&#x7236;&#x52A0;&#x8F7D;&#x5668; MyClassLoader myClassLoader1 = new MyClassLoader(myClassLoader,&quot;myLoader1&quot;); String path = &quot;C:/Users/my/Desktop/&quot;; myClassLoader.setPath(path); myClassLoader1.setPath(path); Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); Class&lt;?&gt; clazz1 = myClassLoader1.loadClass(&quot;com.cuzz.jvm.classloader.MyTest01&quot;); System.out.println(&quot;clazz: &quot; + clazz.hashCode()); System.out.println(&quot;clazz1: &quot; + clazz1.hashCode());} &#x8F93;&#x51FA; 12clazz: 10568834clazz1: 10568834 &#x7531;&#x4E8E;&#x7236;&#x52A0;&#x8F7D;&#x5668;&#x5DF2;&#x7ECF;&#x52A0;&#x8F7D;&#x8FC7;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x4E0D;&#x4F1A;&#x52A0;&#x8F7D;&#x4E86; &#x7C7B;&#x7684;&#x5378;&#x8F7D;&#x7531; Java &#x865A;&#x62DF;&#x673A;&#x81EA;&#x5E26;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#xFF0C;&#x5728;&#x865A;&#x62DF;&#x673A;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#x4E2D;&#xFF0C;&#x59CB;&#x7EC8;&#x4E0D;&#x4F1A;&#x88AB;&#x5378;&#x8F7D;&#x3002;&#x524D;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#x8FC7;&#xFF0C;Java &#x865A;&#x62DF;&#x673A;&#x81EA;&#x5E26;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5305;&#x62EC;&#x6839;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x3001;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x548C;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x3002;Java &#x865A;&#x62DF;&#x673A;&#x672C;&#x8EAB;&#x4F1A;&#x59CB;&#x7EC8;&#x5F15;&#x7528;&#x8FD9;&#x4E9B;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x800C;&#x8FD9;&#x4E9B;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5219;&#x4F1A;&#x59CB;&#x7EC8;&#x5F15;&#x7528;&#x5B83;&#x4EEC;&#x6240;&#x52A0;&#x8F7D;&#x7C7B;&#x7684; Class &#x5BF9;&#x8C61;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E9B; Class &#x5BF9;&#x8C61;&#x59CB;&#x7EC8;&#x662F;&#x53EF;&#x89E6;&#x53CA;&#x7684; &#x800C;&#x7531;&#x7528;&#x6237;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x5378;&#x8F7D;&#x7684; &#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x6DF1;&#x5EA6;&#x89E3;&#x6790;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x6765;&#x5206;&#x6790; MyCat 12345public class MyCat { public MyCat() { System.out.println(&quot;MyCat is loaded by: &quot; + this.getClass().getClassLoader()); }} MySample 123456public class MySample { public MySample () { System.out.println(&quot;MySample is loaded by:&quot; + this.getClass().getClassLoader()); new MyCat (); }} MyClassLoader 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class MyClassLoader extends ClassLoader{ private String classLoaderName; private final String fileExtension = &quot;.class&quot;; private String path; public MyClassLoader(String classLoaderName) { super(); // &#x5C06;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5F53;&#x505A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } public MyClassLoader(ClassLoader parent, String classLoaderName) { super(parent); // &#x663E;&#x793A;&#x6307;&#x5B9A;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x7236;&#x52A0;&#x8F7D;&#x5668; this.classLoaderName = classLoaderName; } public void setPath(String path) { this.path = path; } @Override protected Class&lt;?&gt; findClass(String className) throws ClassNotFoundException { byte[] data = loadClassData(className); return defineClass(className, data,0, data.length); } private byte[] loadClassData(String name) { InputStream is = null; byte[] data = null; ByteArrayOutputStream baos = null; name = name.replace(&quot;.&quot;, &quot;\\&quot;); try { is = new FileInputStream(new File(this.path + name + this.fileExtension)); baos = new ByteArrayOutputStream(); int ch; while (-1 != (ch = is.read())) { baos.write(ch); } data = baos.toByteArray(); } catch (Exception e) { e.printStackTrace(); } finally { try { is.close(); baos.close(); } catch (Exception e) { e.printStackTrace(); } } return data; } public static void main(String[] args) throws Exception{ MyClassLoader myClassLoader = new MyClassLoader(&quot;myLoader&quot;); String path = &quot;C:/Users/my/Desktop/&quot;; myClassLoader.setPath(path); Class&lt;?&gt; clazz = myClassLoader.loadClass(&quot;com.cuzz.jvm.classloader.MySample&quot;); Object object = clazz.newInstance(); }} &#x8F93;&#x51FA; 12MySample is loaded by: sun.misc.Launcher$AppClassLoader@dad5dcMyCat is loaded by: sun.misc.Launcher$AppClassLoader@dad5dc &#x6211;&#x4EEC;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x5199;&#x7684; ClassLoader &#x4E0E;&#x59D4;&#x6258;&#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x53BB;&#x52A0;&#x8F7D;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684; &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x628A;&#x9879;&#x76EE;&#x4E0B; classes &#x8DEF;&#x5F84;&#x4E2D;&#x7684; MySample.class &#x548C; MyCat.class &#x5220;&#x9664;&#xFF0C;&#x5E76;&#x590D;&#x5236;&#x4E00;&#x4EFD;&#x5230;&#x684C;&#x9762; &#x5219;&#x8F93;&#x51FA; 12MySample is loaded by: com.cuzz.jvm.classloader.MyClassLoader@16d3586MyCat is loaded by: com.cuzz.jvm.classloader.MyClassLoader@16d3586 &#x7531;&#x4E8E;&#x59D4;&#x6258;&#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x4E0D;&#x5230;&#x5C31;&#x7528;&#x81EA;&#x5DF1;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EA;&#x628A;&#x5F53;&#x524D;&#x7C7B;&#x8DEF;&#x5F84;&#x4E0B; MySample.class &#x8FD9;&#x7ED9;&#x6587;&#x4EF6;&#x5220;&#x6389;&#xFF0C;&#x4FDD;&#x7559; MyCat.class &#x6587;&#x4EF6;&#xFF0C;&#x5219;&#x8F93;&#x51FA; 12MySample is loaded by: com.cuzz.jvm.classloader.MyClassLoader@16d3586MyCat is loaded by: sun.misc.Launcher$AppClassLoader@dad5dc &#x6211;&#x4EEC;&#x77E5;&#x9053; MySample &#x662F;&#x6211;&#x4EEC;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x52A0;&#x8F7D;&#x52A0;&#x8F7D;&#x51FA;&#x6765;&#x7684;&#xFF0C;MyCat &#x662F;&#x6709;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x52A0;&#x8F7D;&#x7684; 1234567public class MySample { public MySample () { System.out.println(&quot;MySample is loaded by: &quot; + this.getClass().getClassLoader()); new MyCat (); System.out.println(MyCat.class); }} &#x8F93;&#x51FA; 123MySample is loaded by: com.cuzz.jvm.classloader.MyClassLoader@16d3586MyCat is loaded by: sun.misc.Launcher$AppClassLoader@dad5dcclass com.cuzz.jvm.classloader.MyCat &#x8BF4;&#x660E;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x52A0;&#x8F7D;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#xFF0C;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x52A0;&#x8F7D;&#x7684;&#x7C7B; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x4E2D;&#x8BBF;&#x95EE;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#x7C7B; 123456public class MyCat { public MyCat() { System.out.println(&quot;MyCat is loaded by: &quot; + this.getClass().getClassLoader()); System.out.println(MySample.class); }} &#x8F93;&#x51FA; 1234567891011121314151617MySample is loaded by: com.cuzz.jvm.classloader.MyClassLoader@16d3586MyCat is loaded by: sun.misc.Launcher$AppClassLoader@dad5dcException in thread &quot;main&quot; java.lang.NoClassDefFoundError: com/cuzz/jvm/classloader/MySample at com.cuzz.jvm.classloader.MyCat.&lt;init&gt;(MyCat.java:6) at com.cuzz.jvm.classloader.MySample.&lt;init&gt;(MySample.java:6) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:422) at java.lang.Class.newInstance(Class.java:442) at com.cuzz.jvm.classloader.MyClassLoader.main(MyClassLoader.java:68)Caused by: java.lang.ClassNotFoundException: com.cuzz.jvm.classloader.MySample at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ... 8 more &#x62A5;&#x9519;&#xFF0C;&#x8BF4;&#x660E;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;&#x81EA;&#x5B9A;&#x4E49;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#x7C7B; &#x8BF4;&#x660E;&#x5F53;&#x6211;&#x73B0;&#x5728;&#x52A0;&#x8F7D; MySample &#x8FD9;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x7136;&#x540E;&#x521D;&#x59CB;&#x5B9E;&#x4F8B;&#x5316;&#x8FD9;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x521D;&#x59CB;&#x5316; MyCat &#x8FD9;&#x4E2A;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x5148;&#x59D4;&#x6258;&#x7236;&#x52A0;&#x8F7D;&#x5668;&#xFF08;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x5668;&#xFF09;&#x53BB;&#x52A0;&#x8F7D; &#x4F46;&#x662F;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x5F53;&#x524D;&#x8DEF;&#x5F84;&#x4E0B;&#x7684; MyCat.class &#x6587;&#x4EF6;&#x5220;&#x6389;&#xFF0C;&#x4FDD;&#x7559; MySample.class &#x6587;&#x4EF6;&#xFF0C;&#x5219;&#x62A5;&#x9519; 123456789101112131415Exception in thread &quot;main&quot; MySample is loaded by: sun.misc.Launcher$AppClassLoader@dad5dcjava.lang.NoClassDefFoundError: com/cuzz/jvm/classloader/MyCat at com.cuzz.jvm.classloader.MySample.&lt;init&gt;(MySample.java:6) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:422) at java.lang.Class.newInstance(Class.java:442) at com.cuzz.jvm.classloader.MyClassLoader.main(MyClassLoader.java:68)Caused by: java.lang.ClassNotFoundException: com.cuzz.jvm.classloader.MyCat at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ... 7 more &#x6211;&#x8981;&#x52A0;&#x8F7D; MySample &#x5148;&#x59D4;&#x6258;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x52A0;&#x8F7D;&#xFF0C;&#x53D1;&#x73B0;&#x80FD;&#x52A0;&#x8F7D;&#x5230;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x60F3;&#x52A0;&#x8F7D; MyCat &#x8FD9;&#x4E2A;&#x7C7B;&#xFF0C;&#x6B64;&#x65F6;&#x5B83;&#x4F1A;&#x8C03;&#x7528;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x7236;&#x7C7B;&#x53BB;&#x52A0;&#x8F7D;&#xFF0C;&#x53D1;&#x73B0;&#x52A0;&#x8F7D;&#x4E0D;&#x5230;&#xFF0C;&#x81EA;&#x5DF1;&#x4E5F;&#x4E0D;&#x80FD;&#x52A0;&#x8F7D;&#xFF0C;&#x5C31;&#x62A5;&#x9519;&#x4E86;&#x3002; &#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x7ED3;&#x8BBA;&#xFF1A; &#x5B50;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x80FD;&#x591F;&#x8BBF;&#x95EE;&#x5230;&#x7236;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B; &#x7236;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x65E0;&#x6CD5;&#x8BBF;&#x95EE;&#x5230;&#x5B50;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B; &#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x53CC;&#x4EB2;&#x59D4;&#x6258;&#x6A21;&#x578B;&#x7684;&#x597D;&#x5904;&#x53EF;&#x4EE5;&#x786E;&#x4FDD; Java &#x6838;&#x5FC3;&#x5E93;&#x7684;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#xFF1A;&#x6240;&#x6709;&#x7684; Java &#x5E94;&#x7528;&#x90FD;&#x81F3;&#x5C11;&#x4F1A;&#x5F15;&#x7528; java.lang.Object &#x7C7B;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5728;&#x8FD0;&#x884C;&#x671F;&#xFF0C;java.lang.Object &#x8FD9;&#x4E2A;&#x7C7B;&#x4F1A;&#x88AB;&#x52A0;&#x8F7D;&#x5230; Java &#x865A;&#x62DF;&#x673A;&#x4E2D;&#xFF1B;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x52A0;&#x8F7D;&#x8FC7;&#x7A0B;&#x662F;&#x7531; Java &#x5E94;&#x7528;&#x81EA;&#x5DF1;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x6240;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5F88;&#x53EF;&#x80FD;&#x5C31;&#x4F1A;&#x5728; JVM &#x4E2D;&#x5B58;&#x5728;&#x591A;&#x4E2A;&#x7248;&#x672C;&#x7684; java.lang.Object &#x4E86;&#xFF0C;&#x800C;&#x8FD9;&#x4E9B;&#x7C7B;&#x4E4B;&#x95F4;&#x8FD8;&#x662F;&#x4E0D;&#x517C;&#x5BB9;&#x7684;&#xFF0C;&#x76F8;&#x4E92;&#x4E0D;&#x53EF;&#x89C1;&#xFF08;&#x6B63;&#x662F;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x53D1;&#x6325;&#x7740;&#x4F5C;&#x7528;&#xFF09;&#x3002;&#x53EF;&#x4EE5;&#x786E;&#x4FDD; Java &#x6838;&#x5FC3;&#x7C7B;&#x5E93;&#x6240;&#x63D0;&#x4F9B;&#x7684;&#x7C7B;&#x4E0D;&#x4F1A;&#x88AB;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x6240;&#x53D6;&#x4EE3;&#x3002;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x53EF;&#x4EE5;&#x4E3A;&#x76F8;&#x540C;&#x7684;&#x540D;&#x79F0;&#xFF08;binary name&#xFF09;&#x7684;&#x7C7B;&#x521B;&#x5EFA;&#x989D;&#x5916;&#x7684;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x3002;&#x76F8;&#x540C;&#x7684;&#x540D;&#x79F0;&#x7684;&#x7C7B;&#x53EF;&#x4EE5;&#x5E76;&#x5B58;&#x5728; Java &#x865A;&#x62DF;&#x673A;&#x4E2D;&#xFF0C;&#x53EA;&#x8981;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6765;&#x52A0;&#x8F7D;&#x5B83;&#x4EEC;&#x5373;&#x53EF;&#xFF08;&#x53EF;&#x662F;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x76F8;&#x540C;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x4E0D;&#x540C;&#x5B9E;&#x4F8B;&#xFF09;&#x3002;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6240;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x4E4B;&#x95F4;&#x662F;&#x4E0D;&#x517C;&#x5BB9;&#x7684;&#xFF0C;&#x5C31;&#x76F8;&#x540C;&#x4E8E;&#x5728; Java &#x865A;&#x62DF;&#x673A;&#x5185;&#x90E8;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x53C8;&#x4E00;&#x4E2A;&#x76F8;&#x4E92;&#x9694;&#x79BB;&#x7684; Java &#x7C7B;&#x7A7A;&#x95F4;&#xFF0C;&#x8FD9;&#x7C7B;&#x6280;&#x672F;&#x5728;&#x5F88;&#x591A;&#x6846;&#x67B6;&#x4E2D;&#x90FD;&#x5F97;&#x5230;&#x4E86;&#x5B9E;&#x9645;&#x7684;&#x5E94;&#x7528;&#x3002; &#x5185;&#x5EFA;&#x4E8E; JVM &#x4E2D;&#x7684;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4F1A;&#x52A0;&#x8F7D; java.lang.ClassLoader &#x4EE5;&#x53CA;&#x5176;&#x4ED6;&#x7684; Java &#x5E73;&#x53F0;&#x7C7B;&#xFF0C;&#x5F53; JVM &#x542F;&#x52A8;&#x65F6;&#xFF0C;&#x4E00;&#x5757;&#x7279;&#x6B8A;&#x7684;&#x673A;&#x5668;&#x7801;&#x4F1A;&#x8FD0;&#x884C;&#xFF0C;&#x5B83;&#x4F1A;&#x52A0;&#x8F7D;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x548C;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x8FD9;&#x5757;&#x7279;&#x6B8A;&#x7684;&#x673A;&#x5668;&#x7801;&#x53EB;&#x505A;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF08;Bootstrap&#xFF09;&#xFF0C;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5E76;&#x4E0D;&#x662F; Java &#x7C7B;&#xFF0C;&#x800C;&#x5176;&#x5B83;&#x52A0;&#x8F7D;&#x5668;&#x5219;&#x90FD;&#x662F; Java &#x7C7B;&#xFF0C;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x7279;&#x5B9A;&#x4E8E;&#x5E73;&#x53F0;&#x7684;&#x673A;&#x5668;&#x6307;&#x4EE4;&#xFF0C;&#x5B83;&#x8D1F;&#x8D23;&#x5F00;&#x542F;&#x6574;&#x4E2A;&#x52A0;&#x8F7D;&#x8FC7;&#x7A0B;&#x3002;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x8FD8;&#x4F1A;&#x8D1F;&#x8D23;&#x52A0;&#x8F7D; JRE &#x6B63;&#x5E38;&#x8FD0;&#x884C;&#x6240;&#x9700;&#x8981;&#x7684;&#x57FA;&#x672C;&#x7EC4;&#x4EF6;&#xFF0C;&#x8FD9;&#x5305;&#x62EC; java.util &#x4E0E; java.lang &#x5305;&#x4E2D;&#x7684;&#x7C7B;&#x7B49;&#x7B49;&#x3002; Launcher &#x7C7B;&#x6E90;&#x7801;&#x5206;&#x6790;&#x524D;&#x9762;&#x6211;&#x4EEC;&#x5206;&#x6790;&#x7C7B; ClassLoader&#xFF0C;&#x91CC;&#x9762;&#x6709;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5; getSystemClassLoader&#xFF0C;&#x53D1;&#x73B0; ClassLoader &#x662F; Launcher &#x4E2D;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF; 12345678910111213141516171819202122232425262728293031323334353637 @CallerSensitive public static ClassLoader getSystemClassLoader() { initSystemClassLoader(); // &#x521D;&#x59CB;&#x5316; if (scl == null) { return null; } SecurityManager sm = System.getSecurityManager(); if (sm != null) { checkClassLoaderPermission(scl, Reflection.getCallerClass()); } return scl; } private static synchronized void initSystemClassLoader() { if (!sclSet) { if (scl != null) throw new IllegalStateException(&quot;recursive invocation&quot;); // &#x83B7;&#x53D6;&#x4E00;&#x4E2A; Launcher &#x7C7B; sun.misc.Launcher l = sun.misc.Launcher.getLauncher(); if (l != null) { Throwable oops = null; // scl &#x8868;&#x793A; SystemClassLoader scl = l.getClassLoader(); try { scl = AccessController.doPrivileged( new SystemClassLoaderAction(scl)); } catch (PrivilegedActionException pae) { oops = pae.getCause(); if (oops instanceof InvocationTargetException) { oops = oops.getCause(); } } ... } } }} &#x6211;&#x4EEC;&#x5728;idea&#x91CC;&#x8FB9;&#x770B;&#x5230;&#x7684; sun.misc.Launcher.getLauncher() &#x7684;&#x5B9E;&#x73B0;&#x662F;&#x53CD;&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x7ED9;&#x51FA;&#x7684;&#xFF0C;oracle&#x5E76;&#x6CA1;&#x6709;&#x7ED9;&#x51FA;&#x6E90;&#x7801;&#xFF0C;&#x53EF;&#x4EE5;&#x5230;&#x7F51;&#x4E0A;&#x67E5;&#x627E;&#x76F8;&#x5173;&#x4EE3;&#x7801; 1234567891011121314151617181920212223242526272829303132333435363738394041private static Launcher launcher = new Launcher();private static String bootClassPath = System.getProperty(&quot;sun.boot.class.path&quot;); public static Launcher getLauncher() { return launcher; } private ClassLoader loader; public Launcher() { // Create the extension class loader ClassLoader extcl; try { extcl = ExtClassLoader.getExtClassLoader(); } catch (IOException e) { throw new InternalError( &quot;Could not create extension class loader&quot;); } // Now create the class loader to use to launch the application try { loader = AppClassLoader.getAppClassLoader(extcl); } catch (IOException e) { throw new InternalError( &quot;Could not create application class loader&quot;); } // Also set the context class loader for the primordial thread. Thread.currentThread().setContextClassLoader(loader); // Finally, install a security manager if requested String s = System.getProperty(&quot;java.security.manager&quot;); ...... } /* * Returns the class loader used to launch the main application. */ public ClassLoader getClassLoader() { return loader; } &#x53EF;&#x4EE5;&#x770B;&#x5230; Launcher &#x7C7B;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;&#x5148;&#x521D;&#x59CB;&#x5316;&#x4E86;&#x4E2A; ExtClassLoader&#xFF0C;&#x7136;&#x540E;&#x53C8;&#x521D;&#x59CB;&#x5316;&#x4E86;&#x4E2A; AppClassLoader&#xFF0C;&#x7136;&#x540E;&#x628A;ExtClassLoader &#x4F5C;&#x4E3A; AppClassLoader&#x7684;&#x7236; loader&#xFF0C;ExtClassLoader &#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x7236;&#x7C7B;&#xFF0C;&#x5373;&#x8868;&#x660E;&#xFF0C;&#x7236;&#x7C7B;&#x662F;BootstrapClassLoader&#x3002;&#x628A;&#x521D;&#x59CB;&#x5316; &#x7684;AppClassLoader &#x4F5C;&#x4E3A;&#x5168;&#x5C40;&#x53D8;&#x91CF;&#x4FDD;&#x5B58;&#x8D77;&#x6765;&#xFF0C;&#x5E76;&#x8BBE;&#x7F6E;&#x5230;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;contextClassLoader&#xFF0C;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x5B9E;&#x4F8B;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A; contextClassLoader &#x3002; &#x5148;&#x56DE;&#x5230; initSystemClassLoader &#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x6709;&#x8FD9;&#x4E00;&#x6BB5;&#x4EE3;&#x7801; 123456789try { scl = AccessController.doPrivileged( new SystemClassLoaderAction(scl));} catch (PrivilegedActionException pae) { oops = pae.getCause(); if (oops instanceof InvocationTargetException) { oops = oops.getCause(); }} &#x6211;&#x4EEC;&#x628A;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x4F20;&#x5165;&#x5230; doPrivileged &#x4E2D;&#x7684; SystemClassLoaderAction &#x4E2D;&#x53C8;&#x8FD4;&#x56DE;&#x4E86;&#x7CFB;&#x7EDF;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x770B; SystemClassLoaderAction &#x8FD9;&#x4E2A;&#x7C7B; 12345678910111213141516171819202122class SystemClassLoaderAction implements PrivilegedExceptionAction&lt;ClassLoader&gt; { private ClassLoader parent; SystemClassLoaderAction(ClassLoader parent) { this.parent = parent; } public ClassLoader run() throws Exception { String cls = System.getProperty(&quot;java.system.class.loader&quot;); if (cls == null) { return parent; } Constructor&lt;?&gt; ctor = Class.forName(cls, true, parent) .getDeclaredConstructor(new Class&lt;?&gt;[] { ClassLoader.class }); ClassLoader sys = (ClassLoader) ctor.newInstance( new Object[] { parent }); Thread.currentThread().setContextClassLoader(sys); return sys; }} &#x8FD9;&#x5757;&#x903B;&#x8F91;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x770B;&#x770B;&#x662F;&#x5426;&#x8BBE;&#x7F6E;&#x4E86;&#x7CFB;&#x7EDF;&#x5C5E;&#x6027; java.system.class.loader&#xFF0C;&#x5373;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x8BBE;&#x7F6E;&#x4E86;&#x90A3;&#x4E48;&#x5B9E;&#x4F8B;&#x5316;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x8FD4;&#x56DE;&#xFF0C;&#x66FF;&#x4EE3;&#x4E4B;&#x524D;&#x83B7;&#x53D6;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BBE;&#x7F6E;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x3002; Class.forName()java.lang.Class#forName(java.lang.String, boolean, java.lang.ClassLoader) &#x6587;&#x6863;&#xFF1A; java.lang.Classpublic static Class&lt;?&gt; forName(@NonNls String name, boolean initialize, ClassLoader loader) throws ClassNotFoundExceptionReturns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier.If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void.If name denotes an array class, the component type of the array class is loaded but not initialized.For example, in an instance method the expression:Class.forName(&#x201C;Foo&#x201D;)is equivalent to:Class.forName(&#x201C;Foo&#x201D;, true, this.getClass().getClassLoader())Note that this method throws errors related to loading, linking or initializing as specified in Sections 12.2, 12.3 and 12.4 of The Java Language Specification. Note that this method does not check whether the requested class is accessible to its caller.If the loader is null, and a security manager is present, and the caller&#x2019;s class loader is not null, then this method calls the security manager&#x2019;s checkPermission method with a RuntimePermission(&#x201C;getClassLoader&#x201D;) permission to ensure it&#x2019;s ok to access the bootstrap class loader.Parameters: name - fully qualified name of the desired class initialize - if true the class will be initialized. See Section 12.4 of The Java Language Specification. loader - class loader from which the class must be loaded &#x4EE3;&#x7801;&#xFF1A; 123456789101112131415161718192021public static Class&lt;?&gt; forName(String name, boolean initialize, ClassLoader loader) throws ClassNotFoundException{ Class&lt;?&gt; caller = null; SecurityManager sm = System.getSecurityManager(); if (sm != null) { // Reflective call to get caller class is only needed if a security manager // is present. Avoid the overhead of making this call otherwise. // &#x83B7;&#x53D6;&#x8C03;&#x7528; forName &#x65B9;&#x6CD5;&#x7684;&#x7684;&#x90A3;&#x4E2A;&#x7C7B; caller = Reflection.getCallerClass(); if (sun.misc.VM.isSystemDomainLoader(loader)) { ClassLoader ccl = ClassLoader.getClassLoader(caller); if (!sun.misc.VM.isSystemDomainLoader(ccl)) { sm.checkPermission( SecurityConstants.GET_CLASSLOADER_PERMISSION); } } } return forName0(name, initialize, loader, caller);} &#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5206;&#x6790;&#x4E0E;&#x5B9E;&#x73B0;&#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x6765;&#x5206;&#x6790;&#x4E00;&#x4E0B;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x4F5C;&#x7528; &#x524D;&#x8A00;&#x770B;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x6765;&#x4E00;&#x4E0B;&#x611F;&#x6027;&#x7684;&#x8BA4;&#x8BC6;&#xFF1A; 123456public class MyTest24 { public static void main(String[] args) System.out.println(Thread.currentThread().getContextClassLoader()); System.out.println(Thread.class.getClassLoader()); }} &#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x7684;&#x8F93;&#x51FA;&#x662F;&#xFF1A; 12sun.misc.Launcher$AppClassLoader@18b4aac2null &#x89E3;&#x6790;&#xFF1A;&#x7B2C;&#x4E00;&#x884C;&#x5F53;&#x524D;&#x7684;&#x7EBF;&#x7A0B;&#x662F;&#x8FD0;&#x884C;MyTest24 &#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x800C;MyTest24 &#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x6240;&#x4EE5;&#x6253;&#x5370;&#x7684;&#x662F;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7B2C;&#x4E8C;&#x884C;Thread&#x7C7B;&#x662F;java&#x6838;&#x5FC3;&#x5E93;&#x7684;&#x7C7B;&#xFF0C;&#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x6253;&#x5370; null &#x5F53;&#x524D;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;(Current ClassLoader) &#x6BCF;&#x4E2A;&#x7C7B;&#x90FD;&#x4F1A;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;(&#x5373;&#x52A0;&#x8F7D;&#x81EA;&#x8EAB;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;) &#x6765;&#x53BB;&#x52A0;&#x8F7D;&#x5176;&#x4ED6;&#x7C7B;(&#x6307;&#x7684;&#x662F;&#x6240;&#x4F9D;&#x8D56;&#x7684;&#x7C7B;) &#xFF0C;&#x5982;&#x679C;ClassA&#x5F15;&#x7528;&#x4E86;ClassY&#xFF0C;&#x90A3;&#x4E48;ClassX&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5C31;&#x4F1A;&#x52A0;&#x8F7D;ClassY&#xFF08;&#x524D;&#x63D0;&#x662F;ClassY&#x5C1A;&#x672A;&#x88AB;&#x52A0;&#x8F7D;&#xFF09; &#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#xFF08;Context ClassLoader&#xFF09;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x4ECE;jdk1.2&#x5F00;&#x59CB;&#x5F15;&#x5165;&#x7684;&#xFF0C;&#x7C7B;Thread&#x4E2D;&#x7684; getContextCLassLoader() &#x4E0E;setContextClassLoader(ClassLoader classloader) &#x5206;&#x522B;&#x7528;&#x6765;&#x83B7;&#x53D6;&#x548C;&#x8BBE;&#x7F6E;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x901A;&#x8FC7;&#x4E0E;setContextClassLoader(ClassLoader classloader)&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x7684;&#x8BDD;&#xFF0C;&#x7EBF;&#x7A0B;&#x5C06;&#x7EE7;&#x627F;&#x5176;&#x7236;&#x7EBF;&#x7A0B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x3002; Java&#x5E94;&#x7528;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x521D;&#x59CB;&#x7EBF;&#x7A0B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x5728;&#x7EBF;&#x7A0B;&#x4E2D;&#x8FD0;&#x884C;&#x7684;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BE5;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6765;&#x52A0;&#x8F7D;&#x7C7B;&#x4E0E;&#x8D44;&#x6E90;&#x3002; &#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;jdbc&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x5E93;&#x7684;&#x9A71;&#x52A8;&#x90FD;&#x662F;&#x7531;&#x6BCF;&#x4E2A;&#x5382;&#x5546;&#x81EA;&#x5DF1;&#x53BB;&#x5B9E;&#x73B0;&#xFF0C;&#x5F00;&#x53D1;&#x8005;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x628A;&#x9A71;&#x52A8;jar&#x5305; &#xFF0C;&#x653E;&#x5230;&#x5F53;&#x524D;path&#x4E0B;&#x8FB9;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x4E9B;&#x9A71;&#x52A8;&#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x800C; java.sql &#x4E0B;&#x8FB9;&#x7684;&#x4E00;&#x4E9B;Class&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x53EF;&#x907F;&#x514D;&#x7684; &#xFF0C;&#x8981;&#x53BB;&#x4F7F;&#x7528;&#x5382;&#x5546;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5B9E;&#x73B0;&#x7684;&#x903B;&#x8F91;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E9B; java.sql &#x4E0B;&#x7684;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5B8C;&#x6210;&#x7684;&#x52A0;&#x8F7D;&#xFF0C;&#x7531;&#x4E8E;&#x7236;&#x52A0;&#x8F7D;&#x5668;(&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;)&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x65E0;&#x6CD5;&#x8BBF;&#x95EE;&#x5B50;&#x52A0;&#x8F7D;&#x5668;&#xFF08;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6216;&#x8005;&#x5E94;&#x7528;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF09;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x65E0;&#x6CD5;&#x5728;&#x6709;&#x4E9B; java.sql &#x7684;&#x7C7B;&#x53BB;&#x8BBF;&#x95EE;&#x5177;&#x4F53;&#x7684;&#x5382;&#x5546;&#x5B9E;&#x73B0;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x53CC;&#x4EB2;&#x59D4;&#x6258;&#x6A21;&#x578B;&#x5C34;&#x5C2C;&#x7684;&#x4E00;&#x4E2A;&#x5C40;&#x9762;&#x3002; &#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF1A; SPI (Service Provider Interface) &#x7236; ClassLoader &#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5F53;&#x524D;&#x7EBF;&#x7A0B; Thread.currentThread().getContextClassLoader() &#x6240;&#x6307;&#x5B9A;&#x7684; classloader &#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x3002; &#x8FD9;&#x5C31;&#x6539;&#x53D8;&#x4E86;&#x7236; ClassLoader &#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x5B50; ClassLoader &#x6216;&#x662F;&#x5176;&#x4ED6;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x7236;&#x5B50;&#x5173;&#x7CFB;&#x7684; CLassLoader &#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5373;&#x6539;&#x53D8;&#x4E86;&#x53CC;&#x4EB2;&#x59D4;&#x6258;&#x6A21;&#x578B;&#x3002; &#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#x5C31;&#x662F;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684; Current ClassLoader &#x5728;&#x53CC;&#x4EB2;&#x59D4;&#x6258;&#x6A21;&#x578B;&#x4E0B;&#xFF0C;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7531;&#x4E0B;&#x81F3;&#x4E0A;&#x7684;&#xFF0C;&#x5373;&#x4E0B;&#x5C42;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4F1A;&#x59D4;&#x6258;&#x4E0A;&#x5C42;&#x8FDB;&#x884C;&#x52A0;&#x8F7D;&#x3002;&#x4F46;&#x662F;&#x5BF9;&#x4E8E; SPI &#x6765;&#x8BF4;&#xFF0C;&#x6709;&#x4E9B;&#x63A5;&#x53E3;&#x662F; java &#x6838;&#x5FC3;&#x5E93;&#x6240;&#x63D0;&#x4F9B;&#x7684;&#xFF0C;&#x800C;java&#x6838;&#x5FC3;&#x5E93;&#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x5668;&#x6765;&#x52A0;&#x8F7D;&#x7684;&#xFF0C;&#x800C;&#x8FD9;&#x4E9B;&#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x73B0;&#x6765;&#x81EA;&#x4E8E;&#x4E0D;&#x540C;&#x7684;jar&#x5305;&#xFF08;&#x5382;&#x5546;&#x63D0;&#x4F9B;&#xFF09;&#xFF0C;java &#x7684;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x4E0D;&#x4F1A;&#x52A0;&#x8F7D;&#x5176;&#x4ED6;&#x6765;&#x6E90;&#x7684;jar&#x5305;&#xFF0C;&#x8FD9;&#x6837;&#x4F20;&#x7EDF;&#x7684;&#x53CC;&#x4EB2;&#x59D4;&#x6258;&#x6A21;&#x578B;&#x5C31;&#x65E0;&#x6CD5;&#x6EE1;&#x8DB3;SPI&#x7684;&#x8981;&#x6C42;&#xFF0C;&#x800C;&#x901A;&#x8FC7;&#x7ED9;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x8BBE;&#x7F6E;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6765;&#x5B9E;&#x73B0;&#x5BF9;&#x4E8E;&#x63A5;&#x53E3;&#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x3002; &#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x4E00;&#x822C;&#x4F7F;&#x7528;&#x6A21;&#x5F0F;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x4E00;&#x822C;&#x4F7F;&#x7528;&#x6A21;&#x5F0F;&#x5206;&#x4E3A;3&#x6B65;&#xFF0C;&#x83B7;&#x53D6;&#x3001;&#x4F7F;&#x7528;&#x548C;&#x8FD8;&#x539F;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x4F2A;&#x4EE3;&#x7801; 12345678910// &#x83B7;&#x53D6;ClassLoader classLoader = Thread.currentThread().getContextClassLoader();try { // &#x4F7F;&#x7528; Thread.currentThread().setContextClassLoader(targetClassLoader); method();} finally { // &#x8FD8;&#x539F; Thread.currentThread().setContextClassLoader(classLoader);} method &#x91CC;&#x9762;&#x8C03;&#x7528;&#x4E86; Thread.currentThread().getContextClassLoader()&#xFF0C;&#x83B7;&#x53D6;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x505A;&#x67D0;&#x4E9B;&#x4E8B;&#x60C5;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x7531;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; A &#x52A0;&#x8F7D;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x4F9D;&#x8D56;&#x4E5F;&#x662F;&#x6709;&#x76F8;&#x540C;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#xFF08;&#x5982;&#x679C;&#x8BE5;&#x4F9D;&#x8D56;&#x7C7B;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x52A0;&#x8F7D;&#x8FC7;&#x7684;&#x8BDD;&#xFF09;&#xFF0C;ContextClassLoader &#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x7834;&#x574F; Java &#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x59D4;&#x6258;&#x673A;&#x5236;&#x3002; &#x5F53;&#x9AD8;&#x5C42;&#x63D0;&#x4F9B;&#x4E86;&#x7EDF;&#x4E00;&#x7684;&#x63A5;&#x53E3;&#x8BA9;&#x5E95;&#x5C42;&#x53BB;&#x5B9E;&#x73B0;&#xFF0C;&#x540C;&#x65F6;&#x53C8;&#x8981;&#x5728;&#x9AD8;&#x5C42;&#x52A0;&#x8F7D;&#xFF08;&#x6216;&#x5B9E;&#x4F8B;&#x5316;&#xFF09;&#x5E95;&#x5C42;&#x7C7B;&#x65F6;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x8981;&#x901A;&#x8FC7;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6765;&#x5E2E;&#x52A9;&#x9AD8;&#x5C42;&#x7684; ClassLoader &#x627E;&#x5230;&#x5E76;&#x52A0;&#x8F7D;&#x8BE5;&#x7C7B;&#x3002; ServiceLoader&#x6211;&#x4EEC;&#x5148;&#x5F15;&#x5165;&#x9A71;&#x52A8;&#x4F9D;&#x8D56; 12345678910111213141516group &apos;com.cuzz.jvm&apos;version &apos;1.0&apos;apply plugin: &apos;java&apos;sourceCompatibility = 1.8repositories { mavenCentral()}dependencies { compile ( &quot;mysql:mysql-connector-java:5.1.34&quot; )} &#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 123456789101112131415161718192021/** * @Author: cuzz * @Date: 2019/2/1 14:46 * @Description: */public class MyTest26 { public static void main(String[] args) { ServiceLoader&lt;Driver&gt; serviceLoader = ServiceLoader.load(Driver.class); Iterator&lt;Driver&gt; iterator = serviceLoader.iterator(); while(iterator.hasNext()){ Driver driver = iterator.next(); System.out.println(&quot;driver: &quot;+driver.getClass() + &quot;loader: &quot;+ driver.getClass().getClassLoader() ); } System.out.println(&quot;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: &quot; + Thread.currentThread().getContextClassLoader()); System.out.println(&quot;ServiceLoader&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: &quot;+ServiceLoader.class.getClassLoader()); }} &#x8F93;&#x51FA; 1234driver: class com.mysql.jdbc.Driverloader: sun.misc.Launcher$AppClassLoader@dad5dcdriver: class com.mysql.fabric.jdbc.FabricMySQLDriverloader: sun.misc.Launcher$AppClassLoader@dad5dc&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: sun.misc.Launcher$AppClassLoader@dad5dcServiceLoader&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: null &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230; ServiceLoader &#x627E;&#x5230;&#x4E86; mysql &#x7684;&#x4E24;&#x4E2A;&#x9A71;&#x52A8;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x9A71;&#x52A8;&#x90FD;&#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#xFF0C;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#x9ED8;&#x8BA4;&#x4E5F;&#x662F;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;ServiceLoader&#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x4F46;&#x662F;&#x7A0B;&#x5E8F;&#x662F;&#x600E;&#x6837;&#x627E;&#x5230; mysql &#x7684;&#x4E24;&#x4E2A;&#x9A71;&#x52A8;&#x7684;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5728;&#x7A0B;&#x5E8F;&#x91CC;&#x8FB9;&#x8BBE;&#x7F6E;&#x4EFB;&#x4F55;&#x7684;&#x5C5E;&#x6027;&#x6216;&#x8005;&#x8DEF;&#x5F84;&#x4E4B;&#x7C7B;&#x7684;&#x4E1C;&#x897F;&#x8BA9;&#x7A0B;&#x5E8F;&#x80FD;&#x627E;&#x5230; mysql &#x7684;&#x9A71;&#x52A8;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x7814;&#x7A76;&#x4E00;&#x4E0B; ServiceLoader &#x7684;&#x6E90;&#x7801;&#x548C;&#x6587;&#x6863;&#x770B;&#x4E00;&#x4E0B;&#x4ED6;&#x4EEC;&#x7684;&#x539F;&#x7406;&#xFF1A; 1234&gt; public final class ServiceLoader&lt;S&gt;&gt; extends Object&gt; implements Iterable&lt;S&gt;&gt; &gt; A simple service-provider loading facility.A service is a well-known set of interfaces and (usually abstract) classes. A service provider is a specific implementation of a service. The classes in a provider typically implement the interfaces and subclass the classes defined in the service itself. Service providers can be installed in an implementation of the Java platform in the form of extensions, that is, jar files placed into any of the usual extension directories. Providers can also be made available by adding them to the application&#x2019;s class path or by some other platform-specific means.For the purpose of loading, a service is represented by a single type, that is, a single interface or abstract class. (A concrete class can be used, but this is not recommended.) A provider of a given service contains one or more concrete classes that extend this service type with data and code specific to the provider. The provider class is typically not the entire provider itself but rather a proxy which contains enough information to decide whether the provider is able to satisfy a particular request together with code that can create the actual provider on demand. The details of provider classes tend to be highly service-specific; no single class or interface could possibly unify them, so no such type is defined here. The only requirement enforced by this facility is that provider classes must have a zero-argument constructor so that they can be instantiated during loading.A service provider is identified by placing a provider-configuration file in the resource directory META-INF/services. The file&#x2019;s name is the fully-qualified binary name of the service&#x2019;s type. The file contains a list of fully-qualified binary names of concrete provider classes, one per line. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is &#x2018;#&#x2019; (&#x2018;\u0023&#x2019;, NUMBER SIGN); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.If a particular concrete provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates are ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible from the same class loader that was initially queried to locate the configuration file; note that this is not necessarily the class loader from which the file was actually loaded.Providers are located and instantiated lazily, that is, on demand. A service loader maintains a cache of the providers that have been loaded so far. Each invocation of the iterator method returns an iterator that first yields all of the elements of the cache, in instantiation order, and then lazily locates and instantiates any remaining providers, adding each one to the cache in turn. The cache can be cleared via the reload method.Service loaders always execute in the security context of the caller. Trusted system code should typically invoke the methods in this class, and the methods of the iterators which they return, from within a privileged security context.Instances of this class are not safe for use by multiple concurrent threads.Unless otherwise specified, passing a null argument to any method in this class will cause a NullPointerException to be thrown.Example Suppose we have a service type com.example.CodecSet which is intended to represent sets of encoder/decoder pairs for some protocol. In this case it is an abstract class with two abstract methods: public abstract Encoder getEncoder(String encodingName); public abstract Decoder getDecoder(String encodingName);Each method returns an appropriate object or null if the provider does not support the given encoding. Typical providers support more than one encoding.If com.example.impl.StandardCodecs is an implementation of the CodecSet service then its jar file also contains a file named META-INF/services/com.example.CodecSetThis file contains the single line: com.example.impl.StandardCodecs # Standard codecsThe CodecSet class creates and saves a single service instance at initialization:` 12&gt; private static ServiceLoader&lt;CodecSet&gt; codecSetLoader = ServiceLoader.load(CodecSet.class);&gt; &gt; To locate an encoder for a given encoding name it defines a static factory method which iterates through the known and available providers, returning only when it has located a suitable encoder or has run out of providers. 123456789&gt; public static Encoder getEncoder(String encodingName) {&gt; for (CodecSet cp : codecSetLoader) &gt; Encoder enc = cp.getEncoder(encodingName);&gt; if (enc != null)&gt; return enc;&gt; }&gt; return null;&gt; }&gt; &gt; A getDecoder method is defined similarly.Usage Note If the class path of a class loader that is used for provider loading includes remote network URLs then those URLs will be dereferenced in the process of searching for provider-configuration files.This activity is normal, although it may cause puzzling entries to be created in web-server logs. If a web server is not configured correctly, however, then this activity may cause the provider-loading algorithm to fail spuriously.A web server should return an HTTP 404 (Not Found) response when a requested resource does not exist. Sometimes, however, web servers are erroneously configured to return an HTTP 200 (OK) response along with a helpful HTML error page in such cases. This will cause a ServiceConfigurationError to be thrown when this class attempts to parse the HTML page as a provider-configuration file. The best solution to this problem is to fix the misconfigured web server to return the correct response code (HTTP 404) along with the HTML error page. &#x6211;&#x4EEC;&#x5148;&#x770B;&#x6E90;&#x7801; 1234567891011121314151617181920public final class ServiceLoader&lt;S&gt; implements Iterable&lt;S&gt; { // &#x524D;&#x7F00; private static final String PREFIX = &quot;META-INF/services/&quot;; // The class or interface representing the service being loaded private final Class&lt;S&gt; service; // The class loader used to locate, load, and instantiate providers private final ClassLoader loader; // The access control context taken when the ServiceLoader is created private final AccessControlContext acc; // Cached providers, in instantiation order private LinkedHashMap&lt;String,S&gt; providers = new LinkedHashMap&lt;&gt;(); // The current lazy-lookup iterator private LazyIterator lookupIterator; ...} &#x8BE5;&#x7C7B;&#x4E2D;&#x6709;&#x4E2A;&#x5E38;&#x91CF; PREFIX &#xFF0C;&#x6839;&#x636E;&#x6587;&#x6863;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x770B; mysql-connnector-java &#x4E2D;&#x4E5F;&#x6709; /1549005960054.png) &#x5176;&#x4E0B;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x5B57;&#x5C31;&#x662F;&#x670D;&#x52A1;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x6BD4;&#x5982;&#x6570;&#x636E;&#x5E93;&#x9A71;&#x52A8;&#x7684;&#x670D;&#x52A1;&#x662F;java.sql.Drive&#xFF0C;&#x6211;&#x4EEC;&#x5728;mysql&#x7684;jar&#x5305;&#x4E0B;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x6587;&#x4EF6;&#x91CC;&#x8FB9;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5177;&#x4F53;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x5168;&#x9650;&#x5B9A;&#x540D;&#xFF1A; 12com.mysql.jdbc.Drivercom.mysql.fabric.jdbc.FabricMySQLDriver &#x4E0E;&#x524D;&#x9762;&#x6253;&#x5370;&#x51FA;&#x6765;&#x7684;&#x9A71;&#x52A8;&#x662F;&#x4E00;&#x6837;&#x7684; ServiceLoader &#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48; mysql &#x7684;&#x9A71;&#x52A8;&#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x5462;&#xFF1F; &#x524D;&#x9762;&#x4EE3;&#x7801;&#x4E2D; ServiceLoader serviceLoader = ServiceLoader.load(Driver.class); &#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x662F;&#x600E;&#x4E48;&#x8D77;&#x4F5C;&#x7528;&#x7684;&#x5462;&#xFF0C;&#x8DDF;&#x8FDB;&#x6E90;&#x7801; 12345678910public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service) { // &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x53BB;&#x52A0;&#x8F7D; ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl);}public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service, ClassLoader loader) { // &#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5; return new ServiceLoader&lt;&gt;(service, loader);} &#x65E2;&#x7136; ServiceLoader &#x662F;&#x7531;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x90A3;&#x4E48; ServiceLoader &#x91CC;&#x8FB9;&#x7684;&#x7C7B;&#x90FD;&#x4F1A;&#x7528;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x53BB;&#x52A0;&#x8F7D;&#xFF0C;&#x4F46;&#x662F;&#x5462;&#x6211;&#x4EEC;&#x7684; mysql &#x9A71;&#x52A8;&#x4E0D;&#x5728;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684;&#x76EE;&#x5F55;&#x4E0B;&#x8FB9;&#xFF0C;&#x6211;&#x4EEC;&#x7684; mysql &#x9A71;&#x52A8;&#x4F4D;&#x4E8E; classpath &#x4E0B;&#x8FB9;&#xFF0C;&#x65E0;&#x6CD5;&#x7528;&#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230; load &#x65B9;&#x6CD5;&#x4F7F;&#x7528;&#x4E86;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x52A0;&#x8F7D;&#x5668;&#x9ED8;&#x8BA4;&#x662F;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; &#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5; 12345678910111213 private ServiceLoader(Class&lt;S&gt; svc, ClassLoader cl) { service = Objects.requireNonNull(svc, &quot;Service interface cannot be null&quot;); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; reload(); }// &#x8C03;&#x7528;reload() &#x65B9;&#x6CD5; public void reload() { // &#x6E05;&#x7A7A;&#x7F13;&#x5B58; providers = new LinkedHashMap&lt;&gt;(); providers.clear(); // &#x61D2;&#x52A0;&#x8F7D; lookupIterator = new LazyIterator(service, loader); } LazyIterator &#x7C7B; java.util.ServiceLoader.LazyIterator 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091private class LazyIterator implements Iterator&lt;S&gt; { Class&lt;S&gt; service; ClassLoader loader; Enumeration&lt;URL&gt; configs = null; Iterator&lt;String&gt; pending = null; String nextName = null; private LazyIterator(Class&lt;S&gt; service, ClassLoader loader) { this.service = service; this.loader = loader; } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else configs = loader.getResources(fullName); } catch (IOException x) { fail(service, &quot;Error locating configuration files&quot;, x); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } pending = parse(service, configs.nextElement()); } nextName = pending.next(); return true; } private S nextService() { if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class&lt;?&gt; c = null; try { c = Class.forName(cn, false, loader); } catch (ClassNotFoundException x) { fail(service, &quot;Provider &quot; + cn + &quot; not found&quot;); } if (!service.isAssignableFrom(c)) { fail(service, &quot;Provider &quot; + cn + &quot; not a subtype&quot;); } try { S p = service.cast(c.newInstance()); providers.put(cn, p); return p; } catch (Throwable x) { fail(service, &quot;Provider &quot; + cn + &quot; could not be instantiated&quot;, x); } throw new Error(); // This cannot happen } public boolean hasNext() { if (acc == null) { return hasNextService(); } else { PrivilegedAction&lt;Boolean&gt; action = new PrivilegedAction&lt;Boolean&gt;() { public Boolean run() { return hasNextService(); } }; return AccessController.doPrivileged(action, acc); } } public S next() { if (acc == null) { return nextService(); } else { PrivilegedAction&lt;S&gt; action = new PrivilegedAction&lt;S&gt;() { public S run() { return nextService(); } }; return AccessController.doPrivileged(action, acc); } } public void remove() { throw new UnsupportedOperationException(); }} &#x8FD9;&#x6837;&#x5C31;&#x628A;&#x9A71;&#x52A8;&#x52A0;&#x8F7D;&#x51FA;&#x6765;&#x4E86;&#xFF0C;&#x5219;&#x524D;&#x9762;&#x4EE3;&#x7801;&#x8F93;&#x51FA; 1234driver: class com.mysql.jdbc.Driverloader: sun.misc.Launcher$AppClassLoader@dad5dcdriver: class com.mysql.fabric.jdbc.FabricMySQLDriverloader: sun.misc.Launcher$AppClassLoader@dad5dc&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: sun.misc.Launcher$AppClassLoader@dad5dcServiceLoader&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: null &#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x524D;&#x9762;&#x4EE3;&#x7801;&#x6539;&#x4E00;&#x4E0B;&#xFF0C;&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x4E3A;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; 1234567891011121314151617public class MyTest26 { public static void main(String[] args) { // &#x628A;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x8BBE;&#x7F6E;&#x4E3A;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; Thread.currentThread().setContextClassLoader(MyTest26.class.getClassLoader().getParent()); ServiceLoader&lt;Driver&gt; serviceLoader = ServiceLoader.load(Driver.class); Iterator&lt;Driver&gt; iterator = serviceLoader.iterator(); while(iterator.hasNext()){ Driver driver = iterator.next(); System.out.println(&quot;driver: &quot;+driver.getClass() + &quot;loader: &quot;+ driver.getClass().getClassLoader() ); } System.out.println(&quot;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: &quot; + Thread.currentThread().getContextClassLoader()); System.out.println(&quot;ServiceLoader&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: &quot;+ServiceLoader.class.getClassLoader()); }} &#x5219;&#x8F93;&#x51FA; 12&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: sun.misc.Launcher$ExtClassLoader@a14482ServiceLoader&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;: null &#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5FAA;&#x73AF;&#x6CA1;&#x6709;&#x53BB;&#x6267;&#x884C;&#xFF0C;&#x4E0A;&#x4E0B;&#x6587;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x662F;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6CA1;&#x5565;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x7CFB;&#x7EDF;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x4E0A;&#x7EA7;&#x662F;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;&#x4F46;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5FAA;&#x73AF;&#x662F;&#x7A7A;&#x7684;&#x5462;&#xFF1F;&#x539F;&#x56E0;&#x5C31;&#x662F;&#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x65E0;&#x6CD5;&#x52A0;&#x8F7D; classpath&#x4E0B;&#x8FB9;&#x7684;&#x7C7B;&#xFF0C;mysql &#x7684; jar &#x5305;&#x662F;&#x653E;&#x5728; classpath&#x4E0B;&#x8FB9;&#x7684;&#x3002;]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Java虚拟机（一）]]></title>
    <url>%2F2019%2F01%2F27%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7C7B;&#x52A0;&#x8F7D;&#x673A;&#x5236;&#x5728; Java &#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x7C7B;&#x578B;&#xFF08;&#x7C7B;&#xFF0C;&#x63A5;&#x53E3;&#xFF0C;&#x679A;&#x4E3E;&#xFF09;&#x7684;&#x52A0;&#x8F7D;&#x3001;&#x8FDE;&#x63A5;&#xFF08;&#x9A8C;&#x8BC1;&#xFF0C;&#x51C6;&#x5907;&#xFF0C;&#x89E3;&#x6790;&#xFF09;&#x4E0E;&#x521D;&#x59CB;&#x5316;&#x8FC7;&#x7A0B;&#x90FD;&#x662F;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x671F;&#x95F4;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x66F4;&#x5927;&#x7684;&#x7075;&#x6D3B;&#x6027;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x66F4;&#x591A;&#x7684;&#x53EF;&#x80FD;&#x6027; &#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6DF1;&#x5165;&#x5256;&#x6790;Java &#x865A;&#x62DF;&#x673A;&#x4E0E;&#x7A0B;&#x5E8F;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F; &#x5728;&#x5982;&#x4E0B;&#x51E0;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;Java &#x865A;&#x62DF;&#x673A;&#x5C06;&#x7ED3;&#x675F;&#x751F;&#x547D;&#x5468;&#x671F; &#x6267;&#x884C;&#x4E86; System.exit() &#x65B9;&#x6CD5; &#x7A0B;&#x5E8F;&#x6B63;&#x5E38;&#x6267;&#x884C;&#x7ED3;&#x675F; &#x7A0B;&#x5E8F;&#x5728;&#x6267;&#x884C;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x4E86;&#x5F02;&#x5E38;&#x6216;&#x5219;&#x9519;&#x8BEF;&#x800C;&#x5F02;&#x5E38;&#x7EC8;&#x6B62; &#x7531;&#x4E8E;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x51FA;&#x73B0;&#x4E86;&#x9519;&#x8BEF;&#xFF0C;&#x5BFC;&#x81F4; Java &#x865A;&#x62DF;&#x673A;&#x8FDB;&#x7A0B;&#x7ED3;&#x675F; &#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x3001;&#x8FDE;&#x63A5;&#x4E0E;&#x521D;&#x59CB;&#x5316;/timg.jpg) &#x52A0;&#x8F7D;&#xFF1A;&#x67E5;&#x627E;&#x5E76;&#x52A0;&#x8F7D;&#x7C7B;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E; &#x8FDE;&#x63A5; &#x9A8C;&#x8BC1;&#xFF1A;&#x786E;&#x4FDD;&#x88AB;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x7684;&#x6B63;&#x786E;&#x6027; &#x51C6;&#x5907;&#xFF1A;&#x4E3A;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x9ED8;&#x8BA4;&#x503C; &#x89E3;&#x6790;&#xFF1A;&#x628A;&#x7C7B;&#x4E2D;&#x7684;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x8F6C;&#x5316;&#x4E3A;&#x76F4;&#x63A5;&#x5F15;&#x7528; &#x521D;&#x59CB;&#x5316;&#xFF1A;&#x4E3A;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x8D4B;&#x4E88;&#x6B63;&#x786E;&#x7684;&#x521D;&#x59CB;&#x503C; &#x4F7F;&#x7528;&#xFF08;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x5316;&#xFF09;&#xFF1A; &#x4E3A;&#x65B0;&#x7684;&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x5185;&#x5B58; &#x4E3A;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF;&#x8D4B;&#x9ED8;&#x8BA4;&#x503C; &#x4E3A;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF;&#x8D4B;&#x4E88;&#x6B63;&#x786E;&#x7684;&#x521D;&#x59CB;&#x503C; Java &#x7F16;&#x8BD1;&#x5668;&#x4E3A;&#x5B83;&#x7F16;&#x8BD1;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x90FD;&#x81F3;&#x5C11;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#xFF0C;&#x5728; Java &#x7684; class &#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x8FD9;&#x8FD9;&#x5B9E;&#x4F8B;&#x521D;&#x59CB;&#x65B9;&#x6CD5;&#x88AB;&#x79F0;&#x4E3A; &lt;init&gt; &#xFF0C;&#x5BF9;&#x6E90;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;java &#x7F16;&#x8BD1;&#x5668;&#x90FD;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; &lt;init&gt; &#x65B9;&#x6CD5; Java &#x7A0B;&#x5E8F;&#x5BF9;&#x7C7B;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4E24;&#x79CD;&#xFF1A; &#x4E3B;&#x52A8;&#x4F7F;&#x7528; &#x521B;&#x5EFA;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B; &#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x7684;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF0C;&#x6216;&#x5219;&#x5BF9;&#x8BE5;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x8D4B;&#x503C; &#x8C03;&#x7528;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5; &#x53CD;&#x5C04;&#xFF08;&#x5982; Class.forName(&quot;com.cuzz.Test&quot;)&#xFF09; &#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B; Java &#x865A;&#x62DF;&#x673A;&#x542F;&#x52A8;&#x65F6;&#x88AB;&#x6807;&#x660E;&#x4E3A;&#x542F;&#x52A8;&#x7C7B;&#x7684;&#x7C7B; &#x88AB;&#x52A8;&#x4F7F;&#x7528; &#x6240;&#x6709;&#x7684; Java &#x865A;&#x62DF;&#x673A;&#x5B9E;&#x73B0;&#x5FC5;&#x987B;&#x5728;&#x6BCF;&#x4E2A;&#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x88AB; Java &#x7A0B;&#x5E8F;&#x9996;&#x6B21;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#x65F6;&#x624D;&#x521D;&#x59CB;&#x5316;&#x4ED6;&#x4EEC; &#x6211;&#x4EEC;&#x6765;&#x770B;&#x4E00;&#x6BB5;&#x4EE3;&#x7801; 12345678910111213141516171819public class MyTest01 { public static void main(String[] args) { System.out.println(Child1.str); }}class Parent1 { public static String str = &quot;hello world&quot;; static { System.out.println(&quot;Parent1 static block&quot;); }}class Child1 extends Parent1 { static { System.out.println(&quot;Child1 static block&quot;); }} &#x8F93;&#x51FA; 12Parent1 static blockhello world &#x5BF9;&#x4E8E;&#x9759;&#x6001;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x53EA;&#x6709;&#x5B9A;&#x4E49;&#x8BE5;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x624D;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x8FD9;&#x4E2A; Child1.str &#x662F;&#x5B50;&#x7C7B;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#xFF0C;&#x6240;&#x4EE5;&#x5B50;&#x7C7B;&#x4E0D;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x7236;&#x7C7B;&#x624D;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x8FD9;&#x662F;&#x5BF9; Parent1 &#x7684;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x53EA;&#x662F;&#x7528;&#x4E86; Child1 &#x7684;&#x540D;&#x5B57;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x4E3B;&#x52A8;&#x4F7F;&#x7528; Child1 &#x8FD9;&#x4E2A;&#x7C7B; &#x6211;&#x4EEC;&#x5728;&#x6765;&#x770B;&#x770B;&#x6709;&#x6CA1;&#x6709;&#x88AB;&#x52A0;&#x8F7D;&#x5230;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#xFF0C;&#x5728; VM options : -XX:+TraceClassLoading &#x5728;&#x8FD0;&#x884C; 1234567...[Loaded com.cuzz.jvm.classloader.Parent1 from file:/E:/project/learn-demo/demo-10-jvm-lecture/out/production/classes/][Loaded com.cuzz.jvm.classloader.Child1 from file:/E:/project/learn-demo/demo-10-jvm-lecture/out/production/classes/]Parent1 static blockhello world[Loaded java.lang.Shutdown from E:\deployer\jdk8\jre\lib\rt.jar][Loaded java.lang.Shutdown$Lock from E:\deployer\jdk8\jre\lib\rt.jar] &#x53D1;&#x73B0;&#x8FD9;&#x4E24;&#x4E2A;&#x7C7B;&#x5DF2;&#x7ECF;&#x88AB;&#x52A0;&#x8F7D;&#x5230;&#x865A;&#x62DF;&#x4E2D; &#x518D;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 1234567891011121314151617181920public class MyTest01 { public static void main(String[] args) { System.out.println(Child1.str2); }}class Parent1 { public static String str = &quot;hello world&quot;; static { System.out.println(&quot;Parent1 static block&quot;); }}class Child1 extends Parent1 { public static String str2 = &quot;welcome&quot;; static { System.out.println(&quot;Child1 static block&quot;); }} &#x8F93;&#x51FA; 123Parent1 static blockChild1 static blockwelcome &#x5F53;&#x6211;&#x4EEC;&#x521D;&#x59CB;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5148;&#x521D;&#x59CB;&#x5316;&#x7236;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x7EBF;&#x8F93;&#x51FA;&#x7236;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7801;&#x5757; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x52A0;&#x4E0A; final &#x53D8;&#x4E3A;&#x5E38;&#x91CF; 12345678910111213141516/** * @Author: cuzz * @Date: 2019/1/25 19:16 * @Description: */public class MyTest02 { public static void main(String[] args) { System.out.println(Parent2.str); }}class Parent2 { public static final String str = &quot;hello world&quot;; static { System.out.println(&quot;Parent2 static block&quot;); }} &#x8F93;&#x51FA; 1hello world &#x5E38;&#x91CF;&#x5728;&#x7F16;&#x8BD1;&#x9636;&#x6BB5;&#x4F1A;&#x5B58;&#x5165;&#x5230;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x5E38;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#x6240;&#x5728;&#x7684;&#x7C7B;&#x7684;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#xFF08;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4F1A;&#x5B58;&#x5165;MyTest02&#x8FD9;&#x4E2A;&#x7C7B;&#x4E2D;&#xFF09;&#xFF0C;&#x672C;&#x8D28;&#x4E0A;&#xFF0C;&#x8C03;&#x7528;&#x7C7B;&#x5E76;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x5F15;&#x7528;&#x5230;&#x5B9A;&#x4E49;&#x5E38;&#x91CF;&#x7684;&#x7C7B;&#xFF0C;&#x56E0;&#x6B64;&#x5E76;&#x4E0D;&#x4F1A;&#x89E6;&#x53D1;&#x5B9A;&#x4E49;&#x5E38;&#x91CF;&#x7684;&#x7C7B;&#x7684;&#x521D;&#x59CB;&#x5316; &#x6CE8;&#x610F;&#xFF1A;&#x8FD9;&#x91CC;&#x6307;&#x7684;&#x662F;&#x5C06;&#x5E38;&#x91CF;&#x5B58;&#x653E;&#x5230;&#x4E86; MyTest02 &#x7684;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#xFF0C;&#x4E4B;&#x540E; MyTest02 &#x4E0E; Parent2 &#x5C31;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x5173;&#x7CFB;&#x4E86;&#xFF0C;&#x751A;&#x81F3;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06; Parent &#x7684; class &#x6587;&#x4EF6;&#x5220;&#x9664; &#x6211;&#x4EEC;&#x8FDB;&#x5165; classes &#x76EE;&#x5F55;&#x4E0B;&#x4F7F;&#x7528;&#xFF1A;javap -c com.cuzz.jvm.classloader.MyTest02 &#x547D;&#x4EE4;&#x53CD;&#x7F16;&#x8BD1;&#x4E00;&#x4E0B; 123456789101112131415Compiled from &quot;MyTest02.java&quot;public class com.cuzz.jvm.classloader.MyTest02 { public com.cuzz.jvm.classloader.MyTest02();// (1) Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #4 (2) // String hello world (3) 5: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return} &#x662F;&#x6784;&#x9020;&#x65B9;&#x6CD5; ldc &#x52A9;&#x8BB0;&#x7B26;&#x8868;&#x793A;&#x5C06; int&#xFF0C;float &#x6216; String &#x7C7B;&#x578B;&#x7684;&#x503C;&#x4ECE;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x63A8;&#x9001;&#x81F3;&#x6808;&#x9876; &#x53EF;&#x4EE5;&#x770B;&#x51FA;Parent2.str &#x5DF2;&#x7ECF;&#x8F6C;&#x5316;&#x4E3A; hello world &#x6CE8;&#xFF1A;&#x5F53; int &#x53D6;&#x503C;-1~5&#x91C7;&#x7528;iconst&#x6307;&#x4EE4;&#xFF0C;&#x53D6;&#x503C;-128~127&#x91C7;&#x7528; bipush &#x6307;&#x4EE4;&#xFF0C;&#x53D6;&#x503C;-32768~32767&#x91C7;&#x7528; sipush &#x6307;&#x4EE4;&#xFF0C;&#x53D6;&#x503C;-2147483648~2147483647&#x91C7;&#x7528; ldc &#x6307;&#x4EE4; &#x6211;&#x4EEC;&#x5728;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 1234567891011public class MyTest03 { public static void main(String[] args) { System.out.println(Parent3.str); }}class Parent3 { public static final String str = UUID.randomUUID().toString(); static { System.out.println(&quot;Parent3 static block&quot;); }} &#x8F93;&#x51FA; 12Parent3 static blockbee2f54d-8960-46d0-b5d7-02666fcf4a14 &#x76F8;&#x6BD4;&#x4E8E;&#x4E0A;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x8F93;&#x51FA;&#x4E86;&#x9759;&#x6001;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x8BF4;&#x660E; Parent3 &#x8FD9;&#x4E2A;&#x7C7B;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E86;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x7684;&#x503C;&#x5E76;&#x975E;&#x7F16;&#x8BD1;&#x671F;&#x95F4;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5668;&#x503C;&#x5C31;&#x4E0D;&#x4F1A;&#x653E;&#x5230;&#x8C03;&#x7528;&#x7C7B;&#x7684;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#xFF0C;&#x8FD9;&#x662F;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x5E38;&#x91CF;&#x6240;&#x5728;&#x7684;&#x7C7B;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x8FD9;&#x7ED9;&#x7C7B;&#x521D;&#x59CB;&#x5316; &#x518D;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 123456789101112131415161718public class MyTest04 { public static void main(String[] args) { Parent4[] parent4s = new Parent4[1]; System.out.println(&quot;---------&quot;); System.out.println(parent4s.getClass()); System.out.println(parent4s.getClass().getSuperclass()); System.out.println(&quot;---------&quot;); int[] ints = new int[1]; System.out.println(ints.getClass()); System.out.println(ints.getClass().getSuperclass()); }}class Parent4 { static { System.out.println(&quot;Parent4 static block&quot;); }} &#x8F93;&#x51FA; 12345678---------class [Lcom.cuzz.jvm.classloader.Parent4;class java.lang.Object---------class [Iclass java.lang.ObjectProcess finished with exit code 0 &#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x5B9E;&#x4F8B;&#x6765;&#x8BF4;&#xFF0C;&#x5176;&#x7C7B;&#x578B;&#x662F;&#x7531; JVM &#x5728;&#x8FD0;&#x884C;&#x671F;&#x52A8;&#x6001;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x8868;&#x793A;&#x4E3A; [Lcom.cuzz.jvm.classloader.Parent4 &#x8FD9;&#x79CD;&#x5F62;&#x5F0F;&#xFF0C;&#x52A8;&#x6001;&#x751F;&#x6210;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x5176;&#x7236;&#x7C7B;&#x578B;&#x5C31;&#x662F; Object &#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x6765;&#x8BF4;&#xFF0C;JavaDoc &#x7ECF;&#x5E38;&#x5C06;&#x6784;&#x6210;&#x7684;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x79F0;&#x4E3A; Component&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x5C06;&#x6570;&#x7EC4;&#x964D;&#x4F4E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7C7B;&#x578B; &#x6211;&#x4EEC;&#x4F7F;&#x7528; javap -c com.cuzz.jvm.classloader.MyTest04 &#x8FDB;&#x884C;&#x53CD;&#x7F16;&#x8BD1; 1234567891011121314151617181920212223242526272829303132333435363738394041public class com.cuzz.jvm.classloader.MyTest04 { public com.cuzz.jvm.classloader.MyTest04(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: iconst_1 1: anewarray #2 // class com/cuzz/jvm/classloader/Parent4 4: astore_1 5: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 8: ldc #4 // String --------- 10: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 13: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 16: aload_1 17: invokevirtual #6 // Method java/lang/Object.getClass:()Ljava/lang/Class; 20: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V 23: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 26: aload_1 27: invokevirtual #6 // Method java/lang/Object.getClass:()Ljava/lang/Class; 30: invokevirtual #8 // Method java/lang/Class.getSuperclass:()Ljava/lang/Class; 33: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V 36: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 39: ldc #4 // String --------- 41: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 44: iconst_1 45: newarray int 47: astore_2 48: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 51: aload_2 52: invokevirtual #6 // Method java/lang/Object.getClass:()Ljava/lang/Class; 55: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V 58: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 61: aload_2 62: invokevirtual #6 // Method java/lang/Object.getClass:()Ljava/lang/Class; 65: invokevirtual #8 // Method java/lang/Class.getSuperclass:()Ljava/lang/Class; 68: invokevirtual #7 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V 71: return} &#x91CC;&#x9762;&#x6709;&#x4E24;&#x4E2A;&#x52A9;&#x8BB0;&#x7B26; anewarray &#xFF1A;&#x8868;&#x793A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#xFF08;&#x5982;&#x7C7B;&#x3001;&#x63A5;&#x53E3;&#x3001;&#x6570;&#x7EC4;&#xFF09;&#x6570;&#x7EC4;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x503C;&#x538B;&#x5165;&#x6808;&#x9876; newarray&#xFF1A;&#x8868;&#x793A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x539F;&#x59CB;&#x7C7B;&#x578B;&#xFF08;&#x5982;int&#x3001;float&#x3001;char&#x7B49;&#xFF09;&#x6570;&#x7EC4;&#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x5F15;&#x7528;&#x503C;&#x538B;&#x5165;&#x6808;&#x9876; &#x4E0B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 123456789101112public class MyTest05 { public static void main(String[] args) { System.out.println(Child5.j); }}interface Parent5 { int i = 5;}interface Child5 extends Parent5 { int j = 55;} &#x7F16;&#x8BD1;&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x628A; Parent5.class &#x6587;&#x4EF6;&#x5220;&#x6389;&#xFF0C;&#x8FD8;&#x80FD;&#x6253;&#x5370;&#x51FA; 55&#xFF0C;&#x8BF4;&#x660E;&#x5F53;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x5728;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;&#x5E76;&#x4E0D;&#x8981;&#x6C42;&#x5176;&#x7236;&#x63A5;&#x53E3;&#x90FD;&#x5B8C;&#x6210;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A; Child5.class &#x6587;&#x4EF6;&#x4E5F;&#x5220;&#x6389;&#xFF0C;&#x4E5F;&#x80FD;&#x6253;&#x5370;&#x51FA; 55&#xFF0C;&#x539F;&#x6765;&#x63A5;&#x53E3;&#x4E2D;&#x7684;&#x4FEE;&#x9970;&#x7B26;&#x9ED8;&#x8BA4;&#x4E3A; public static final &#x8BF4;&#x660E;&#x63A5;&#x53E3;&#x4E2D;&#x7684;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x52A0;&#x8F7D;&#x5230; JVM &#x4E2D;&#xFF0C;&#x4E5F;&#x5C31;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316;&#x3002; 12345678910111213141516public class MyTest05 { public static void main(String[] args) { System.out.println(Child5.j); }}interface Parent5 { public static Thread thread = new Thread() { { System.out.println(&quot;Parent5 static block&quot;); } };}class Child5 implements Parent5 { public static int j = 55;} &#x6B64;&#x65F6;&#x4E5F;&#x4E5F;&#x662F;&#x8F93;&#x51FA; 55 &#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316; Child5 &#x63A5;&#x53E3; Parent5 &#x4E0B;&#x4E00;&#x4F8B;&#x5B50; 12345678910111213141516171819202122232425public class MyTest06 { public static void main(String[] args) { Singleton singleton = Singleton.newSingleton(); System.out.println(Singleton.counter1); System.out.println(Singleton.counter2); }}class Singleton { public static int counter1; private static Singleton singleton = new Singleton(); private Singleton() { counter1++; // counter1 = 1 counter2++; // counter2 = 1 } public static int counter2 = 0; // &#x6B64;&#x65F6;&#x53C8;&#x628A;&#x503C;&#x8D4B;&#x503C;&#x4E3A; 0 public static Singleton newSingleton() { return singleton; }} &#x6B64;&#x65F6;&#x8F93;&#x51FA; 1210 &#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x8FD9;&#x6837;&#x5462;&#xFF0C;&#x51C6;&#x5907;&#x9636;&#x6BB5; counter1 &#x548C; counter2 &#x7684;&#x521D;&#x59CB;&#x503C;&#x90FD;&#x662F; 0 &#xFF0C;&#x521D;&#x59CB;&#x5316;&#x9636;&#x6BB5;&#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#x8D4B;&#x503C;&#xFF0C;&#x540E;&#x9762; counter2 &#x53C8;&#x8D4B;&#x503C;&#x4E3A; 0 &#x6211;&#x4EEC;&#x518D;&#x6765;&#x56DE;&#x987E;&#x4E00;&#x4E0B; 12345678910111213141516171819202122public class MyTest09 { static { System.out.println(&quot;MyTest09 static block&quot;); } public static void main(String[] args) { System.out.println(Child9.j); }}class Parent9 { public static int i = 9; static { System.out.println(&quot;Parent9 static block&quot;); }}class Child9 extends Parent9 { public static int j = 99; static { System.out.println(&quot;Child9 static block&quot;); }} &#x8F93;&#x51FA; 1234MyTest09 static blockParent9 static blockChild9 static block99 &#x6211;&#x4EEC;&#x591A;&#x8F93;&#x51FA;&#x70B9;&#x4FE1;&#x606F; 1234567891011121314151617181920212223242526272829public class MyTest09 { static { System.out.println(&quot;MyTest09 static block&quot;); } public static void main(String[] args) { Parent9 parent9; // &#x4E0D;&#x4F1A;&#x521D;&#x59CB;&#x5316; System.out.println(&quot;-------------&quot;); parent9 = new Parent9(); System.out.println(&quot;-------------&quot;); System.out.println(Parent9.i); System.out.println(&quot;-------------&quot;); System.out.println(Child9.j); }}class Parent9 { public static int i = 9; static { System.out.println(&quot;Parent9 static block&quot;); }}class Child9 extends Parent9 { public static int j = 99; static { System.out.println(&quot;Child9 static block&quot;); }} &#x8F93;&#x51FA;&#x7ED3;&#x679C; 12345678MyTest09 static block-------------Parent9 static block-------------9-------------Child9 static block99 &#x5728;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 1234567891011121314public class MyTest12 { public static void main(String[] args) throws Exception{ ClassLoader classLoader = ClassLoader.getSystemClassLoader(); Class&lt;?&gt; clazz = classLoader.loadClass(&quot;com.cuzz.jvm.classloader.CL&quot;); System.out.println(&quot;--------------&quot;); clazz = Class.forName(&quot;com.cuzz.jvm.classloader.CL&quot;); }}class CL { static { System.out.println(&quot;CL static block&quot;); }} &#x8F93;&#x51FA; 12--------------CL static block &#x8BF4;&#x660E;&#x8C03;&#x7528; ClassLoader &#x7C7B;&#x7684; loadClass &#x65B9;&#x6CD5;&#x52A0;&#x8F7D;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x5BF9;&#x7C7B;&#x7684;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#xFF0C;&#x4E0D;&#x4F1A;&#x5BFC;&#x81F4;&#x7C7B;&#x7684;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x800C;&#x901A;&#x8FC7; Class.forName &#x65B9;&#x6CD5;&#x662F;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x673A;&#x5236;&#xFF0C;&#x4F1A;&#x5BF9;&#x7C7B;&#x521D;&#x59CB;&#x5316; &#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x662F;&#x6307;&#x5C06;&#x7C7B;&#x7684; .class &#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x8BFB;&#x5165;&#x5230;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x5C06;&#x5176;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x533A;&#x7684;&#x65B9;&#x6CD5;&#x533A;&#x5185;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x521B;&#x5EFA;&#x4E00;&#x4E2A; java.lang.Class &#x5BF9;&#x8C61;&#xFF08;&#x89C4;&#x8303;&#x4E2D;&#x5E76;&#x672A;&#x8BF4;&#x660E;Class&#x5BF9;&#x8C61;&#x4F4D;&#x4E8E;&#x54EA;&#x91CC;&#xFF0C;HotSpot &#x865A;&#x62DF;&#x673A;&#x5C06;&#x5176;&#x653E;&#x5728;&#x4E86;&#x65B9;&#x6CD5;&#x533A;&#x4E2D;&#xFF09;&#x7528;&#x6765;&#x5C01;&#x88C5;&#x7C7B;&#x5728;&#x65B9;&#x6CD5;&#x533A;&#x5185;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x52A0;&#x8F7D; .class &#x6587;&#x4EF6;&#x7684;&#x65B9;&#x5F0F; &#x4ECE;&#x672C;&#x5730;&#x7CFB;&#x7EDF;&#x4E2D;&#x76F4;&#x63A5;&#x52A0;&#x8F7D; .class &#x6587;&#x4EF6; &#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4E0B;&#x8F7D;&#x7684; .class &#x6587;&#x4EF6; &#x4ECE; zip&#xFF0C;jar &#x7B49;&#x5F52;&#x6863;&#x6587;&#x4EF6;&#x4E2D;&#x52A0;&#x8F7D; .class &#x6587;&#x4EF6; &#x4ECE;&#x4E13;&#x6709;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x63D0;&#x53D6; .class &#x6587;&#x4EF6; &#x5C06; Java &#x6E90;&#x6587;&#x4EF6;&#x52A8;&#x6001;&#x7F16;&#x8BD1;&#x4E3A; .class &#x6587;&#x4EF6; &#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x5668;/959672-20180411183115424-1209964594.png) &#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x5668;&#x5206;&#x7C7B;&#xFF1A; Java &#x865A;&#x62DF;&#x673A;&#x81EA;&#x5E26;&#x7684;&#x52A0;&#x8F7D;&#x5668; &#x6839;&#x52A0;&#x8F7D;&#x5668;&#xFF08;Bootstrap&#xFF09; &#x62D3;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF08;Extension&#xFF09; &#x5E94;&#x7528;&#x52A0;&#x8F7D;&#x5668;&#xFF08;Application&#xFF09; &#x7528;&#x6237;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668; java.lang.ClassLoader &#x7684;&#x5B50;&#x7C7B; &#x7528;&#x6237;&#x5B9A;&#x5236;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x65B9;&#x6CD5; &#x6CE8;&#x610F;&#xFF1A;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x7B49;&#x5230;&#x67D0;&#x4E2A;&#x7C7B;&#x88AB;&#x9996;&#x6B21;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#x65F6;&#x518D;&#x52A0;&#x8F7D;&#x5B83;&#xFF1B;JVM &#x89C4;&#x8303;&#x5141;&#x8BB8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5728;&#x9884;&#x6599;&#x67D0;&#x4E2A;&#x7C7B;&#x5C06;&#x8981;&#x88AB;&#x4F7F;&#x7528;&#x65F6;&#x5C31;&#x9884;&#x5148;&#x52A0;&#x8F7D;&#x5B83;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x9884;&#x5148;&#x52A0;&#x8F7D;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x4E86; .class &#x6587;&#x4EF6;&#x7F3A;&#x5931;&#x6216;&#x5B58;&#x5728;&#x9519;&#x8BEF;&#xFF0C;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5FC5;&#x987B;&#x5728;&#x7A0B;&#x5E8F;&#x9996;&#x6B21;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#x8BE5;&#x7C7B;&#x624D;&#x62A5;&#x544A;&#x9519;&#x8BEF;&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x7C7B;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x88AB;&#x7A0B;&#x5E8F;&#x4E3B;&#x52A8;&#x4F7F;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5C31;&#x4E0D;&#x4F1A;&#x62A5;&#x544A;&#x9519;&#x8BEF; &#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 12345678910111213public class MyTest07 { public static void main(String[] args) throws Exception { Class&lt;?&gt; clazz = Class.forName(&quot;java.lang.String&quot;); System.out.println(clazz.getClassLoader()); Class&lt;?&gt; clazz1 = Class.forName(&quot;com.cuzz.jvm.classloader.C&quot;); System.out.println(clazz1.getClassLoader()); }}class C { } &#x8F93;&#x51FA; 12nullsun.misc.Launcher$AppClassLoader@dad5dc &#x770B;&#x770B; getClassLoader &#x7684;&#x6587;&#x6863; Returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader. &#x8BF4;&#x660E;&#x8F93;&#x51FA; null &#x8BF4;&#x660E; java.lang.String &#x662F;&#x6839;&#x52A0;&#x8F7D;&#x5668;&#x52A0;&#x8F7D;&#x7684; &#x83B7;&#x53D6; ClassLoader &#x7684;&#x9014;&#x5F84; &#x83B7;&#x5F97;&#x5F53;&#x524D;&#x7C7B; ClassLoader clazz.getClassLoader() &#x83B7;&#x5F97;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x7684; ClassLoader Thread.currentThread().getContextClassLoader() &#x83B7;&#x53D6;&#x7CFB;&#x7EDF;&#x7684; ClassLoader ClassLoader.getSystemClassLoader() &#x83B7;&#x53D6;&#x8C03;&#x7528;&#x8005;&#x7684; ClassLoader DriverManger.getCallerClassLoader() &#x7C7B;&#x7684;&#x9A8C;&#x8BC1;&#x7C7B;&#x7684;&#x9A8C;&#x8BC1;&#x7684;&#x5185;&#x5BB9;&#xFF1A; &#x7C7B;&#x6587;&#x4EF6;&#x7684;&#x7ED3;&#x6784;&#x68C0;&#x67E5; &#x8BED;&#x4E49;&#x68C0;&#x67E5; &#x5B57;&#x8282;&#x7801;&#x9A8C;&#x8BC1; &#x4E8C;&#x8FDB;&#x5236;&#x517C;&#x5BB9;&#x6027;&#x7684;&#x9A8C;&#x8BC1; &#x7C7B;&#x7684;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x673A;&#x5F53; Java &#x865A;&#x62DF;&#x673A;&#x5728;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x8981;&#x6C42;&#x5B83;&#x7684;&#x6240;&#x6709;&#x7236;&#x7C7B;&#x90FD;&#x5DF2;&#x7ECF;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6761;&#x89C4;&#x5219;&#x5E76;&#x4E0D;&#x9002;&#x7528;&#x4E8E;&#x63A5;&#x53E3; &#x5728;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x5148;&#x521D;&#x59CB;&#x5316;&#x5B83;&#x6240;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3; &#x5728;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x65F6;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x5148;&#x521D;&#x59CB;&#x5316;&#x5B83;&#x7684;&#x7236;&#x63A5;&#x53E3; &#x56E0;&#x6B64;&#xFF0C;&#x4E00;&#x4E2A;&#x7236;&#x63A5;&#x53E3;&#x5E76;&#x4E0D;&#x4F1A;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x5B50;&#x63A5;&#x53E3;&#x6216;&#x8005;&#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x521D;&#x59CB;&#x5316;&#x800C;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x53EA;&#x6709;&#x5F53;&#x7A0B;&#x5E8F;&#x9996;&#x6B21;&#x4F7F;&#x7528;&#x7279;&#x5B9A;&#x63A5;&#x53E3;&#x7684;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x624D;&#x4F1A;&#x5BFC;&#x81F4;&#x8BE5;&#x63A5;&#x53E3;&#x7684;&#x521D;&#x59CB;&#x5316; JVM&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x975E;&#x7A33;&#x6001;&#x9009;&#x9879;&#x4F7F;&#x7528;&#x8BF4;&#x660E;: -XX:+&lt;option&gt; &#x542F;&#x7528; option -XX:-&lt;option&gt; &#x4E0D;&#x542F;&#x7528; option -XX:&lt;option&gt;=&lt;number&gt; &#x8BBE;&#x5B9A;option&#x7684;&#x503C;&#x4E3A;&#x6570;&#x5B57;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x8DDF;&#x5355;&#x4F4D;&#xFF0C;&#x4F8B;&#x5982; 32k, 1024m, 2g -XX:&lt;option&gt;=&lt;string&gt; &#x8BBE;&#x5B9A;option&#x7684;&#x503C;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F8B;&#x5982;-XX:HeapDumpPath=./dump.core]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Brief History of HTTP]]></title>
    <url>%2F2019%2F01%2F26%2FBrief%20History%20of%20HTTP%2F</url>
    <content type="text"><![CDATA[&#x539F;&#x6587;&#xFF1A;https://hpbn.co/brief-history-of-http/ The Hypertext Transfer Protocol (HTTP) is one of the most ubiquitous and widely adopted application protocols on the Internet: it is the common language between clients and servers, enabling the modern web. From its simple beginnings as a single keyword and document path, it has become the protocol of choice not just for browsers, but for virtually every Internet-connected software and hardware application. In this chapter, we will take a brief historical tour of the evolution of the HTTP protocol. A full discussion of the varying HTTP semantics is outside the scope of this book, but an understanding of the key design changes of HTTP, and the motivations behind each, will give us the necessary background for our discussions on HTTP performance, especially in the context of the many upcoming improvements in HTTP/2. &#xA7;HTTP 0.9: The One-Line ProtocolThe original HTTP proposal by Tim Berners-Lee was designed with simplicity in mind as to help with the adoption of his other nascent idea: the World Wide Web. The strategy appears to have worked: aspiring protocol designers, take note. In 1991, Berners-Lee outlined the motivation for the new protocol and listed several high-level design goals: file transfer functionality, ability to request an index search of a hypertext archive, format negotiation, and an ability to refer the client to another server. To prove the theory in action, a simple prototype was built, which implemented a small subset of the proposed functionality: Client request is a single ASCII character string. Client request is terminated by a carriage return (CRLF). Server response is an ASCII character stream. Server response is a hypertext markup language (HTML). Connection is terminated after the document transfer is complete. However, even that sounds a lot more complicated than it really is. What these rules enable is an extremely simple, Telnet-friendly protocol, which some web servers support to this very day: 12345678$&gt; telnet google.com 80Connected to 74.125.xxx.xxxGET /about/(hypertext response)(connection closed) The request consists of a single line: GET method and the path of the requested document. The response is a single hypertext document&#x2014;no headers or any other metadata, just the HTML. It really couldn&#x2019;t get any simpler. Further, since the previous interaction is a subset of the intended protocol, it unofficially acquired the HTTP 0.9 label. The rest, as they say, is history. From these humble beginnings in 1991, HTTP took on a life of its own and evolved rapidly over the coming years. Let us quickly recap the features of HTTP 0.9: Client-server, request-response protocol. ASCII protocol, running over a TCP/IP link. Designed to transfer hypertext documents (HTML). The connection between server and client is closed after every request. Note : Popular web servers, such as Apache and Nginx, still support the HTTP 0.9 protocol&#x2014;in part, because there is not much to it! If you are curious, open up a Telnet session and try accessing google.com, or your own favorite site, via HTTP 0.9 and inspect the behavior and the limitations of this early protocol. &#xA7;HTTP/1.0: Rapid Growth and Informational RFCThe period from 1991 to 1995 is one of rapid coevolution of the HTML specification, a new breed of software known as a &#x201C;web browser,&#x201D; and the emergence and quick growth of the consumer-oriented public Internet infrastructure. &#xA7;The Perfect Storm: Internet Boom of the Early 1990s Building on Tim Berner-Lee&#x2019;s initial browser prototype, a team at the National Center of Supercomputing Applications (NCSA) decided to implement their own version. With that, the first popular browser was born: NCSA Mosaic. One of the programmers on the NCSA team, Marc Andreessen, partnered with Jim Clark to found Mosaic Communications in October 1994. The company was later renamed Netscape, and it shipped Netscape Navigator 1.0 in December 1994. By this point, it was already clear that the World Wide Web was bound to be much more than just an academic curiosity. In fact, that same year the first World Wide Web conference was organized in Geneva, Switzerland, which led to the creation of the World Wide Web Consortium (W3C) to help guide the evolution of HTML. Similarly, a parallel HTTP Working Group (HTTP-WG) was established within the IETF to focus on improving the HTTP protocol. Both of these groups continue to be instrumental to the evolution of the Web. Finally, to create the perfect storm, CompuServe, AOL, and Prodigy began providing dial-up Internet access to the public within the same 1994&#x2013;1995 time frame. Riding on this wave of rapid adoption, Netscape made history with a wildly successful IPO on August 9, 1995&#x2014;the Internet boom had arrived, and everyone wanted a piece of it! The growing list of desired capabilities of the nascent Web and their use cases on the public Web quickly exposed many of the fundamental limitations of HTTP 0.9: we needed a protocol that could serve more than just hypertext documents, provide richer metadata about the request and the response, enable content negotiation, and more. In turn, the nascent community of web developers responded by producing a large number of experimental HTTP server and client implementations through an ad hoc process: implement, deploy, and see if other people adopt it. From this period of rapid experimentation, a set of best practices and common patterns began to emerge, and in May 1996 the HTTP Working Group (HTTP-WG) published RFC 1945, which documented the &#x201C;common usage&#x201D; of the many HTTP/1.0 implementations found in the wild. Note that this was only an informational RFC: HTTP/1.0 as we know it is not a formal specification or an Internet standard! Having said that, an example HTTP/1.0 request should look very familiar: 1234567891011121314151617$&gt; telnet website.org 80Connected to xxx.xxx.xxx.xxxGET /rfc/rfc1945.txt HTTP/1.0 (1)User-Agent: CERN-LineMode/2.15 libwww/2.17b3Accept: */*HTTP/1.0 200 OK (2)Content-Type: text/plainContent-Length: 137582Expires: Thu, 01 Dec 1997 16:00:00 GMTLast-Modified: Wed, 1 May 1996 12:45:26 GMTServer: Apache 0.84(plain-text response)(connection closed) Request line with HTTP version number, followed by request headers Response status, followed by response headers The preceding exchange is not an exhaustive list of HTTP/1.0 capabilities, but it does illustrate some of the key protocol changes: Request may consist of multiple newline separated header fields. Response object is prefixed with a response status line. Response object has its own set of newline separated header fields. Response object is not limited to hypertext. The connection between server and client is closed after every request. Both the request and response headers were kept as ASCII encoded, but the response object itself could be of any type: an HTML file, a plain text file, an image, or any other content type. Hence, the &#x201C;hypertext transfer&#x201D; part of HTTP became a misnomer not long after its introduction. In reality, HTTP has quickly evolved to become a hypermedia transport, but the original name stuck. In addition to media type negotiation, the RFC also documented a number of other commonly implemented capabilities: content encoding, character set support, multi-part types, authorization, caching, proxy behaviors, date formats, and more. Note : Almost every server on the Web today can and will still speak HTTP/1.0. Except that, by now, you should know better! Requiring a new TCP connection per request imposes a significant performance penalty on HTTP/1.0; see Three-Way Handshake, followed by Slow-Start. &#xA7;HTTP/1.1: Internet StandardThe work on turning HTTP into an official IETF Internet standard proceeded in parallel with the documentation effort around HTTP/1.0 and happened over a period of roughly four years: between 1995 and 1999. In fact, the first official HTTP/1.1 standard is defined in RFC 2068, which was officially released in January 1997, roughly six months after the publication of HTTP/1.0. Then, two and a half years later, in June of 1999, a number of improvements and updates were incorporated into the standard and were released as RFC 2616. The HTTP/1.1 standard resolved a lot of the protocol ambiguities found in earlier versions and introduced a number of critical performance optimizations: keepalive connections, chunked encoding transfers, byte-range requests, additional caching mechanisms, transfer encodings, and request pipelining. With these capabilities in place, we can now inspect a typical HTTP/1.1 session as performed by any modern HTTP browser and client: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$&gt; telnet website.org 80Connected to xxx.xxx.xxx.xxxGET /index.html HTTP/1.1 (1)Host: website.orgUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4)... (snip)Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: gzip,deflate,sdchAccept-Language: en-US,en;q=0.8Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3Cookie: __qca=P0-800083390... (snip)HTTP/1.1 200 OK (2)Server: nginx/1.0.11Connection: keep-aliveContent-Type: text/html; charset=utf-8Via: HTTP/1.1 GWADate: Wed, 25 Jul 2012 20:23:35 GMTExpires: Wed, 25 Jul 2012 20:23:35 GMTCache-Control: max-age=0, no-cacheTransfer-Encoding: chunked100 (3)&lt;!doctype html&gt;(snip)100(snip)0 (4)GET /favicon.ico HTTP/1.1 (5)Host: www.website.orgUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4)... (snip)Accept: */*Referer: http://website.org/Connection: close (6)Accept-Encoding: gzip,deflate,sdchAccept-Language: en-US,en;q=0.8Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3Cookie: __qca=P0-800083390... (snip)HTTP/1.1 200 OK (7)Server: nginx/1.0.11Content-Type: image/x-iconContent-Length: 3638Connection: closeLast-Modified: Thu, 19 Jul 2012 17:51:44 GMTCache-Control: max-age=315360000Accept-Ranges: bytesVia: HTTP/1.1 GWADate: Sat, 21 Jul 2012 21:35:22 GMTExpires: Thu, 31 Dec 2037 23:55:55 GMTEtag: W/PSA-GAu26oXbDi(icon data)(connection closed) Request for HTML file, with encoding, charset, and cookie metadata Chunked response for original HTML request Number of octets in the chunk expressed as an ASCII hexadecimal number (256 bytes) End of chunked stream response Request for an icon file made on same TCP connection Inform server that the connection will not be reused Icon response, followed by connection close Phew, there is a lot going on in there! The first and most obvious difference is that we have two object requests, one for an HTML page and one for an image, both delivered over a single connection. This is connection keepalive in action, which allows us to reuse the existing TCP connection for multiple requests to the same host and deliver a much faster end-user experience; see Optimizing for TCP. To terminate the persistent connection, notice that the second client request sends an explicit close token to the server via the Connection header. Similarly, the server can notify the client of the intent to close the current TCP connection once the response is transferred. Technically, either side can terminate the TCP connection without such signal at any point, but clients and servers should provide it whenever possible to enable better connection reuse strategies on both sides. Note : HTTP/1.1 changed the semantics of the HTTP protocol to use connection keepalive by default. Meaning, unless told otherwise (via Connection: close header), the server should keep the connection open by default. However, this same functionality was also backported to HTTP/1.0 and enabled via the Connection: Keep-Alive header. Hence, if you are using HTTP/1.1, technically you don&#x2019;t need the Connection: Keep-Alive header, but many clients choose to provide it nonetheless. Additionally, the HTTP/1.1 protocol added content, encoding, character set, and even language negotiation, transfer encoding, caching directives, client cookies, plus a dozen other capabilities that can be negotiated on each request. We are not going to dwell on the semantics of every HTTP/1.1 feature. This is a subject for a dedicated book, and many great ones have been written already. Instead, the previous example serves as a good illustration of both the quick progress and evolution of HTTP, as well as the intricate and complicated dance of every client-server exchange. There is a lot going on in there! Note : For a good reference on all the inner workings of the HTTP protocol, check out O&#x2019;Reilly&#x2019;s HTTP: The Definitive Guide by David Gourley and Brian Totty. &#xA7;HTTP/2: Improving Transport PerformanceSince its publication, RFC 2616 has served as a foundation for the unprecedented growth of the Internet: billions of devices of all shapes and sizes, from desktop computers to the tiny web devices in our pockets, speak HTTP every day to deliver news, video, and millions of other web applications we have all come to depend on in our lives. What began as a simple, one-line protocol for retrieving hypertext quickly evolved into a generic hypermedia transport, and now a decade later can be used to power just about any use case you can imagine. Both the ubiquity of servers that can speak the protocol and the wide availability of clients to consume it means that many applications are now designed and deployed exclusively on top of HTTP. Need a protocol to control your coffee pot? RFC 2324 has you covered with the Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)&#x2014;originally an April Fools&#x2019; Day joke by IETF, and increasingly anything but a joke in our new hyper-connected world. The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems. It is a generic, stateless, protocol that can be used for many tasks beyond its use for hypertext, such as name servers and distributed object management systems, through extension of its request methods, error codes and headers. A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred. RFC 2616: HTTP/1.1, June 1999 The simplicity of the HTTP protocol is what enabled its original adoption and rapid growth. In fact, it is now not unusual to find embedded devices&#x2014;sensors, actuators, and coffee pots alike&#x2014;using HTTP as their primary control and data protocols. But under the weight of its own success and as we increasingly continue to migrate our everyday interactions to the Web&#x2014;social, email, news, and video, and increasingly our entire personal and job workspaces&#x2014;it has also begun to show signs of stress. Users and web developers alike are now demanding near real-time responsiveness and protocol performance from HTTP/1.1, which it simply cannot meet without some modifications. To meet these new challenges, HTTP must continue to evolve, and hence the HTTPbis working group announced a new initiative for HTTP/2 in early 2012: There is emerging implementation experience and interest in a protocol that retains the semantics of HTTP without the legacy of HTTP/1.x message framing and syntax, which have been identified as hampering performance and encouraging misuse of the underlying transport. The working group will produce a specification of a new expression of HTTP&#x2019;s current semantics in ordered, bi-directional streams. As with HTTP/1.x, the primary target transport is TCP, but it should be possible to use other transports. HTTP/2 charter, January 2012 The primary focus of HTTP/2 is on improving transport performance and enabling both lower latency and higher throughput. The major version increment sounds like a big step, which it is and will be as far as performance is concerned, but it is important to note that none of the high-level protocol semantics are affected: all HTTP headers, values, and use cases are the same. Any existing website or application can and will be delivered over HTTP/2 without modification: you do not need to modify your application markup to take advantage of HTTP/2. The HTTP servers will have to speak HTTP/2, but that should be a transparent upgrade for the majority of users. The only difference if the working group meets its goal, should be that our applications are delivered with lower latency and better utilization of the network link! Having said that, let&#x2019;s not get ahead of ourselves. Before we get to the new HTTP/2 protocol features, it is worth taking a step back and examining our existing deployment and performance best practices for HTTP/1.1. The HTTP/2 working group is making fast progress on the new specification, but even if the final standard was already done and ready, we would still have to support older HTTP/1.1 clients for the foreseeable future&#x2014;realistically, a decade or more.]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>英文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 源码分析（五）]]></title>
    <url>%2F2019%2F01%2F22%2FNetty%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7248;&#x672C; 4.1.15 &#x5B98;&#x7F51;&#xFF1A;https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. ReferenceCountedio.netty.util.ReferenceCounted &#x5F15;&#x7528;&#x8BA1;&#x6570;&#x6587;&#x6863; public interface ReferenceCountedA reference-counted object that requires explicit deallocation.When a new ReferenceCounted is instantiated, it starts with the reference count of 1. retain() increases the reference count, and release() decreases the reference count. If the reference count is decreased to 0, the object will be deallocated explicitly, and accessing the deallocated object will usually result in an access violation.If an object that implements ReferenceCounted is a container of other objects that implement ReferenceCounted, the contained objects will also be released via release() when the container&#x2019;s reference count becomes 0. &#x6211;&#x4EEC;&#x770B;&#x770B;&#x5176;&#x4E2D;&#x7684;&#x65B9;&#x6CD5; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public interface ReferenceCounted { /** * Returns the reference count of this object. If {@code 0}, it means this object has been deallocated. */ int refCnt(); /** * Increases the reference count by {@code 1}. */ ReferenceCounted retain(); /** * Increases the reference count by the specified {@code increment}. */ ReferenceCounted retain(int increment); /** * Records the current access location of this object for debugging purposes. * If this object is determined to be leaked, the information recorded by this operation will be provided to you * via {@link ResourceLeakDetector}. This method is a shortcut to {@link #touch(Object) touch(null)}. */ ReferenceCounted touch(); /** * Records the current access location of this object with an additional arbitrary information for debugging * purposes. If this object is determined to be leaked, the information recorded by this operation will be * provided to you via {@link ResourceLeakDetector}. */ ReferenceCounted touch(Object hint); /** * Decreases the reference count by {@code 1} and deallocates this object if the reference count reaches at * {@code 0}. * * @return {@code true} if and only if the reference count became {@code 0} and this object has been deallocated */ boolean release(); /** * Decreases the reference count by the specified {@code decrement} and deallocates this object if the reference * count reaches at {@code 0}. * * @return {@code true} if and only if the reference count became {@code 0} and this object has been deallocated */ boolean release(int decrement);} AbstractReferenceCountedByteBufio.netty.buffer.AbstractReferenceCountedByteBuf &#x6211;&#x4EEC;&#x5148;&#x6765;&#x770B;&#x4E24;&#x4E2A;&#x6BD4;&#x8F83;&#x91CD;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;retain() &#x548C; release() &#x65B9;&#x6CD5; retain()io.netty.buffer.AbstractReferenceCountedByteBuf#retain() retain() &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x4F7F;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x52A0;&#x4E00; 1234567891011121314151617181920212223242526@Overridepublic ByteBuf retain() { return retain0(1);}@Overridepublic ByteBuf retain(int increment) { return retain0(checkPositive(increment, &quot;increment&quot;));}private ByteBuf retain0(int increment) { for (;;) { int refCnt = this.refCnt; final int nextCnt = refCnt + increment; // &#x5982;&#x679C; refCnt = 0 &#x7684;&#x65F6;&#x5019; nextCont = increment&#xFF0C;&#x5C31;&#x5C31;&#x5E94;&#x8BE5;&#x88AB;&#x56DE;&#x6536; // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow. if (nextCnt &lt;= increment) { throw new IllegalReferenceCountException(refCnt, increment); } // &#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x5230;&#x4E86;&#x81EA;&#x65CB;&#x9501; if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) { break; } } return this;} java.util.concurrent.atomic.AtomicIntegerFieldUpdater public abstract class AtomicIntegerFieldUpdaterextends ObjectA reflection-based utility that enables atomic updates to designated volatile int fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates.Note that the guarantees of the compareAndSet method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of compareAndSet and set on the same updater. AtomicIntegerFieldUpdater&#x8981;&#x70B9;&#x7684;&#x603B;&#x7ED3;&#xFF1A; &#x66F4;&#x65B0;&#x5668;&#x5FC5;&#x987B;&#x662F;int&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4E0D;&#x80FD;&#x662F;&#x5176;&#x4ED6;&#x5305;&#x88C5;&#x7C7B;&#x578B; &#x66F4;&#x65B0;&#x5668;&#x7684;&#x66F4;&#x65B0;&#x5FC5;&#x987B;&#x662F;volatile&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x786E;&#x4FDD;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x7684;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x65F6;&#x7684;&#x7ACB;&#x5373;&#x53EF;&#x89C1;&#x6027; &#x53D8;&#x91CF;&#x4E0D;&#x80FD;&#x662F;static&#x7684;&#xFF0C;&#x5FC5;&#x987B;&#x662F;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;Unsafe.objectFieldOffset() &#x65B9;&#x6CD5;&#x4E0D;&#x652F;&#x6301;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF08;CAS&#x64CD;&#x4F5C;&#x672C;&#x8D28;&#x662F;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B;&#x7684;&#x504F;&#x79FB;&#x6765;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#xFF09; &#x66F4;&#x65B0;&#x5668;&#x53EA;&#x80FD;&#x4FEE;&#x6539;&#x5B83;&#x53EF;&#x89C1;&#x8303;&#x56F4;&#x5185;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;&#x66F4;&#x65B0;&#x5668;&#x662F;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x6765;&#x5F97;&#x5230;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x53D8;&#x91CF;&#x4E0D;&#x53EF;&#x89C1;&#x5C31;&#x4F1A;&#x62A5;&#x9519; &#x5982;&#x679C;&#x66F4;&#x65B0;&#x7684;&#x53D8;&#x91CF;&#x65F6;&#x5305;&#x88C5;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;AtomicReferenceFieldUpdater&#x6765;&#x8FDB;&#x884C;&#x66F4;&#x65B0; java.util.concurrent.atomic.AtomicIntegerFieldUpdater#compareAndSet public abstract boolean compareAndSet(T obj, int expect, int update)Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field.Parameters:obj - An object whose field to conditionally setexpect - the expected valueupdate - the new value &#x4E00;&#x4E2A;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#x66F4;&#x65B0; 123456789101112131415161718192021222324/** * @Author: cuzz * @Date: 2019/1/19 15:40 * @Description: */public class AtomicUpdateTest { public static void main(String[] args) { Person person = new Person(); for (int i = 0; i &lt; 10; i++) { new Thread(() -&gt; { try { Thread.sleep(20); } catch (InterruptedException e) { e.printStackTrace(); } System.out.print(person.age++ + &quot; &quot;); // 1 6 7 5 4 2 3 1 8 9 }).start(); } }}class Person{ int age = 1;} &#x4F7F;&#x7528;AtomicIntegerFieldUpdater 123456789101112131415161718192021222324/** * @Author: cuzz * @Date: 2019/1/19 15:40 * @Description: */public class AtomicUpdateTest { public static void main(String[] args) { AtomicIntegerFieldUpdater&lt;Person&gt; fieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Person.class, &quot;age&quot;); Person person = new Person(); for (int i = 0; i &lt; 10; i++) { new Thread(() -&gt; { try { Thread.sleep(20); } catch (InterruptedException e) { e.printStackTrace(); } System.out.print(fieldUpdater.getAndIncrement(person) + &quot; &quot;); // 1 4 3 2 5 6 7 10 9 8 }).start(); } }}class Person{ volatile int age = 1;} &#x5927;&#x6982;&#x6709;&#x4EE5;&#x4E0B;&#x4E24;&#x79CD;&#x5B57;&#x6BB5;&#x9002;&#x5408;&#x7528;Atomic*FieldUpdater: &#x5927;&#x591A;&#x6570;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x5728;&#x8BFB;&#x53D6;&#x5B57;&#x6BB5;&#x7684;&#x503C;, &#x4F46;&#x4ECD;&#x7136;&#x6709;&#x901A;&#x8FC7;CAS&#x66F4;&#x65B0;&#x5B57;&#x6BB5;&#x503C;&#x7684;&#x9700;&#x6C42;. &#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x7528;AtomicInteger&#x7684;&#x8BDD;&#x6BCF;&#x4E2A;&#x76F4;&#x63A5;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x5730;&#x65B9;&#x90FD;&#x8981;&#x591A;&#x4E00;&#x6B21;.get()&#x8C03;&#x7528;, &#x7528;volatile&#x53C8;&#x6EE1;&#x8DB3;&#x4E0D;&#x4E86;&#x9700;&#x6C42;, &#x6240;&#x4EE5;&#x5C31;&#x7528;&#x5230;&#x4E86;AtomicIntegerFieldUpdater &#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x6240;&#x5C5E;&#x7684;&#x7C7B;&#x4F1A;&#x88AB;&#x521B;&#x5EFA;&#x5927;&#x91CF;&#x7684;&#x5B9E;&#x4F8B;&#x5BF9;&#x8C61;, &#x5982;&#x679C;&#x7528;AtomicInteger, &#x6BCF;&#x4E2A;&#x5B9E;&#x4F8B;&#x91CC;&#x9762;&#x90FD;&#x8981;&#x521B;&#x5EFA;AtomicInteger&#x5BF9;&#x8C61;, &#x4ECE;&#x800C;&#x591A;&#x51FA;&#x5185;&#x5B58;&#x6D88;&#x8017;. &#x6BD4;&#x5982;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x7C7B;&#x7684;Node, &#x7528;AtomicReference&#x4FDD;&#x5B58;next&#x663E;&#x7136;&#x662F;&#x4E0D;&#x5408;&#x9002;&#x7684;. &#x539F;&#x6587;&#xFF1A;https://blog.csdn.net/u012415542/article/details/80646605 12private static final AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; refCntUpdater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, &quot;refCnt&quot;); Reference counted objects&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x6587;&#x6863;&#xFF1A;Reference counted objects Netty &#x5904;&#x7406;&#x5668;&#x91CD;&#x8981;&#x6982;&#x5FF5; Netty &#x7684;&#x5904;&#x7406;&#x5668;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4E24;&#x7C7B;&#xFF1A;&#x5165;&#x7AD9;&#x5904;&#x7406;&#x5668;&#x548C;&#x51FA;&#x7AD9;&#x5904;&#x7406;&#x5668; &#x5165;&#x7AD9;&#x5904;&#x7406;&#x5668;&#x7684;&#x9876;&#x5C42;&#x662F; ChannelnboundHandler&#xFF0C;&#x51FA;&#x7AD9;&#x5904;&#x7406;&#x5668;&#x7684;&#x9876;&#x5C42;&#x662F; ChannelOutboundHandler &#x6570;&#x636E;&#x5904;&#x7406;&#x65F6;&#x5E38;&#x7528;&#x7684;&#x5404;&#x79CD;&#x89E3;&#x7801;&#x5668;&#x672C;&#x8D28;&#x4E0A;&#x90FD;&#x662F;&#x5904;&#x7406;&#x5668; &#x7F16;&#x89E3;&#x7801;&#x5668;&#xFF1A;&#x65E0;&#x8BBA;&#x6211;&#x4EEC;&#x5411;&#x7F51;&#x7EDC;&#x4E2D;&#x5199;&#x5165;&#x7684;&#x6570;&#x636E;&#x662F;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#xFF0C;&#x6570;&#x636E;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x4F20;&#x9012;&#x65F6;&#xFF0C;&#x5176;&#x90FD;&#x662F;&#x4EE5;&#x5B57;&#x8282;&#x6D41;&#x7684;&#x5F62;&#x5F0F;&#x5448;&#x73B0;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x6709;&#x539F;&#x672C;&#x7684;&#x5B57;&#x8282;&#x6D41;&#x7684;&#x64CD;&#x4F5C;&#x6210;&#x4E3A;&#x7F16;&#x7801;&#xFF08;encode&#xFF09;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x6709;&#x5B57;&#x8282;&#x8F6C;&#x5316;&#x4E3A;&#x5B83;&#x539F;&#x672C;&#x7684;&#x683C;&#x5F0F;&#x6216;&#x662F;&#x5176;&#x5B83;&#x7684;&#x64CD;&#x4F5C;&#x6210;&#x4E3A;&#x89E3;&#x7801;&#xFF08;decode&#xFF09;&#xFF0C;&#x7F16;&#x7801;&#x7EDF;&#x4E00;&#x79F0;&#x4E3A;&#xFF08;codec&#xFF09; &#x7F16;&#x7801;&#xFF1A;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4E00;&#x79CD;&#x51FA;&#x7AD9;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x7F16;&#x7801;&#x4E00;&#x5B9A;&#x662F;&#x4E00;&#x79CD; ChannelOutboundHandler &#x89E3;&#x7801;&#xFF1A;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4E00;&#x79CD;&#x5165;&#x7AD9;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x89E3;&#x7801;&#x4E00;&#x5B9A;&#x662F;&#x4E00;&#x79CD; ChannelInboundHandler &#x5728; Netty &#x4E2D;&#xFF0C;&#x7F16;&#x7801;&#x5668;&#x901A;&#x5E38;&#x4EE5; xxxEncoder&#x547D;&#x540D;&#xFF1B;&#x89E3;&#x7801;&#x5668;&#x901A;&#x5E38;&#x4EE5;xxxDecoder&#x547D;&#x540D; &#x7F16;&#x5199;&#x4E00;&#x4E2A;Long&#x7C7B;&#x578B;&#x7684;&#x89E3;&#x7801;&#x5668;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x89E3;&#x7801;&#x5668;&#x5728;&#x5BA2;&#x670D;&#x7AEF;&#x4E0E;&#x670D;&#x52A1;&#x7AEF;&#x4F20;&#x8F93;&#x4E00;&#x4E2A; Long &#x578B;&#x7684;&#x6570;&#x636E;&#xFF0C;Netty &#x4E3A;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x4E86; ByteToMessageDecoder io.netty.handler.codec.ByteToMessageDecoder io.netty.handler.codecpublic abstract class ByteToMessageDecoderextends ChannelInboundHandlerAdapterChannelInboundHandlerAdapter which decodes bytes in a stream-like fashion from one ByteBuf to an other Message type. For example here is an implementation which reads all readable bytes from the input ByteBuf and create a new ByteBuf. public class SquareDecoder extends ByteToMessageDecoder { @Override public void decode(ChannelHandlerContext ctx, ByteBuf in, List out) throws Exception { out.add(in.readBytes(in.readableBytes())); } } Frame detectionGenerally frame detection should be handled earlier in the pipeline by adding a DelimiterBasedFrameDecoder, FixedLengthFrameDecoder, LengthFieldBasedFrameDecoder, or LineBasedFrameDecoder.If a custom frame decoder is required, then one needs to be careful when implementing one with ByteToMessageDecoder. Ensure there are enough bytes in the buffer for a complete frame by checking ByteBuf.readableBytes(). If there are not enough bytes for a complete frame, return without modifying the reader index to allow more bytes to arrive.To check for complete frames without modifying the reader index, use methods like ByteBuf.getInt(int). One MUST use the reader index when using methods like ByteBuf.getInt(int). For example calling in.getInt(0) is assuming the frame starts at the beginning of the buffer, which is not always the case. Use in.getInt(in.readerIndex()) instead.PitfallsBe aware that sub-classes of ByteToMessageDecoder MUST NOT annotated with @Sharable.Some methods such as ByteBuf.readBytes(int) will cause a memory leak if the returned buffer is not released or added to the out List. Use derived buffers like ByteBuf.readSlice(int) to avoid leaking memory. MyByteToLongDecoder 123456789101112131415/** * @Author: cuzz * @Date: 2019/1/22 12:16 * @Description: */public class MyByteToLongDecoder extends ByteToMessageDecoder{ @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception { System.out.println(&quot;decode invoked!&quot;); System.out.println(in.readableBytes()); if (in.readableBytes() &gt;= 8) { out.add(in.readLong()); } }} MyLongToByteEncoder 12345678910111213/** * @Author: cuzz * @Date: 2019/1/22 12:23 * @Description: */public class MyLongToByteEncoder extends MessageToByteEncoder&lt;Long&gt;{ @Override protected void encode(ChannelHandlerContext ctx, Long msg, ByteBuf out) throws Exception { System.out.println(&quot;encoder invoked!&quot;); System.out.println(msg); out.writeLong(msg); }} &#x91CD;&#x8981;&#x7ED3;&#x8BBA;&#xFF1A; &#x65E0;&#x8BBA;&#x662F;&#x7F16;&#x7801;&#x5668;&#x8FD8;&#x662F;&#x89E3;&#x7801;&#x5668;&#xFF0C;&#x5176;&#x6240;&#x63A5;&#x6536;&#x7684;&#x6D88;&#x606F;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x8981;&#x4E0E;&#x5F85;&#x5904;&#x7406;&#x7684;&#x53C2;&#x6570;&#x4FDD;&#x6301;&#x4E00;&#x81F4;&#xFF0C;&#x5426;&#x5219;&#x8BE5;&#x7F16;&#x7801;&#x5668;&#x6216;&#x5219;&#x89E3;&#x7801;&#x5668;&#x4E0D;&#x4F1A;&#x88AB;&#x6267;&#x884C; &#x5728;&#x89E3;&#x7801;&#x5668;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x89E3;&#x7801;&#x65F6;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x5224;&#x65AD;&#x7F13;&#x51B2;&#xFF08;ByteBuf&#xFF09;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x662F;&#x5426;&#x8DB3;&#x591F;&#xFF0C;&#x5426;&#x5219;&#x5C06;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x95EE;&#x9898; ReplayingDecoder&#x6587;&#x6863;&#xFF1A;https://netty.io/4.1/api/io/netty/handler/codec/ReplayingDecoder.html &#x5982;&#x679C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x7EE7;&#x627F;&#x8FD9;&#x4E2A;&#x7F16;&#x7801;&#x5668;&#xFF0C;&#x4ED6;&#x4F1A;&#x81EA;&#x52A8;&#x5E2E;&#x6211;&#x5224;&#x65AD;&#x662F;&#x5426;&#x53EF;&#x8BFB;&#xFF0C;&#x4EE3;&#x7801;&#x4E5F;&#x7B80;&#x5355;&#xFF0C;&#x7B80;&#x5316;&#x4E86;&#x6211;&#x4EEC;&#x7684;&#x5224;&#x65AD; 12345678public class MyByteToLongDecoder2 extends ReplayingDecoder&lt;Void&gt; { @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception { System.out.println(&quot;MyByteToLongDecoder2 decode invoked!&quot;); out.add(in.readLong()); }} LengthFieldBasedFrameDecoderio.netty.handler.codec.LengthFieldBasedFrameDecoder &#x6587;&#x6863;&#xFF1A;https://netty.io/4.1/api/io/netty/handler/codec/LengthFieldBasedFrameDecoder.html &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5E38;&#x7528;&#x8BED;&#x81EA;&#x5B9A;&#x4E49;&#x534F;&#x8BAE;&#x7684;&#x89E3;&#x7801;&#x5668; TCP &#x7C98;&#x5305;&#x62C6;&#x5305;&#x5982;&#x679C;&#x6211;&#x5199;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x534F;&#x8BAE;&#x6CA1;&#x6709;&#x5BF9;&#x7C98;&#x5305;&#x548C;&#x62C6;&#x5305;&#x505A;&#x7279;&#x6B8A;&#x5904;&#x7406;&#x7684;&#x8BDD;&#x5C31;&#x4F1A;&#x4EA7;&#x751F;&#x7C98;&#x5305;&#x548C;&#x62C6;&#x5305;&#x73B0;&#x8C61; &#x7C98;&#x5305;&#x3001;&#x62C6;&#x5305;&#x53D1;&#x751F;&#x539F;&#x56E0;&#x53D1;&#x751F;TCP&#x7C98;&#x5305;&#x6216;&#x62C6;&#x5305;&#x6709;&#x5F88;&#x591A;&#x539F;&#x56E0;&#xFF0C;&#x73B0;&#x5217;&#x51FA;&#x5E38;&#x89C1;&#x7684;&#x51E0;&#x70B9;&#xFF0C;&#x53EF;&#x80FD;&#x4E0D;&#x5168;&#x9762;&#xFF0C;&#x6B22;&#x8FCE;&#x8865;&#x5145;&#xFF0C;1&#x3001;&#x8981;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x5927;&#x4E8E;TCP&#x53D1;&#x9001;&#x7F13;&#x51B2;&#x533A;&#x5269;&#x4F59;&#x7A7A;&#x95F4;&#x5927;&#x5C0F;&#xFF0C;&#x5C06;&#x4F1A;&#x53D1;&#x751F;&#x62C6;&#x5305;&#x3002;2&#x3001;&#x5F85;&#x53D1;&#x9001;&#x6570;&#x636E;&#x5927;&#x4E8E;MSS&#xFF08;&#x6700;&#x5927;&#x62A5;&#x6587;&#x957F;&#x5EA6;&#xFF09;&#xFF0C;TCP&#x5728;&#x4F20;&#x8F93;&#x524D;&#x5C06;&#x8FDB;&#x884C;&#x62C6;&#x5305;&#x3002;3&#x3001;&#x8981;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x5C0F;&#x4E8E;TCP&#x53D1;&#x9001;&#x7F13;&#x51B2;&#x533A;&#x7684;&#x5927;&#x5C0F;&#xFF0C;TCP&#x5C06;&#x591A;&#x6B21;&#x5199;&#x5165;&#x7F13;&#x51B2;&#x533A;&#x7684;&#x6570;&#x636E;&#x4E00;&#x6B21;&#x53D1;&#x9001;&#x51FA;&#x53BB;&#xFF0C;&#x5C06;&#x4F1A;&#x53D1;&#x751F;&#x7C98;&#x5305;&#x3002;4&#x3001;&#x63A5;&#x6536;&#x6570;&#x636E;&#x7AEF;&#x7684;&#x5E94;&#x7528;&#x5C42;&#x6CA1;&#x6709;&#x53CA;&#x65F6;&#x8BFB;&#x53D6;&#x63A5;&#x6536;&#x7F13;&#x51B2;&#x533A;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5C06;&#x53D1;&#x751F;&#x7C98;&#x5305;&#x3002;&#x7C98;&#x5305;&#x3001;&#x62C6;&#x5305;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0A;&#x5206;&#x6790;&#xFF0C;&#x6211;&#x4EEC;&#x6E05;&#x695A;&#x4E86;&#x7C98;&#x5305;&#x6216;&#x62C6;&#x5305;&#x53D1;&#x751F;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5462;&#xFF1F;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x7684;&#x5173;&#x952E;&#x5728;&#x4E8E;&#x5982;&#x4F55;&#x7ED9;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5305;&#x6DFB;&#x52A0;&#x8FB9;&#x754C;&#x4FE1;&#x606F;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x6709;&#x5982;&#x4E0B;&#x51E0;&#x4E2A;&#xFF1A;1&#x3001;&#x53D1;&#x9001;&#x7AEF;&#x7ED9;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5305;&#x6DFB;&#x52A0;&#x5305;&#x9996;&#x90E8;&#xFF0C;&#x9996;&#x90E8;&#x4E2D;&#x5E94;&#x8BE5;&#x81F3;&#x5C11;&#x5305;&#x542B;&#x6570;&#x636E;&#x5305;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x8FD9;&#x6837;&#x63A5;&#x6536;&#x7AEF;&#x5728;&#x63A5;&#x6536;&#x5230;&#x6570;&#x636E;&#x540E;&#xFF0C;&#x901A;&#x8FC7;&#x8BFB;&#x53D6;&#x5305;&#x9996;&#x90E8;&#x7684;&#x957F;&#x5EA6;&#x5B57;&#x6BB5;&#xFF0C;&#x4FBF;&#x77E5;&#x9053;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5305;&#x7684;&#x5B9E;&#x9645;&#x957F;&#x5EA6;&#x4E86;&#x3002;2&#x3001;&#x53D1;&#x9001;&#x7AEF;&#x5C06;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5305;&#x5C01;&#x88C5;&#x4E3A;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#xFF08;&#x4E0D;&#x591F;&#x7684;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8865;0&#x586B;&#x5145;&#xFF09;&#xFF0C;&#x8FD9;&#x6837;&#x63A5;&#x6536;&#x7AEF;&#x6BCF;&#x6B21;&#x4ECE;&#x63A5;&#x6536;&#x7F13;&#x51B2;&#x533A;&#x4E2D;&#x8BFB;&#x53D6;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x6570;&#x636E;&#x5C31;&#x81EA;&#x7136;&#x800C;&#x7136;&#x7684;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5305;&#x62C6;&#x5206;&#x5F00;&#x6765;&#x3002;3&#x3001;&#x53EF;&#x4EE5;&#x5728;&#x6570;&#x636E;&#x5305;&#x4E4B;&#x95F4;&#x8BBE;&#x7F6E;&#x8FB9;&#x754C;&#xFF0C;&#x5982;&#x6DFB;&#x52A0;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x63A5;&#x6536;&#x7AEF;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x8FB9;&#x754C;&#x5C31;&#x53EF;&#x4EE5;&#x5C06;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x5305;&#x62C6;&#x5206;&#x5F00;&#x3002; &#x4F5C;&#x8005;&#xFF1A;wxy941011&#x6765;&#x6E90;&#xFF1A;CSDN&#x539F;&#x6587;&#xFF1A;https://blog.csdn.net/wxy941011/article/details/80428470&#x7248;&#x6743;&#x58F0;&#x660E;&#xFF1A;&#x672C;&#x6587;&#x4E3A;&#x535A;&#x4E3B;&#x539F;&#x521B;&#x6587;&#x7AE0;&#xFF0C;&#x8F6C;&#x8F7D;&#x8BF7;&#x9644;&#x4E0A;&#x535A;&#x6587;&#x94FE;&#x63A5;&#xFF01; &#x81EA;&#x5B9A;&#x4E49;&#x534F;&#x8BAE;&#x89E3;&#x51B3;&#x7C98;&#x5305;&#x548C;&#x62C6;&#x5305;&#x4E00;&#x4E2A; Person &#x534F;&#x8BAE;&#x7C7B; 123456789101112131415161718192021222324252627/** * @Author: cuzz * @Date: 2019/1/22 16:00 * @Description: &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5173;&#x4E8E; Person &#x7684;&#x534F;&#x8BAE; */public class PersonProtocol { private int length; private byte[] content; public int getLength() { return length; } public void setLength(int length) { this.length = length; } public byte[] getContent() { return content; } public void setContent(byte[] content) { this.content = content; }} &#x89E3;&#x7801;&#x5904;&#x7406;&#x5668; 1234567891011121314151617181920212223242526/** * @Author: cuzz * @Date: 2019/1/22 16:04 * @Description: */public class MyPersonDecoder extends ReplayingDecoder&lt;Void&gt;{ @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception { System.out.println(&quot;MyPersonDecoder decode invoked!&quot;); // Gets a 32-bit integer at the current {@code readerIndex} // and increases the {@code readerIndex} by {@code 4} in this buffer. int length = in.readInt(); byte[] content = new byte[length]; // Transfers this buffer&apos;s data to the specified destination starting at // the current {@code readerIndex} and increases the {@code readerIndex} // by the number of the transferred bytes (= {@code dst.length} in.readBytes(content); // &#x628A;&#x5185;&#x5BB9;&#x6DFB;&#x52A0;&#x5230;&#x534F;&#x8BAE;&#x4E2D; PersonProtocol personProtocol = new PersonProtocol(); personProtocol.setLength(length); personProtocol.setContent(content); out.add(personProtocol); }} &#x7F16;&#x7801;&#x5904;&#x7406;&#x5668; 12345678910111213141516/** * @Author: cuzz * @Date: 2019/1/22 16:12 * @Description: */public class MyPersonEncoder extends MessageToByteEncoder&lt;PersonProtocol&gt;{ @Override protected void encode(ChannelHandlerContext ctx, PersonProtocol msg, ByteBuf out) throws Exception { System.out.println(&quot;MyPersonEncoder encoder invoked!&quot;); // &#x6D88;&#x606F;&#x5934; out.writeInt(msg.getLength()); // &#x6D88;&#x606F;&#x4F53; out.writeBytes(msg.getContent()); }} &#x670D;&#x52A1;&#x7AEF; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * @Author: cuzz * @Date: 2019/1/22 16:39 * @Description: */public class MyServer { public static void main(String[] args) throws Exception{ EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workGroup = new NioEventLoopGroup(); try { ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workGroup) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyPersonDecoder()); pipeline.addLast(new MyPersonEncoder()); pipeline.addLast(new MyServerHandler()); } }); ChannelFuture channelFuture = serverBootstrap.bind(8899).sync(); channelFuture.channel().closeFuture().sync(); } finally { bossGroup.shutdownGracefully(); workGroup.shutdownGracefully(); } }}/** * @Author: cuzz * @Date: 2019/1/22 16:16 * @Description: */public class MyServerHandler extends SimpleChannelInboundHandler&lt;PersonProtocol&gt;{ private int count; @Override protected void channelRead0(ChannelHandlerContext ctx, PersonProtocol msg) throws Exception { int length = msg.getLength(); byte[] content = msg.getContent(); System.out.println(&quot;&#x670D;&#x52A1;&#x7AEF;&#x63A5;&#x6536;&#x5230;&#x7684;&#x6570;&#x636E;&#xFF1A;&quot;); System.out.println(&quot;&#x957F;&#x5EA6;&#xFF1A;&quot; + length); System.out.println(&quot;&#x5185;&#x5BB9;&#xFF1A;&quot; + new String(content, Charset.forName(&quot;utf-8&quot;))); System.out.println(&quot;&#x670D;&#x52A1;&#x5668;&#x63A5;&#x6536;&#x5230;&#x7684;&#x6D88;&#x606F;&#x6570;&#x91CF;&#xFF1A;&quot; + (++this.count)); PersonProtocol personProtocol = new PersonProtocol(); String resp = &quot;hello, world&quot;; personProtocol.setLength(resp.getBytes(&quot;utf-8&quot;).length); personProtocol.setContent(resp.getBytes(&quot;utf-8&quot;)); ctx.writeAndFlush(personProtocol); }} &#x5BA2;&#x670D;&#x7AEF; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class MyClient { public static void main(String[] args) throws Exception { EventLoopGroup eventLoopGroup = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.group(eventLoopGroup) .channel(NioSocketChannel.class) .handler(new ChannelInitializer&lt;SocketChannel&gt;() { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyPersonDecoder()); pipeline.addLast(new MyPersonEncoder()); pipeline.addLast(new MyClientHandler()); } }); ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;,8899).sync(); channelFuture.channel().closeFuture().sync(); } finally { eventLoopGroup.shutdownGracefully(); } }}/** * @Author: cuzz * @Date: 2019/1/22 16:25 * @Description: */public class MyClientHandler extends SimpleChannelInboundHandler&lt;PersonProtocol&gt;{ private int count; @Override protected void channelRead0(ChannelHandlerContext ctx, PersonProtocol msg) throws Exception { int length = msg.getLength(); byte[] content = msg.getContent(); System.out.println(&quot;&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x6536;&#x7684;&#x6D88;&#x606F;&#xFF1A;&quot;); System.out.println(&quot;&#x6D88;&#x606F;&#x7684;&#x957F;&#x5EA6;&#xFF1A;&quot; + length); System.out.println(&quot;&#x6D88;&#x606F;&#x7684;&#x5185;&#x5BB9;&#xFF1A;&quot; + new String(content, Charset.forName(&quot;utf-8&quot;))); System.out.println(&quot;&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x6536;&#x5230;&#x7684;&#x6D88;&#x606F;&#x6570;&#x91CF;&#xFF1A;&quot; + (++count)); } @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { for (int i = 0; i &lt; 10; i++) { String messageToBeSend = &quot;send form client&quot;; PersonProtocol personProtocol = new PersonProtocol(); personProtocol.setLength(messageToBeSend.getBytes(&quot;utf-8&quot;).length); personProtocol.setContent(messageToBeSend.getBytes(&quot;utf-8&quot;)); ctx.writeAndFlush(personProtocol); } } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.close(); }} &#x603B;&#x7ED3;&#x8FD9;&#x91CC;&#x5173;&#x4E8E; Netty &#x7684;&#x8FD9;&#x4E94;&#x7BC7;&#x5206;&#x6790;&#x90FD;&#x662F;&#x770B;&#x7684;&#x5723;&#x601D;&#x56ED;&#x5F20;&#x9F99;&#x8001;&#x5E08;&#x7684;&#x8BFE;&#x7A0B;&#x81EA;&#x5DF1;&#x6240;&#x5199;&#x4E0B;&#x7684;&#x7B14;&#x8BB0;&#xFF0C;&#x81EA;&#x5DF1;&#x5BF9; Netty &#x6709;&#x4E86;&#x7B80;&#x5355;&#x7684;&#x8BA4;&#x8BC6;&#xFF0C;&#x4E5F;&#x5BF9; NIO &#x6709;&#x4E86;&#x66F4;&#x6DF1;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x5B66;&#x4F1A;&#x770B;&#x82F1;&#x6587;&#x6587;&#x6863;&#xFF0C;&#x770B;&#x5B98;&#x65B9;&#x6587;&#x6863;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x4E0D;&#x8981;&#x60E7;&#x6015;&#xFF0C;&#x6162;&#x6162;&#x7684;&#x5C31;&#x611F;&#x89C9;&#x8FD8;&#x662F;&#x6587;&#x6863;&#x5199;&#x7684;&#x6700;&#x6E05;&#x695A;&#xFF0C;&#x6700;&#x6709;&#x4EF7;&#x503C;&#x3002;&#x8001;&#x5E08;&#x8FD8;&#x63D0;&#x5230;&#x9700;&#x8981;&#x591A;&#x8BB0;&#x5F55;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4E5F;&#x628A;&#x4E00;&#x4E9B;&#x91CD;&#x8981;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#xFF0C;&#x65B9;&#x4FBF;&#x4EE5;&#x540E;&#x67E5;&#x627E;&#x3002;&#x5F53;&#x7136;&#x4EE5;&#x540E;&#x8FD8;&#x8981;&#x52A0;&#x5F3A;&#x5B66;&#x4E60;&#xFF0C;&#x591A;&#x770B;&#x770B; Netty &#x5B98;&#x65B9;&#x6587;&#x6863;&#x548C;&#x4F8B;&#x5B50;&#xFF0C;&#x52A0;&#x5F3A;&#x7EC3;&#x4E60;&#x3002;]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 源码分析（四）]]></title>
    <url>%2F2019%2F01%2F19%2FNetty%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7248;&#x672C; 4.1.15 &#x5B98;&#x7F51;&#xFF1A;https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. ChannelPromiseio.netty.channel.ChannelPromise &#x524D;&#x9762;&#x6211;&#x4EEC;&#x5206;&#x6790;&#x4E86; ChannelFuture &#xFF0C;&#x770B;&#x770B;ChannelPromise &#x7684;&#x4F5C;&#x7528; 1234/** * Special {@link ChannelFuture} which is writable. */public interface ChannelPromise extends ChannelFuture, Promise&lt;Void&gt; { ... } &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x5199;&#x5165;&#x7684; ChannelFuture &#xFF0C;&#x6211;&#x5148;&#x770B;&#x770B; Promise &#x8FD9;&#x4E2A;&#x7C7B; Promiseio.netty.util.concurrent.Promise 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public interface Promise&lt;V&gt; extends Future&lt;V&gt; { /** * Marks this future as a success and notifies all * listeners. * * If it is success or failed already it will throw an {@link IllegalStateException}. */ Promise&lt;V&gt; setSuccess(V result); /** * Marks this future as a success and notifies all * listeners. * * @return {@code true} if and only if successfully marked this future as * a success. Otherwise {@code false} because this future is * already marked as either a success or a failure. */ boolean trySuccess(V result); /** * Marks this future as a failure and notifies all * listeners. * * If it is success or failed already it will throw an {@link IllegalStateException}. */ Promise&lt;V&gt; setFailure(Throwable cause); /** * Marks this future as a failure and notifies all * listeners. * * @return {@code true} if and only if successfully marked this future as * a failure. Otherwise {@code false} because this future is * already marked as either a success or a failure. */ boolean tryFailure(Throwable cause); /** * Make this future impossible to cancel. * * @return {@code true} if and only if successfully marked this future as uncancellable or it is already done * without being cancelled. {@code false} if this future has been cancelled already. */ boolean setUncancellable(); @Override Promise&lt;V&gt; addListener(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt; listener); @Override Promise&lt;V&gt; addListeners(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;... listeners); @Override Promise&lt;V&gt; removeListener(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt; listener); @Override Promise&lt;V&gt; removeListeners(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;... listeners); @Override Promise&lt;V&gt; await() throws InterruptedException; @Override Promise&lt;V&gt; awaitUninterruptibly(); @Override Promise&lt;V&gt; sync() throws InterruptedException; @Override Promise&lt;V&gt; syncUninterruptibly();} JDK &#x6240;&#x63D0;&#x4F9B;&#x7684;&#x7684; Future &#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x624B;&#x5DE5;&#x7684;&#x65B9;&#x5F0F;&#x68C0;&#x67E5;&#x6267;&#x884C;&#x7ED3;&#x679C;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x662F;&#x4F1A;&#x963B;&#x585E;&#x7684;&#xFF1B;Netty &#x5219;&#x5BF9; ChannelFutre &#x8FDB;&#x884C;&#x4E86;&#x589E;&#x5F3A;&#xFF0C;&#x901A;&#x8FC7; ChannelFutureListener &#x4EE5;&#x56DE;&#x8C03;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x83B7;&#x53D6;&#x6267;&#x884C;&#x7ED3;&#x679C;&#xFF0C;&#x53BB;&#x9664;&#x4E86;&#x624B;&#x5DE5;&#x68C0;&#x67E5;&#x963B;&#x585E;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;ChannelFutrureListener &#x7684; operationComplete &#x65B9;&#x6CD5;&#x662F;&#x7531;I/O&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x4E0D;&#x8981;&#x5728;&#x8FD9;&#x91CC;&#x6267;&#x884C;&#x8017;&#x65F6;&#x64CD;&#x4F5C;&#xFF0C;&#x5426;&#x5219;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x53E6;&#x5916;&#x7684;&#x7EBF;&#x7A0B;&#x6216;&#x7EBF;&#x7A0B;&#x6C60;&#x6765;&#x6267;&#x884C; ChannelInboundHandlerAdapterio.netty.channel.ChannelInboundHandlerAdapter io.netty.channelpublic class ChannelInboundHandlerAdapterextends ChannelHandlerAdapter implements ChannelInboundHandlerAbstract base class for ChannelInboundHandler implementations which provide implementations of all of their methods. This implementation just forward the operation to the next ChannelHandler in the ChannelPipeline. Sub-classes may override a method implementation to change this. Be aware that messages are not released after the channelRead(ChannelHandlerContext, Object) method returns automatically. If you are looking for a ChannelInboundHandler implementation that releases the received messages automatically, please see SimpleChannelInboundHandler. &#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86;&#x9002;&#x914D;&#x5668;&#x6A21;&#x5F0F; ChannelInboundHandlerio.netty.channel.ChannelInboundHandler 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * {@link ChannelHandler} which adds callbacks for state changes. This allows the user * to hook in to state changes easily. */public interface ChannelInboundHandler extends ChannelHandler { /** * The {@link Channel} of the {@link ChannelHandlerContext} was registered with its {@link EventLoop} */ void channelRegistered(ChannelHandlerContext ctx) throws Exception; /** * The {@link Channel} of the {@link ChannelHandlerContext} was unregistered from its {@link EventLoop} */ void channelUnregistered(ChannelHandlerContext ctx) throws Exception; /** * The {@link Channel} of the {@link ChannelHandlerContext} is now active */ void channelActive(ChannelHandlerContext ctx) throws Exception; /** * The {@link Channel} of the {@link ChannelHandlerContext} was registered is now inactive and reached its * end of lifetime. */ void channelInactive(ChannelHandlerContext ctx) throws Exception; /** * Invoked when the current {@link Channel} has read a message from the peer. */ void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception; /** * Invoked when the last message read by the current read operation has been consumed by * {@link #channelRead(ChannelHandlerContext, Object)}. If {@link ChannelOption#AUTO_READ} is off, no further * attempt to read an inbound data from the current {@link Channel} will be made until * {@link ChannelHandlerContext#read()} is called. */ void channelReadComplete(ChannelHandlerContext ctx) throws Exception; /** * Gets called if an user event was triggered. */ void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception; /** * Gets called once the writable state of a {@link Channel} changed. You can check the state with * {@link Channel#isWritable()}. */ void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception; /** * Gets called if a {@link Throwable} was thrown. */ @Override @SuppressWarnings(&quot;deprecation&quot;) void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;} SimpleChannelInboundHandlerio.netty.channel.SimpleChannelInboundHandler &#x6211;&#x4EEC;&#x5728;&#x5199;&#x81EA;&#x5DF1;&#x7684; Handler &#x7684;&#x65F6;&#x5019;&#x957F;&#x4F1A;&#x7EE7;&#x627F;&#x8FD9;&#x4E2A; SimpleChannelInboundHandler 12345678910111213141516171819public class MyServerHandler extends SimpleChannelInboundHandler&lt;String&gt;{ @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception { System.out.println(ctx.channel().remoteAddress() + &quot;: &quot; + msg); ctx.channel().writeAndFlush(&quot;from server: &quot; + UUID.randomUUID()); } /** * &#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x5173;&#x95ED;&#x8FDE;&#x63A5; * @param ctx * @param cause * @throws Exception */ @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.close(); }} &#x6211;&#x4EEC;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x6587;&#x6863; io.netty.channelpublic abstract class SimpleChannelInboundHandlerextends ChannelInboundHandlerAdapterChannelInboundHandlerAdapter which allows to explicit only handle a specific type of messages. For example here is an implementation which only handle String messages. 12345678910&gt; public class StringHandler extends&gt; SimpleChannelInboundHandler&lt;String&gt; {&gt; &gt; @Override&gt; protected void channelRead0(ChannelHandlerContext ctx, String message)&gt; throws Exception {&gt; System.out.println(message);&gt; }&gt; }&gt; &gt; Be aware that depending of the constructor parameters it will release all handled messages by passing them to ReferenceCountUtil.release(Object). In this case you may need to use ReferenceCountUtil.retain(Object) if you pass the object to the next handler in the ChannelPipeline.Forward compatibility notice &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6CDB;&#x578B;&#x6307;&#x5B9A;&#x6D88;&#x606F;&#x7C7B;&#x578B; 1234567891011121314151617181920212223242526272829303132@Overridepublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { boolean release = true; try { if (acceptInboundMessage(msg)) { @SuppressWarnings(&quot;unchecked&quot;) I imsg = (I) msg; channelRead0(ctx, imsg); } else { release = false; ctx.fireChannelRead(msg); } } finally { if (autoRelease &amp;&amp; release) { // &#x628A;&#x8FD9;&#x4E2A;&#x6D88;&#x606F;&#x8BA1;&#x6570;&#x51CF;&#x4E00;&#xFF0C;&#x5F53;&#x51CF;&#x4E3A;0&#x5C31;&#x4E22;&#x5F03; ReferenceCountUtil.release(msg); } }}/** * &lt;strong&gt;Please keep in mind that this method will be renamed to * {@code messageReceived(ChannelHandlerContext, I)} in 5.0.&lt;/strong&gt; * * Is called for each message of type {@link I}. * * @param ctx the {@link ChannelHandlerContext} which this {@link SimpleChannelInboundHandler} * belongs to * @param msg the message to handle * @throws Exception is thrown if an error occurred */protected abstract void channelRead0(ChannelHandlerContext ctx, I msg) throws Exception; &#x7ED9;&#x6211;&#x4EEC;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x4E3A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x518D;&#x8C03;&#x7528; channelRead0 &#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF0C;&#x9700;&#x8981;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x53BB;&#x5B9E;&#x73B0; ReferenceCountedio.netty.util.ReferenceCounted io.netty.utilpublic interface ReferenceCountedA reference-counted object that requires explicit deallocation.When a new ReferenceCounted is instantiated, it starts with the reference count of 1. retain() increases the reference count, and release() decreases the reference count. If the reference count is decreased to 0, the object will be deallocated explicitly, and accessing the deallocated object will usually result in an access violation.If an object that implements ReferenceCounted is a container of other objects that implement ReferenceCounted, the contained objects will also be released via release() when the container&#x2019;s reference count becomes 0. ctx.channel().write()&#x548C;ctx.write()&#x7684;&#x533A;&#x522B;&#x5728; Netty &#x4E2D;&#x6709;&#x4E24;&#x79CD;&#x53D1;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5199;&#x5230; Channel &#x4E2D;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5199;&#x5230;&#x4E0E; ChannelHandler &#x6240;&#x5173;&#x8054;&#x7684;&#x90A3;&#x4E2A; ChannelHandlerContext &#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E; ctx.channel().write() &#x65B9;&#x5F0F;&#x6765;&#x8BF4;&#xFF0C;&#x6D88;&#x606F;&#x4F1A;&#x4ECE; ChannelPipeline &#x7684;&#x672B;&#x5C3E;&#x5F00;&#x59CB;&#x6D41;&#x52A8;&#xFF0C;&#x5BF9;&#x4E8E; ctx.write() &#x6765;&#x8BF4;&#xFF0C;&#x6D88;&#x606F;&#x5C06;&#x4ECE; ChannelPipeline &#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x4E2A; ChannelHandler &#x5F00;&#x59CB;&#x6D41;&#x52A8; &#x8FD9;&#x7BC7;&#x535A;&#x5BA2;&#x4E2A;&#x89E3;&#x91CA;&#x4E86; https://blog.csdn.net/FishSeeker/article/details/78447684 &#x7ED3;&#x8BBA;&#xFF1A; ChannelHandlerContext &#x4E0E; ChannelHandler &#x4E4B;&#x95F4;&#x7684;&#x5173;&#x8054;&#x7ED1;&#x5B9A;&#x5173;&#x7CFB;&#x662F;&#x6C38;&#x8FDC;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x7F13;&#x5B58;&#x65F6;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#x7684; &#x5BF9;&#x4E8E;&#x4E0E; Channel &#x7684;&#x540C;&#x540D;&#x65B9;&#x6CD5;&#x6765;&#x8BF4;&#xFF0C; ChannelHandlerContext &#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x4F1A;&#x4EA7;&#x751F;&#x66F4;&#x77ED;&#x7684;&#x4E8B;&#x4EF6;&#x6D41;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x56E0;&#x8BE5;&#x5728;&#x53EF;&#x80FD;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x7279;&#x6027;&#x6765;&#x63D0;&#x5347;&#x6027;&#x80FD; Java NIONIO &#x603B;&#x7ED3;&#x4F7F;&#x7528; NIO &#x8FDB;&#x884C;&#x6587;&#x4EF6;&#x8BFB;&#x53D6;&#x6240;&#x6D89;&#x53CA;&#x7684;&#x6B65;&#x9AA4;&#xFF1A; &#x4ECE; FileInputStream &#x5BF9;&#x8C61;&#x83B7;&#x53D6;&#x5230; Channel &#x5BF9;&#x8C61; &#x521B;&#x5EFA; Buffer &#x5C06;&#x6570;&#x636E;&#x4ECE; Channel &#x4E2D;&#x8BFB;&#x53D6;&#x5230;Buffer&#x4E2D; 0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity flip() &#x65B9;&#x6CD5;&#xFF1A; &#x5C06; limit &#x503C;&#x8BBE;&#x7F6E;&#x4E3A;&#x5F53;&#x524D;&#x7684; position &#x5C06; position &#x8BBE;&#x7F6E; 0 clear() &#x65B9;&#x6CD5;&#xFF1A; &#x5C06; limit &#x8BBE;&#x7F6E;&#x4E3A;capacity &#x5C06; position &#x8BBE;&#x7F6E;&#x4E3A;0 compact() &#x65B9;&#x6CD5;&#xFF1A; &#x5C06;&#x6240;&#x6709;&#x672A;&#x8BFB;&#x7684;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230; buffer &#x8D77;&#x59CB;&#x7684;&#x4F4D;&#x7F6E;&#x5904; &#x5C06; position &#x8BBE;&#x7F6E;&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x672A;&#x8BFB;&#x5143;&#x7D20;&#x7684;&#x540E;&#x9762; &#x5C06; limit &#x8BBE;&#x7F6E;&#x4E3A; capacity &#x73B0;&#x5728;buffer &#x5C31;&#x51C6;&#x5907;&#x597D;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4F1A;&#x8986;&#x76D6;&#x672A;&#x8BFB;&#x7684;&#x6570;&#x636E; Java NIO&#x4E2D;&#xFF0C;&#x5173;&#x4E8E;DirectBuffer&#xFF0C;HeapBuffer&#x7684;&#x7591;&#x95EE;&#xFF1F; DirectBuffer &#x5C5E;&#x4E8E;&#x5806;&#x5916;&#x5B58;&#xFF0C;&#x90A3;&#x5E94;&#x8BE5;&#x8FD8;&#x662F;&#x5C5E;&#x4E8E;&#x7528;&#x6237;&#x5185;&#x5B58;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5185;&#x6838;&#x5185;&#x5B58;&#xFF1F; FileChannel &#x7684;read(ByteBuffer dst)&#x51FD;&#x6570;,write(ByteBuffer src)&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x662F;HeapBuffer&#x7C7B;&#x578B;,&#x5219;&#x4F1A;&#x4E34;&#x65F6;&#x7533;&#x8BF7;&#x4E00;&#x5757;DirectBuffer,&#x8FDB;&#x884C;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x8F93;&#xFF0C;&#x8FD9;&#x662F;&#x51FA;&#x4E8E;&#x4EC0;&#x4E48;&#x539F;&#x56E0;&#xFF1F; &#x7B54;&#x6848;&#xFF1A; https://www.zhihu.com/question/57374068/answer/152691891 Java NIO&#x4E2D;&#x7684;direct buffer&#xFF08;&#x4E3B;&#x8981;&#x662F;DirectByteBuffer&#xFF09;&#x5176;&#x5B9E;&#x662F;&#x5206;&#x4E24;&#x90E8;&#x5206;&#x7684;&#xFF1A; 12345 Java | native |DirectByteBuffer | malloc&apos;d[ address ] -+-&gt; [ data ] | &#x5176;&#x4E2D; DirectByteBuffer &#x81EA;&#x8EAB;&#x662F;&#x4E00;&#x4E2A;Java&#x5BF9;&#x8C61;&#xFF0C;&#x5728;Java&#x5806;&#x4E2D;&#xFF1B;&#x800C;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x4E2D;&#x6709;&#x4E2A;long&#x7C7B;&#x578B;&#x5B57;&#x6BB5;address&#xFF0C;&#x8BB0;&#x5F55;&#x7740;&#x4E00;&#x5757;&#x8C03;&#x7528; malloc() &#x7533;&#x8BF7;&#x5230;&#x7684;native memory&#x3002; &#x6240;&#x4EE5;&#x56DE;&#x5230;&#x9898;&#x4E3B;&#x7684;&#x95EE;&#x9898;&#xFF1A; \1. DirectBuffer &#x5C5E;&#x4E8E;&#x5806;&#x5916;&#x5B58;&#xFF0C;&#x90A3;&#x5E94;&#x8BE5;&#x8FD8;&#x662F;&#x5C5E;&#x4E8E;&#x7528;&#x6237;&#x5185;&#x5B58;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5185;&#x6838;&#x5185;&#x5B58;&#xFF1F; DirectByteBuffer &#x81EA;&#x8EAB;&#x662F;&#xFF08;Java&#xFF09;&#x5806;&#x5185;&#x7684;&#xFF0C;&#x5B83;&#x80CC;&#x540E;&#x771F;&#x6B63;&#x627F;&#x8F7D;&#x6570;&#x636E;&#x7684;buffer&#x662F;&#x5728;&#xFF08;Java&#xFF09;&#x5806;&#x5916;&#x2014;&#x2014;native memory&#x4E2D;&#x7684;&#x3002;&#x8FD9;&#x662F; malloc() &#x5206;&#x914D;&#x51FA;&#x6765;&#x7684;&#x5185;&#x5B58;&#xFF0C;&#x662F;&#x7528;&#x6237;&#x6001;&#x7684;&#x3002; \2. FileChannel &#x7684;read(ByteBuffer dst)&#x51FD;&#x6570;,write(ByteBuffer src)&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x662F;HeapBuffer&#x7C7B;&#x578B;,&#x5219;&#x4F1A;&#x4E34;&#x65F6;&#x7533;&#x8BF7;&#x4E00;&#x5757;DirectBuffer,&#x8FDB;&#x884C;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x8F93;&#xFF0C;&#x8FD9;&#x662F;&#x51FA;&#x4E8E;&#x4EC0;&#x4E48;&#x539F;&#x56E0;&#xFF1F; &#x9898;&#x4E3B;&#x770B;&#x7684;&#x662F;OpenJDK&#x7684; sun.nio.ch.IOUtil.write(FileDescriptor fd, ByteBuffer src, long position, NativeDispatcher nd) &#x7684;&#x5B9E;&#x73B0;&#x5BF9;&#x4E0D;&#x5BF9;&#xFF1A; 1234567891011121314151617181920212223242526272829static int write(FileDescriptor fd, ByteBuffer src, long position, NativeDispatcher nd) throws IOException{ if (src instanceof DirectBuffer) return writeFromNativeBuffer(fd, src, position, nd); // Substitute a native buffer int pos = src.position(); int lim = src.limit(); assert (pos &lt;= lim); int rem = (pos &lt;= lim ? lim - pos : 0); ByteBuffer bb = Util.getTemporaryDirectBuffer(rem); try { bb.put(src); bb.flip(); // Do not update src until we see how many bytes were written src.position(pos); int n = writeFromNativeBuffer(fd, bb, position, nd); if (n &gt; 0) { // now update src src.position(pos + n); } return n; } finally { Util.offerFirstTemporaryDirectBuffer(bb); }} &#x8FD9;&#x91CC;&#x5176;&#x5B9E;&#x662F;&#x5728;&#x8FC1;&#x5C31;OpenJDK&#x91CC;&#x7684;HotSpot VM&#x7684;&#x4E00;&#x70B9;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#x3002; HotSpot VM&#x91CC;&#x7684;GC&#x9664;&#x4E86;CMS&#x4E4B;&#x5916;&#x90FD;&#x662F;&#x8981;&#x79FB;&#x52A8;&#x5BF9;&#x8C61;&#x7684;&#xFF0C;&#x662F;&#x6240;&#x8C13;&#x201C;compacting GC&#x201D;&#x3002; &#x5982;&#x679C;&#x8981;&#x628A;&#x4E00;&#x4E2A;Java&#x91CC;&#x7684; byte[] &#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#x4F20;&#x7ED9;native&#x4EE3;&#x7801;&#xFF0C;&#x8BA9;native&#x4EE3;&#x7801;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x6570;&#x7EC4;&#x7684;&#x5185;&#x5BB9;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x8981;&#x4FDD;&#x8BC1;native&#x4EE3;&#x7801;&#x5728;&#x8BBF;&#x95EE;&#x7684;&#x65F6;&#x5019;&#x8FD9;&#x4E2A; byte[] &#x5BF9;&#x8C61;&#x4E0D;&#x80FD;&#x88AB;&#x79FB;&#x52A8;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8981;&#x88AB;&#x201C;pin&#x201D;&#xFF08;&#x9489;&#xFF09;&#x4F4F;&#x3002; &#x53EF;&#x60DC;HotSpot VM&#x51FA;&#x4E8E;&#x4E00;&#x4E9B;&#x53D6;&#x820D;&#x800C;&#x51B3;&#x5B9A;&#x4E0D;&#x5B9E;&#x73B0;&#x5355;&#x4E2A;&#x5BF9;&#x8C61;&#x5C42;&#x9762;&#x7684;object pinning&#xFF0C;&#x8981;pin&#x7684;&#x8BDD;&#x5C31;&#x5F97;&#x6682;&#x65F6;&#x7981;&#x7528;GC&#x2014;&#x2014;&#x4E5F;&#x5C31;&#x7B49;&#x4E8E;&#x628A;&#x6574;&#x4E2A;Java&#x5806;&#x90FD;&#x7ED9;pin&#x4F4F;&#x3002;HotSpot VM&#x5BF9;JNI&#x7684;Critical&#x7CFB;API&#x5C31;&#x662F;&#x8FD9;&#x6837;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x8FD9;&#x7528;&#x8D77;&#x6765;&#x5C31;&#x4E0D;&#x90A3;&#x4E48;&#x987A;&#x624B;&#x3002; &#x6240;&#x4EE5; Oracle/Sun JDK / OpenJDK &#x7684;&#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x5C31;&#x7528;&#x4E86;&#x70B9;&#x7ED5;&#x5F2F;&#x7684;&#x505A;&#x6CD5;&#x3002;&#x5B83;&#x5047;&#x8BBE;&#x628A; HeapByteBuffer &#x80CC;&#x540E;&#x7684; byte[] &#x91CC;&#x7684;&#x5185;&#x5BB9;&#x62F7;&#x8D1D;&#x4E00;&#x6B21;&#x662F;&#x4E00;&#x4E2A;&#x65F6;&#x95F4;&#x5F00;&#x9500;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x540C;&#x65F6;&#x5047;&#x8BBE;&#x771F;&#x6B63;&#x7684;I/O&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x6162;&#x7684;&#x64CD;&#x4F5C;&#x3002; &#x4E8E;&#x662F;&#x5B83;&#x5C31;&#x5148;&#x628A; HeapByteBuffer &#x80CC;&#x540E;&#x7684; byte[] &#x7684;&#x5185;&#x5BB9;&#x62F7;&#x8D1D;&#x5230;&#x4E00;&#x4E2A; DirectByteBuffer &#x80CC;&#x540E;&#x7684;native memory&#x53BB;&#xFF0C;&#x8FD9;&#x4E2A;&#x62F7;&#x8D1D;&#x4F1A;&#x6D89;&#x53CA; sun.misc.Unsafe.copyMemory() &#x7684;&#x8C03;&#x7528;&#xFF0C;&#x80CC;&#x540E;&#x662F;&#x7C7B;&#x4F3C; memcpy() &#x7684;&#x5B9E;&#x73B0;&#x3002;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4F1A;&#x5728;&#x6574;&#x4E2A;&#x62F7;&#x8D1D;&#x8FC7;&#x7A0B;&#x4E2D;&#x6682;&#x65F6;&#x4E0D;&#x5141;&#x8BB8;&#x53D1;&#x751F;GC&#x7684;&#xFF0C;&#x867D;&#x7136;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x8DDF;JNI&#x7684;Critical&#x7CFB;API&#x4E0D;&#x592A;&#x4E00;&#x6837;&#x3002;&#xFF08;&#x5177;&#x4F53;&#x6765;&#x8BF4;&#x662F; Unsafe.copyMemory() &#x662F;HotSpot VM&#x7684;&#x4E00;&#x4E2A;intrinsic&#x65B9;&#x6CD5;&#xFF0C;&#x4E2D;&#x95F4;&#x6CA1;&#x6709;safepoint&#x6240;&#x4EE5;GC&#x65E0;&#x6CD5;&#x53D1;&#x751F;&#xFF09;&#x3002; &#x7136;&#x540E;&#x6570;&#x636E;&#x88AB;&#x62F7;&#x8D1D;&#x5230;native memory&#x4E4B;&#x540E;&#x5C31;&#x597D;&#x529E;&#x4E86;&#xFF0C;&#x5C31;&#x53BB;&#x505A;&#x771F;&#x6B63;&#x7684;I/O&#xFF0C;&#x628A; DirectByteBuffer &#x80CC;&#x540E;&#x7684;native memory&#x5730;&#x5740;&#x4F20;&#x7ED9;&#x771F;&#x6B63;&#x505A;I/O&#x7684;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x8FB9;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x518D;&#x53BB;&#x8BBF;&#x95EE;Java&#x5BF9;&#x8C61;&#x53BB;&#x8BFB;&#x5199;&#x8981;&#x505A;I/O&#x7684;&#x6570;&#x636E;&#x4E86;&#x3002; ByteBuf&#x6587;&#x6863;&#xFF1A;https://netty.io/4.1/api/index.html &#x6211;&#x4EEC;&#x770B;&#x7B2C;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 1234567891011121314public class ByteBufTest01 { public static void main(String[] args) { final ByteBuf buffer = Unpooled.buffer(10); for (int i = 0, index = 120; i &lt; 10; i++) { buffer.writeByte(index + i); } for (int i = 0; i &lt; 10; i++) { System.out.println(buffer.getByte(i)); } }} &#x8F93;&#x51FA;&#xFF1A; 12345678910120121122123124125126127-128-127 &#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x6587;&#x6863; 123456789/** * Sets the specified byte at the current {@code writerIndex} * and increases the {@code writerIndex} by {@code 1} in this buffer. * The 24 high-order bits of the specified value are ignored. * * @throws IndexOutOfBoundsException * if {@code this.writableBytes} is less than {@code 1} */public abstract ByteBuf writeByte(int value); &#x867D;&#x7136;&#x4F20;&#x5165;&#x7684;&#x4E00;&#x4E2A; int &#x503C;&#xFF0C;&#x53EF;&#x662F;&#x5B83;&#x4F1A;&#x4E22;&#x5F03;&#x9AD8;&#x4F4D;&#x7684; 24 bit&#xFF0C;&#x6211;&#x4EEC;&#x77E5;&#x9053; int &#x662F; 4 &#x5B57;&#x8282;&#xFF08;32 bit&#xFF09;&#xFF0C;&#x4E22;&#x5F03; 3 &#x5B57;&#x8282; &#xFF08;24 bit&#xFF09;&#xFF0C;&#x5C31;&#x4FDD;&#x7559;&#x5230; 1 &#x5B57;&#x8282;&#xFF08;8 bit&#xFF09; &#x6211;&#x4EEC;&#x8981;&#x770B;&#x4E0B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 1234567891011121314151617public class ByteBufTest02 { public static void main(String[] args) { ByteBuf byteBuf = Unpooled.copiedBuffer(&quot;hello world&quot;, Charset.forName(&quot;utf-8&quot;)); // &#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;&#x5806;&#x7F13;&#x5B58;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5806;&#x7F13;&#x5B58;&#xFF0C;&#x8FD4;&#x56DE;true if (byteBuf.hasArray()) { byte[] bytes = byteBuf.array(); System.out.println(new String(bytes, Charset.forName(&quot;utf-8&quot;))); System.out.println(byteBuf); System.out.println(byteBuf.arrayOffset()); // &#x53EF;&#x8BFB;&#x5B57;&#x8282;&#x7B2C;&#x4E00;&#x504F;&#x79FB;&#x91CF; System.out.println(byteBuf.readerIndex()); System.out.println(byteBuf.writerIndex()); System.out.println(byteBuf.capacity()); } }} &#x8F93;&#x51FA;&#xFF1A; 123456hello world UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 11, cap: 33)001133 ridx &#x8868;&#x793A;&#x8BFB;&#x7684; index&#xFF0C;widx &#x8868;&#x793A;&#x5199;&#x7684; index &#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x590D;&#x5408; Buffer 1234567891011121314151617public class ByteBufTest03 { public static void main(String[] args) { // &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x590D;&#x5408; buffer CompositeByteBuf compositeByteBuf = Unpooled.compositeBuffer(); ByteBuf heapBuf = Unpooled.buffer(10); ByteBuf directBuf = Unpooled.directBuffer(8); compositeByteBuf.addComponent(heapBuf); compositeByteBuf.addComponent(directBuf); compositeByteBuf.forEach(System.out::println); // &#x8F93;&#x51FA; // UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 10)) // UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(ridx: 0, widx: 0, cap: 8)) }} Netty &#x63D0;&#x4F9B;&#x7684; 3 &#x79CD;&#x7F13;&#x51B2;&#x533A;heap buffer&#xFF08;&#x5806;&#x7F13;&#x51B2;&#x533A;&#xFF09;&#xFF1A; &#x8FD9;&#x662F;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x7C7B;&#x578B;&#xFF0C;ByteBuf &#x5C06;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x5230; JVM &#x7684;&#x5806;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x5B9E;&#x9645;&#x7684;&#x6570;&#x636E;&#x653E;&#x5230; byte &#x6570;&#x7EC4;&#x4E2D;&#x6765;&#x5B9E;&#x73B0;&#x7684; &#x4F18;&#x70B9;&#xFF1A;&#x7531;&#x4E8E;&#x6570;&#x636E;&#x662F;&#x5B58;&#x50A8;&#x5728; JVM &#x7684;&#x5806;&#x4E2D;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x7684;&#x521B;&#x5EFA;&#x548C;&#x5FEB;&#x901F;&#x7684;&#x91CA;&#x653E;&#xFF0C;&#x5E76;&#x4E14;&#x5B83;&#x63D0;&#x4F9B;&#x4E86; &#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x5185;&#x90E8;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5; &#x7F3A;&#x70B9;&#xFF1A;&#x6BCF;&#x6B21;&#x8BFB;&#x5199;&#x6570;&#x636E;&#x65F6;&#xFF0C;&#x90FD;&#x9700;&#x8981;&#x5148;&#x5C06;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230;&#x76F4;&#x63A5;&#x7F13;&#x51B2;&#x4E2D;&#x518D;&#x8FDB;&#x884C;&#x7F51;&#x7EDC;&#x4F20;&#x8F93; direct buffer&#xFF08;&#x76F4;&#x63A5;&#x7F13;&#x51B2;&#x533A;&#xFF09;&#xFF1A; &#x5728;&#x5806;&#x4E4B;&#x5916;&#x76F4;&#x63A5;&#x5206;&#x914D;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x76F4;&#x63A5;&#x7F13;&#x51B2;&#x533A;&#x5E76;&#x4E0D;&#x4F1A;&#x5360;&#x7528;&#x5806;&#x7684;&#x5BB9;&#x91CF;&#x7A7A;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x662F;&#x6709;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5728;&#x672C;&#x5730;&#x5185;&#x5B58;&#x8FDB;&#x884C;&#x7684;&#x6570;&#x636E;&#x5206;&#x914D; &#x4F18;&#x70B9;&#xFF1A;&#x5728;&#x4F7F;&#x7528; Socket &#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x65F6;&#xFF0C;&#x6027;&#x80FD;&#x975E;&#x5E38;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x4F4D;&#x4E8E;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x672C;&#x5730;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x4ECE; JVM &#x5C06;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230;&#x76F4;&#x63A5;&#x7F13;&#x51B2;&#x533A; &#x7F3A;&#x70B9;&#xFF1A;&#x56E0;&#x4E3A; Direct Buffer &#x662F;&#x76F4;&#x63A5;&#x5728;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x5206;&#x914D;&#x4E0E;&#x91CA;&#x653E;&#x8981;&#x6BD4;&#x5806;&#x7A7A;&#x95F4;&#x66F4;&#x52A0;&#x590D;&#x6742;&#xFF0C;&#x800C;&#x4E14;&#x901F;&#x5EA6;&#x8981;&#x6162;&#x4E00;&#x4E9B; Netty &#x901A;&#x8FC7;&#x63D0;&#x4F9B;&#x5185;&#x5B58;&#x6C60;&#x6765;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x76F4;&#x63A5;&#x7F13;&#x51B2;&#x533A;&#x5E76;&#x4E0D;&#x652F;&#x6301;&#x901A;&#x8FC7;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x8BBF;&#x95EE;&#x6570;&#x636E; &#x91CD;&#x70B9;&#xFF1A;&#x5BF9;&#x4E8E;&#x540E;&#x7AEF;&#x7684;&#x4E1A;&#x52A1;&#x6D88;&#x606F;&#x7684;&#x7F16;&#x89E3;&#x7801;&#x6765;&#x8BF4;&#xFF0C;&#x63A8;&#x8350;&#x4F7F;&#x7528; HeapByteBuf&#xFF1B;&#x5BF9;&#x4E8E; I/O &#x901A;&#x4FE1;&#x7684;&#x8BFB;&#x5199;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x6211;&#x4EEC;&#x63A8;&#x8350;&#x4F7F;&#x7528; DirectBytebuf composite buffer&#xFF08;&#x7B26;&#x5408;&#x7F13;&#x51B2;&#x533A;&#xFF09;&#xFF1A; &#x590D;&#x5408;&#x7F13;&#x51B2;&#x533A;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x5C06;&#x591A;&#x4E2A;&#x7F13;&#x51B2;&#x533A;&#x5B9E;&#x4F8B;&#x7EC4;&#x5408;&#x8D77;&#x6765;&#xFF0C;&#x5E76;&#x5411;&#x5916;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x7EDF;&#x4E00;&#x89C6;&#x56FE;&#x3002;&#x50CF;&#x662F;&#x4E00;&#x4E2A;&#x7F13;&#x51B2;&#x533A;&#x7684; List JDK &#x7684; ByteBuffer &#x4E0E; Netty &#x7684; ByteBuf &#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x6BD4;&#x5BF9; Netty &#x7684; ByteBuf &#x91C7;&#x7528;&#x4E86;&#x8BFB;&#x5199;&#x5206;&#x79BB;&#x7684;&#x7B56;&#x7565;&#xFF08;readerIndex &#x548C; writeerIndex&#xFF09;&#xFF0C;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x5316;&#xFF08;&#x91CC;&#x9762;&#x5C1A;&#x672A;&#x6709;&#x4EFB;&#x4F55;&#x6570;&#x636E;&#xFF09;&#x7684; ByteBuf &#x7684; readerIndex &#x4E0E; writerIndex &#x7684;&#x503C;&#x90FD;&#x4E3A;0 &#x5F53;&#x6570;&#x7D22;&#x5F15;&#x4E0E;&#x5199;&#x7D22;&#x5F15;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7EE7;&#x7EED;&#x8BFB;&#x53D6;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x629B;&#x51FA; IndexOutOfBoundsException &#x5BF9;&#x4E8E;ByteBuf &#x7684;&#x4EFB;&#x4F55;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#x90FD;&#x4F1A;&#x5206;&#x522B;&#x5355;&#x72EC;&#x7EF4;&#x62A4;&#x8BFB;&#x7D22;&#x5F15;&#x548C;&#x5199;&#x7D22;&#x5F15;&#xFF0C;MaxCapacity &#x6700;&#x5927;&#x7684;&#x5BB9;&#x91CF;&#x9ED8;&#x8BA4;&#x4E3A;Integer.MAX_VALUE JDK &#x7684; ByteBuffer&#x7684;&#x7F3A;&#x70B9;&#xFF1A; final byte[] hb; &#x8FD9;&#x662F;JDK&#x7684;ByteBuffer&#x5BF9;&#x8C61;&#x4E2D;&#x7528;&#x4E8E;&#x50A8;&#x5B58;&#x7684;&#x5BF9;&#x8C61;&#x58F0;&#x660E;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5176;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x5E03;&#x5C14;&#x58F0;&#x660E;&#x4E3A;final&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x957F;&#x5EA6;&#x662F;&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;&#xFF0C;&#x4E00;&#x65E6;&#x5206;&#x914D;&#x597D;&#x540E;&#x5C31;&#x4E0D;&#x80FD;&#x52A8;&#x6001;&#x6269;&#x5BB9;&#x4E0E;&#x6536;&#x7F29;&#xFF0C;&#x800C;&#x4E14;&#x5F53;&#x50A8;&#x5B58;&#x7684;&#x6570;&#x636E;&#x5B57;&#x8282;&#x5F88;&#x5927;&#x65F6;&#x5C31;&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x51FA;&#x73B0;IndexOutOfBoundsException&#xFF0C;&#x5982;&#x679C;&#x8981;&#x9884;&#x9632;&#x7740;&#x4E2A;&#x5F02;&#x5E38;&#xFF0C;&#x90A3;&#x5C31;&#x9700;&#x8981;&#x518D;&#x50A8;&#x5B58;&#x4E4B;&#x524D;&#x5B8C;&#x5168;&#x786E;&#x5B9A;&#x597D;&#x5F85;&#x50A8;&#x5B58;&#x7684;&#x5B57;&#x8282;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5982;&#x679C;ByteBuffer&#x7684;&#x7A7A;&#x95F4;&#x4E0D;&#x8DB3;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x521B;&#x5EFA;&#x65B0;&#x7684;ByteBuffer&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x4E4B;&#x524D;&#x7684;ByteBuffer&#x4E2D;&#x7684;&#x6570;&#x636E;&#x590D;&#x5236;&#x8FC7;&#x53BB;&#xFF0C;&#x8FD9;&#x4E00;&#x5207;&#x64CD;&#x4F5C;&#x90FD;&#x9700;&#x8981;&#x7531;&#x5F00;&#x53D1;&#x8005;&#x81EA;&#x5DF1;&#x6765;&#x624B;&#x52A8;&#x5B8C;&#x6210;&#x7684; ByteBuffer &#x53EA;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;position &#x6307;&#x9488;&#x6765;&#x6807;&#x8BC6;&#x4F4D;&#x7F6E;&#x4FE1;&#x606F;&#xFF0C;&#x5728;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#x5207;&#x6362;&#x65F6;&#x5C31;&#x9700;&#x8981;&#x8C03;&#x7528;flip&#x65B9;&#x6CD5;&#x6216;&#x5219;&#x662F;rewind &#x65B9;&#x6CD5;&#xFF0C;&#x4F7F;&#x7528;&#x5F88;&#x4E0D;&#x65B9;&#x4FBF; Netty &#x7684; ByteBuf &#x7684;&#x4F18;&#x70B9;&#xFF1A; &#x50A8;&#x5B58;&#x5B57;&#x8282;&#x7684;&#x6570;&#x7EC4;&#x662F;&#x52A8;&#x6001;&#x7684;&#xFF0C;&#x5176;&#x6700;&#x5927;&#x503C;&#x9ED8;&#x8BA4;&#x662F;Integer.MAX_VALUE&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x52A8;&#x6001;&#x6027;&#x662F;&#x4F53;&#x73B0;&#x5728;write&#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#xFF0C;write&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x4F1A;&#x5224;&#x65AD;buffer&#x5BB9;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x8DB3;&#x5219;&#x4F1A;&#x81EA;&#x52A8;&#x6269;&#x5BB9; ByteBuf&#x7684;&#x8BFB;&#x5199;&#x7D22;&#x5F15;&#x662F;&#x5B8C;&#x6210;&#x5206;&#x5F00;&#x7684;&#xFF0C;&#x4F7F;&#x7528;&#x8D77;&#x6765;&#x5F88;&#x65B9;&#x4FBF; 12345678910111213141516171819202122232425262728// io.netty.buffer.AbstractByteBuf#writeByte @Override public ByteBuf writeByte(int value) { ensureWritable0(1); // &#x4F1A;&#x5148;&#x5224;&#x65AD;&#x662F;&#x5426;&#x591F;&#x5199;&#x5165;&#x4E00;&#x4E2A;&#x5B57;&#x8282; _setByte(writerIndex++, value); return this; }// io.netty.buffer.AbstractByteBuf#ensureWritable0// &#x4F1A;&#x81EA;&#x52A8;&#x6269;&#x5BB9; final void ensureWritable0(int minWritableBytes) { ensureAccessible(); if (minWritableBytes &lt;= writableBytes()) { return; } if (minWritableBytes &gt; maxCapacity - writerIndex) { throw new IndexOutOfBoundsException(String.format( &quot;writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s&quot;, writerIndex, minWritableBytes, maxCapacity, this)); } // Normalize the current capacity to the power of 2. int newCapacity = alloc().calculateNewCapacity(writerIndex + minWritableBytes, maxCapacity); // Adjust to the new capacity. capacity(newCapacity); }]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 源码分析（三）]]></title>
    <url>%2F2019%2F01%2F16%2FNetty%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7248;&#x672C; 4.1.15 &#x5B98;&#x7F51;&#xFF1A;https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. addLast &#x65B9;&#x6CD5;io.netty.channel.DefaultChannelPipeline#addLast 12345678910111213141516171819202122232425262728293031323334@Overridepublic final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) { final AbstractChannelHandlerContext newCtx; synchronized (this) { checkMultiplicity(handler); newCtx = newContext(group, filterName(name, handler), handler); addLast0(newCtx); // &#x662F;&#x628A; ChannelHandlerContext &#x6DFB;&#x52A0;&#x8FDB;&#x53BB; // If the registered is false it means that the channel was not registered on an eventloop yet. // In this case we add the context to the pipeline and add a task that will call // ChannelHandler.handlerAdded(...) once the channel is registered. if (!registered) { newCtx.setAddPending(); callHandlerCallbackLater(newCtx, true); return this; } EventExecutor executor = newCtx.executor(); if (!executor.inEventLoop()) { newCtx.setAddPending(); executor.execute(new Runnable() { @Override public void run() { callHandlerAdded0(newCtx); } }); return this; } } callHandlerAdded0(newCtx); return this;} AbstractChannelHandlerContext &#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x627E;&#x5230;&#x5B9E;&#x73B0;&#x7684;&#x4E00;&#x4E2A;&#x63A5;&#x53E3; ChannelHandlerContext io.netty.channel.ChannelHandlerContext &#x6587;&#x6863;&#xFF1A;https://netty.io/5.0/api/io/netty/channel/ChannelHandlerContext.html &#x63A5;&#x4E0B;&#x6765;&#x6211;&#x5206;&#x6790;&#x4E00;&#x4E0B; ChannelHandlerContext &#xFF0C;PipeLine&#xFF0C;Handler &#x8FD9;&#x4E09;&#x8005;&#x7684;&#x5173;&#x7CFB; &#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x5199;&#x7684;&#x5F88;&#x6E05;&#x695A; https://blog.csdn.net/u010853261/article/details/54574440 ChannelHandlerContext&#x6BCF;&#x4E2A;ChannelHandler&#x88AB;&#x6DFB;&#x52A0;&#x5230;ChannelPipeline&#x540E;&#xFF0C;&#x90FD;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;ChannelHandlerContext&#x5E76;&#x4E0E;&#x4E4B;&#x521B;&#x5EFA;&#x7684;ChannelHandler&#x5173;&#x8054;&#x7ED1;&#x5B9A;&#x3002;ChannelHandlerContext&#x5141;&#x8BB8;ChannelHandler&#x4E0E;&#x5176;&#x4ED6;&#x7684;ChannelHandler&#x5B9E;&#x73B0;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x3002;ChannelHandlerContext&#x4E0D;&#x4F1A;&#x6539;&#x53D8;&#x6DFB;&#x52A0;&#x5230;&#x5176;&#x4E2D;&#x7684;ChannelHandler&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x662F;&#x5B89;&#x5168;&#x7684; &#x4E0B;&#x56FE;&#x663E;&#x793A;&#x4E86;ChannelHandlerContext&#x3001;ChannelHandler&#x3001;ChannelPipeline&#x7684;&#x5173;&#x7CFB;&#xFF1A; &#x6700;&#x540E;&#x6211;&#x4EEC;&#x770B;&#x5230; 1234567private void addLast0(AbstractChannelHandlerContext newCtx) { AbstractChannelHandlerContext prev = tail.prev; newCtx.prev = prev; newCtx.next = tail; prev.next = newCtx; tail.prev = newCtx;} &#x6211;&#x4EEC;&#x7684;&#x53CC;&#x5411;&#x94FE;&#x8868;&#x94FE;&#x8868;&#x7EF4;&#x62A4;&#x7684;&#x662F; ChannelHandlerContext &#x5BF9;&#x8C61;&#xFF0C;&#x800C;ChannelHandlerContext &#x5305;&#x88C5;&#x4E86; ChannelHandler &#x6211;&#x4EEC;&#x56DE;&#x5230; addLast &#x65B9;&#x6CD5;&#x4E0A; 123456789101112131415161718p.addLast(new ChannelInitializer&lt;Channel&gt;() { @Override public void initChannel(final Channel ch) throws Exception { final ChannelPipeline pipeline = ch.pipeline(); ChannelHandler handler = config.handler(); if (handler != null) { pipeline.addLast(handler); } ch.eventLoop().execute(new Runnable() { @Override public void run() { pipeline.addLast(new ServerBootstrapAcceptor( ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs)); } }); }}); &#x8FDB;&#x5165; ChannelInitializer &#x7C7B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x770B; #initChannel &#x65B9;&#x6CD5;&#xFF0C;&#x8BF4;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5F53; Channel &#x6CE8;&#x518C;&#x65F6;&#x4F1A;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x4E00;&#x65E6;&#x6389;&#x7528;&#x5B8C;&#x5C31;&#x4F1A;&#x88AB;&#x79FB;&#x9664; ChannelPipeline&#xFF0C;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x53EA;&#x9700;&#x8981;&#x628A;&#x91CC;&#x9762;&#x5C01;&#x88C5;&#x7684; Handler &#x6DFB;&#x52A0;&#x5230; ChannelPipeline&#xFF0C;&#x56E0;&#x4E3A;&#x4ED6;&#x672C;&#x8EAB;&#x5C31;&#x4E0D;&#x4E00;&#x4E2A; Handler io.netty.channel.ChannelInitializerprotected abstract void initChannel(C ch) This method will be called once the Channel was registered. After the method returns this instance will be removed from the ChannelPipeline of the Channel. &#x4E0B;&#x9762;&#x662F;&#x79FB;&#x9664;&#x4EE3;&#x7801; 1234567891011121314151617181920212223242526private boolean initChannel(ChannelHandlerContext ctx) throws Exception { if (initMap.putIfAbsent(ctx, Boolean.TRUE) == null) { // Guard against re-entrance. try { initChannel((C) ctx.channel()); } catch (Throwable cause) { // Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...). // We do so to prevent multiple calls to initChannel(...). exceptionCaught(ctx, cause); } finally { remove(ctx); } return true; } return false;}private void remove(ChannelHandlerContext ctx) { try { ChannelPipeline pipeline = ctx.pipeline(); if (pipeline.context(this) != null) { pipeline.remove(this); } } finally { initMap.remove(ctx); }} ChannelHandlerContext.attr(..) == Channel.attr(..)https://netty.io/wiki/new-and-noteworthy-in-4.1.html Both Channel and ChannelHandlerContext implement the interface AttributeMap to enable a user to attach one or more user-defined attributes to them. What sometimes made a user confused was that a Channel and a ChannelHandlerContext had its own storage for the user-defined attributes. For example, even if you put an attribute &#x2018;KEY_X&#x2019; via Channel.attr(KEY_X).set(valueX), you will never find it via ChannelHandlerContext.attr(KEY_X).get() and vice versa. This behavior is not only confusing but also is waste of memory. To address this issue, we decided to keep only one map per Channel internally. AttributeMap always uses AttributeKey as its key. AttributeKey ensures uniqueness between each key, and thus there&#x2019;s no point of having more than one attribute map per Channel. As long as a user defines its own AttributeKey as a private static final field of his or her ChannelHandler, there will be no risk of duplicate keys. &#x6CE8;&#x610F;&#xFF1A;&#x73B0;&#x5728;&#x8FD9;&#x4E24;&#x4E2A;&#x5173;&#x8054;&#x7684;&#x662F;&#x4E00;&#x4E2A;Map callHandlerCallbackLater &#x6211;&#x4EEC;&#x56DE;&#x5230; #addLast &#x65B9;&#x6CD5;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x662F;&#x8FD8;&#x6CA1;&#x6709;&#x6CE8;&#x518C;&#x7684;&#xFF0C;&#x8FDB;&#x5165;&#x8FD9;&#x4E2A; #callHandlerCallbackLater &#x65B9;&#x6CD5;&#xFF0C;&#x628A;&#x7A0D;&#x540E;&#x8C03;&#x7528; Handler &#x56DE;&#x8C03;&#xFF0C;&#x5C01;&#x88C5;&#x6210;&#x4E00;&#x4E2A; task 123456789101112131415private void callHandlerCallbackLater(AbstractChannelHandlerContext ctx, boolean added) { assert !registered; PendingHandlerCallback task = added ? new PendingHandlerAddedTask(ctx) : new PendingHandlerRemovedTask(ctx); PendingHandlerCallback pending = pendingHandlerCallbackHead; if (pending == null) { pendingHandlerCallbackHead = task; } else { // Find the tail of the linked-list. while (pending.next != null) { pending = pending.next; } pending.next = task; }} &#x6CE8;&#x518C;&#x6211;&#x4EEC;&#x56DE;&#x5230;io.netty.bootstrap.AbstractBootstrap#initAndRegister 12345678910111213141516171819202122final ChannelFuture initAndRegister() { Channel channel = null; try { channel = channelFactory.newChannel(); init(channel); } catch (Throwable t) { if (channel != null) { // channel can be null if newChannel crashed (eg SocketException(&quot;too many open files&quot;)) channel.unsafe().closeForcibly(); } // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t); } ChannelFuture regFuture = config().group().register(channel); if (regFuture.cause() != null) { if (channel.isRegistered()) { channel.close(); } else { channel.unsafe().closeForcibly(); } } &#x524D;&#x9762;&#x7684;&#x521D;&#x59CB;&#x5316;&#x521D;&#x59CB;&#x5316;&#x5DF2;&#x7ECF;&#x6709;&#x4E00;&#x70B9;&#x7684;&#x4E86;&#x89E3;&#xFF0C;&#x73B0;&#x5728;&#x6211;&#x6765;&#x770B;&#x6CE8;&#x518C;&#xFF0C;&#x8FD9;&#x91CC;&#x6709;#config&#xFF0C;#group &#x548C; #register &#x8FD9;&#x4E09;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x5206;&#x6790; 1ChannelFuture regFuture = config().group().register(channel); config &#x65B9;&#x6CD5;12345/** * Returns the {@link AbstractBootstrapConfig} object that can be used to obtain the current config * of the bootstrap. */public abstract AbstractBootstrapConfig&lt;B, C&gt; config(); &#x8FD4;&#x56DE;&#x4E86;&#x4E00;&#x4E2A; ServerbootstrapConfig &#x5BF9;&#x8C61; group &#x65B9;&#x6CD5;1234567/** * Returns the configured {@link EventLoopGroup} or {@code null} if non is configured yet. */@SuppressWarnings(&quot;deprecation&quot;)public final EventLoopGroup group() { return bootstrap.group();} &#x8FD4;&#x56DE;&#x4E00;&#x4E2A; NioEventLoopGroup &#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x8C03;&#x7528;&#x7684;&#x662F;&#x4ED6;&#x7684;&#x7236;&#x7C7B;MultithreadEventLoopGroup&#x7684; register &#x65B9;&#x6CD5;io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel) &#x6700;&#x7EC8;&#x4F1A;&#x8C03;&#x7528; io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel) &#x7684;&#x6CE8;&#x518C;&#x65B9;&#x6CD5; &#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x7C7B; io.netty.channel.SingleThreadEventLoop io.netty.channelpublic abstract class SingleThreadEventLoopextends SingleThreadEventExecutorimplements EventLoopAbstract base class for EventLoops that execute all its submitted tasks in a single thread. io.netty.channel.AbstractChannel.AbstractUnsafe#register 1234567891011121314151617181920212223242526272829303132333435363738@Overridepublic final void register(EventLoop eventLoop, final ChannelPromise promise) { if (eventLoop == null) { throw new NullPointerException(&quot;eventLoop&quot;); } if (isRegistered()) { promise.setFailure(new IllegalStateException(&quot;registered to an event loop already&quot;)); return; } if (!isCompatible(eventLoop)) { promise.setFailure( new IllegalStateException(&quot;incompatible event loop type: &quot; + eventLoop.getClass().getName())); return; } AbstractChannel.this.eventLoop = eventLoop; // &#x5982;&#x679C;&#x662F;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x5C31;&#x8BA9;&#x5B83;&#x6267;&#x884C; if (eventLoop.inEventLoop()) { register0(promise); // &#x5982;&#x679C;&#x4E0D;&#x662F;&#x7684;&#x8BDD;&#x5C31;&#x653E;&#x5230;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x6CE8;&#x518C; } else { try { eventLoop.execute(new Runnable() { @Override public void run() { register0(promise); } }); } catch (Throwable t) { logger.warn( &quot;Force-closing a channel whose registration task was not accepted by an event loop: {}&quot;, AbstractChannel.this, t); closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); } }} &#x5148;&#x7406;&#x89E3;&#x4E00;&#x4E0B;&#x7EBF;&#x7A0B; Netty &#x4E2D;&#x7684;&#x7EBF;&#x7A0B;&#x6A21;&#x578B; &#x4E00;&#x4E2A; EventLoopGroup &#x5F53;&#x4E2D;&#x4F1A;&#x5305;&#x542B;&#x591A;&#x4E2A; EventLoop &#x4E00;&#x4E2A; EventLoop &#x5728;&#x5B83;&#x7684;&#x6574;&#x4E2A;&#x751F;&#x547D;&#x5468;&#x671F;&#x5F53;&#x4E2D;&#x90FD;&#x53EA;&#x4F1A;&#x4E0E;&#x552F;&#x4E00;&#x4E00;&#x4E2A; Thread &#x8FDB;&#x884C;&#x7ED1;&#x5B9A; &#x6240;&#x6709; EventLoop &#x6240;&#x5904;&#x7406;&#x7684;&#x5404;&#x79CD; I/O &#x4E8B;&#x4EF6;&#x90FD;&#x662F;&#x5C06;&#x5728;&#x4ED6;&#x6240;&#x5173;&#x8054;&#x7684;&#x90A3;&#x4E2A; Thread &#x4E0A;&#x8FDB;&#x884C;&#x5904;&#x7406; &#x4E00;&#x4E2A; Channel &#x5728;&#x5B83;&#x7684;&#x6574;&#x4E2A;&#x751F;&#x547D;&#x5468;&#x671F;&#x4E2D;&#x53EA;&#x4F1A;&#x6CE8;&#x518C;&#x5728;&#x4E00;&#x4E2A; EventLoop &#x4E0A; &#x4E00;&#x4E2A; EventLoop &#x5728;&#x8FD0;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4F1A;&#x88AB;&#x5206;&#x914D;&#x7ED9;&#x4E00;&#x6216;&#x8005;&#x591A;&#x4E2A; Channel &#x91CD;&#x8981;&#x7ED3;&#x8BBA;&#xFF1A; &#x5728;Netty &#x4E2D; Channel &#x7684;&#x5B9E;&#x73B0;&#x662F;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x57FA;&#x4E8E;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B58;&#x50A8;&#x4E00;&#x4E2A; Channel &#x7684;&#x5F15;&#x7528;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x9700;&#x8981;&#x5411;&#x8FDC;&#x7A0B;&#x7AEF;&#x70B9;&#x53D1;&#x9001;&#x6570;&#x636E;&#x65F6;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x5F15;&#x7528;&#x6765;&#x8C03;&#x7528; Channel &#x76F8;&#x5E94;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5373;&#x4FBF;&#x662F;&#x5F53;&#x65F6;&#x6709;&#x5F88;&#x591A;&#x7EBF;&#x7A0B;&#x90FD;&#x5728;&#x4F7F;&#x7528;&#x5B83;&#x4E5F;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x4E14;&#x6D88;&#x606F;&#x4E00;&#x70B9;&#x4F1A;&#x6309;&#x7167;&#x8FD9;&#x4E2A;&#x987A;&#x5E8F;&#x53D1;&#x9001;&#x51FA;&#x53BB; &#x6211;&#x4EEC;&#x5728;&#x4E1A;&#x52A1;&#x5F00;&#x53D1;&#x4E2D;&#xFF0C;&#x4E0D;&#x8981;&#x5C06;&#x6267;&#x884C;&#x8017;&#x65F6;&#x7684;&#x4EFB;&#x52A1;&#x653E;&#x5165;&#x5230; EventLoop &#x7684;&#x6267;&#x884C;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4F1A;&#x5835;&#x585E;&#x8BE5;&#x7EBF;&#x7A0B;&#x7684;&#x6240;&#x6709;Channel &#x4E0A;&#x7684;&#x5176;&#x5B83;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x963B;&#x585E;&#x8C03;&#x7528;&#x6216;&#x5219;&#x662F;&#x8017;&#x65F6;&#x64CD;&#x4F5C;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x4E13;&#x95E8;&#x7684;EventExectutor(&#x4E1A;&#x52A1;&#x7EBF;&#x7A0B;&#x6C60;) &#x901A;&#x5E38;&#x4F1A;&#x6709;&#x4E24;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A; &#x5728; ChannelHandler &#x7684;&#x56DE;&#x8C03;&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x5B9A;&#x4E49;&#x7684;&#x4E1A;&#x52A1;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5F02;&#x6B65;&#x8C03;&#x7528; &#x501F;&#x52A9;&#x4E8E; Netty &#x63D0;&#x4F9B;&#x7684;&#x5411; ChannelPipeline &#x6DFB;&#x52A0;ChannelHandler&#x662F;&#x8C03;&#x7528;&#x7684;addLast&#x65B9;&#x6CD5;&#x6765;&#x4F20;&#x9012; EventExecutorGroup &#x8BF4;&#x660E;&#xFF1A;&#x5982;&#x679C;addLast(handler)&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x7531;I/O&#x7EBF;&#x7A0B;&#x6240;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x5982;&#x679C;addLast(eventExectutorGroup, handler)&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x7531;&#x53C2;&#x6570;&#x4E2D;&#x7684;group&#x7684;&#x7EBF;&#x7A0B;&#x7EC4;&#x6765;&#x6267;&#x884C; io.netty.channel.AbstractChannel.AbstractUnsafe#register0 1234567891011121314151617181920212223242526272829303132333435363738private void register0(ChannelPromise promise) { try { // check if the channel is still open as it could be closed in the mean time when the register // call was outside of the eventLoop if (!promise.setUncancellable() || !ensureOpen(promise)) { return; } boolean firstRegistration = neverRegistered; doRegister(); // &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5; neverRegistered = false; registered = true; // Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the // user may already fire events through the pipeline in the ChannelFutureListener. pipeline.invokeHandlerAddedIfNeeded(); safeSetSuccess(promise); pipeline.fireChannelRegistered(); // Only fire a channelActive if the channel has never been registered. This prevents firing // multiple channel actives if the channel is deregistered and re-registered. if (isActive()) { if (firstRegistration) { pipeline.fireChannelActive(); } else if (config().isAutoRead()) { // This channel was registered before and autoRead() is set. This means we need to begin read // again so that we process inbound data. // // See https://github.com/netty/netty/issues/4805 beginRead(); } } } catch (Throwable t) { // Close the channel directly to avoid FD leak. closeForcibly(); closeFuture.setClosed(); safeSetFailure(promise, t); }} io.netty.channel.nio.AbstractNioChannel#doRegister &#x770B;&#x5230; doXxx &#x5F00;&#x5934;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x77E5;&#x9053;&#x662F;&#x8BA4;&#x771F;&#x5DE5;&#x4F5C;&#x7684; 123456789101112131415161718192021@Overrideprotected void doRegister() throws Exception { boolean selected = false; for (;;) { try { selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this); return; } catch (CancelledKeyException e) { if (!selected) { // Force the Selector to select now as the &quot;canceled&quot; SelectionKey may still be // cached and not removed because no Select.select(..) operation was called yet. eventLoop().selectNow(); selected = true; } else { // We forced a select operation on the selector before but the SelectionKey is still cached // for whatever reason. JDK bug ? throw e; } } }} &#x4E0E;&#x6211;&#x4EEC;&#x524D;&#x9762;&#x5199;&#x7684; NIO &#x903B;&#x8F91;&#x662F;&#x4E00;&#x6837;&#x7684; 1serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); sync1234567891011121314151617181920public class MyServer { public static void main(String[] args) throws InterruptedException { EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workGroup = new NioEventLoopGroup(); try { ServerBootstrap bootstrap = new ServerBootstrap(); bootstrap.group(bossGroup, workGroup) .channel(NioServerSocketChannel.class) .option(ChannelOption.SO_KEEPALIVE, false) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new MyServerinitializer()); ChannelFuture channelFuture = bootstrap.bind(8899).sync(); channelFuture.channel().closeFuture().sync(); } finally { bossGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } }} &#x6211;&#x4EEC;&#x56DE;&#x5230;&#x6211;&#x4EEC;&#x7F16;&#x5199;&#x7684; Server &#x4E2D;&#xFF0C;&#x9700;&#x8981;&#x7ED1;&#x5B9A;&#xFF0C;&#x4E4B;&#x540E;&#x9700;&#x8981;&#x8C03;&#x7528; #sync &#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x9700;&#x8981;&#x540C;&#x6B65;&#xFF0C;&#x8981;&#x4E0D;&#x7136;&#x8FD8;&#x6CA1;&#x7ED1;&#x5B9A;&#x5B8C;&#x6210;&#x5C31;&#x8FD4;&#x56DE;&#x4E86; ChannelFuture &#xFF0C;&#x91CC;&#x9762;&#x7684;&#x7ED3;&#x679C;&#x6216;&#x8005;&#x72B6;&#x6001;&#x662F;&#x8FD8;&#x6CA1;&#x6709;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x52A0;&#x4E86; #sync &#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#x5B8C;&#x6210; 1ChannelFuture channelFuture = bootstrap.bind(8899).sync(); &#x5728;&#x6211;&#x4EEC;&#x6B63;&#x5E38;&#x5F00;&#x53D1;&#x662F;&#x6D41;&#x7A0B;&#x5C31;&#x4F1A;&#x505C;&#x5728;&#x4E0B;&#x9762;&#xFF0C;&#x5C31;&#x5361;&#x4F4F;&#x4E86; 1channelFuture.channel().closeFuture().sync(); &#x5F53;&#x6211;&#x4EEC;&#x8C03;&#x7528;&#x5173;&#x95ED;&#x5C31;&#x4F1A;&#x5230; finally &#x4E2D;&#xFF0C;&#x4F1A;&#x6267;&#x884C;&#x4F18;&#x96C5;&#x5173;&#x95ED; &#x5230;&#x6B64;&#x6211;&#x4EEC;&#x542F;&#x52A8;&#x8FC7;&#x7A0B;&#x57FA;&#x672C;&#x5206;&#x6790;&#x5B8C;&#x4E86;]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 源码分析（二）]]></title>
    <url>%2F2019%2F01%2F15%2FNetty%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7248;&#x672C; 4.1.15 &#x5B98;&#x7F51;&#xFF1A;https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. &#x5148;&#x6765;&#x770B;&#x4E00;&#x4E2A;NIO&#x7F51;&#x7EDC;&#x7F16;&#x7A0B;&#x670D;&#x52A1;&#x7AEF;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/** * @Author: cuzz * @Date: 2019/1/7 15:39 * @Description: */public class NioServer { // &#x50A8;&#x5B58;&#x5BA2;&#x6237;&#x7AEF;&#x8FDE;&#x63A5; private static Map&lt;String, SocketChannel&gt; clientMap = new HashMap&lt;&gt;(); public static void main(String[] args) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.configureBlocking(false); ServerSocket serverSocket = serverSocketChannel.socket(); serverSocket.bind(new InetSocketAddress(8899)); Selector selector = Selector.open(); serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); while (true) { try { selector.select(); Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys(); selectionKeys.forEach(selectionKey -&gt; { try { if (selectionKey.isAcceptable()) { // &#x53EF;&#x4EE5;&#x8BFB; read(selector, selectionKey); } else if (selectionKey.isReadable()) { // &#x53EF;&#x4EE5;&#x5199; write(selector, selectionKey); } } catch (IOException e) { e.printStackTrace(); } }); selectionKeys.clear(); // &#x522B;&#x5FD8;&#x4E86;&#x6E05;&#x7A7A; } catch (Exception e) { e.printStackTrace(); } } } private static void write(Selector selector, SelectionKey selectionKey) throws IOException{ SocketChannel client = (SocketChannel) selectionKey.channel(); ByteBuffer byteBuffer = ByteBuffer.allocate(512); int read = client.read(byteBuffer); if (read &gt; 0) { byteBuffer.flip(); Charset charset = Charset.forName(&quot;utf-8&quot;); String receiveMessage = String.valueOf(charset.decode(byteBuffer).array()); System.out.println(client + &quot;: &quot; + receiveMessage); String key = null; for (Map.Entry&lt;String, SocketChannel&gt; entry : clientMap.entrySet()) { if (entry.getValue() == client) { key = entry.getKey(); break; } } for (Map.Entry&lt;String, SocketChannel&gt; entry : clientMap.entrySet()) { SocketChannel value = entry.getValue(); ByteBuffer writeBuffer = ByteBuffer.allocate(1024); writeBuffer.put((key + &quot; :&quot; + receiveMessage).getBytes()); writeBuffer.flip(); value.write(writeBuffer); } } } private static void read(Selector selector, SelectionKey selectionKey) throws IOException{ ServerSocketChannel server = (ServerSocketChannel) selectionKey.channel(); System.out.println(server); SocketChannel client = server.accept(); client.configureBlocking(false); client.register(selector, SelectionKey.OP_READ); String key = UUID.randomUUID().toString(); // &#x4FDD;&#x5B58;&#x5BA2;&#x6237;&#x7AEF; clientMap.put(key, client); }} &#x5BA2;&#x670D;&#x7AEF;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * @Author: cuzz * @Date: 2019/1/8 17:10 * @Description: */public class NioClient { public static void main(String[] args){ try { SocketChannel socketChannel = SocketChannel.open(); socketChannel.configureBlocking(false); Selector selector = Selector.open(); socketChannel.register(selector, SelectionKey.OP_CONNECT); socketChannel.connect(new InetSocketAddress(&quot;127.0.0.1&quot;,8899)); while (true) { selector.select(); Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys(); for (SelectionKey selectionKey : selectionKeys ) { if (selectionKey.isConnectable()) { SocketChannel client = (SocketChannel) selectionKey.channel(); if (client.isConnectionPending()) { client.finishConnect(); System.out.println(client); ByteBuffer writeBuffer = ByteBuffer.allocate(512); writeBuffer.put((LocalDateTime.now() + &quot; &#x8FDE;&#x63A5;&#x6210;&#x529F;&quot;).getBytes()); writeBuffer.flip(); client.write(writeBuffer); ExecutorService executorService = Executors.newSingleThreadExecutor(); executorService.submit(() -&gt; { while (true) { InputStreamReader inputStreamReader = new InputStreamReader(System.in); BufferedReader bf = new BufferedReader(inputStreamReader); String message = bf.readLine(); ByteBuffer buffer = ByteBuffer.allocate(512); buffer.put(message.getBytes()); buffer.flip(); client.write(buffer); } }); } client.register(selector, SelectionKey.OP_READ); } else if (selectionKey.isReadable()) { SocketChannel client = (SocketChannel) selectionKey.channel(); ByteBuffer byteBuffer = ByteBuffer.allocate(1024); int read = client.read(byteBuffer); if (read &gt; 0) { String message = new String(byteBuffer.array()); System.out.println(message); } } } selectionKeys.clear(); } } catch (Exception e) { e.printStackTrace(); } }} &#x4EE3;&#x7801;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x7684;&#xFF0C;Netty &#x5185;&#x90E8;&#x5C31;&#x662F;&#x628A;&#x8FD9;&#x4E9B;&#x7EC6;&#x8282;&#x7ED9;&#x5C01;&#x88C5;&#x8D77;&#x6765;&#x4E86; Reactor&#x6A21;&#x5F0F;&#x7FFB;&#x8BD1;&#x8FC7;&#x6765;&#x4E3A;&#x53CD;&#x5E94;&#x5668;&#x6A21;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x5148;&#x770B;&#x770B;&#x7531; Doug Lea &#x5199;&#x7684; Scalable IO in Java &#xFF0C;&#x66F4;&#x597D;&#x7684;&#x7406;&#x89E3; Netty &#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F; &#x8FD8;&#x6709;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x4E5F;&#x5199;&#x5F97;&#x5F88;&#x597D;&#xFF0C;&#x4ECB;&#x7ECD;&#x76F8;&#x5173;&#x7406;&#x8BBA;&#x6A21;&#x578B;&#xFF0C;&#x4F7F;&#x7528;&#x573A;&#x666F;&#xFF0C;&#x57FA;&#x672C;&#x7EC4;&#x4EF6;&#x3001;&#x6574;&#x4F53;&#x67B6;&#x6784;&#xFF0C; &#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x76EE;&#x524D;&#x6700;&#x900F;&#x5F7B;&#x7684;Netty&#x539F;&#x7406;&#x67B6;&#x6784;&#x89E3;&#x6790; Netty &#x90A3;&#x4E9B;&#x4E8B;&#x513F; &#x2014;&#x2014;&#x2014; Reactor&#x6A21;&#x5F0F;&#x8BE6;&#x89E3; Netty Reactor &#x5DE5;&#x4F5C;&#x67B6;&#x6784;&#x56FE; bind() &#x65B9;&#x6CD5;&#x524D;&#x9762;&#x901A;&#x8FC7; .channel(NioServerSocketChannel.class) &#x662F;&#x4E3A;&#x4E86;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x521B;&#x5EFA;&#x4E00;&#x4E2A; NioServerSocketChannel &#x5BF9;&#x8C61; NioServerSocketChannel&#x4F7F;&#x7528;&#x53CD;&#x5C04;&#x521B;&#x5EFA; NioServerSocketChannel &#x80AF;&#x5B9A;&#x662F;&#x901A;&#x8FC7;&#x65E0;&#x53C2;&#x6570;&#x6784;&#x9020;&#x5668;&#xFF0C;&#x5728;&#x8C03;&#x7528; newSocket(DEFAULT_SELECTOR_PROVIDER) &#x6240;&#x4EE5;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; ServerSocketChannel 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * A {@link io.netty.channel.socket.ServerSocketChannel} implementation which uses * NIO selector based implementation to accept new connections. */public class NioServerSocketChannel extends AbstractNioMessageChannel implements io.netty.channel.socket.ServerSocketChannel { private static final ChannelMetadata METADATA = new ChannelMetadata(false, 16); private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider(); private static ServerSocketChannel newSocket(SelectorProvider provider) { try { /** * Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in * {@link SelectorProvider#provider()} which is called by each ServerSocketChannel.open() otherwise. * * See &lt;a href=&quot;https://github.com/netty/netty/issues/2308&quot;&gt;#2308&lt;/a&gt;. */ return provider.openServerSocketChannel(); } catch (IOException e) { throw new ChannelException( &quot;Failed to open a server socket.&quot;, e); } } private final ServerSocketChannelConfig config; /** * Create a new instance */ public NioServerSocketChannel() { this(newSocket(DEFAULT_SELECTOR_PROVIDER)); } /** * Create a new instance using the given {@link SelectorProvider}. */ public NioServerSocketChannel(SelectorProvider provider) { this(newSocket(provider)); } /** * Create a new instance using the given {@link ServerSocketChannel}. */ public NioServerSocketChannel(ServerSocketChannel channel) { super(null, channel, SelectionKey.OP_ACCEPT); config = new NioServerSocketChannelConfig(this, javaChannel().socket()); } ...} AbstractNioChannel&#x6211;&#x4EEC;&#x56DE;&#x5230;&#x8C03;&#x7528;&#x7684;&#x8FD9;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E0A; 1234public NioServerSocketChannel(ServerSocketChannel channel) { super(null, channel, SelectionKey.OP_ACCEPT); config = new NioServerSocketChannelConfig(this, javaChannel().socket());} &#x4E00;&#x76F4;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#xFF0C;&#x628A; SelectionKey.OP_ACCEPT &#x8BBE;&#x7F6E;&#x4E0A;&#xFF0C;&#x8FD8;&#x6709;&#x8BBE;&#x7F6E;&#x975E;&#x5835;&#x585E;&#xFF0C;&#x662F;&#x4E0D;&#x51FA;&#x662F;&#x5F88;&#x719F;&#x6089;&#xFF0C;&#x8FD9;&#x90FD;&#x662F;&#x5BF9; NIO &#x8FDB;&#x884C;&#x5C01;&#x88C5; io.netty.channel.nio.AbstractNioChannel#AbstractNioChannel 12345678910protected AbstractNioChannel(Channel parent, SelectableChannel ch, int readInterestOp) { super(parent); this.ch = ch; this.readInterestOp = readInterestOp; try { ch.configureBlocking(false); } catch (IOException e) { ... }} &#x518D;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#xFF0C;&#x5C31;&#x662F;&#x8BBE;&#x7F6E; Id &#x548C;&#x521B;&#x5EFA;&#x7BA1;&#x9053; io.netty.channel.AbstractChannel 123456protected AbstractChannel(Channel parent) { this.parent = parent; id = newId(); unsafe = newUnsafe(); pipeline = newChannelPipeline();} NioServerSocketChannelConfig&#x6211;&#x4EEC;&#x5728;&#x56DE;&#x5230;&#x8FD9;&#x4E2A;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x4E0A;&#xFF0C;&#x6211;&#x4EEC;&#x91CD;&#x70B9;&#x6765;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#xFF0C; NioServerSocketChannelConfig &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x7C7B;&#xFF0C;Netty &#x7684;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x4FE1;&#x606F;&#x90FD;&#x662F;&#x4F53;&#x73B0;&#x5728;&#x8FD9;&#x4E2A;&#x91CC;&#x9762; 1234public NioServerSocketChannel(ServerSocketChannel channel) { super(null, channel, SelectionKey.OP_ACCEPT); config = new NioServerSocketChannelConfig(this, javaChannel().socket());} &#x628A;&#x81EA;&#x5DF1;&#x548C;&#x521A;&#x5F00;&#x59CB;&#x521B;&#x5EFA;&#x7684; NIOSocketChannel &#x7684; ServerSocket &#x5BF9;&#x8C61;&#x4F20;&#x5165;&#x8FDB;&#x53BB; io.netty.channel.DefaultChannelConfig 123public DefaultChannelConfig(Channel channel) { this(channel, new AdaptiveRecvByteBufAllocator());} &#x4F20;&#x4E86;&#x4E00;&#x4E2A; AdaptiveRecvByteBufAllocator &#x7FFB;&#x8BD1;&#x8FC7;&#x6765;&#x53EF;&#x4EE5;&#x53EB;&#x53EF;&#x9002;&#x914D;&#x7684;&#x63A5;&#x53D7;&#x5B57;&#x8282;&#x7F13;&#x51B2;&#x9002;&#x914D;&#x5668; AdaptiveRecvByteBufAllocatorio.netty.channel.AdaptiveRecvByteBufAllocator &#x6587;&#x6863;&#xFF1A; The RecvByteBufAllocator that automatically increases and decreases the predicted buffer size on feed back.It gradually increases the expected number of readable bytes if the previous read fully filled the allocated buffer. It gradually decreases the expected number of readable bytes if the read operation was not able to fill a certain amount of the allocated buffer two times consecutively. Otherwise, it keeps returning the same prediction. &#x6784;&#x9020;&#x65B9;&#x6CD5;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;1024&#xFF0C;&#x6700;&#x5C0F;&#x662F;63&#xFF0C;&#x6700;&#x5927;&#x662F;65536 12345678/** * Creates a new predictor with the default parameters. With the default * parameters, the expected buffer size starts from {@code 1024}, does not * go down below {@code 64}, and does not go up above {@code 65536}. */public AdaptiveRecvByteBufAllocator() { this(DEFAULT_MINIMUM, DEFAULT_INITIAL, DEFAULT_MAXIMUM);} &#x6211;&#x4EEC;&#x5728;&#x770B;&#x770B;&#x91CC;&#x9762;&#x7684;&#x5185;&#x90E8;&#x7C7B; 1234567891011121314151617181920212223242526272829303132333435363738394041private final class HandleImpl extends MaxMessageHandle { private final int minIndex; private final int maxIndex; private int index; private int nextReceiveBufferSize; private boolean decreaseNow; public HandleImpl(int minIndex, int maxIndex, int initial) { this.minIndex = minIndex; this.maxIndex = maxIndex; index = getSizeTableIndex(initial); nextReceiveBufferSize = SIZE_TABLE[index]; } @Override public int guess() { return nextReceiveBufferSize; } private void record(int actualReadBytes) { if (actualReadBytes &lt;= SIZE_TABLE[Math.max(0, index - INDEX_DECREMENT - 1)]) { if (decreaseNow) { index = Math.max(index - INDEX_DECREMENT, minIndex); nextReceiveBufferSize = SIZE_TABLE[index]; decreaseNow = false; } else { decreaseNow = true; } } else if (actualReadBytes &gt;= nextReceiveBufferSize) { index = Math.min(index + INDEX_INCREMENT, maxIndex); nextReceiveBufferSize = SIZE_TABLE[index]; decreaseNow = false; } } @Override public void readComplete() { record(totalBytesRead()); }} &#x5176;&#x7236;&#x4EB2; MaxMessageHandle &#x4E2D;&#xFF0C;&#x6839;&#x636E;&#x8BB0;&#x5F55;&#x4E2D;&#x7684;&#x5206;&#x914D;&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;&#x4E0B;&#x4E00;&#x6B21;&#x5206;&#x914D;&#x7684;&#x5185;&#x5B58; 1234@Overridepublic ByteBuf allocate(ByteBufAllocator alloc) { return alloc.ioBuffer(guess());} &#x6839;&#x636E;&#x7CFB;&#x7EDF;&#x7684;&#x652F;&#x6301;&#x8FD4;&#x56DE;&#x662F;&#x5806;&#x5185;&#x5185;&#x5B58;&#x8FD8;&#x662F;&#x5806;&#x5916;&#x5185;&#x5B58; 1234567@Overridepublic ByteBuf ioBuffer(int initialCapacity) { if (PlatformDependent.hasUnsafe()) { return directBuffer(initialCapacity); } return heapBuffer(initialCapacity);} Pipeline&#x6211;&#x4EEC;&#x56DE;&#x5230;&#x524D;&#x9762;&#x7BA1;&#x9053;&#x7684;&#x521B;&#x5EFA; io.netty.channel.AbstractChannel 123456protected AbstractChannel(Channel parent) { this.parent = parent; id = newId(); unsafe = newUnsafe(); pipeline = newChannelPipeline();} io.netty.channel.DefaultChannelPipeline#DefaultChannelPipeline 1234567891011protected DefaultChannelPipeline(Channel channel) { this.channel = ObjectUtil.checkNotNull(channel, &quot;channel&quot;); succeededFuture = new SucceededChannelFuture(channel, null); voidPromise = new VoidChannelPromise(channel, true); tail = new TailContext(this); head = new HeadContext(this); head.next = tail; tail.prev = head;} &#x8FD9;&#x91CC;&#x7EF4;&#x62A4;&#x4E86;&#x4E00;&#x4E2A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x5E76;&#x4E14;&#x628A; Channel &#x5BF9;&#x8C61;&#x8D4B;&#x503C;&#x7ED9;&#x81EA;&#x5DF1;&#xFF0C;&#x6240;&#x4EE5; Channel &#x548C; Pipeline &#x662F;&#x76F8;&#x4E92;&#x5F15;&#x7528;&#x7684; ChannelPipelineio.netty.channel.ChannelPipeline &#x6587;&#x6863;&#xFF1A; A list of ChannelHandlers which handles or intercepts inbound events and outbound operations of a Channel. ChannelPipeline implements an advanced form of the Intercepting Filter pattern to give a user full control over how an event is handled and how the ChannelHandlers in a pipeline interact with each other. Creation of a pipeline Each channel has its own pipeline and it is created automatically when a new channel is created. How an event flows in a pipeline The following diagram describes how I/O events are processed by ChannelHandlers in a ChannelPipeline typically. An I/O event is handled by either a ChannelInboundHandler or a ChannelOutboundHandler and be forwarded to its closest handler by calling the event propagation methods defined in ChannelHandlerContext, such as ChannelHandlerContext.fireChannelRead(Object) and ChannelHandlerContext.write(Object). 1234567891011121314151617181920212223242526272829303132333435363738 I/O Request via Channel or ChannelHandlerContext |+---------------------------------------------------+---------------+| ChannelPipeline | || \|/ || +---------------------+ +-----------+----------+ || | Inbound Handler N | | Outbound Handler 1 | || +----------+----------+ +-----------+----------+ || /|\ | || | \|/ || +----------+----------+ +-----------+----------+ || | Inbound Handler N-1 | | Outbound Handler 2 | || +----------+----------+ +-----------+----------+ || /|\ . || . . || ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|| [ method call] [method call] || . . || . \|/ || +----------+----------+ +-----------+----------+ || | Inbound Handler 2 | | Outbound Handler M-1 | || +----------+----------+ +-----------+----------+ || /|\ | || | \|/ || +----------+----------+ +-----------+----------+ || | Inbound Handler 1 | | Outbound Handler M | || +----------+----------+ +-----------+----------+ || /|\ | |+---------------+-----------------------------------+---------------+ | \|/+---------------+-----------------------------------+---------------+| | | || [ Socket.read() ] [ Socket.write() ] || || Netty Internal I/O Threads (Transport Implementation) |+-------------------------------------------------------------------+ An inbound event is handled by the inbound handlers in the bottom-up direction as shown on the left side of the diagram. An inbound handler usually handles the inbound data generated by the I/O thread on the bottom of the diagram. The inbound data is often read from a remote peer via the actual input operation such as SocketChannel.read(ByteBuffer). If an inbound event goes beyond the top inbound handler, it is discarded silently, or logged if it needs your attention. An outbound event is handled by the outbound handler in the top-down direction as shown on the right side of the diagram. An outbound handler usually generates or transforms the outbound traffic such as write requests. If an outbound event goes beyond the bottom outbound handler, it is handled by an I/O thread associated with the Channel. The I/O thread often performs the actual output operation such as SocketChannel.write(ByteBuffer) For example, let us assume that we created the following pipeline: 123456ChannelPipeline p = ...;p.addLast(&quot;1&quot;, new InboundHandlerA());p.addLast(&quot;2&quot;, new InboundHandlerB());p.addLast(&quot;3&quot;, new OutboundHandlerA());p.addLast(&quot;4&quot;, new OutboundHandlerB());p.addLast(&quot;5&quot;, new InboundOutboundHandlerX()); In the example above, the class whose name starts with Inbound means it is an inbound handler. The class whose name starts with Outbound means it is a outbound handler. In the given example configuration, the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound. When an event goes outbound, the order is 5, 4, 3, 2, 1. On top of this principle, ChannelPipeline skips the evaluation of certain handlers to shorten the stack depth: 3 and 4 don&#x2019;t implement ChannelInboundHandler, and therefore the actual evaluation order of an inbound event will be: 1, 2, and 5. 1 and 2 don&#x2019;t implement ChannelOutboundHandler, and therefore the actual evaluation order of a outbound event will be: 5, 4, and 3. If 5 implements both ChannelInboundHandler and ChannelOutboundHandler, the evaluation order of an inbound and a outbound event could be 125 and 543 respectively. Forwarding an event to the next handler As you might noticed in the diagram shows, a handler has to invoke the event propagation methods in ChannelHandlerContext to forward an event to its next handler. Those methods include: Inbound event propagation methods ChannelHandlerContext.fireChannelRegistered() hannelHandlerContext.fireChannelActive() ChannelHandlerContext.fireChannelRead(Object) ChannelHandlerContext.fireChannelReadComplete() ChannelHandlerContext.fireExceptionCaught(Throwable) ChannelHandlerContext.fireUserEventTriggered(Object) ChannelHandlerContext.fireChannelWritabilityChanged() ChannelHandlerContext.fireChannelInactive() ChannelHandlerContext.fireChannelUnregistered() Outbound event propagation methods: ChannelHandlerContext.bind(SocketAddress, ChannelPromise) ChannelHandlerContext.connect(SocketAddress, SocketAddress, ChannelPromise) ChannelHandlerContext.write(Object, ChannelPromise) ChannelHandlerContext.flush() ChannelHandlerContext.read() ChannelHandlerContext.disconnect(ChannelPromise) ChannelHandlerContext.close(ChannelPromise) ChannelHandlerContext.deregister(ChannelPromise) and the following example shows how the event propagation is usually done: 123456789101112131415public class MyInboundHandler extends ChannelInboundHandlerAdapter { @Override public void channelActive(ChannelHandlerContext ctx) { System.out.println(&quot;Connected!&quot;); ctx.fireChannelActive(); }}public class MyOutboundHandler extends ChannelOutboundHandlerAdapter { @Override public void close(ChannelHandlerContext ctx, ChannelPromise promise) { System.out.println(&quot;Closing ..&quot;); ctx.close(promise); }} Building a pipeline (&#x91CD;&#x70B9;) A user is supposed to have one or more ChannelHandlers in a pipeline to receive I/O events (e.g. read) and to request I/O operations (e.g. write and close). For example, a typical server will have the following handlers in each channel&#x2019;s pipeline, but your mileage may vary depending on the complexity and characteristics of the protocol and business logic: Protocol Decoder - translates binary data (e.g. ByteBuf) into a Java object. Protocol Encoder - translates a Java object into binary data. Business Logic Handler - performs the actual business logic (e.g. database access). and it could be represented as shown in the following example: 1234567891011121314static final EventExecutorGroup group = new DefaultEventExecutorGroup(16);...ChannelPipeline pipeline = ch.pipeline();pipeline.addLast(&quot;decoder&quot;, new MyProtocolDecoder());pipeline.addLast(&quot;encoder&quot;, new MyProtocolEncoder());// Tell the pipeline to run MyBusinessLogicHandler&apos;s event handler methods// in a different thread than an I/O thread so that the I/O thread is not blocked by// a time-consuming task.// If your business logic is fully asynchronous or finished very quickly, you don&apos;t// need to specify a group.pipeline.addLast(group, &quot;handler&quot;, new MyBusinessLogicHandler()); &#x6CE8;&#xFF1A;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x91CD;&#x8F7D;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x4E8B;&#x4EF6;&#x5FAA;&#x73AF;&#x7EC4; group &#x53BB;&#x6267;&#x884C;&#x8017;&#x65F6;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x83B7;&#x53D6;&#x5728; MyBusinessLogicHandler &#x4E2D;&#x628A;&#x8017;&#x65F6;&#x90E8;&#x5206;&#x5F02;&#x6B65;&#x5904;&#x7406;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x4F1A;&#x5835;&#x585E; IO &#x7EBF;&#x7A0B; Thread safety A ChannelHandler can be added or removed at any time because a ChannelPipeline is thread safe. For example, you can insert an encryption handler when sensitive information is about to be exchanged, and remove it after the exchange. &#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;&#x8FC7;&#x6EE4;&#x5668;&#x5982; SpringMVC &#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x914D;&#x7F6E;&#x4E86; Filter1 Filter2 Filter3 &#x8FC7;&#x6EE4;&#x5668;&#xFF0C;&#x8BF7;&#x6C42;&#x548C;&#x8FD4;&#x56DE;&#x90FD;&#x8981;&#x7ECF;&#x8FC7;&#x6EE4;&#x5668;&#x8FD9;3&#x4E2A;&#x8FC7;&#x6EE4;&#x5668;&#xFF0C;&#x800C;&#x7BA1;&#x9053;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x7684;&#x5176;&#x4E2D;&#x67D0;&#x4E9B;&#x4F5C;&#x4E3A;&#x8BF7;&#x6C42;&#x7684;&#x8FC7;&#x6EE4;&#x5668;&#xFF0C;&#x4E00;&#x4E9B;&#x4F5C;&#x4E3A;&#x8FD4;&#x56DE;&#x7684;&#x8FC7;&#x6EE4;&#x5668;&#xFF0C;&#x4E0D;&#x4E00;&#x5B9A;&#x8981;&#x4E00;&#x6837;&#xFF0C;&#x5165;&#x7AD9;&#x7684;&#x5904;&#x7406;&#x5668;&#x4E13;&#x95E8;&#x5904;&#x7406;&#x5165;&#x7AD9;&#x7684;&#xFF0C;&#x51FA;&#x7AD9;&#x7684;&#x5904;&#x7406;&#x5668;&#x4E13;&#x95E8;&#x5904;&#x7406;&#x51FA;&#x7AD9;&#x7684; init() &#x65B9;&#x6CD5;io.netty.bootstrap.ServerBootstrap#init 1234567891011121314151617@Overridevoid init(Channel channel) throws Exception { final Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0(); synchronized (options) { setChannelOptions(channel, options, logger); } final Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0(); synchronized (attrs) { for (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) { @SuppressWarnings(&quot;unchecked&quot;) AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey(); channel.attr(key).set(e.getValue()); } } ...} ChannelOption&#x7C7B;&#x56FE; io.netty.channelpublic class ChannelOptionextends AbstractConstant]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>NIO</tag>
        <tag>Reactor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netty 源码分析（一）]]></title>
    <url>%2F2019%2F01%2F03%2FNetty%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x7248;&#x672C; 4.1.15 &#x5B98;&#x7F51;&#xFF1A;https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. &#x5148;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x670D;&#x52A1;&#x7AEF;MyServer &#x7C7B; 123456789101112131415161718192021222324/** * @Author: cuzz * @Date: 2019/1/1 19:44 * @Description: */public class MyServer { public static void main(String[] args) throws InterruptedException { EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workGroup = new NioEventLoopGroup(); try { ServerBootstrap bootstrap = new ServerBootstrap(); bootstrap.group(bossGroup, workGroup) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new MyServerinitializer()); ChannelFuture channelFuture = bootstrap.bind(8899).sync(); channelFuture.channel().closeFuture().sync(); } finally { bossGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } }} MyServerinitializer &#x7C7B; 123456789101112131415161718/** * @Author: cuzz * @Date: 2019/1/1 20:06 * @Description: */public class MyServerinitializer extends ChannelInitializer&lt;SocketChannel&gt; { @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4)); pipeline.addLast(new LengthFieldPrepender(4)); pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8)); pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8)); pipeline.addLast(new MyServerHandler()); }} MyServerHandler &#x7C7B; 123456789101112131415161718192021222324/** * @Author: cuzz * @Date: 2019/1/1 20:23 * @Description: */public class MyServerHandler extends SimpleChannelInboundHandler&lt;String&gt;{ @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception { System.out.println(ctx.channel().remoteAddress() + &quot;: &quot; + msg); ctx.channel().writeAndFlush(&quot;from server: &quot; + UUID.randomUUID()); } /** * &#x51FA;&#x73B0;&#x5F02;&#x5E38;&#x5173;&#x95ED;&#x8FDE;&#x63A5; * @param ctx * @param cause * @throws Exception */ @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.close(); }} &#x5BA2;&#x670D;&#x7AEF;MyClient &#x7C7B; 12345678910111213141516171819202122/** * @Author: cuzz * @Date: 2019/1/1 20:31 * @Description: */public class MyClient { public static void main(String[] args) throws Exception { EventLoopGroup eventLoopGroup = new NioEventLoopGroup(); try { Bootstrap bootstrap = new Bootstrap(); bootstrap.group(eventLoopGroup) .channel(NioSocketChannel.class) .handler(new MyClientInitializer()); ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;,8899).sync(); channelFuture.channel().closeFuture().sync(); } finally { eventLoopGroup.shutdownGracefully(); } }} MyClientInitializer &#x7C7B; 12345678910111213141516/** * @Author: cuzz * @Date: 2019/1/1 20:40 * @Description: */public class MyClientInitializer extends ChannelInitializer&lt;SocketChannel&gt;{ @Override protected void initChannel(SocketChannel ch) throws Exception { ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4)); pipeline.addLast(new LengthFieldPrepender(4)); pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8)); pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8)); pipeline.addLast(new MyClientHandler()); }} MyClientHandler &#x7C7B; 1234567891011121314151617181920212223/** * @Author: cuzz * @Date: 2019/1/1 20:42 * @Description: */public class MyClientHandler extends SimpleChannelInboundHandler&lt;String&gt;{ @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception { System.out.println(ctx.channel().remoteAddress() + &quot;: &quot; + msg); ctx.writeAndFlush(&quot;from clinet: &quot; + UUID.randomUUID()); } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { cause.printStackTrace(); ctx.close(); } @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { ctx.writeAndFlush(&quot;&#x6765;&#x81EA;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8FDE;&#x63A5;&#xFF01;&#xFF01;&#xFF01;&quot;); }} &#x521D;&#x59CB;&#x5316;EventLoopGroup&#x521B;&#x5EFA;&#x4E00;&#x4E2A; bossGroup &#x548C; workGroup 12EventLoopGroup bossGroup = new NioEventLoopGroup();EventLoopGroup workGroup = new NioEventLoopGroup(); EventLoopGroup &#x7FFB;&#x8BD1;&#x8FC7;&#x6765;&#x53EB;&#x4E8B;&#x4EF6;&#x5FAA;&#x73AF;&#x7EC4;&#xFF0C;&#x5176;&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6B7B;&#x5FAA;&#x73AF; bossGroup &#x662F;&#x628A;&#x63A5;&#x53D7;&#x8FDE;&#x63A5;&#xFF0C;&#x628A;&#x8FDE;&#x63A5;&#x8F6C;&#x53D1;&#x7ED9; workGroup &#xFF0C;workGroup &#x662F;&#x771F;&#x6B63;&#x5B8C;&#x6210;&#x7528;&#x6237;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x7684;&#x7C7B; EventLoopGroup &#x662F;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x5728;&#x540E;&#x9762;&#x5FAA;&#x73AF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x628A; Channel &#x6CE8;&#x518C;&#x4E0A; 1234567891011121314/** * Special {@link EventExecutorGroup} which allows registering {@link Channel}s that get * processed for later selection during the event loop. * */public interface EventLoopGroup extends EventExecutorGroup { @Override EventLoop next(); ChannelFuture register(Channel channel); ChannelFuture register(ChannelPromise promise);} NioEventLoopGroup123456789101112131415// &#x4ED6;&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;NIO&#x7684;&#x9009;&#x62E9;&#x5668;&#x7684;&#x5BF9;&#x8C61; public class NioEventLoopGroup extends MultithreadEventLoopGroup { // 0 public NioEventLoopGroup() { this(0); } // 1 public NioEventLoopGroup(int nThreads) { this(nThreads, (Executor) null); } // 2 public NioEventLoopGroup(int nThreads, Executor executor) { this(nThreads, executor, SelectorProvider.provider()); }} MultithreadEventExecutorGroup&#x6700;&#x7EC8;&#x4F1A;&#x8DF3;&#x5230;MultithreadEventExecutorGroup &#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x5668;&#x4E2D; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960protected MultithreadEventExecutorGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, Object... args) { } // 1 if (executor == null) { executor = new ThreadPerTaskExecutor(newDefaultThreadFactory()); } children = new EventExecutor[nThreads]; for (int i = 0; i &lt; nThreads; i ++) { boolean success = false; try { children[i] = newChild(executor, args); success = true; } catch (Exception e) { // TODO: Think about if this is a good exception type throw new IllegalStateException(&quot;failed to create a child event loop&quot;, e); } finally { if (!success) { for (int j = 0; j &lt; i; j ++) { children[j].shutdownGracefully(); } for (int j = 0; j &lt; i; j ++) { EventExecutor e = children[j]; try { while (!e.isTerminated()) { e.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS); } } catch (InterruptedException interrupted) { // Let the caller handle the interruption. Thread.currentThread().interrupt(); break; } } } } } chooser = chooserFactory.newChooser(children); final FutureListener&lt;Object&gt; terminationListener = new FutureListener&lt;Object&gt;() { @Override public void operationComplete(Future&lt;Object&gt; future) throws Exception { if (terminatedChildren.incrementAndGet() == children.length) { terminationFuture.setSuccess(null); } } }; for (EventExecutor e: children) { e.terminationFuture().addListener(terminationListener); } Set&lt;EventExecutor&gt; childrenSet = new LinkedHashSet&lt;EventExecutor&gt;(children.length); Collections.addAll(childrenSet, children); readonlyChildren = Collections.unmodifiableSet(childrenSet); } ThreadPerTaskExecutor&#x4EE3;&#x7801;1&#x4E2D;&#xFF0C;executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());&#xFF0C;&#x8DDF;&#x8FDB;&#x53BB; 123456789101112131415public final class ThreadPerTaskExecutor implements Executor { private final ThreadFactory threadFactory; public ThreadPerTaskExecutor(ThreadFactory threadFactory) { if (threadFactory == null) { throw new NullPointerException(&quot;threadFactory&quot;); } this.threadFactory = threadFactory; } @Override public void execute(Runnable command) { threadFactory.newThread(command).start(); }} &#x8FD9;&#x91CC;&#x7528;&#x5230;&#x4E86;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#x548C;&#x547D;&#x4EE4;&#x6A21;&#x5F0F;&#xFF0C;&#x901A;&#x8FC7;&#x4F20;&#x5165;&#x4E00;&#x4E2A;command&#x8C03;&#x7528;&#x5DE5;&#x5382;&#x65B9;&#x6CD5; Executor1234567891011121314public interface Executor { /** * Executes the given command at some time in the future. The command * may execute in a new thread, in a pooled thread, or in the calling * thread, at the discretion of the {@code Executor} implementation. * * @param command the runnable task * @throws RejectedExecutionException if this task cannot be * accepted for execution * @throws NullPointerException if command is null */ void execute(Runnable command);} &#x8FD9;&#x662F;&#x5728;java.util.concurrent &#x4E0B;&#x7684;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x628A;&#x4E00;&#x4E2A;task&#x4F20;&#x5165;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FD0;&#x884C; 12345class ThreadPerTaskExecutor implements Executor { public void execute(Runnable r) { new Thread(r).start(); }} &#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x6BD4;&#x5982;&#x5E8F;&#x5217;&#x5316;&#x7B49;&#x4E00;&#x4E0B;&#x64CD;&#x4F5C; 123456789101112131415161718192021222324252627282930class SerialExecutor implements Executor { final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;(); final Executor executor; Runnable active; SerialExecutor(Executor executor) { this.executor = executor; } public synchronized void execute(final Runnable r) { tasks.offer(new Runnable() { public void run() { try { r.run(); } finally { scheduleNext(); } } }); if (active == null) { scheduleNext(); } } protected synchronized void scheduleNext() { if ((active = tasks.poll()) != null) { executor.execute(active); } }} &#x5176;&#x4E2D;&#x975E;&#x5E38;&#x5E38;&#x7528;&#x7528;&#x7684;&#x51E0;&#x4E2A;&#x5B9E;&#x73B0;&#x5982;&#xFF1A;ExecutorService&#xFF0C;ThreadPoolExecutor &#x4E0B;&#x9762;&#x662F;&#x5B98;&#x65B9;&#x6587;&#x6863; The Executor implementations provided in this package implement ExecutorService, which is a more extensive interface. The ThreadPoolExecutor class provides an extensible thread pool implementation. The Executors class provides convenient factory methods for these Executors.The Executor implementations provided in this package implement ExecutorService, which is a more extensive interface. The ThreadPoolExecutor class provides an extensible thread pool implementation. The Executors class provides convenient factory methods for these Executors. &#x56DE;&#x987E;&#x4E00;&#x4E0B; MyServer &#x4E2D;&#x542F;&#x52A8;&#x7684;&#x4EE3;&#x7801; 123456789101112try { ServerBootstrap bootstrap = new ServerBootstrap(); bootstrap.group(bossGroup, workGroup) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new MyServerinitializer()); ChannelFuture channelFuture = bootstrap.bind(8899).sync(); channelFuture.channel().closeFuture().sync();} finally { bossGroup.shutdownGracefully(); bossGroup.shutdownGracefully();} ServerBootstrap1public class ServerBootstrap extends AbstractBootstrap&lt;ServerBootstrap, ServerChannel&gt; { ... } ServerBootstrap &#x662F; Bootstrap&#x5B50;&#x7C7B;&#xFF0C;&#x5BB9;&#x6613;&#x7684;&#x5730;&#x542F;&#x52A8;&#x4E00;&#x4E2A; ServerChannel ServerChannel&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x5373;&#x5C06;&#x5230;&#x6765;&#x7684;&#x8FDE;&#x63A5;&#xFF0C;&#x521B;&#x5EFA;&#x5B50; Channel 12345678/** * A {@link Channel} that accepts an incoming connection attempt and creates * its child {@link Channel}s by accepting them. {@link ServerSocketChannel} is * a good example. */public interface ServerChannel extends Channel { // This is a tag interface.} &#x5176;&#x6709;&#x5F88;&#x591A;&#x5B9E;&#x73B0;&#x7684;&#x5B50;&#x7C7B;&#xFF0C;&#x5176;&#x4E2D; NioServerSocketChannel &#x662F;&#x6211;&#x4EEC;&#x6BD4;&#x8F83;&#x5173;&#x6CE8;&#x7684; &#x65B9;&#x6CD5;&#x94FE;1234bootstrap.group(bossGroup, workGroup) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new MyServerinitializer()); .group(bossGroup, workGroup) &#x6211;&#x4EEC;&#x628A; bossGroup &#x548C; workGroup &#x4F20;&#x5165;&#x8FDB;&#x53BB;&#xFF0C;&#x7531;&#x4E8E;&#x662F;&#x65B9;&#x6CD5;&#x94FE;&#xFF0C;&#x80AF;&#x5B9A;&#x8FD4;&#x56DE;&#x672C;&#x8EAB;&#xFF0C;&#x8DDF;&#x8E2A;&#x4E0B;&#x53BB; 12345678910111213141516/** * Set the {@link EventLoopGroup} for the parent (acceptor) and the child (client). These * {@link EventLoopGroup}&apos;s are used to handle all the events and IO for {@link ServerChannel} and * {@link Channel}&apos;s. */public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup) { super.group(parentGroup); if (childGroup == null) { throw new NullPointerException(&quot;childGroup&quot;); } if (this.childGroup != null) { throw new IllegalStateException(&quot;childGroup set already&quot;); } this.childGroup = childGroup; return this;} &#x8FD9;&#x4E2A;&#x6B65;&#xFF0C;&#x5C31;&#x662F;&#x7ED9; bossGroup &#x548C; workGroup &#x8D4B;&#x503C;&#x7ED9; ServerBootstrap &#x7684;&#x5B9E;&#x4F8B; .channel(NioServerSocketChannel.class) &#x65B9;&#x6CD5;&#xFF0C;&#x63A5;&#x53D7;&#x7684;&#x662F;&#x4E00;&#x4E2A; class &#x5BF9;&#x8C61;&#xFF0C;&#x4E00;&#x822C;&#x63A5;&#x53D7; class &#x5BF9;&#x8C61;&#x5927;&#x591A;&#x6570;&#x4E0E;&#x53CD;&#x5C04;&#x6709;&#x5173;&#x7CFB; 1234567891011/** * The {@link Class} which is used to create {@link Channel} instances from. * You either use this or {@link #channelFactory(io.netty.channel.ChannelFactory)} if your * {@link Channel} implementation has no no-args constructor. */public B channel(Class&lt;? extends C&gt; channelClass) { if (channelClass == null) { throw new NullPointerException(&quot;channelClass&quot;); } return channelFactory(new ReflectiveChannelFactory&lt;C&gt;(channelClass));} &#x8FDB;&#x5165; channelFactory &#x65B9;&#x6CD5; 1234567891011/** * {@link io.netty.channel.ChannelFactory} which is used to create {@link Channel} instances from * when calling {@link #bind()}. This method is usually only used if {@link #channel(Class)} * is not working for you because of some more complex needs. If your {@link Channel} implementation * has a no-args constructor, its highly recommend to just use {@link #channel(Class)} for * simplify your code. */@SuppressWarnings({ &quot;unchecked&quot;, &quot;deprecation&quot; })public B channelFactory(io.netty.channel.ChannelFactory&lt;? extends C&gt; channelFactory) { return channelFactory((ChannelFactory&lt;C&gt;) channelFactory);} &#x5982;&#x679C;&#x6709;&#x65E0;&#x53C2;&#x6570;&#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x63A8;&#x8350;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x4EE3;&#x7801; Q&#xFF1A;&#x4E3A;&#x4EC0;&#x4E48;&#x5FC5;&#x987B;&#x8981;&#x6709;&#x65E0;&#x53C2;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5;&#x5462;&#xFF1F; A : &#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x5982;&#x4E0B;&#x751F;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x5FC5;&#x987B;&#x6709;&#x65E0;&#x53C2;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5; 12Class class = Class.forName(className);Object object = class.newInstance(); // &#x53EA;&#x80FD;&#x8C03;&#x7528;&#x65E0;&#x53C2;&#x6784;&#x9020;&#x51FD;&#x6570; &#x6211;&#x4EEC;&#x5728;&#x6765;&#x770B;&#x770B; NioServerSocketChannel A {@link io.netty.channel.socket.ServerSocketChannel} implementation which uses NIO selector based implementation to accept new connections. .childHandler(new MyServerinitializer()); &#x8BBE;&#x7F6E;&#x7528;&#x4E8E;&#x8BF7;&#x6C42;&#x7684; Handler 12345678910/** * Set the {@link ChannelHandler} which is used to serve the request for the {@link Channel}&apos;s. */public ServerBootstrap childHandler(ChannelHandler childHandler) { if (childHandler == null) { throw new NullPointerException(&quot;childHandler&quot;); } this.childHandler = childHandler; return this;} &#x8FD9;&#x91CC;&#x5176;&#x5B9E;&#x6709; handler &#x548C; childHandler &#x4E00;&#x4E2A;&#x662F;&#x7ED9; bossGroup &#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x7ED9; workGroup &#x4F7F;&#x7528;&#x7684; &#x542F;&#x52A8;1ChannelFuture channelFuture = bootstrap.bind(8899).sync(); ChannelFutureChannelFuture &#x5148;&#x662F;&#x7EE7;&#x627F;&#x4E86;&#x81EA;&#x5DF1;&#x63D0;&#x4F9B;&#x7684; Future &#xFF0C;&#x81EA;&#x8EAB;&#x7684; Future &#x53C8;&#x7EE7;&#x627F; java.util.concurrent.Future&lt;V&gt; &#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x770B;&#x770B; JUC &#x4E2D; Future &#x548C; FutureTask JUC.Future&#x770B;&#x770B;&#x5176;&#x4E2D;&#x51E0;&#x4E2A;&#x4E3B;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4ECE;&#x65B9;&#x6CD5;&#x540D;&#x4E5F;&#x77E5;&#x9053;&#x662F;&#x505A;&#x4EC0;&#x4E48;&#x7684; 123456789101112public interface Future&lt;V&gt; { boolean cancel(boolean mayInterruptIfRunning); boolean isCancelled(); boolean isDone(); V get() throws InterruptedException, ExecutionException; V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;} &#x6587;&#x6863;&#xFF1A; A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the cancel method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a Future for the sake of cancellability but not provide a usable result, you can declare types of the form Future&lt;?&gt; and return null as a result of the underlying task. &#x4F7F;&#x7528;&#xFF1A; 1234567891011121314151617181920interface ArchiveSearcher { String search(String target); }class App { ExecutorService executor = ... ArchiveSearcher searcher = ... void showSearch(final String target) throws InterruptedException { Future&lt;String&gt; future = executor.submit(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); } }); displayOtherThings(); // do other things while searching try { displayText(future.get()); // use future } catch (ExecutionException ex) { cleanup(); return; } }} JUC.FutureTask The FutureTask class is an implementation of Future that implements Runnable, and so may be executed by an Executor. For example, the above construction with submit could be replaced by: 12345FutureTask&lt;String&gt; future = new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }});executor.execute(future); &#x53EF;&#x4EE5;&#x901A;&#x8FC7; Executor &#x7684;&#x5B9E;&#x4F8B;&#x53BB;&#x6267;&#x884C;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x4ECE; future &#x4E2D;&#x83B7;&#x53D6; Netty.Future123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public interface Future&lt;V&gt; extends java.util.concurrent.Future&lt;V&gt; { boolean isSuccess(); boolean isCancellable(); Throwable cause(); /** * Adds the specified listener to this future. The * specified listener is notified when this future is * {@linkplain #isDone() done}. If this future is already * completed, the specified listener is notified immediately. */ Future&lt;V&gt; addListener(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt; listener); /** * Adds the specified listeners to this future. The * specified listeners are notified when this future is * {@linkplain #isDone() done}. If this future is already * completed, the specified listeners are notified immediately. */ Future&lt;V&gt; addListeners(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;... listeners); /** * Removes the first occurrence of the specified listener from this future. * The specified listener is no longer notified when this * future is {@linkplain #isDone() done}. If the specified * listener is not associated with this future, this method * does nothing and returns silently. */ Future&lt;V&gt; removeListener(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt; listener); /** * Removes the first occurrence for each of the listeners from this future. * The specified listeners are no longer notified when this * future is {@linkplain #isDone() done}. If the specified * listeners are not associated with this future, this method * does nothing and returns silently. */ Future&lt;V&gt; removeListeners(GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;... listeners); // &#x7B49;&#x5F85;Future&#x5B8C;&#x6210; Future&lt;V&gt; sync() throws InterruptedException; Future&lt;V&gt; syncUninterruptibly(); Future&lt;V&gt; await() throws InterruptedException; Future&lt;V&gt; awaitUninterruptibly(); boolean await(long timeout, TimeUnit unit) throws InterruptedException; boolean await(long timeoutMillis) throws InterruptedException; boolean awaitUninterruptibly(long timeout, TimeUnit unit); boolean awaitUninterruptibly(long timeoutMillis); V getNow(); @Override boolean cancel(boolean mayInterruptIfRunning);} &#x6211;&#x4EEC;&#x4E3B;&#x8981;&#x770B;&#x770B; xxListener &#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x540E;&#x7F00;&#x4E3A; Listener &#x4F7F;&#x7528;&#x4E86;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F; &#x5B83;&#x6BD4; JUC.Future &#x66F4;&#x5389;&#x5BB3;&#x7684;&#x662F;&#x5C31;&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A; Listener &#xFF0C;&#x867D;&#x7136; JUC.Future &#x53EF;&#x4EE5;&#x8C03;&#x7528; get() &#x65B9;&#x6CD5;&#xFF0C;&#x83B7;&#x53D6;&#x5F02;&#x6B65;&#x7ED3;&#x679C;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4E0D;&#x77E5;&#x9053;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x53BB;&#x8C03;&#x7528;&#xFF0C;&#x8C03;&#x7528;&#x65E9;&#x4E86;&#x5C31;&#x5835;&#x585E;&#x5728;&#x90A3;&#x91CC;&#xFF1B;&#x800C; Netty.Future &#x4F7F;&#x7528;&#x4E86;&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;&#xFF0C;&#x5F53;&#x5B8C;&#x6210;&#x65F6;&#x4F1A;&#x81EA;&#x52A8;&#x89E6;&#x53D1; ChannelFuture&#x6211;&#x4EEC;&#x56DE;&#x5230; ChannelFuture &#xFF0C;&#x90FD;&#x91CD;&#x5199;&#x4E86; Netty.Future &#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x662F; Future &#x7684;&#x5B50;&#x7C7B;&#xFF0C;java5&#x6216;&#x8005;&#x4EE5;&#x524D;&#xFF0C;&#x5FC5;&#x987B;&#x4E00;&#x6837;&#xFF0C;java7&#x4EE5;&#x540E;&#x53EF;&#x4EE5;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x5FC5;&#x987B;&#x662F;&#x7236;&#x7C7B;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x6D3E;&#x751F;&#x7C7B; 12345678910111213141516171819202122232425262728293031public interface ChannelFuture extends Future&lt;Void&gt; { /** * Returns a channel where the I/O operation associated with this * future takes place. */ Channel channel(); @Override ChannelFuture addListener(GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt; listener); @Override ChannelFuture addListeners(GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;... listeners); @Override ChannelFuture removeListener(GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt; listener); @Override ChannelFuture removeListeners(GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;... listeners); @Override ChannelFuture sync() throws InterruptedException; @Override ChannelFuture syncUninterruptibly(); @Override ChannelFuture await() throws InterruptedException; @Override ChannelFuture awaitUninterruptibly(); &#x6587;&#x6863;&#xFF1A; io.netty.channelpublic interface ChannelFutureextends Future The result of an asynchronous Channel I/O operation. All I/O operations in Netty are asynchronous. It means any I/O calls will return immediately with no guarantee that the requested I/O operation has been completed at the end of the call. Instead, you will be returned with a ChannelFuture instance which gives you the information about the result or status of the I/O operation. A ChannelFuture is either uncompleted or completed. When an I/O operation begins, a new future object is created. The new future is uncompleted initially - it is neither succeeded, failed, nor cancelled because the I/O operation is not finished yet. If the I/O operation is finished either successfully, with failure, or by cancellation, the future is marked as completed with more specific information, such as the cause of the failure. Please note that even failure and cancellation belong to the completed state.1234567891011121314151617&gt; +---------------------------+&gt; | Completed successfully |&gt; +---------------------------+&gt; +----&gt; isDone() = true |&gt; +--------------------------+ | | isSuccess() = true |&gt; | Uncompleted | | +===========================+&gt; +--------------------------+ | | Completed with failure |&gt; | isDone() = false | | +---------------------------+&gt; | isSuccess() = false |----+----&gt; isDone() = true |&gt; | isCancelled() = false | | | cause() = non-null |&gt; | cause() = null | | +===========================+&gt; +--------------------------+ | | Completed by cancellation |&gt; | +---------------------------+&gt; +----&gt; isDone() = true |&gt; | isCancelled() = true |&gt; +---------------------------+&gt; Various methods are provided to let you check if the I/O operation has been completed, wait for the completion, and retrieve the result of the I/O operation. It also allows you to add ChannelFutureListeners so you can get notified when the I/O operation is completed. &#x63A8;&#x8350;&#x4F7F;&#x7528;&#x76D1;&#x542C;&#x5668;&#x800C;&#x4E0D;&#x662F;&#x7B49;&#x5F85;&#x7684;&#x65B9;&#x6CD5;1234567891011121314151617181920// BAD - NEVER DO THIS@Overridepublic void channelRead(ChannelHandlerContext ctx, Object msg) { ChannelFuture future = ctx.channel().close(); future.awaitUninterruptibly(); // Perform post-closure operation // ...}// GOOD@Overridepublic void channelRead(ChannelHandlerContext ctx, Object msg) { ChannelFuture future = ctx.channel().close(); future.addListener(new ChannelFutureListener() { public void operationComplete(ChannelFuture future) { // Perform post-closure operation // ... } });} &#x4E0D;&#x8981;&#x6DF7;&#x6DC6;&#x8FDE;&#x63A5;&#x8D85;&#x65F6;&#x548C;&#x7B49;&#x5F85;&#x8D85;&#x65F6; 12345678910111213141516171819202122232425262728293031// BAD - NEVER DO THISBootstrap b = ...;ChannelFuture f = b.connect(...);f.awaitUninterruptibly(10, TimeUnit.SECONDS);if (f.isCancelled()) { // Connection attempt cancelled by user} else if (!f.isSuccess()) { // You might get a NullPointerException here because the future // might not be completed yet. f.cause().printStackTrace();} else { // Connection established successfully}// GOODBootstrap b = ...;// Configure the connect timeout option.b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);ChannelFuture f = b.connect(...);f.awaitUninterruptibly();// Now we are sure the future is completed.assert f.isDone();if (f.isCancelled()) { // Connection attempt cancelled by user} else if (!f.isSuccess()) { f.cause().printStackTrace();} else { // Connection established successfully} bind()&#x65B9;&#x6CD5;&#x5F53;&#x6211;&#x4EEC;&#x8C03;&#x7528; bind &#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x624D;&#x771F;&#x6B63;&#x7684;&#x542F;&#x52A8;&#x670D;&#x52A1;&#x5668; 1ChannelFuture channelFuture = bootstrap.bind(8899).sync(); &#x901A;&#x8FC7;&#x4E00;&#x4E9B;&#x5224;&#x65AD;&#x6700;&#x7EC8;&#x5230; doBind &#x65B9;&#x6CD5;&#x4E0A; 1234567891011121314151617181920212223242526272829303132333435private ChannelFuture doBind(final SocketAddress localAddress) { final ChannelFuture regFuture = initAndRegister(); final Channel channel = regFuture.channel(); if (regFuture.cause() != null) { return regFuture; } if (regFuture.isDone()) { // At this point we know that the registration was complete and successful. ChannelPromise promise = channel.newPromise(); doBind0(regFuture, channel, localAddress, promise); return promise; } else { // Registration future is almost always fulfilled already, but just in case it&apos;s not. final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel); regFuture.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { Throwable cause = future.cause(); if (cause != null) { // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an // IllegalStateException once we try to access the EventLoop of the Channel. promise.setFailure(cause); } else { // Registration was successful, so set the correct executor to use. // See https://github.com/netty/netty/issues/2586 promise.registered(); doBind0(regFuture, channel, localAddress, promise); } } }); return promise; }} initAndRegister()&#x65B9;&#x6CD5;&#x8FD9;&#x4E2A;&#x4E3B;&#x8981;&#x662F;&#x521D;&#x59CB;&#x5316;&#x548C;&#x6CE8;&#x518C;&#xFF0C;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#xFF0C;&#x540E;&#x7EED;&#x5728;&#x5206;&#x6790; &#x52A0;&#x6CB9;&#xFF01;&#xFF01;&#xFF01;]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>Future</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[201812]]></title>
    <url>%2F2018%2F12%2F30%2F201812%2F</url>
    <content type="text"><![CDATA[&#x603B;&#x7ED3;&#x8FD9;&#x4E2A;&#x6708;&#x4E00;&#x8FB9;&#x5FD9;&#x7740;&#x5B9E;&#x9A8C;&#xFF0C;&#x4E00;&#x8FB9;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x505A;&#x8BA1;&#x7B97;&#x7684;&#x597D;&#x5904;&#x5C31;&#x662F;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x5145;&#x88D5;&#xFF0C;&#x65E9;&#x4E0A;&#x6765;&#x5230;&#x5B9E;&#x9A8C;&#x5BA4;&#x7528;&#x811A;&#x672C;&#x628A;&#x4EFB;&#x52A1;&#x4E00;&#x63D0;&#x4EA4;&#x5C31;&#x53EF;&#x4EE5;&#x5B89;&#x5FC3;&#x7684;&#x5199;&#x4EE3;&#x7801;&#x4E86; &#x9762;&#x8BD5;&#x4E0A;&#x4E2A;&#x6708;&#x5230;&#x5C0F;&#x7C73;&#x9762;&#x8BD5;&#x4E86;&#xFF0C;&#x5F88;&#x9057;&#x61BE;&#x6CA1;&#x6709;&#x9762;&#x4E0A;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x6709;&#x70B9;&#x6536;&#x83B7;&#x7684;&#xFF0C;&#x81EA;&#x5DF1;&#x5B66;&#x7740;&#x8FF7;&#x832B;&#x4E86;&#xFF0C;&#x5C31;&#x53BB;&#x9762;&#x8BD5;&#x4E00;&#x4E0B;&#xFF0C;&#x770B;&#x770B;&#x6709;&#x4EC0;&#x4E48;&#x81EA;&#x5DF1;&#x6CA1;&#x6709;&#x638C;&#x63E1;&#x597D;&#xFF0C;&#x66F4;&#x597D;&#x7684;&#x8003;&#x9A8C;&#x81EA;&#x5DF1;&#x3002; &#x8FD9;&#x6B21;&#x9762;&#x8BD5;&#x6211;&#x7684;&#x9762;&#x8BD5;&#x5B98;&#x4E3B;&#x8981;&#x95EE;&#x7684;&#x5F88;&#x591A;&#x57FA;&#x7840;&#x7684;&#x95EE;&#x9898; &#x81EA;&#x6211;&#x4ECB;&#x7ECD; &#x5BF9;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E86;&#x4E0D;&#x4E86;&#x89E3;&#xFF0C;&#x8BF4;&#x4E0B;&#x961F;&#x5217; &#x8BF4;&#x4E0B; Dubbo &#x7B97;&#x6CD5; &#x6811;&#x7684;&#x6309;&#x5C42;&#x6253;&#x5370; &#x628A;&#x6570;&#x503C;&#x8F6C;&#x5316;&#x4E3A;&#x4E2D;&#x6587;&#x5927;&#x5199;&#x91D1;&#x989D; &#x6CA1;&#x6709;&#x95EE; Java &#x7684;&#x76F8;&#x5173;&#x5185;&#x5BB9;&#xFF0C;&#x81EA;&#x5DF1;&#x7B54;&#x7684;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#xFF0C;&#x53C8;&#x6709;&#x5B66;&#x4E60;&#x7684;&#x52A8;&#x529B;&#x4E86;&#xFF0C;&#x56DE;&#x6765;&#x5C31;&#x9A6C;&#x4E0A;&#x8865;&#x8FD9;&#x4E9B;&#x77E5;&#x8BC6; &#x5251;&#x6307;Offer&#x8FD9;&#x4E2A;&#x6708;&#x628A;&#x91CC;&#x9762;&#x7684;&#x9898;&#x53C8;&#x5237;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x6BD4;&#x8D77;&#x7B2C;&#x4E00;&#x6B21;&#x5237;&#x4EE3;&#x7801;&#x66F4;&#x7B80;&#x6D01;&#x4E86;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x80FD;&#x4F18;&#x5316;&#x66F4;&#x597D;&#xFF0C;&#x5237;&#x9898;&#x8FD8;&#x662F;&#x5F88;&#x6709;&#x610F;&#x4E49;&#x7684; &#x89C6;&#x9891;&#x6C47;&#x7F16;&#x8BED;&#x8A00;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x8FD9;&#x662F;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x516C;&#x5F00;&#x8BFE;&#xFF0C;&#x8BB2;&#x5F97;&#x633A;&#x7B80;&#x5355;&#x6613;&#x61C2;&#xFF0C;&#x81EA;&#x5DF1;&#x5BF9;&#x6C47;&#x7F16;&#x7A0B;&#x5E8F;&#x8FC7;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x5BF9;&#x6C47;&#x7F16;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x8BA4;&#x8BC6;&#xFF0C;&#x6C47;&#x7F16;&#x662F;&#x5BF9;&#x6307;&#x4EE4;&#x7684;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#xFF0C;&#x66F4;&#x8D34;&#x8FD1;&#x673A;&#x5668;&#xFF0C;&#x5BF9;&#x4EE3;&#x7801;&#x6709;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8BA4;&#x8BC6; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x8FD9;&#x4E5F;&#x662F;&#x6E05;&#x534E;&#x5927;&#x5B66;&#x516C;&#x5F00;&#x8BFE;&#xFF0C;&#x7531;&#x4E8E;&#x81EA;&#x5DF1;&#x5BF9;&#x8FD9;&#x4E9B;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x6BD4;&#x8F83;&#x7F3A;&#x4E4F;&#xFF0C;&#x73B0;&#x5728;&#x5728;&#x5B66;&#x6821;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x8E0F;&#x8E0F;&#x5B9E;&#x5B9E;&#x628A;&#x8FD9;&#x4E9B;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x597D;&#xFF0C;&#x624D;&#x80FD;&#x8D70;&#x5F97;&#x66F4;&#x8FDC; &#x770B;&#x70B9;CSAPP&#x6700;&#x8FD1;&#x4E5F;&#x5728;&#x770B; CSAPP &#x8FD9;&#x672C;&#x4E66;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x5BF9;&#x8FD9;&#x672C;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x63D0;&#x70BC;&#xFF0C;&#x5148;&#x638C;&#x63E1;&#x4E3B;&#x5E72;&#x518D;&#x6162;&#x6162;&#x6D88;&#x5316;&#x4E66;&#x4E0A;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x603B;&#x7ED3;&#x7684;&#x5F88;&#x597D; &#x4E0B;&#x6708;&#x8BA1;&#x5212; &#x770B;&#x5B8C;&#x300A;&#x7F16;&#x7801;&#x300B; Leetcode 50 &#x9053; &#x719F;&#x6089;&#x4E00;&#x4E0B; Netty]]></content>
      <categories>
        <category>monthly</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[201811]]></title>
    <url>%2F2018%2F11%2F30%2F201811%2F</url>
    <content type="text"><![CDATA[&#x770B;&#x5230;&#x962E;&#x4E00;&#x5CF0;&#x8001;&#x5E08;&#x5199;&#x7684;&#x6BCF;&#x5468;&#x6280;&#x672F;&#x5206;&#x4EAB;&#xFF0C;&#x81EA;&#x5DF1;&#x60F3;&#x5199;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C;&#x6765;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x81EA;&#x5DF1;&#xFF0C;&#x65B9;&#x4FBF;&#x4EE5;&#x540E;&#x81EA;&#x5DF1;&#x67E5;&#x627E;&#xFF0C;&#x6211;&#x5C31;&#x6BCF;&#x6708;&#x603B;&#x7ED3;&#x4E00;&#x6B21;&#x3002;&#x79D1;&#x7814;&#x4E0A;&#x6211;&#x9700;&#x8981;&#x6BCF;&#x4E2A;&#x6708;&#x8981;&#x53D1;&#x4E00;&#x4EFD;&#x603B;&#x7ED3;&#x5BFC;&#x5E08;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x603B;&#x7ED3;&#x4E3B;&#x8981;&#x662F;&#x6280;&#x672F;&#x4E0A;&#x7684;&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x81EA;&#x5DF1;&#x5E73;&#x65F6;&#x7684;&#x6240;&#x89C1;&#x6240;&#x95FB;&#xFF0C;&#x5E0C;&#x671B;&#x81EA;&#x5DF1;&#x80FD;&#x575A;&#x6301;&#x5199;&#x4E0B;&#x53BB; &#x603B;&#x7ED3;springcloud-vue-project&#x4E0A;&#x4E00;&#x4E2A;&#x6708;&#x4E3B;&#x8981;&#x5199;&#x4E86;&#x4E00;&#x4E2A; Vue + SpringCloud &#x7684;&#x9879;&#x76EE;&#xFF0C;&#x9879;&#x76EE;&#x5927;&#x90E8;&#x5206;&#x5199;&#x5B8C;&#x4E86;&#xFF0C;&#x5BF9;&#x5FAE;&#x670D;&#x52A1;&#x7684;&#x77E5;&#x8BC6;&#x6211;&#x90A3;&#x4E48;&#x4E00;&#x70B9;&#x70B9;&#x5165;&#x95E8;&#xFF0C;&#x4E3B;&#x8981;&#x67B6;&#x6784;&#x56FE;&#x5982;&#x4E0B; &#x9762;&#x8BD5;&#x60F3;&#x51FA;&#x53BB;&#x5B9E;&#x4E60;&#xFF0C;&#x6295;&#x4E86;&#x4E24;&#x4E2A;&#x9762;&#x8BD5;&#xFF0C;&#x4E00;&#x4E2A;&#x505A; OMS &#x7CFB;&#x7EDF;&#x7684;&#x7269;&#x6D41;&#x516C;&#x53F8; &#x5148;&#x662F;&#x505A;&#x4E86;&#x4E00;&#x5957;&#x5377;&#x5B50;&#xFF0C;&#x4E24;&#x9053;&#x7B97;&#x6CD5;&#x9898;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x6570;&#x636E;&#x5E93;&#x611F;&#x89C9;&#x6CA1;&#x7B54;&#x597D;&#xFF0C;&#x5F88;&#x4E45;&#x6CA1;&#x6709;&#x5199; SQL &#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x95EE;&#x5F97;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x5C31;&#x95EE;&#x4E86;&#x4E00;&#x4E2A;AtomicInteger&#x600E;&#x4E48;&#x4FDD;&#x8BC1;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#xFF0C;&#x6709;&#x9053;&#x9898;&#x76EE;&#x4E2D;&#x6211;&#x5199;&#x4E86;&#x8FD9;&#x4E2A;&#x7C7B; &#x56E0;&#x4E3A;&#x6211;&#x6709;&#x5B9E;&#x4E60;&#x7ECF;&#x5386;&#xFF0C;&#x5C31;&#x95EE;&#x4E86;&#x4E00;&#x4E9B;&#x9879;&#x76EE;&#x76F8;&#x5173;&#x7684;&#xFF0C;&#x600E;&#x4E48;&#x89E3;&#x51B3;&#x9879;&#x76EE;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x56F0;&#x96BE;&#xFF0C;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x4E2D;&#x95F4;&#x4EF6;&#x719F;&#x4E0D;&#x719F;&#xFF0C;&#x80FD;&#x4E0D;&#x80FD;&#x81EA;&#x5DF1;&#x90E8;&#x7F72;&#xFF0C;Docker&#x4F1A;&#x4E0D;&#x4F1A;&#x7528;&#x4E4B;&#x7C7B;&#x7684;&#xFF0C;&#x540E;&#x9762;&#x5C31;&#x548C;&#x4EA7;&#x54C1;&#x7ECF;&#x5386;&#x804A;&#x4E86;&#x804A;&#xFF0C;&#x5C31;&#x5FEB;&#x901F;&#x7684;&#x7ED3;&#x675F;&#x4E86; &#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5C31;&#x662F;&#x5C0F;&#x7C73;&#x4E86;&#xFF0C;&#x4E0B;&#x5468;&#x9762;&#x8BD5;&#xFF0C;&#x5E0C;&#x671B;&#x80FD;&#x6210;&#x529F; Leetcode&#x6700;&#x8FD1;&#x6BCF;&#x5929;&#x90FD;&#x4F1A;&#x5237;&#x5237; leetcode&#xFF0C;&#x521A;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x75DB;&#x4E0D;&#x6B32;&#x751F;&#xFF0C;&#x6162;&#x6162;&#x7684;&#x8D8A;&#x6765;&#x8D8A;&#x987A;&#x4E86;&#xFF0C;&#x5F53;&#x7136;&#x6709;&#x4E00;&#x90E8;&#x5206;&#x539F;&#x56E0;&#x662F;&#x4E3A;&#x4E86;&#x9762;&#x8BD5;&#xFF0C;&#x4E0D;&#x8FC7;&#x6211;&#x89C9;&#x5F97;&#x5237;&#x9898;&#x6709;&#x52A9;&#x4E8E;&#x81EA;&#x5DF1;&#x7684;&#x4EE3;&#x7801;&#x80FD;&#x91CF;&#xFF0C;&#x633A;&#x6709;&#x610F;&#x601D;&#x7684; &#x5DE5;&#x5177;SurfingkeysSurfingkeys &#x548C;&#x73B0;&#x6709;&#x7684;&#x4E00;&#x4E9B;&#x63D2;&#x4EF6;&#x4E00;&#x6837;&#xFF0C;&#x8BA9;&#x4F60;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x901A;&#x8FC7;&#x952E;&#x76D8;&#x6765;&#x4F7F;&#x7528; Chrome/Firefox &#x6D4F;&#x89C8;&#x5668;&#xFF0C;&#x6BD4;&#x5982;&#x8DF3;&#x8F6C;&#x7F51;&#x9875;&#xFF0C;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x6EDA;&#x5C4F;&#x3002;&#x4F46;&#x4E0D;&#x53EA;&#x662F;&#x7ED9;vim&#x7528;&#x6237;&#x4F7F;&#x7528;&#xFF0C;Surfingkeys&#x7684;&#x57FA;&#x672C;&#x7279;&#x6027;&#x662F;&#x8BA9;&#x4F60;&#x81EA;&#x5DF1;&#x5199;&#x4E00;&#x6BB5; Javascript &#x811A;&#x672C;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7; mapkey &#x6620;&#x5C04;&#x5230;&#x67D0;&#x4E9B;&#x6309;&#x952E;&#x3002;&#x4E4B;&#x540E;&#x5F53;&#x4F60;&#x6309;&#x4E86;&#x90A3;&#x51E0;&#x4E2A;&#x952E;&#x4EE5;&#x540E;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;Javascript &#x811A;&#x672C;&#x5C31;&#x4F1A;&#x88AB;&#x6267;&#x884C;&#x3002; &#x73A9;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x7279;&#x522B;&#x68D2;&#xFF0C;&#x89E3;&#x653E;&#x9F20;&#x6807; &#x89C6;&#x9891;&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66;&#x901F;&#x6210;&#x8BFE;&#x8FD9;&#x662F; Youtube &#x4E0A;&#x5F88;&#x706B;&#x7684;&#x901F;&#x6210;&#x8BFE;&#xFF0C;&#x5176;&#x4E2D;&#x8FD9;&#x95E8;&#x8BB2;&#x7684;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x4E00;&#x5171;40&#x96C6;&#xFF0C;&#x6BCF;&#x96C6;&#x5F88;&#x77ED;&#x53EA;&#x6709;10&#x5206;&#x949F;&#xFF0C;&#x4F46;&#x662F;&#x77E5;&#x8BC6;&#x91CF;&#x5DE8;&#x591A;&#xFF0C;&#x5305;&#x542B;&#x8BA1;&#x7B97;&#x79D1;&#x5B66;&#x7684;&#x5404;&#x4E2A;&#x65B9;&#x9762; gitbub &#x5730;&#x5740; &#x7B2C; 1 &#x96C6;&#xFF1A;&#x8BA1;&#x7B97;&#x673A;&#x65E9;&#x671F;&#x5386;&#x53F2; &#x7B2C; 2 &#x96C6;&#xFF1A;&#x7535;&#x5B50;&#x8BA1;&#x7B97;&#x673A; &#x7B2C; 3 &#x96C6;&#xFF1A;&#x5E03;&#x5C14;&#x903B;&#x8F91;&#x548C;&#x903B;&#x8F91;&#x95E8; &#x7B2C; 4 &#x96C6;&#xFF1A;&#x4E8C;&#x8FDB;&#x5236; &#x7B2C; 5 &#x96C6;&#xFF1A;&#x7B97;&#x6570;&#x903B;&#x8F91;&#x5355;&#x5143; - ALU &#x7B2C; 6 &#x96C6;&#xFF1A;&#x5BC4;&#x5B58;&#x5668;&#x548C;&#x5185;&#x5B58; &#x7B2C; 7 &#x96C6;&#xFF1A;&#x4E2D;&#x592E;&#x5904;&#x7406;&#x5668;&#xFF08;CPU) &#x7B2C; 8 &#x96C6;&#xFF1A;&#x6307;&#x4EE4;&#x548C;&#x7A0B;&#x5E8F; &#x7B2C; 9 &#x96C6;&#xFF1A;&#x9AD8;&#x7EA7; CPU &#x8BBE;&#x8BA1; &#x7B2C; 10 &#x96C6;&#xFF1A;&#x65E9;&#x671F;&#x7684;&#x7F16;&#x7A0B;&#x65B9;&#x5F0F; &#x7B2C; 11 &#x96C6;&#xFF1A;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x53D1;&#x5C55;&#x53F2; &#x7B2C; 12 &#x96C6;&#xFF1A;&#x7F16;&#x7A0B;&#x57FA;&#x7840; - &#x8BED;&#x53E5;&#x548C;&#x51FD;&#x6570; &#x7B2C; 13 &#x96C6;&#xFF1A;&#x7B97;&#x6CD5;&#x5165;&#x95E8; &#x7B2C; 14 &#x96C6;&#xFF1A;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x7B2C; 15 &#x96C6;&#xFF1A;&#x963F;&#x5170;&#xB7;&#x56FE;&#x7075; &#x7B2C; 16 &#x96C6;&#xFF1A;&#x8F6F;&#x4EF6;&#x5DE5;&#x7A0B; &#x7B2C; 17 &#x96C6;&#xFF1A;&#x96C6;&#x6210;&#x7535;&#x8DEF;&#x4E0E;&#x6469;&#x5C14;&#x5B9A;&#x5F8B; &#x7B2C; 18 &#x96C6;&#xFF1A;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF; &#x7B2C; 19 &#x96C6;&#xFF1A;&#x5185;&#x5B58;&amp;&#x50A8;&#x5B58;&#x4ECB;&#x8D28; &#x7B2C; 20 &#x96C6;&#xFF1A;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF; &#x7B2C; 21 &#x96C6;&#xFF1A;&#x538B;&#x7F29; &#x7B2C; 22 &#x96C6;&#xFF1A;&#x547D;&#x4EE4;&#x884C;&#x754C;&#x9762; &#x7B2C; 23 &#x96C6;&#xFF1A;&#x5C4F;&#x5E55;&#x4E0E; 2D &#x56FE;&#x5F62;&#x663E;&#x793A; &#x7B2C; 24 &#x96C6;&#xFF1A;&#x51B7;&#x6218;&#x548C;&#x6D88;&#x8D39;&#x4E3B;&#x4E49; &#x7B2C; 25 &#x96C6;&#xFF1A;&#x4E2A;&#x4EBA;&#x8BA1;&#x7B97;&#x673A;&#x9769;&#x547D; &#x7B2C; 26 &#x96C6;&#xFF1A;&#x56FE;&#x5F62;&#x7528;&#x6237;&#x754C;&#x9762; (GUI) &#x7B2C; 27 &#x96C6;&#xFF1A;3D &#x56FE;&#x5F62; &#x7B2C; 28 &#x96C6;&#xFF1A;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC; &#x7B2C; 29 &#x96C6;&#xFF1A;&#x4E92;&#x8054;&#x7F51; &#x7B2C; 30 &#x96C6;&#xFF1A;&#x4E07;&#x7EF4;&#x7F51; &#x7B2C; 31 &#x96C6;&#xFF1A;&#x8BA1;&#x7B97;&#x673A;&#x5B89;&#x5168; &#x7B2C; 32 &#x96C6;&#xFF1A;&#x9ED1;&#x5BA2;&#x4E0E;&#x653B;&#x51FB; &#x7B2C; 33 &#x96C6;&#xFF1A;&#x52A0;&#x5BC6; &#x7B2C; 34 &#x96C6;&#xFF1A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E0E;&#x4EBA;&#x5DE5;&#x667A;&#x80FD; &#x7B2C; 35 &#x96C6;&#xFF1A;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9; &#x7B2C; 37 &#x96C6;&#xFF1A;&#x673A;&#x5668;&#x4EBA; &#x7B2C; 38 &#x96C6;&#xFF1A;&#x8BA1;&#x7B97;&#x673A;&#x5FC3;&#x7406;&#x5B66; &#x7B2C; 39 &#x96C6;&#xFF1A;&#x6559;&#x80B2;&#x79D1;&#x6280; &#x7B2C; 40 &#x96C6;&#xFF1A;&#x5947;&#x70B9;&#xFF0C;&#x5929;&#x7F51;&#xFF0C;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x672A;&#x6765; &#x4E2D;&#x56FD;&#x901A;&#x53F2;-&#x53E4;&#x4EE3;&#x53F2;&#x300A;&#x4E2D;&#x56FD;&#x901A;&#x53F2;&#x300B;&#x4EE5;&#x53F2;&#x8BD7;&#x822C;&#x7684;&#x5B8F;&#x5927;&#x53D9;&#x4E8B;&#x624B;&#x6CD5;&#xFF0C;&#x751F;&#x52A8;&#x518D;&#x73B0;&#x4E86;&#x4E2D;&#x534E;&#x6587;&#x660E;&#x4ECE;&#x539F;&#x59CB;&#x793E;&#x4F1A;&#x5230;&#x4E8C;&#x5341;&#x4E00;&#x4E16;&#x7EAA;&#x521D;&#x7684;&#x5B8C;&#x6574;&#x53D1;&#x5C55;&#x5386;&#x7A0B;&#x3002;&#x5185;&#x5BB9;&#x6D89;&#x53CA;&#x5386;&#x53F2;&#x3001;&#x653F;&#x6CBB;&#x3001;&#x7ECF;&#x6D4E;&#x3001;&#x519B;&#x4E8B;&#x3001;&#x54F2;&#x5B66;&#x3001;&#x5B97;&#x6559;&#x3001;&#x6587;&#x5B66;&#x3001; &#x827A;&#x672F;&#x3001;&#x8BED;&#x8A00;&#x3001;&#x8003;&#x53E4;&#x3001;&#x5929;&#x6587;&#x3001;&#x5730;&#x7406;&#x3001;&#x79D1;&#x6280;&#x3001;&#x4EBA;&#x7269;&#x3001;&#x6C11;&#x4FD7;&#x4EE5;&#x53CA;&#x4E2D;&#x5916;&#x4EA4;&#x6D41;&#x7B49;&#x5404;&#x4E2A;&#x65B9;&#x9762;&#xFF0C;&#x76F4;&#x89C2;&#x5730;&#x518D;&#x73B0;&#x4E86;&#x4E2D;&#x534E;&#x6C11;&#x65CF;&#x4E94;&#x5343;&#x5E74;&#x6587;&#x660E;&#x5386;&#x53F2;&#x5168;&#x666F;&#xFF0C;&#x5168;&#x9762;&#x5C55;&#x793A;&#x4E86;&#x534E;&#x590F;&#x6587;&#x660E;&#x7684;&#x53E4;&#x4ECA;&#x4F20;&#x627F;&#x3002; &#x5199;&#x4EE3;&#x7801;&#x5199;&#x7D2F;&#x4E86;&#x770B;&#x770B;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5DE5;&#x79D1;&#x751F;&#xFF0C;&#x5BF9;&#x5386;&#x53F2;&#x77E5;&#x8BC6;&#x4E86;&#x89E3;&#x7684;&#x4E0D;&#x591A;&#xFF0C;&#x8FD9;&#x90E8;&#x8BB0;&#x5F55;&#x7BC7;&#x503C;&#x5F97;&#x770B;&#x770B;&#xFF0C;&#x770B;&#x770B;&#x53E4;&#x4EE3;&#x4E2D;&#x56FD;&#x4EBA;&#x6C11;&#x7684;&#x806A;&#x660E;&#x624D;&#x667A;&#xFF0C;&#x770B;&#x770B;&#x4E00;&#x4E2A;&#x671D;&#x4EE3;&#x7684;&#x5174;&#x76DB;&#x8870;&#x8D25;&#x3002; &#x770B;&#x70B9;&#x6280;&#x672F;&#x5206;&#x4EAB;&#x5468;&#x520A;&#x8FD9;&#x662F;&#x962E;&#x8001;&#x5E08;&#x6280;&#x672F;&#x5206;&#x4EAB;&#x5468;&#x520A;&#xFF0C;&#x6BCF;&#x5468;&#x4E94;&#x66F4;&#x65B0;&#xFF0C;&#x91CC;&#x9762;&#x5206;&#x4EAB;&#x4E86;&#x5F88;&#x591A;&#x6709;&#x7528;&#x7684;&#x5DE5;&#x5177;&#x548C;&#x6559;&#x7A0B;&#xFF0C;&#x975E;&#x5E38;&#x503C;&#x5F97;&#x5173;&#x6CE8;&#x3002;&#x6211;&#x6BCF;&#x5468;&#x90FD;&#x4F1A;&#x7B2C;&#x4E00;&#x65F6;&#x95F4;&#x67E5;&#x770B;&#xFF0C;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x66F4;&#x65B0;&#x5230;33&#x671F;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x597D;&#x7684;&#x94FE;&#x63A5;&#x53EF;&#x4EE5; issue Computer Science Learning Notes&#x8FD9;&#x662F;&#x4E00;&#x4E2A; Java &#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6;&#x5E93;&#xFF0C;&#x603B;&#x7ED3;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x6392;&#x7248;&#x4E5F;&#x975E;&#x5E38;&#x6F02;&#x4EAE;&#xFF0C;&#x4E0D;&#x7BA1;&#x662F;&#x5E94;&#x4ED8;&#x9762;&#x8BD5;&#x8FD8;&#x662F;&#x63D0;&#x5347;&#x81EA;&#x5DF1;&#x90FD;&#x5F88;&#x6709;&#x5E2E;&#x52A9;&#xFF0C;&#x4E00;&#x5171;&#x5305;&#x62EC;&#x5341;&#x4E2A;&#x7248;&#x5757;]]></content>
      <categories>
        <category>monthly</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[堆排序]]></title>
    <url>%2F2018%2F11%2F23%2F%E5%A0%86%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#x770B;&#x5230;&#x4E00;&#x7BC7;&#x9762;&#x7ECF;&#xFF0C;&#x7B97;&#x6CD5;&#x9898;&#x662F;&#x624B;&#x5199;&#x5806;&#x6392;&#x5E8F;&#xFF0C;&#x300A;&#x7B97;&#x6CD5;&#x300B;&#x653E;&#x5728;&#x4E66;&#x67B6;&#x5DF2;&#x7ECF;&#x6709;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x4E86;&#xFF0C;&#x60F3;&#x8BD5;&#x8BD5;&#x80FD;&#x4E0D;&#x80FD;&#x5199;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x800C;&#x5E76;&#x6CA1;&#x6709;&#xFF0C;&#x6240;&#x4EE5;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B; &#x81EA;&#x9876;&#x5230;&#x5E95;&#x6784;&#x9020;&#x5806;&#x8FD9;&#x662F;&#x4E00;&#x9053; lintcode&#x4E0A;&#x9762;&#x7684;&#x9898;&#x76EE;&#x5806;&#x5316; &#x6784;&#x9020;&#x4E00;&#x4E2A;&#x5806;&#x53EA;&#x9700;&#x8981;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x6B21;&#x53EA;&#x8981;&#x4FDD;&#x8BC1;&#x6240;&#x904D;&#x5386;&#x5230;&#x7684;&#x4F4D;&#x5B50;&#x80FD;&#x6EE1;&#x8DB3;&#x5806;&#x7684;&#x6761;&#x4EF6; 12345678910111213141516171819202122232425public class Solution { /* * @param A: Given an integer array * @return: nothing */ public void heapify(int[] A) { for (int i = 0; i &lt; A.length; i++) { swim(A, i); } } // &#x4E0A;&#x6D6E; private void swim(int[] A, int i) { while(i &gt; 0 &amp;&amp; A[i] &lt; A[(i-1) / 2]) { swap(A, i, (i-1) / 2); i = (i-1) / 2; } } private void swap(int[] A, int i, int j) { int temp = A[i]; A[i] = A[j]; A[j] = temp; }} &#x81EA;&#x5E95;&#x5230;&#x9876;&#x6784;&#x9020;&#x5806;&#x800C;&#x5806;&#x6392;&#x5E8F;&#x91C7;&#x7528;&#x7684;&#x662F;&#x81EA;&#x5E95;&#x5230;&#x9876;&#x6784;&#x9020;&#x5806;&#xFF0C;&#x6BCF;&#x6B21;&#x628A;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4EA4;&#x6362;&#xFF0C;&#x4EA4;&#x6362;&#x4E4B;&#x540E;&#x628A;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E0B;&#x6C89;&#xFF0C;&#x540C;&#x65F6;&#x5806;&#x6570;&#x7EC4;&#x51CF;&#x4E00;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x4EE3;&#x7801; 1234567891011121314151617181920212223242526272829303132333435363738394041public class Heap { private static void heapSort(int[] array) { int len = array.length - 1; for (int i = (len - 1) / 2; i &gt;= 0; i--) { sink(array, i, len); } printArr(array); while (len &gt;= 0) { swap(array, 0, len); sink(array, 0, --len); } } private static void sink(int[] array, int i, int len) { while (i * 2 + 1 &lt;= len) { int j = i * 2 + 1; if (j + 1 &lt;= len &amp;&amp; array[j+1] &gt; array[j]) j++; if (array[i] &gt; array[j]) break; swap(array, i, j); i = j; } } private static void swap(int[] array, int i, int j) { int temp = array[i]; array[i] = array[j]; array[j] = temp; } public static void main(String[] args) { int[] array = {2, 3, 1, 6, 4, 5, 2, 1}; heapSort(array); printArr(array); } private static void printArr(int[] array) { Arrays.stream(array).forEach(a -&gt; System.out.print(a + &quot; &quot;)); System.out.println(); }}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>堆排序</tag>
        <tag>lintcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell入门]]></title>
    <url>%2F2018%2F10%2F04%2FShell%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Shell&#x662F;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF08;&#x5185;&#x6838;&#xFF09;&#x4E0E;&#x7528;&#x6237;&#x4E4B;&#x95F4;&#x7684;&#x6865;&#x6881; Shell &#x662F;&#x4E00;&#x4E2A;&#x7528; C &#x8BED;&#x8A00;&#x7F16;&#x5199;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x5B83;&#x662F;&#x7528;&#x6237;&#x4F7F;&#x7528; Linux &#x7684;&#x6865;&#x6881;&#x3002;Shell &#x65E2;&#x662F;&#x4E00;&#x79CD;&#x547D;&#x4EE4;&#x8BED;&#x8A00;&#xFF0C;&#x53C8;&#x662F;&#x4E00;&#x79CD;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x8BED;&#x8A00;&#x3002; Shell &#x662F;&#x6307;&#x4E00;&#x79CD;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x754C;&#x9762;&#xFF0C;&#x7528;&#x6237;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x754C;&#x9762;&#x8BBF;&#x95EE;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5185;&#x6838;&#x7684;&#x670D;&#x52A1;&#x3002; Ken Thompson &#x7684; sh &#x662F;&#x7B2C;&#x4E00;&#x79CD; Unix Shell&#xFF0C;Windows Explorer &#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x56FE;&#x5F62;&#x754C;&#x9762; Shell Shell&#x7F16;&#x7A0B;&#x4E4B;Hello World&#x7F16;&#x5199;&#x4E00;&#x4E2A;hello world shell&#x4E00;&#x822C;&#x4F7F;&#x7528;.sh&#x4F5C;&#x4E3A;&#x540E;&#x7F00; 123456#!/bin/bash # &#x4F7F;&#x7528;/bin/sh&#x6765;&#x89E3;&#x91CA;&#x6267;&#x884C; # auto echo hello world! # &#x89E3;&#x91CA;&#x8FD9;&#x4E2A;&#x811A;&#x672C;&#x662F;&#x5E72;&#x4EC0;&#x4E48;&#x7684;# by authors cuzz # &#x4F5C;&#x8005;&#x548C;&#x65F6;&#x95F4;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;echo &quot;hello world!&quot; &#x7ED9;&#x811A;&#x672C;&#x6DFB;&#x52A0;&#x6267;&#x884C;&#x6743;&#x9650; 1&gt; chmod +x hello.sh Shell&#x7F16;&#x7A0B;&#x4E4B;&#x53D8;&#x91CF;Shell&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4E24;&#x7C7B;&#xFF1A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x548C;&#x73AF;&#x5883;&#x53D8;&#x91CF; 12345678#!/bin/bash# define path variables# by authors cuzzname=cuzz # &#x7B49;&#x53F7;&#x4E24;&#x8FB9;&#x4E0D;&#x80FD;&#x6709;&#x7A7A;&#x683C;echo &quot;my name is $name&quot; # &#x4F7F;&#x7528;$&#x5F15;&#x7528; &#x57FA;&#x672C;&#x53D8;&#x91CF; 1234567echo $PWD # &#x5F53;&#x524D;&#x8DEF;&#x5F84;echo $0 # &#x811A;&#x672C;&#x540D;echo $1 # &#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;echo $2 # &#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;echo $? # &#x5224;&#x65AD;&#x4E0A;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#x662F;&#x5426;&#x6B63;&#x786E;echo $* # &#x6240;&#x6709;&#x53C2;&#x6570;echo $# # &#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570; Shell&#x7F16;&#x7A0B;&#x4E4B;if&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#x6BD4;&#x8F83;&#x5927;&#x5C0F; 12345678910111213#!/bin/bash# if test# by authors cuzznum=100# &#x8BA1;&#x7B97;&#x4F7F;&#x7528;&#x4E24;&#x4E2A;&#x5C0F;&#x62EC;&#x53F7;if (($num &gt; 10)); then echo &quot;this num greater than 10.&quot;else echo &quot;this num littler than 10.&quot;fi &#x903B;&#x8F91;&#x8FD0;&#x7B97;&#x7B26; &#x8FD0;&#x7B97;&#x7B26; &#x8BF4;&#x660E; &#x4E3E;&#x4F8B; -eq &#x68C0;&#x6D4B;&#x4E24;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x76F8;&#x7B49;&#x8FD4;&#x56DE; true&#x3002; [ \$a -eq $b ] &#x8FD4;&#x56DE; false&#x3002; -ne &#x68C0;&#x6D4B;&#x4E24;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x4E0D;&#x76F8;&#x7B49;&#xFF0C;&#x4E0D;&#x76F8;&#x7B49;&#x8FD4;&#x56DE; true&#x3002; [ \$a -ne $b ] &#x8FD4;&#x56DE; true&#x3002; -gt &#x68C0;&#x6D4B;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x53F3;&#x8FB9;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ \$a -gt $b ] &#x8FD4;&#x56DE; false&#x3002; -lt &#x68C0;&#x6D4B;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x53F3;&#x8FB9;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ \$a -lt $b ] &#x8FD4;&#x56DE; true&#x3002; -ge &#x68C0;&#x6D4B;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x53F3;&#x8FB9;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ \$a -ge $b ] &#x8FD4;&#x56DE; false&#x3002; -le &#x68C0;&#x6D4B;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x662F;&#x5426;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x53F3;&#x8FB9;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ \$a -le $b ] &#x8FD4;&#x56DE; true&#x3002; &#x76EE;&#x5F55; &#x64CD;&#x4F5C;&#x7B26; &#x8BF4;&#x660E; &#x4E3E;&#x4F8B; -d file &#x68C0;&#x6D4B;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x662F;&#x76EE;&#x5F55;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ -d $file ] &#x8FD4;&#x56DE; false&#x3002; -f file &#x68C0;&#x6D4B;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x662F;&#x666E;&#x901A;&#x6587;&#x4EF6;&#xFF08;&#x65E2;&#x4E0D;&#x662F;&#x76EE;&#x5F55;&#xFF0C;&#x4E5F;&#x4E0D;&#x662F;&#x8BBE;&#x5907;&#x6587;&#x4EF6;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ -f $file ] &#x8FD4;&#x56DE; true&#x3002; -p file &#x68C0;&#x6D4B;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x662F;&#x6709;&#x540D;&#x7BA1;&#x9053;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ -p $file ] &#x8FD4;&#x56DE; false&#x3002; -e file &#x68C0;&#x6D4B;&#x6587;&#x4EF6;&#xFF08;&#x5305;&#x62EC;&#x76EE;&#x5F55;&#xFF09;&#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x8FD4;&#x56DE; true&#x3002; [ -e $file ] &#x8FD4;&#x56DE; true&#x3002; &#x521B;&#x5EFA;&#x6587;&#x4EF6; 12345678910111213#!/bin/bash# if test# by authors cuzzDIR=cuzzif [ ! -d $DIR ]; then # &#x90FD;&#x6709;&#x7A7A;&#x683C; mkdir $DIR echo &quot;this $DIR create success.&quot;else echo &quot;this dir is exit.&quot;fi &#x6D4B;&#x8BD5;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B58;&#x5728; 123456789101112#!/bin/bash# if test# by authors cuzzfile=test.txtif [ ! -e $file ]; then echo &quot;OK&quot; &gt;&gt; $file # &gt;&gt;&#x662F;&#x8FFD;&#x52A0;&#x5185;&#x5BB9; &gt;&#x662F;&#x8986;&#x76D6;&#x5185;&#x5BB9;else cat $filefi mysql&#x5907;&#x4EFD; 12345678910111213141516171819202122232425262728293031323334353637#!/bin/bash# auto backup mysql db# by authors cuzz# define backup pathBAK_DIR=/data/backup/`date +%Y%m%d` # &#x53CD;&#x5F15;&#x53F7;&#x53EF;&#x4EE5;&#x628A;&#x91CC;&#x9762;&#x5F53;&#x4F5C;&#x547D;&#x4EE4;&#x6765;&#x89E3;&#x6790; # mysqlMYSQLDB=testMYSQLUSER=rootMYSQLPW=123456MYSQLCMD=/usr/bin/mysqldump # &#x5907;&#x4EFD;&#x547D;&#x4EE4;# &#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;rootif [ $UID -ne 0 ]; then echo &quot;Only root can execute Shell.&quot; exitfiif [ ! -d $BAK_DIR ]; then mkdir -p $BAK_DIR # -p &#x7236;&#x76EE;&#x5F55;&#x4E0D;&#x5B58;&#x5728;&#x5C31;&#x521B;&#x5EFA; echo &quot;The $BAK_DIR create success.&quot;else echo &quot;This $BAK_DIR is exist.&quot;fi# mysql backup command$MYSQLCMD -u$MYSQLUSER -p$MYSQLPW -d $MYSQLDB &gt;$BAK_DIR/$MYSQLDB.sqlif [ $? -eq 0 ]; then echo &quot;backup success.&quot;else echo &quot;backup fail.&quot;fi Shell&#x7F16;&#x7A0B;&#x4E4B;for&#x5FAA;&#x73AF;&#x57FA;&#x672C;&#x8BED;&#x53E5; 123456#!/bin/bashfor i in `seq 1 15`do echo &quot;the number is $i.&quot;done &#x6C42;&#x548C; 12345678910#!/bin/bashsum=0for ((i=1; i&lt;=100; i++)) # &#x53CC;&#x62EC;&#x53F7;&#x7528;&#x4E8E;&#x8FD0;&#x7B97;&#x76F8;&#x5F53;&#x4E0E;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x7684;&#x5355;&#x62EC;&#x53F7;do sum=`expr $sum + $i` # expr&#x7528;&#x4E8E;&#x8BA1;&#x7B97;doneecho &quot;$sum&quot; &#x6253;&#x5305;&#xFF0C;&#x53EA;&#x80FD;&#x6253;&#x5305;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x4F1A;&#x628A;&#x524D;&#x9762;&#x7684;&#x8986;&#x76D6;&#x4E86; 1234567#!/bin/bashfor file in `find ./ -name &quot;*.sh&quot;`do tar -czf all.tgz $filedone Shell&#x7F16;&#x7A0B;&#x4E4B;while&#x5FAA;&#x73AF;&#x4F7F;&#x7528; 12345678#!/bin/bashi=0while [[ $i -lt 10 ]] # (( $i &lt; 10))&#x662F;&#x4E00;&#x6837;&#x7684;do echo &quot;$i&quot; ((i++))done &#x7ED3;&#x5408;read&#x4F7F;&#x7528; 123456#!/bin/bashwhile read line # &#x628A;&#x8BFB;&#x53D6;&#x7684;&#x4E1C;&#x897F;&#x8D4B;&#x503C;&#x7ED9;linedo echo $linedone &lt;/etc/hosts # &#x4ECE;&#x54EA;&#x91CC;&#x8BFB;&#x53D6; Shell&#x7F16;&#x7A0B;&#x4E4B;&#x6570;&#x7EC4;Shell &#x6570;&#x7EC4;&#x7528;&#x62EC;&#x53F7;&#x6765;&#x8868;&#x793A;&#xFF0C;&#x5143;&#x7D20;&#x7528;&#x201D;&#x7A7A;&#x683C;&#x201D;&#x7B26;&#x53F7;&#x5206;&#x5272;&#x5F00;&#xFF0C;&#x8BED;&#x6CD5;&#x683C;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213my_array=(A B &quot;C&quot; D) # &#x5B9A;&#x4E49;&#x6570;&#x7EC4;array_name[0]=value0 # &#x4F7F;&#x7528;&#x4E0B;&#x6807;&#x6765;&#x5B9A;&#x4E49;array_name[1]=value1array_name[2]=value2${array_name[0]} # &#x8BFB;&#x53D6;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;${my_array[*]} # &#x8BFB;&#x53D6;&#x6240;&#x6709;&#x5143;&#x7D20; ${my_array[@]} # &#x8BFB;&#x53D6;&#x6240;&#x6709;&#x5143;&#x7D20;${#my_array[*]} # &#x8BFB;&#x53D6;&#x6570;&#x7EC4;&#x957F;&#x5EA6;${#my_array[@]} # &#x8BFB;&#x53D6;&#x6570;&#x7EC4;&#x957F;&#x5EA6; Shell&#x7F16;&#x7A0B;&#x4E4B;&#x51FD;&#x6570;&#x65E0;&#x8FD4;&#x56DE;&#x503C;&#x5F97;&#x51FD;&#x6570; 12345678sayHello(){ # &#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x4E00; echo &quot;hello&quot;}function sayHelloWorld(){ # &#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x4E8C; echo &quot;hello world&quot;}sayhell # &#x4F7F;&#x7528;&#x51FD;&#x6570; &#x6709;&#x8FD4;&#x56DE;&#x503C;&#x5F97;&#xFF0C;&#x4F7F;&#x7528;return&#x53EA;&#x80FD;&#x8FD4;&#x56DE;0-255 123456789function sum(){ returnValue=$(( $1 + $2 )) return $returnValue}sum 22 4echo $? &#x53EF;&#x4EE5;&#x4F7F;&#x7528;echo&#x6765;&#x4F20;&#x9012;&#x53C2;&#x6570; 12345678910111213function length(){ str=$1 result=0 if [ &quot;$str&quot; != &quot;&quot; ] ; then result=${#str} fi echo &quot;$result&quot;}len=$(length &quot;abc123&quot;) # &#x8C03;&#x7528;echo &quot;The string&apos;s length is $len &quot; Shell&#x7F16;&#x7A0B;&#x4E4B;sed&#x547D;&#x4EE4;&#x628A;test.txt&#x4E2D;&#x7684;old&#x4FEE;&#x6539;&#x4E3A;new&#xFF0C;&#x8981;&#x4F7F;&#x7528;-i&#x624D;&#x80FD;&#x63D2;&#x5165; 1&gt; sed -i &apos;s/old/new/s&apos; test.txt &#x5728;&#x6BCF;&#x884C;&#x884C;&#x524D;&#x9762;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;cuzz 1&gt; sed -i sed &apos;s/^/&amp;cuzz/g&apos; test.txt &#x5728;&#x6BCF;&#x884C;&#x7684;&#x672B;&#x5C3E;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;cuzz 1&gt; sed -i &apos;s/$/&amp; cuzz/g&apos; test.txt &#x5339;&#x914D;&#x67D0;&#x4E00;&#x884C;&#xFF0C;&#x5728;&#x4E0B;&#x65B9;&#x63D2;&#x5165;&#x4E00;&#x884C;&#xFF0C;&#x627E;&#x5230;cuzz&#x8FD9;&#x884C;&#x5728;&#x4E0B;&#x65B9;&#x63D2;&#x5165;#### 1&gt; sed &apos;/cuzz/a #######&apos; test.txt &#x5728;&#x4E4B;&#x524D;&#x6DFB;&#x52A0;&#x4E00;&#x884C;&#xFF0C;&#x53EA;&#x8981;&#x628A;a&#x6539;&#x6210;i 1&gt; sed &apos;/cuzz/i #######&apos; test.txt &#x6253;&#x5370; 123&gt; sed -n &apos;/cuzz/p&apos; test.txt # &#x6253;&#x5370;&#x542B;&#x6709;cuzz&#x8FD9;&#x4E00;&#x884C;&gt; sed -n &apos;1p&apos; test.txt # &#x6253;&#x5370;&#x7B2C;&#x4E00;&#x884C;&gt; sed -n &apos;1,5p&apos; text.txt # &#x6253;&#x5370;1&#x5230;5&#x884C; &#x67E5;&#x627E;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x503C; number.txt 123412 324 56 0034 -23 345345 349- 245 345 345 0989 0459 -25 &#x547D;&#x4EE4; 123456cat number.txt | sed &apos;s/ /\n/g&apos; | grep -v &quot;^$&quot; | sort -nr | sed -n &apos;1p;$p&apos;sed &apos;s/ /\n/g&apos; # &#x628A;&#x6240;&#x6709;&#x7A7A;&#x683C;&#x6362;&#x6210;&#x6362;&#x884C;grep -v &quot;^$&quot; # &#x53BB;&#x6389;&#x6240;&#x6709;&#x7A7A;&#x683C;sort -nr # &#x964D;&#x5E8F;&#x6392;&#x5217;sed -n &apos;1p;$p # &#x627E;&#x51FA;&#x7B2C;1&#x884C;&#x548C;&#x6700;&#x540E;&#x4E00;&#x884C; Shell&#x7F16;&#x7A0B;&#x4E4B;grep&#x547D;&#x4EE4; -a &#xFF1A;&#x5C06; binary &#x6587;&#x4EF6;&#x4EE5; text &#x6587;&#x4EF6;&#x7684;&#x65B9;&#x5F0F;&#x641C;&#x5BFB;&#x6570;&#x636E; -c &#xFF1A;&#x8BA1;&#x7B97;&#x627E;&#x5230; &#x2018;&#x641C;&#x5BFB;&#x5B57;&#x7B26;&#x4E32;&#x2019; &#x7684;&#x6B21;&#x6570; -i &#xFF1A;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x6240;&#x4EE5;&#x5927;&#x5C0F;&#x5199;&#x89C6;&#x4E3A;&#x76F8;&#x540C; -n &#xFF1A;&#x987A;&#x4FBF;&#x8F93;&#x51FA;&#x884C;&#x53F7; -v &#xFF1A;&#x53CD;&#x5411;&#x9009;&#x62E9;&#xFF0C;&#x4EA6;&#x5373;&#x663E;&#x793A;&#x51FA;&#x6CA1;&#x6709; &#x2018;&#x641C;&#x5BFB;&#x5B57;&#x7B26;&#x4E32;&#x2019; &#x5185;&#x5BB9;&#x7684;&#x90A3;&#x4E00;&#x884C; &#x2013;color=auto &#xFF1A;&#x53EF;&#x4EE5;&#x5C06;&#x627E;&#x5230;&#x7684;&#x5173;&#x952E;&#x8BCD;&#x90E8;&#x5206;&#x52A0;&#x4E0A;&#x989C;&#x8272;&#x7684;&#x663E;&#x793A; egrep &#x548C;grep -E &#x76F8;&#x540C;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F; Shell&#x7F16;&#x7A0B;&#x4E4B;awk&#x547D;&#x4EE4;123456789# &#x6BCF;&#x884C;&#x6309;&#x7A7A;&#x683C;&#x6216;TAB&#x5206;&#x5272;cat test.txt | awk &apos;{print $1}&apos; # &#x884C;&#x5339;&#x914D;&#x8BED;&#x53E5; awk &apos;&apos; &#x53EA;&#x80FD;&#x7528;&#x5355;&#x5F15;&#x53F7;# &#x6307;&#x5B9A;&#x5206;&#x5272;awk -F #-F&#x76F8;&#x5F53;&#x4E8E;&#x5185;&#x7F6E;&#x53D8;&#x91CF;FS, &#x6307;&#x5B9A;&#x5206;&#x5272;&#x5B57;&#x7B26;cat test.txt | awk -F: &apos;{print $1}&apos; # &#x4EE5;&#x5206;&#x53F7;&#x5206;&#x5272;# &#x6307;&#x5B9A;&#x6DFB;&#x52A0;&#x67D0;&#x4E9B;&#x5185;&#x5BB9;cat test.txt | awk -F: &apos;{print &quot;haha&quot; $1}&apos; # &#x63D0;&#x524D;&#x51FA;&#x6765;&#x518D;&#x6DFB;&#x52A0;haha Shell&#x7F16;&#x7A0B;&#x4E4B;find&#x547D;&#x4EE4;&#x57FA;&#x672C;&#x547D;&#x4EE4; 123456find /dir -name &quot;test.txt&quot; # &#x5728;/dir&#x76EE;&#x5F55;&#x4E0B;&#x67E5;&#x627E;find . -name &quot;test.txt&quot; # &#x5728;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x627E; find . -maxdepth 1 -name &quot;text.txt&quot; # &#x53EA;&#x904D;&#x5386;&#x4E00;&#x5C42;find . -type f -name &quot;text&quot; # &#x6307;&#x5B9A;&#x7C7B;&#x578B;find . -name &quot;text&quot; -mtime -1 # &#x6307;&#x5B9A;&#x65F6;&#x95F4;find . -size +20M # &#x6307;&#x5B9A;&#x5927;&#x5C0F; &#x67E5;&#x627E;&#x5E76;&#x6267;&#x884C;&#x5176;&#x4ED6;&#x547D;&#x4EE4; 1find . -name &quot;text.txt&quot; -exec rm -rf {} \; # &#x540E;&#x9762;{} \&#x662F;&#x56FA;&#x5B9A;&#x683C;&#x5F0F;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注解驱动开发（三）]]></title>
    <url>%2F2018%2F09%2F25%2FSpring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x6CE8;&#x89E3;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x914D;&#x7F6E;&#xFF0C;&#x63D0;&#x9AD8;&#x6548;&#x7387; The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform. &#x5C5E;&#x6027;&#x8D4B;&#x503C;@value&#x8D4B;&#x503C;&#x4F7F;&#x7528;@Value&#x8D4B;&#x503C; &#x57FA;&#x672C;&#x6570;&#x503C; &#x53EF;&#x4EE5;&#x5199;SPEL&#x8868;&#x8FBE;&#x5F0F; #{} &#x53EF;&#x4EE5;${}&#x83B7;&#x53D6;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4FE1;&#x606F;&#xFF08;&#x5728;&#x8FD0;&#x884C;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x4E2D;&#x7684;&#x503C;&#xFF09; &#x4F7F;&#x7528;xml&#x65F6;&#x5019;&#x5BFC;&#x5165;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x662F; 1&lt;context:property-placeholder location=&quot;classpath:person.properties&quot;/&gt; &#x4F7F;&#x7528;&#x6CE8;&#x89E3;&#x53EF;&#x4EE5;&#x5728;&#x914D;&#x7F6E;&#x7C7B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;@PropertySource&#x6CE8;&#x89E3;&#x628A;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;k/v&#x4FDD;&#x5B58;&#x5230;&#x8FD0;&#x884C;&#x7684;&#x73AF;&#x5883;&#x4E2D; &#x4F7F;&#x7528;${key}&#x6765;&#x83B7;&#x53D6; 1234567891011121314/** * @Author: cuzz * @Date: 2018/9/24 18:43 * @Description: */@PropertySource(value = {&quot;classpath:/person.properties&quot;})@Configurationpublic class MainConfigOfPropertyValue { @Bean public Person person() { return new Person(); }} Person &#x7C7B; 123456789101112@Datapublic class Person { @Value(&quot;vhuj&quot;) private String name; @Value(&quot;#{20-2}&quot;) private Integer age; @Value(&quot;${person.nickName}&quot;) private String nickName;} &#x6D4B;&#x8BD5; 1234567891011@Testpublic void test01() { printBean(applicationContext); System.out.println(&quot;---------------------------&quot;); Person person = (Person) applicationContext.getBean(&quot;person&quot;); System.out.println(person); System.out.println(&quot;---------------------------&quot;);} &#x8F93;&#x51FA; 123---------------------------Person(name=vhuj, age=18, nickName=&#x4E09;&#x4E09;)--------------------------- &#x81EA;&#x52A8;&#x88C5;&#x914D;@Autowired@Qualifier@Primary&#x81EA;&#x52A8;&#x8F6C;&#x914D;&#xFF1A; Spring&#x5229;&#x7528;&#x4F9D;&#x8D56;&#x6CE8;&#x5165;&#xFF08;DI&#xFF09;&#xFF0C;&#x5B8C;&#x6210;&#x5BF9;IOC&#x5BB9;&#x5668;&#x4E2D;&#x5404;&#x4E2A;&#x7EC4;&#x4EF6;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x8D4B;&#x503C; @Autowired&#x81EA;&#x52A8;&#x6CE8;&#x5165;: a. &#x9ED8;&#x8BA4;&#x4F18;&#x5148;&#x6309;&#x7167;&#x7C7B;&#x578B;&#x53BB;&#x5BB9;&#x5668;&#x4E2D;&#x5BFB;&#x627E;&#x5BF9;&#x5E94;&#x7684;&#x7EC4;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x53BB;&#x8D4B;&#x503C; b. &#x5982;&#x679C;&#x627E;&#x5230;&#x5230;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x7EC4;&#x4EF6;&#xFF0C;&#x518D;&#x5C06;&#x5C5E;&#x6027;&#x540D;&#xFF08;BookDao bookdao&#xFF09;&#x4F5C;&#x4E3A;&#x7EC4;&#x4EF6;&#x7684;id&#x53BB;&#x5BB9;&#x5668;&#x4E2D;&#x67E5;&#x627E; c. &#x63A5;&#x4E0B;&#x6765;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;@Qualifier(&quot;bookdao&quot;)&#x660E;&#x786E;&#x6307;&#x5B9A;&#x9700;&#x8981;&#x88C5;&#x914D;&#x7684;id d. &#x9ED8;&#x8BA4;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6307;&#x5B9A; @Autowired(required=false)&#xFF0C;&#x6307;&#x5B9A;&#x975E;&#x5FC5;&#x987B; @Primary&#x8BA9;Spring&#x81EA;&#x52A8;&#x88C5;&#x914D;&#x65F6;&#x9996;&#x5148;&#x88C5;&#x914D; &#x81EA;&#x52A8;&#x88C5;&#x914D;@Resource&#x548C;@InjectSpring&#x8FD8;&#x652F;&#x6301;&#x4F7F;&#x7528;@Resource (JSR250) &#x548C;@Inject (JSR330) &#x6CE8;&#x89E3;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x662F;java&#x89C4;&#x8303; @Resource&#x548C;@Autowired&#x4E00;&#x6837;&#x5B9E;&#x73B0;&#x81EA;&#x52A8;&#x88C5;&#x914D;&#x529F;&#x80FD;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x6309;&#x7EC4;&#x4EF6;&#x540D;&#x79F0;&#x8FDB;&#x884C;&#x88C5;&#x914D;&#x7684; &#x6CA1;&#x6709;&#x652F;&#x6301;@Primary&#x548C;@Autowird(required=false)&#x7684;&#x529F;&#x80FD; &#x81EA;&#x52A8;&#x88C5;&#x914D;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x7684;&#x81EA;&#x52A8;&#x88C5;&#x914D;@Autowired&#xFF1A;&#x6784;&#x9020;&#x5668;&#x3001;&#x53C2;&#x6570;&#x3001;&#x65B9;&#x6CD5;&#x5C5E;&#x6027;&#x7B49; &#x6807;&#x6CE8;&#x5230;&#x65B9;&#x6CD5;&#x4F4D;&#x5B50;&#x4E0A;@Bean+&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#xFF0C;&#x53C2;&#x6570;&#x4ECE;&#x5BB9;&#x5668;&#x4E2D;&#x83B7;&#x53D6; 12345678910111213141516171819202122232425/** * @Author: cuzz * @Date: 2018/9/24 20:57 * @Description: */public class Boss { // &#x5C5E;&#x6027; @Autowired private Car car; // &#x6784;&#x9020;&#x5668; &#x5982;&#x679C;&#x6784;&#x9020;&#x5668;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6709;&#x53C2;&#x6784;&#x9020;&#x5668;&#x53EF;&#x4EE5;&#x7701;&#x7565; @Autowired public Boss(@Autowired Car car) { } public Car getCar() { return car; } // set&#x65B9;&#x6CD5; @Autowired // &#x53C2;&#x6570; public void setCar(@Autowired Car car) { this.car = car; }} &#x81EA;&#x52A8;&#x88C5;&#x914D;Aware&#x6CE8;&#x5165;Spring&#x5E95;&#x5C42;&#x6CE8;&#x89E3;&#x81EA;&#x5B9A;&#x4E49;&#x7EC4;&#x4EF6;&#x60F3;&#x8981;&#x4F7F;&#x7528;Spring&#x5BB9;&#x5668;&#x5E95;&#x5C42;&#x7684;&#x4E00;&#x4E9B;&#x7EC4;&#x4EF6;&#xFF08;ApplicationContext&#xFF0C;BeanFactory &#x7B49;&#x7B49;&#xFF09;&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;&#x7EC4;&#x4EF6;&#x5B9E;&#x73B0;xxxAware&#xFF0C;&#x5728;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x8C03;&#x7528;&#x63A5;&#x53E3;&#x89C4;&#x5B9A;&#x7684;&#x65B9;&#x6CD5;&#x6CE8;&#x5165;&#x76F8;&#x5173;&#x7684;&#x7EC4;&#x4EF6; 1234567891011/** * Marker superinterface indicating that a bean is eligible to be * notified by the Spring container of a particular framework object * through a callback-style method. Actual method signature is * determined by individual subinterfaces, but should typically * consist of just one void-returning method that accepts a single * argument. */public interface Aware {} &#x6211;&#x4EEC;&#x5B9E;&#x73B0;&#x51E0;&#x4E2A;&#x5E38;&#x89C1;&#x7684;Aware&#x63A5;&#x53E3; 12345678910111213141516171819202122232425/** * @Author: cuzz * @Date: 2018/9/25 10:18 * @Description: */@Componentpublic class Red implements BeanNameAware ,BeanFactoryAware, ApplicationContextAware { private ApplicationContext applicationContext; @Override public void setBeanName(String name) { System.out.println(&quot;&#x5F53;&#x524D;Bean&#x7684;&#x540D;&#x5B57;: &quot; + name); } @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { System.out.println(&quot;&#x5F53;&#x524D;&#x7684;BeanFactory: &quot; + beanFactory); } @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { this.applicationContext = applicationContext; System.out.println(&quot;&#x4F20;&#x5165;&#x7684;ioc: &quot; + applicationContext); }} &#x6CE8;&#x5165;&#x5230;&#x914D;&#x7F6E;&#x4E2D;&#x6D4B;&#x8BD5; 12345678910111213/** * @Author: cuzz * @Date: 2018/9/25 10:28 * @Description: */public class IOCTestAware { @Test public void test01() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfigOfAware.class); }} &#x6D4B;&#x8BD5;&#x7ED3;&#x679C; 123&#x5F53;&#x524D;Bean&#x7684;&#x540D;&#x5B57;: red&#x5F53;&#x524D;&#x7684;BeanFactory: org.springframework.beans.factory.support.DefaultListableBeanFactory@159c4b8: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,mainConfigOfAware,red]; root of factory hierarchy&#x4F20;&#x5165;&#x7684;ioc: org.springframework.context.annotation.AnnotationConfigApplicationContext@1e89d68: startup date [Tue Sep 25 10:29:17 CST 2018]; root of context hierarchy &#x628A;Spring&#x81EA;&#x5B9A;&#x4E49;&#x7EC4;&#x4EF6;&#x6CE8;&#x5165;&#x5230;&#x5BB9;&#x5668;&#x4E2D; &#x539F;&#x7406;&#xFF1A; 1public interface ApplicationContextAware extends Aware {} &#x901A;&#x8FC7; Debug &#x65B9;&#x5F0F;&#xFF0C;&#x5B9A;&#x4F4D;&#x5230; org.springframework.context.support.ApplicationContextAwareProcessor#postProcessBeforeInitialization 1234567891011121314151617181920212223@Overridepublic Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException { AccessControlContext acc = null; if (System.getSecurityManager() != null &amp;&amp; (bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware || bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware || bean instanceof MessageSourceAware || bean instanceof ApplicationContextAware)) { acc = this.applicationContext.getBeanFactory().getAccessControlContext(); } if (acc != null) { AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() { @Override public Object run() { invokeAwareInterfaces(bean); return null; } }, acc); } else { invokeAwareInterfaces(bean); // &#x8C03;&#x7528; } &#x8C03;&#x7528;&#x4E0B;&#x9762;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x6BCF;&#x79CD; xxxAware &#x63A5;&#x53E3;&#x4E2D;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x8C03;&#x7528;&#x76F8;&#x5E94;&#x7684;&#x65B9;&#x6CD5; 12345678910111213141516171819202122private void invokeAwareInterfaces(Object bean) { if (bean instanceof Aware) { if (bean instanceof EnvironmentAware) { ((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment()); } if (bean instanceof EmbeddedValueResolverAware) { ((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(this.embeddedValueResolver); } if (bean instanceof ResourceLoaderAware) { ((ResourceLoaderAware) bean).setResourceLoader(this.applicationContext); } if (bean instanceof ApplicationEventPublisherAware) { ((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(this.applicationContext); } if (bean instanceof MessageSourceAware) { ((MessageSourceAware) bean).setMessageSource(this.applicationContext); } if (bean instanceof ApplicationContextAware) { ((ApplicationContextAware) bean).setApplicationContext(this.applicationContext); } }} xxxAware&#x90FD;&#x662F;&#x901A;&#x8FC7;xxxProcessor&#x6765;&#x5904;&#x7406;&#x7684; &#x6BD4;&#x5982;&#xFF1A;ApplicationContextAware &#x5BF9;&#x5E94; ApplicationContextAwareProcessor &#x81EA;&#x52A8;&#x88C5;&#x914D;@Profile&#x73AF;&#x5883;&#x642D;&#x5EFA;Profile&#x662F;Spring&#x4E3A;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5F53;&#x524D;&#x73AF;&#x5883;&#xFF0C;&#x52A8;&#x6001;&#x7684;&#x6FC0;&#x6D3B;&#x548C;&#x5207;&#x6362;&#x4E00;&#x7CFB;&#x7EC4;&#x4EF6;&#x7684;&#x529F;&#x80FD; a. &#x4F7F;&#x7528;&#x547D;&#x4EE4;&#x52A8;&#x6001;&#x53C2;&#x6570;&#x6FC0;&#x6D3B;&#xFF1A;&#x865A;&#x62DF;&#x673A;&#x53C2;&#x6570;&#x4F4D;&#x5B50;&#x52A0;&#x8F7D; -Dspring.profiles.active=test b. &#x4F7F;&#x7528;&#x4EE3;&#x7801;&#x6FC0;&#x6D3B;&#x73AF;&#x5883; &#x6211;&#x4EEC;&#x60F3;&#x914D;&#x7F6E;&#x7C7B; 1234567891011121314151617181920212223/** * @Author: cuzz * @Date: 2018/9/25 10:47 * @Description: */@Configurationpublic class MainConfigOfProfile { @Profile(value = &quot;test&quot;) @Bean(value = &quot;testDataSource&quot;) public DataSource testDataSource() { System.out.println(&quot;testDataSource&quot;); return null; } @Profile(value = &quot;dev&quot;) @Bean(value = &quot;devDataSource&quot;) public DataSource devDataSource() { System.out.println(&quot;devDataSource&quot;); return null; }} &#x6D4B;&#x8BD5; 12345678910111213141516171819/** * @Author: cuzz * @Date: 2018/9/25 10:59 * @Description: */public class IOCTestProfile { @Test public void test01() { // 1. &#x4F7F;&#x7528;&#x65E0;&#x53C2;&#x6784;&#x9020;&#x5668;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;applicationContext AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(); // 2. &#x8BBE;&#x7F6E;&#x8981;&#x6FC0;&#x6D3B;&#x7684;&#x73AF;&#x5883; applicationContext.getEnvironment().setActiveProfiles(&quot;test&quot;); // 3. &#x6CE8;&#x518C;&#x4E3B;&#x914D;&#x7F6E;&#x7C7B; applicationContext.register(MainConfigOfProfile.class); // 4. &#x542F;&#x52A8;&#x5237;&#x65B0;&#x5BB9;&#x5668; applicationContext.refresh(); }} &#x8F93;&#x51FA; 1testDataSource]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注解驱动开发（二）]]></title>
    <url>%2F2018%2F09%2F24%2FSpring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x6CE8;&#x89E3;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x914D;&#x7F6E;&#xFF0C;&#x63D0;&#x9AD8;&#x6548;&#x7387; The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform. &#x58F0;&#x660E;&#x5468;&#x671F;@Bean&#x6307;&#x5B9A;&#x521D;&#x59CB;&#x5316;&#x548C;&#x9500;&#x6BC1;&#x65B9;&#x6CD5;Bean&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;Bean&#x7684;&#x521B;&#x5EFA;&#x3001;&#x521D;&#x59CB;&#x5316;&#x548C;&#x9500;&#x6BC1;&#x662F;&#x7531;&#x5BB9;&#x5668;&#x5E2E;&#x6211;&#x4EEC;&#x7BA1;&#x7406;&#x7684; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x521D;&#x59CB;&#x5316;&#x548C;&#x9500;&#x6BC1;&#x65B9;&#x6CD5;&#xFF0C;&#x5BB9;&#x5668;&#x5728;&#x8FDB;&#x884C;&#x5230;&#x5F53;&#x524D;&#x751F;&#x547D;&#x5468;&#x671F;&#x7684;&#x65F6;&#x5019;&#x6765;&#x8C03;&#x7528;&#x6211;&#x4E70;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x521D;&#x59CB;&#x5316;&#x548C;&#x9500;&#x6BC1;&#x65B9;&#x6CD5; &#x6784;&#x9020;&#xFF08;&#x5BF9;&#x8C61;&#x521B;&#x5EFA;&#xFF09; &#x200B; &#x5355;&#x5B9E;&#x4F8B;&#xFF1A; &#x5728;&#x5BB9;&#x5668;&#x542F;&#x52A8;&#x7684;&#x65F6;&#x5019;&#x521B;&#x5EFA; &#x200B; &#x591A;&#x5B9E;&#x4F8B;&#xFF1A; &#x5728;&#x6BCF;&#x6B21;&#x83B7;&#x53D6;&#x7684;&#x65F6;&#x5019;&#x521B;&#x5EFA;&#x5BF9;&#x8C61; &#x6307;&#x5B9A;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x521D;&#x59CB;&#x5316;&#xFF1A;&#x5BF9;&#x8C61;&#x521B;&#x5EFA;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5E76;&#x8D4B;&#x503C;&#x5316;&#xFF0C;&#x8C03;&#x7528;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5; &#x9500;&#x6BC1;&#xFF1A;&#x5355;&#x5B9E;&#x4F8B;&#x662F;&#x5728;&#x5BB9;&#x5668;&#x5173;&#x95ED;&#x7684;&#x65F6;&#x5019;&#x9500;&#x6BC1;&#xFF0C;&#x591A;&#x5B9E;&#x4F8B;&#x5BB9;&#x5668;&#x4E0D;&#x4F1A;&#x7BA1;&#x7406;&#x8FD9;&#x4E2A;Bean&#xFF0C;&#x5BB9;&#x5668;&#x4E0D;&#x4F1A;&#x8C03;&#x7528;&#x9500;&#x6BC1;&#x65B9;&#x6CD5; &#x7F16;&#x5199;&#x4E00;&#x4E2A;Car&#x7C7B; 12345678910111213141516171819/** * @Author: cuzz * @Date: 2018/9/23 21:20 * @Description: */public class Car { public Car () { System.out.println(&quot;car constructor...&quot;); } public void init() { System.out.println(&quot;car...init...&quot;); } public void destroy() { System.out.println(&quot;car...destroy...&quot;); }} &#x5728;xml&#x4E2D;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;init-method&#x548C;destroy-method&#x65B9;&#x6CD5;&#xFF0C;&#x5982; 1&lt;bean id=&quot;car&quot; class=&quot;com.cuzz.bean.Car&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt; &#x4F7F;&#x7528;&#x6CE8;&#x89E3;&#x6211;&#x4EEC;&#x53EF;&#x4EE5; 12345678910111213/** * @Author: cuzz * @Date: 2018/9/24 12:49 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Configurationpublic class MainConfigOfLifecycle { @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;) public Car car() { return new Car(); }} &#x6D4B;&#x8BD5; 12345678910111213141516171819/** * @Author: cuzz * @Date: 2018/9/24 13:00 * @Description: */public class IOCTestLifeCycle { @Test public void test01() { // &#x521B;&#x5EFA;ioc&#x5BB9;&#x5668; AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfigOfLifecycle.class); System.out.println(&quot;&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...&quot;); // &#x5173;&#x95ED;&#x5BB9;&#x5668; System.out.println(&quot;---&gt;&#x5F00;&#x59CB;&#x5173;&#x95ED;&#x5BB9;&#x5668;&quot;); applicationContext.close(); System.out.println(&quot;---&gt;&#x5DF2;&#x7ECF;&#x5173;&#x95ED;&#x5BB9;&#x5668;&quot;); }} &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x5148;&#x521B;&#x5EFA;car&#xFF0C;&#x518D;&#x8C03;&#x7528;init&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x5BB9;&#x5668;&#x5173;&#x95ED;&#x65F6;&#x9500;&#x6BC1;&#x5B9E;&#x4F8B; 123456car constructor...car...init...&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...---&gt;&#x5F00;&#x59CB;&#x5173;&#x95ED;&#x5BB9;&#x5668;car...destroy...---&gt;&#x5DF2;&#x7ECF;&#x5173;&#x95ED;&#x5BB9;&#x5668; &#x5728;&#x914D;&#x7F6E;&#x6570;&#x636E;&#x6E90;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x5F88;&#x591A;&#x5C5E;&#x6027;&#x8D4B;&#x503C;&#xFF0C;&#x9500;&#x6BC1;&#x7684;&#x65F6;&#x5019;&#x8981;&#x628A;&#x8FDE;&#x63A5;&#x7ED9;&#x65AD;&#x5F00; &#x751F;&#x547D;&#x5468;&#x671F;InitializingBean&#x548C;DisposableBeanInitializingBean&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Bean&#x5B9E;&#x73B0;InitializingBean&#x6765;&#x5B9A;&#x4E49;&#x521D;&#x59CB;&#x5316;&#x903B;&#x8F91;&#xFF0C;&#x662F;&#x8BBE;&#x7F6E;&#x597D;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x4F1A;&#x8C03;&#x7528;afterPropertiesSet()&#x65B9;&#x6CD5; 1234567891011121314public interface InitializingBean { /** * Invoked by a BeanFactory after it has set all bean properties supplied * (and satisfied BeanFactoryAware and ApplicationContextAware). * &lt;p&gt;This method allows the bean instance to perform initialization only * possible when all bean properties have been set and to throw an * exception in the event of misconfiguration. * @throws Exception in the event of misconfiguration (such * as failure to set an essential property) or if initialization fails. */ void afterPropertiesSet() throws Exception;} DisposableBean&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Bean&#x5B9E;&#x73B0;DisposableBean&#x6765;&#x5B9A;&#x4E49;&#x9500;&#x6BC1;&#x903B;&#x8F91;&#xFF0C;&#x4F1A;&#x8C03;&#x7528;destroy()&#x65B9;&#x6CD5; 1234567891011public interface DisposableBean { /** * Invoked by a BeanFactory on destruction of a singleton. * @throws Exception in case of shutdown errors. * Exceptions will get logged but not rethrown to allow * other beans to release their resources too. */ void destroy() throws Exception;} &#x4F8B;&#x5B50;&#x7F16;&#x5199;&#x4E00;&#x4E2A;Cat&#x7C7B; 1234567891011121314151617181920212223/** * @Author: cuzz * @Date: 2018/9/24 13:36 * @Description: */public class Cat implements InitializingBean, DisposableBean{ public Cat() { System.out.println(&quot;cat constructor...&quot;); } @Override public void afterPropertiesSet() throws Exception { System.out.println(&quot;cat...init...&quot;); } @Override public void destroy() throws Exception { System.out.println(&quot;cat...destroy...&quot;); }} &#x6D4B;&#x8BD5; 123456cat constructor...cat...init...&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...---&gt;&#x5F00;&#x59CB;&#x5173;&#x95ED;&#x5BB9;&#x5668;cat...destroy...---&gt;&#x5DF2;&#x7ECF;&#x5173;&#x95ED;&#x5BB9;&#x5668; &#x751F;&#x547D;&#x5468;&#x671F;@PostContruct&#x548C;@PreDestroy&#x6CE8;&#x89E3;@PostContruct&#x5728;Bean&#x521B;&#x5EFA;&#x5B8C;&#x6210;&#x5E76;&#x4E14;&#x5C5E;&#x6027;&#x8D4B;&#x503C;&#x5B8C;&#x6210;&#xFF0C;&#x6765;&#x6267;&#x884C;&#x521D;&#x59CB;&#x5316; @PreDestroy&#x5728;&#x5BB9;&#x5668;&#x9500;&#x6BC1;Bean&#x4E4B;&#x524D;&#x901A;&#x77E5;&#x6211;&#x4EEC;&#x8FDB;&#x884C;&#x6E05;&#x7406;&#x5DE5;&#x4F5C; &#x7F16;&#x5199;&#x4E00;&#x4E2A;Dog&#x7C7B;&#xFF0C;&#x5E76;&#x628A;&#x4ED6;&#x6CE8;&#x5165;&#x5230;&#x914D;&#x7F6E;&#x7C7B;&#x4E2D; 123456789101112131415161718192021/** * @Author: cuzz * @Date: 2018/9/24 14:03 * @Description: */public class Dog { public Dog() { System.out.println(&quot;dog constructor...&quot;); } @PostConstruct public void postConstruct() { System.out.println(&quot;post construct...&quot;); } @PreDestroy public void preDestroy() { System.out.println(&quot;pre destroy...&quot;); }} &#x6D4B;&#x8BD5;&#x7ED3;&#x679C; 123456dog constructor...post construct...&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...---&gt;&#x5F00;&#x59CB;&#x5173;&#x95ED;&#x5BB9;&#x5668;pre destroy...---&gt;&#x5DF2;&#x7ECF;&#x5173;&#x95ED;&#x5BB9;&#x5668; &#x751F;&#x547D;&#x5468;&#x671F;BeanPostProscessor&#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668;&#x6211;&#x4EEC;&#x5148;&#x770B;&#x770B;&#x6E90;&#x7801;&#xFF0C;&#x89E3;&#x91CA;&#x7684;&#x5F88;&#x6E05;&#x695A;&#xFF0C;BeanPostProscessor &#x4E2D;postProcessBeforeInitialization&#x65B9;&#x6CD5;&#x4F1A;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;bean&#x5BF9;&#x8C61;&#x7684;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E4B;&#x524D;&#x56DE;&#x8C03;&#xFF1B;postProcessAfterInitialization&#x65B9;&#x6CD5;&#x4F1A;&#x5728;&#x6BCF;&#x4E2A;bean&#x5BF9;&#x8C61;&#x7684;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E4B;&#x540E;&#x88AB;&#x56DE;&#x8C03; &#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * Factory hook that allows for custom modification of new bean instances, * e.g. checking for marker interfaces or wrapping them with proxies. * * &lt;p&gt;ApplicationContexts can autodetect BeanPostProcessor beans in their * bean definitions and apply them to any beans subsequently created. * Plain bean factories allow for programmatic registration of post-processors, * applying to all beans created through this factory. * * &lt;p&gt;Typically, post-processors that populate beans via marker interfaces * or the like will implement {@link #postProcessBeforeInitialization}, * while post-processors that wrap beans with proxies will normally * implement {@link #postProcessAfterInitialization}. */public interface BeanPostProcessor { /** * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean * initialization callbacks (like InitializingBean&apos;s {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. * The returned bean instance may be a wrapper around the original. * @param bean the new bean instance * @param beanName the name of the bean * @return the bean instance to use, either the original or a wrapped one; * if {@code null}, no subsequent BeanPostProcessors will be invoked * @throws org.springframework.beans.BeansException in case of errors * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet */ Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException; /** * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean * initialization callbacks (like InitializingBean&apos;s {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. * The returned bean instance may be a wrapper around the original. * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean * instance and the objects created by the FactoryBean (as of Spring 2.0). The * post-processor can decide whether to apply to either the FactoryBean or created * objects or both through corresponding {@code bean instanceof FactoryBean} checks. * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a * {@link InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation} method, * in contrast to all other BeanPostProcessor callbacks. * @param bean the new bean instance * @param beanName the name of the bean * @return the bean instance to use, either the original or a wrapped one; * if {@code null}, no subsequent BeanPostProcessors will be invoked * @throws org.springframework.beans.BeansException in case of errors * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet * @see org.springframework.beans.factory.FactoryBean */ Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;} &#x7F16;&#x5199;&#x4E00;&#x4E2A;MyBeanPostProcessor&#x5B9E;&#x73B0;BeanPostProcessor&#x63A5;&#x53E3; 123456789101112131415161718/** * @Author: cuzz * @Date: 2018/9/24 14:21 * @Description: &#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x524D;&#x540E;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x5DE5;&#x4F5C; */public class MyBeanPostProcessor implements BeanPostProcessor{ @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;---&gt;postProcessBeforeInitialization...&quot; + beanName +&quot;==&gt;&quot; + bean); return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;---&gt;postProcessAfterInitialization...&quot; + beanName +&quot;==&gt;&quot; + bean); return bean; }} &#x6DFB;&#x52A0;&#x5230;&#x914D;&#x7F6E;&#x4E2D; 12345678910111213@Configurationpublic class MainConfigOfLifecycle { @Bean public Cat cat() { return new Cat(); } @Bean public MyBeanPostProcessor myBeanPostProcessor() { return new MyBeanPostProcessor(); }} &#x6D4B;&#x8BD5; 123456789101112---&gt;postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerProcessor==&gt;org.springframework.context.event.EventListenerMethodProcessor@1dc67c2---&gt;postProcessAfterInitialization...org.springframework.context.event.internalEventListenerProcessor==&gt;org.springframework.context.event.EventListenerMethodProcessor@1dc67c2---&gt;postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerFactory==&gt;org.springframework.context.event.DefaultEventListenerFactory@2bd765---&gt;postProcessAfterInitialization...org.springframework.context.event.internalEventListenerFactory==&gt;org.springframework.context.event.DefaultEventListenerFactory@2bd765cat constructor...---&gt;postProcessBeforeInitialization...cat==&gt;com.cuzz.bean.Cat@1d3b207cat...init...---&gt;postProcessAfterInitialization...cat==&gt;com.cuzz.bean.Cat@1d3b207&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...---&gt;&#x5F00;&#x59CB;&#x5173;&#x95ED;&#x5BB9;&#x5668;cat...destroy...---&gt;&#x5DF2;&#x7ECF;&#x5173;&#x95ED;&#x5BB9;&#x5668; &#x5728;&#x5B9E;&#x4F8B;&#x521B;&#x5EFA;&#x4E4B;&#x524D;&#x540E;&#x521B;&#x5EFA;&#x4E4B;&#x540E;&#x4F1A;&#x88AB;&#x6267;&#x884C; &#x751F;&#x547D;&#x5468;&#x671F;BeanPostProcessor&#x539F;&#x7406;&#x901A;&#x8FC7;debug&#x5230;populateBean&#xFF0C;&#x5148;&#x7ED9;&#x5C5E;&#x6027;&#x8D4B;&#x503C;&#x5728;&#x6267;&#x884C;initializeBean&#x65B9;&#x6CD5; 123456try { populateBean(beanName, mbd, instanceWrapper); if (exposedObject != null) { exposedObject = initializeBean(beanName, exposedObject, mbd); }} initializeBean&#x65B9;&#x6CD5;&#x65F6;&#xFF0C; 1234567891011121314151617181920protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) { Object wrappedBean = bean; if (mbd == null || !mbd.isSynthetic()) { // &#x6267;&#x884C;before&#x65B9;&#x6CD5; wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName); } ... try { // &#x6267;&#x884C;&#x521D;&#x59CB;&#x5316; invokeInitMethods(beanName, wrappedBean, mbd); } if (mbd == null || !mbd.isSynthetic()) { // &#x6267;&#x884C;after&#x65B9;&#x6CD5; wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); } return wrappedBean;} Spring&#x5E95;&#x5C42;&#x5BF9;BeanPostProcessor&#x7684;&#x4F7F;&#x7528;&#xFF1A; Bean&#x8D4B;&#x503C;&#x3001;&#x6CE8;&#x5165;&#x5176;&#x4ED6;&#x7EC4;&#x4EF6;&#x3001;@Autowired&#x3001;&#x751F;&#x547D;&#x5468;&#x671F;&#x6CE8;&#x89E3;&#x529F;&#x80FD;&#x3001;@Async&#x7B49;&#x7B49;&#x90FD;&#x4F7F;&#x7528;&#x5230;&#x4E86;BeanPostProcessor&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x5F88;&#x91CD;&#x8981; &#x603B;&#x7ED3;Bean &#x7684;&#x521D;&#x59CB;&#x5316;&#x987A;&#x5E8F; &#x9996;&#x5148;&#x6267;&#x884C; bean &#x7684;&#x6784;&#x9020;&#x65B9;&#x6CD5; BeanPostProcessor &#x7684; postProcessBeforeInitialization &#x65B9;&#x6CD5; InitializingBean &#x7684; afterPropertiesSet &#x65B9;&#x6CD5; @Bean &#x6CE8;&#x89E3;&#x7684; initMethod&#x65B9;&#x6CD5; BeanPostProcesso r&#x7684; postProcessAfterInitialization &#x65B9;&#x6CD5; DisposableBean &#x7684; destroy &#x65B9;&#x6CD5; @Bean&#x6CE8;&#x89E3;&#x7684; destroyMethod &#x65B9;&#x6CD5;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注解驱动开发（一）]]></title>
    <url>%2F2018%2F09%2F23%2FSpring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&#x6CE8;&#x89E3;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x914D;&#x7F6E;&#xFF0C;&#x63D0;&#x9AD8;&#x6548;&#x7387; The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform. &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@Configuration&#x548C;@Bean&#x7684;&#x6CE8;&#x5165;&#x4F7F;&#x7528;xml&#x65B9;&#x5F0F;&#x6211;&#x4EEC;&#x4E00;&#x8D77;&#x6CE8;&#x5165;&#x4E00;&#x4E2A;bean&#x4F7F;&#x7528;xml&#x6765;&#x914D;&#x7F6E; 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;bean id=&quot;person&quot; class=&quot;com.cuzz.bean.Person&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;cuzz&quot;&gt;&lt;/property&gt; &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; &#x6211;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ClassPathXmlApplicationContext&#x6765;&#x83B7;&#x53D6; 12345678910111213/** * @Author: cuzz * @Date: 2018/9/23 10:48 * @Description: */public class MainTest { public static void main(String[] args) { ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;); // &#x7528;id&#x83B7;&#x53D6; Person bean = (Person) applicationContext.getBean(&quot;person&quot;); System.out.println(bean); }} &#x8F93;&#x51FA;Person(name=cuzz, age=18) &#x6CE8;&#x89E3;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x7C7B; 1234567891011121314/** * @Author: cuzz * @Date: 2018/9/23 10:55 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Configuration // &#x544A;&#x8BC9;Spring&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x7C7B;public class MainConfig { // &#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;Bean,&#x7C7B;&#x578B;&#x4E3A;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;,id&#x9ED8;&#x8BA4;&#x7528;&#x65B9;&#x6CD5;&#x540D; // &#x4E5F;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;id @Bean(value = &quot;person01&quot;) public Person person() { return new Person(&quot;vhsj&quot;, 16); }} &#x53EF;&#x4EE5;&#x901A;&#x8FC7;AnnotationConfigApplicationContext&#x6765;&#x83B7;&#x53D6;&#xFF0C;&#x5E76;&#x4E14;&#x83B7;&#x53D6;id 1234567891011121314151617/** * @Author: cuzz * @Date: 2018/9/23 10:59 * @Description: */public class MainTest { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(MainConfig.class); Person person = (Person) context.getBean(Person.class); System.out.println(person); String[] names = context.getBeanNamesForType(Person.class); for (String name: names) { System.out.println(name); } }} &#x8F93;&#x51FA; 12Person(name=vhsj, age=16)person01 &#x7531;&#x4E8E;&#x7ED9;bean&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;value&#xFF0C;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x9ED8;&#x8BA4;id &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@ComponentScan&#x4F7F;&#x7528;xml&#x53EA;&#x8981;&#x6807;&#x6CE8;&#x4E86;&#x6CE8;&#x89E3;&#x5C31;&#x80FD;&#x626B;&#x63CF;&#x5230;&#x5982;&#xFF1A; @Controller @Service @Repository @Component 1&lt;context:component-scan base-package=&quot;com.cuzz&quot;&gt;&lt;/context:component-scan&gt; &#x6CE8;&#x89E3;&#x5728;&#x914D;&#x7F6E;&#x7C7B;&#x4E2D;&#x6DFB;&#x52A0; 12345678910/** * @Author: cuzz * @Date: 2018/9/23 10:55 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Configuration // &#x544A;&#x8BC9;Spring&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x7C7B;@ComponentScan(value = &quot;com.cuzz&quot;) // &#x6307;&#x5B9A;&#x5305;public class MainConfig { } &#x6DFB;&#x52A0;controller&#x3001;service&#x7B49; &#x6D4B;&#x8BD5; 1234567891011121314151617/** * @Author: cuzz * @Date: 2018/9/23 13:03 * @Description: */public class IOCTest { @Test public void test01() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class); // &#x83B7;&#x53D6;&#x6240;&#x6709;bean&#x5B9A;&#x4E49;&#x7684;&#x540D;&#x5B57; String[] beanNames = applicationContext.getBeanDefinitionNames(); for (String name : beanNames) { System.out.println(name); } }} &#x8F93;&#x51FA;&#x7ED3;&#x679C; 1234567891011org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfigbookControllerbookDaobookServiceperson01 &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x6DFB;&#x52A0;@Controller @Service @Repository @C omponent&#x6CE8;&#x89E3;&#x7684;&#x90FD;&#x53EF;&#x4EE5;&#x626B;&#x63CF;&#x5230; &#x8FD8;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;&#x6DFB;&#x52A0;&#x67D0;&#x4E9B;&#x7C7B;&#xFF0C;&#x548C;&#x6392;&#x9664;&#x67D0;&#x4E9B;&#x7C7B;&#xFF0C;&#x8FDB;&#x5165;ComponentScan&#x6CE8;&#x89E3;&#x4E2D;&#x6709;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5; 12345ComponentScan.Filter[] includeFilters() default {};ComponentScan.Filter[] excludeFilters() default {};includeFilters = Filter[] &#xFF1A;&#x6307;&#x5B9A;&#x626B;&#x63CF;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x9700;&#x8981;&#x5305;&#x542B;&#x54EA;&#x4E9B;&#x7EC4;&#x4EF6;excludeFilters = Filter[] &#xFF1A;&#x6307;&#x5B9A;&#x626B;&#x63CF;&#x7684;&#x65F6;&#x5019;&#x6309;&#x7167;&#x4EC0;&#x4E48;&#x89C4;&#x5219;&#x6392;&#x9664;&#x90A3;&#x4E9B;&#x7EC4;&#x4EF6; &#x914D;&#x7F6E;&#x7C7B;&#xFF0C;&#x6392;&#x9664;Controller 1234567@Configuration // &#x544A;&#x8BC9;Spring&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x7C7B;@ComponentScan(value = &quot;com.cuzz&quot;, excludeFilters = { @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = {Controller.class})})public class MainConfig {} &#x8FD0;&#x884C;&#x6D4B;&#x8BD5;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x6CA1;&#x6709;Controller&#x7C7B;&#x7684; 123456789org.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfigbookDaobookServiceperson01 &#x81EA;&#x5B9A;&#x4E49;TypeFilter&#x6307;&#x5B9A;&#x8FC7;&#x6EE4;&#x89C4;&#x5219;&#x7B2C;&#x4E00;&#x548C;&#x7B2C;&#x4E8C;&#x6BD4;&#x8F83;&#x5E38;&#x7528; 12345FilterType.ANNOTATION&#xFF1A;&#x6309;&#x7167;&#x6CE8;&#x89E3;FilterType.ASSIGNABLE_TYPE&#xFF1A;&#x6309;&#x7167;&#x7ED9;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#xFF1B;FilterType.ASPECTJ&#xFF1A;&#x4F7F;&#x7528;ASPECTJ&#x8868;&#x8FBE;&#x5F0F;FilterType.REGEX&#xFF1A;&#x4F7F;&#x7528;&#x6B63;&#x5219;&#x6307;&#x5B9A;FilterType.CUSTOM&#xFF1A;&#x4F7F;&#x7528;&#x81EA;&#x5B9A;&#x4E49;&#x89C4;&#x5219; &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;MyTypeFilte&#x7C7B;&#x5B9E;&#x73B0;TypeFilter&#x63A5;&#x53E3; 1234567891011121314151617181920212223242526272829/** * @Author: cuzz * @Date: 2018/9/23 15:03 * @Description: */public class MyTypeFilter implements TypeFilter{ /** * metadataReader&#xFF1A;&#x8BFB;&#x53D6;&#x5230;&#x7684;&#x5F53;&#x524D;&#x6B63;&#x5728;&#x626B;&#x63CF;&#x7684;&#x7C7B;&#x7684;&#x4FE1;&#x606F; * metadataReaderFactory:&#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x5230;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x7C7B;&#x4FE1;&#x606F;&#x7684; */ @Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException { // &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x7C7B;&#x6CE8;&#x89E3;&#x7684;&#x4FE1;&#x606F; AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata(); // &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x6B63;&#x5728;&#x626B;&#x63CF;&#x7684;&#x7C7B;&#x7684;&#x7C7B;&#x4FE1;&#x606F; ClassMetadata classMetadata = metadataReader.getClassMetadata(); // &#x83B7;&#x53D6;&#x5F53;&#x524D;&#x7C7B;&#x8D44;&#x6E90;&#xFF08;&#x7C7B;&#x7684;&#x8DEF;&#x5F84;&#xFF09; Resource resource = metadataReader.getResource(); String className = classMetadata.getClassName(); System.out.println(&quot;---&gt;&quot;+className); // &#x8FD9;&#x4E9B;&#x7C7B;&#x540D;&#x4E2D;&#x5305;&#x542B;er&#x5C31;&#x8FD4;&#x56DE;true if(className.contains(&quot;er&quot;)){ return true; } return false; }} &#x4F7F;&#x7528;&#x81EA;&#x5B9A;&#x4E49;&#x6CE8;&#x89E3;&#x8BB0;&#x5F97;&#x9700;&#x8981;&#x5173;&#x95ED;&#x9ED8;&#x8BA4;&#x8FC7;&#x6EE4;&#x5668;useDefaultFilters = false 123456789101112131415161718/** * @Author: cuzz * @Date: 2018/9/23 10:55 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Configuration @ComponentScan(value = &quot;com.cuzz&quot;, includeFilters = @ComponentScan.Filter(type = FilterType.CUSTOM, classes = MyTypeFilter.class), useDefaultFilters = false)public class MainConfig { // &#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;Bean,&#x7C7B;&#x578B;&#x4E3A;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;,id&#x9ED8;&#x8BA4;&#x7528;&#x65B9;&#x6CD5;&#x540D; // &#x4E5F;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;id @Bean(value = &quot;person01&quot;) public Person person() { return new Person(&quot;vhsj&quot;, 16); }} &#x6D4B;&#x8BD5;12345678910111213141516171819202122---&gt;com.cuzz.AppTest---&gt;com.cuzz.bean.MainTest---&gt;com.cuzz.config.IOCTest---&gt;com.cuzz.config.MainTest---&gt;com.cuzz.App---&gt;com.cuzz.bean.Person---&gt;com.cuzz.config.MyTypeFilter---&gt;com.cuzz.controller.BookController---&gt;com.cuzz.dao.BookDao---&gt;com.cuzz.sevice.BookServiceorg.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfig // &#x4E0D;&#x662F;&#x626B;&#x63CF;&#x7684; person // &#x8FD9;&#x4E2A;&#x662F;&#x5728;bean&#x4E2D;myTypeFilter // &#x6709;erbookController // &#x6709;erbookService // &#x6709;erperson01 // &#x8FD9;&#x4E2A;&#x662F;&#x5728;bean&#x4E2D; &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@Scope&#x8BBE;&#x7F6E;&#x4F5C;&#x7528;&#x57DF;Spring&#x7684;bean&#x9ED8;&#x8BA4;&#x662F;&#x5355;&#x4F8B;&#x7684;123456789101112@Testpublic void test02() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class); // &#x83B7;&#x53D6;&#x6240;&#x6709;bean&#x5B9A;&#x4E49;&#x7684;&#x540D;&#x5B57; String[] beanNames = applicationContext.getBeanDefinitionNames(); for (String name : beanNames) { System.out.println(name); } Object bean = applicationContext.getBean(&quot;person&quot;); Object bean2 = applicationContext.getBean(&quot;person&quot;); System.out.println(bean == bean2); // &#x8F93;&#x51FA;true} Scope&#x7684;&#x56DB;&#x4E2A;&#x8303;&#x56F4;1234ConfigurableBeanFactory#SCOPE_PROTOTYPE // &#x591A;&#x5B9E;&#x4F8B; &#x6BCF;&#x6B21;&#x83B7;&#x53D6;&#x65F6;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x4E0D;&#x4F1A;&#x653E;&#x5728;ioc&#x5BB9;&#x5668;&#x4E2D;ConfigurableBeanFactory#SCOPE_SINGLETON // &#x5355;&#x5B9E;&#x4F8B; ioc&#x5BB9;&#x5668;&#x542F;&#x52A8;&#x662F;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x4EE5;&#x540E;&#x4ECE;&#x5BB9;&#x5668;&#x4E2D;&#x83B7;&#x53D6;WebApplicationContext#SCOPE_REQUEST // web&#x540C;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;WebApplicationContext#SCOPE_SESSION // web&#x540C;&#x4E00;&#x4E2A;session&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;Scope&#x4FEE;&#x6539; 1234567891011121314/** * @Author: cuzz * @Date: 2018/9/23 15:40 * @Description: */@Configurationpublic class MainConfig2 { @Scope(value = &quot;prototype&quot;) @Bean public Person person() { return new Person(&quot;vhuj&quot;, 25); }} &#x5219;&#x6D4B;&#x8BD5;&#x8F93;&#x51FA;false &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@Lazy-bean&#x61D2;&#x52A0;&#x8F7D;&#x61D2;&#x52A0;&#x8F7D;&#x61D2;&#x52A0;&#x8F7D;&#x7684;&#x662F;&#x9488;&#x5BF9;&#x5355;&#x5B9E;&#x4F8B;Bean&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x5728;&#x5BB9;&#x5668;&#x542F;&#x52A8;&#x7684;&#x65F6;&#x521B;&#x5EFA;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x61D2;&#x52A0;&#x8F7D;&#x5BB9;&#x5668;&#x542F;&#x52A8;&#x662F;&#x4E0D;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#xFF08;&#x83B7;&#x53D6;&#xFF09;Bean&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x5E76;&#x521D;&#x59CB;&#x5316; &#x6D4B;&#x8BD5;&#x5148;&#x7ED9;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;@Lazy&#x6CE8;&#x89E3; 12345678910@Configurationpublic class MainConfig2 { @Lazy @Bean public Person person() { System.out.println(&quot;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6DFB;&#x52A0;Person...&quot;); return new Person(&quot;vhuj&quot;, 25); }} &#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x65B9;&#x6CD5; 1234567@Testpublic void test03() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class); System.out.println(&quot;ioc&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...&quot;); Object bean = applicationContext.getBean(&quot;person&quot;);} &#x8F93;&#x51FA; 12ioc&#x5BB9;&#x5668;&#x521B;&#x5EFA;&#x5B8C;&#x6210;...&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6DFB;&#x52A0;Person... &#x6DFB;&#x52A0;&#x4E00;&#x4E2A;@Lazy&#x662F;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x83B7;&#x53D6;&#x65F6;&#xFF0C;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#xFF0C;&#x4EE5;&#x540E;&#x83B7;&#x53D6;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x4ECE;&#x5BB9;&#x5668;&#x4E2D;&#x83B7;&#x53D6;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x662F;&#x5355;&#x5B9E;&#x4F8B; &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@Conditional&#x6309;&#x6761;&#x4EF6;&#x6CE8;&#x518C;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x6761;&#x4EF6;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x518C;Bean &#x7F16;&#x5199;&#x81EA;&#x5DF1;&#x7684;Condition&#x7C7B;&#x5982;&#x679C;&#x7CFB;&#x7EDF;&#x662F;windows&#xFF0C;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x5165;&#x201D;bill&#x201D; &#x5982;&#x679C;&#x7CFB;&#x7EDF;&#x662F;linux&#xFF0C;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x5165;&#x201D;linus&#x201D; &#x7F16;&#x5199;WindowCondition&#x7C7B;&#x5E76;&#x91CD;&#x5199;matches&#x65B9;&#x6CD5; 12345678910111213141516171819202122/** * @Author: cuzz * @Date: 2018/9/23 20:30 * @Description: &#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;windows */ public class WindowCondition implements Condition{ /** * @param context &#x5224;&#x65AD;&#x6761;&#x4EF6; * @param metadata &#x6CE8;&#x91CA;&#x4FE1;&#x606F; * @return boolean */ @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { Environment environment = context.getEnvironment(); String property = environment.getProperty(&quot;os.name&quot;); if (property.contains(&quot;Windows&quot;)) { return true; } return false; } } context&#x6709;&#x4EE5;&#x4E0B;&#x65B9;&#x6CD5; 12345678// &#x80FD;&#x83B7;&#x53D6;ioc&#x4F7F;&#x7528;&#x7684;beanfactoryConfigurableListableBeanFactory beanFactory = context.getBeanFactory();// &#x80FD;&#x83B7;&#x53D6;&#x5230;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;ClassLoader classLoader = context.getClassLoader();// &#x83B7;&#x53D6;&#x5230;&#x73AF;&#x5883;&#x53D8;&#x91CF;Environment environment = context.getEnvironment();// &#x83B7;&#x53D6;&#x5230;Bean&#x5B9A;&#x4E49;&#x7684;&#x6CE8;&#x518C;&#x7C7B;BeanDefinitionRegistry registry = context.getRegistry(); &#x914D;&#x7F6E;&#x7C7B;&#x6DFB;&#x52A0;Bean&#x6DFB;&#x52A0;Condition&#x6761;&#x4EF6; 123456789101112131415@Configurationpublic class MainConfig2 { @Conditional({WindowCondition.class}) @Bean(&quot;bill&quot;) public Person person01() { return new Person(&quot;Bill Gates&quot;, 60); } @Conditional({LinuxCondition.class}) @Bean(&quot;linux&quot;) public Person person02() { return new Person(&quot;linus&quot;, 45); }} &#x6D4B;&#x8BD5;12345678910111213141516171819@Testpublic void test04() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class); // &#x83B7;&#x53D6;&#x73AF;&#x5883;&#x53D8;&#x91CF; ConfigurableEnvironment environment = applicationContext.getEnvironment(); String property = environment.getProperty(&quot;os.name&quot;); System.out.println(property); // &#x83B7;&#x53D6;&#x6240;&#x6709;bean&#x5B9A;&#x4E49;&#x7684;&#x540D;&#x5B57; String[] beanNames = applicationContext.getBeanDefinitionNames(); for (String name : beanNames) { System.out.println(name); } // key &#x662F;id Map&lt;String, Person&gt; map = applicationContext.getBeansOfType(Person.class); System.out.println(map);} &#x53D1;&#x73B0;&#x53EA;&#x6709;&#x201C;bill&#x201D;&#x8FD9;&#x4E2A;Bean&#x88AB;&#x6CE8;&#x5165; 12345678910Windows 7org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfig2bill{bill=Person(name=Bill Gates, age=60)} &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;@Improt&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x5FEB;&#x901F;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x7EC4;&#x4EF6;@Import&#x5BFC;&#x5165;@Import&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x7B2C;&#x4E09;&#x65B9;&#x5305;&#xFF0C;&#x6216;&#x5219;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x7C7B;&#xFF0C;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#xFF0C;Id&#x9ED8;&#x8BA4;&#x4E3A;&#x5168;&#x7C7B;&#x540D; &#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B; 1234567/** * @Author: cuzz * @Date: 2018/9/23 21:08 * @Description: */public class Color {} &#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5728;&#x914D;&#x7F6E;&#x7C7B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;@Import&#x628A;&#x8FD9;&#x4E2A;&#x7C7B;&#x5BFC;&#x5165; 123@Import({Color.class})@Configurationpublic class MainConfig2 {} ImportSelector&#x63A5;&#x53E3;&#x5BFC;&#x5165;&#x7684;&#x9009;&#x62E9;&#x5668;&#x8FD4;&#x56DE;&#x5BFC;&#x5165;&#x7EC4;&#x4EF6;&#x9700;&#x8981;&#x7684;&#x5168;&#x7C7B;&#x540D;&#x7684;&#x6570;&#x7EC4; 123456789public interface ImportSelector { /** * Select and return the names of which class(es) should be imported based on * the {@link AnnotationMetadata} of the importing @{@link Configuration} class. */ String[] selectImports(AnnotationMetadata importingClassMetadata);} &#x7F16;&#x5199;&#x4E00;&#x4E2A;MyImportSelector&#x7C7B;&#x5B9E;&#x73B0;ImportSelector&#x63A5;&#x53E3; 1234567891011121314/** * @Author: cuzz * @Date: 2018/9/23 21:15 * @Description: */public class MyImportSelector implements ImportSelector{ // &#x8FD4;&#x56DE;&#x503C;&#x5C31;&#x5BFC;&#x5165;&#x5BB9;&#x5668;&#x7EC4;&#x4EF6;&#x7684;&#x5168;&#x7C7B;&#x540D; // AnnotationMetadata:&#x5F53;&#x524D;&#x7C7B;&#x6807;&#x6CE8;&#x7684;@Import&#x6CE8;&#x89E3;&#x7C7B;&#x7684;&#x6240;&#x6709;&#x6CE8;&#x89E3;&#x4FE1;&#x606F; @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) { return new String[] {&quot;com.cuzz.bean.Car&quot;}; }} &#x5728;&#x914D;&#x7F6E;&#x7C7B;&#x4E2D;&#xFF0C;&#x901A;&#x8FC7;@Import&#x5BFC;&#x5165; 12345678/** * @Author: cuzz * @Date: 2018/9/23 15:40 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Import({Color.class, MyImportSelector.class})@Configurationpublic class MainConfig2 {} &#x6D4B;&#x8BD5;&#x7ED3;&#x679C;&#xFF0C;com.cuzz.bean.Car&#x6CE8;&#x5165;&#x4E86; 123456789org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfig2com.cuzz.bean.Colorcom.cuzz.bean.Car ImportBeanDefinitionRegistrar&#x63A5;&#x53E3;&#x9009;&#x62E9;&#x5668;123456789101112131415public interface ImportBeanDefinitionRegistrar { /** * Register bean definitions as necessary based on the given annotation metadata of * the importing {@code @Configuration} class. * &lt;p&gt;Note that {@link BeanDefinitionRegistryPostProcessor} types may &lt;em&gt;not&lt;/em&gt; be * registered here, due to lifecycle constraints related to {@code @Configuration} * class processing. * @param importingClassMetadata annotation metadata of the importing class * @param registry current bean definition registry */ public void registerBeanDefinitions( AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);} &#x7F16;&#x5199;&#x4E00;&#x4E2A;ImportBeanDefinitionRegistrar&#x5B9E;&#x73B0;&#x7C7B; 123456789101112131415161718192021222324/** * @Author: cuzz * @Date: 2018/9/23 21:29 * @Description: */public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar { /** * @param importingClassMetadata &#x5F53;&#x524D;&#x7C7B;&#x7684;&#x6CE8;&#x89E3;&#x4FE1;&#x606F; * @param registry &#x6CE8;&#x518C;&#x7C7B; */ @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { // &#x67E5;&#x8BE2;&#x5BB9;&#x5668; boolean b = registry.containsBeanDefinition(&quot;com.cuzz.bean.Car&quot;); // &#x5982;&#x679C;&#x6709;car, &#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x6C7D;&#x6CB9;&#x7C7B; if (b == true) { // &#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;bean&#x7684;&#x5B9A;&#x4E49;&#x4FE1;&#x606F; RootBeanDefinition rootBeanDefinition = new RootBeanDefinition(Petrol.class); // &#x6CE8;&#x518C;&#x4E00;&#x4E2A;bean, &#x6307;&#x5B9A;bean&#x540D; registry.registerBeanDefinition(&quot;petrol&quot;, rootBeanDefinition); } }} &#x914D;&#x7F6E;&#x7C7B; 12345678/** * @Author: cuzz * @Date: 2018/9/23 15:40 * @Description: &#x914D;&#x7F6E;&#x7C7B; */@Import({Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class})@Configurationpublic class MainConfig2 {} &#x6D4B;&#x8BD5;&#x7ED3;&#x679C;&#xFF0C;&#x51FA;&#x73B0;&#x4E86;petrol 12345678910org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalRequiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfig2com.cuzz.bean.Colorcom.cuzz.bean.Car petrol &#x7EC4;&#x4EF6;&#x6CE8;&#x518C;&#x4F7F;&#x7528;FactoryBean&#x6CE8;&#x518C;&#x7EC4;&#x4EF6;&#x7F16;&#x5199;&#x4E00;&#x4E2A;ColorFactoryBean&#x7C7B; 12345678910111213141516171819202122/** * @Author: cuzz * @Date: 2018/9/23 21:55 * @Description: Spring&#x5B9A;&#x4E49;&#x7684;&#x5DE5;&#x5382;Bean */public class ColorFactoryBean implements FactoryBean&lt;Color&gt; { // &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;Color&#x5BF9;&#x8C61; @Override public Color getObject() throws Exception { return new Color(); } @Override public Class&lt;?&gt; getObjectType() { return Color.class; } // &#x662F;&#x5426;&#x4E3A;&#x5355;&#x4F8B; @Override public boolean isSingleton() { return true; }} &#x6CE8;&#x5165;&#x5230;&#x5BB9;&#x5668;&#x4E2D; 1234@Beanpublic ColorFactoryBean colorFactoryBean() { return new ColorFactoryBean();} &#x6D4B;&#x8BD5; 12345678@Testpublic void test05() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class); Object bean = applicationContext.getBean(&quot;colorFactoryBean&quot;); // &#x5DE5;&#x5382;bean&#x8C03;&#x7528;&#x7684;&#x662F;getClass()&#x65B9;&#x6CD5; System.out.println(&quot;colorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: &quot; + bean.getClass());} &#x8F93;&#x51FA;&#xFF0C;&#x53D1;&#x73B0;&#x6B64;&#x65F6;&#x7684;bean&#x8C03;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x662F;getObjectType&#x65B9;&#x6CD5; 1colorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: class com.cuzz.bean.Color &#x5982;&#x679C;&#x9700;&#x8981;&#x83B7;&#x53D6;BeanFactory&#x672C;&#x8EAB;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;id&#x524D;&#x9762;&#x52A0;&#x4E00;&#x4E2A;&#x201C;&amp;&#x201D;&#x6807;&#x8BC6; 1234567891011@Testpublic void test05() { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class); Object bean = applicationContext.getBean(&quot;colorFactoryBean&quot;); // &#x5DE5;&#x5382;bean&#x8C03;&#x7528;&#x7684;&#x662F;getClass()&#x65B9;&#x6CD5; System.out.println(&quot;colorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: &quot; + bean.getClass()); Object bean2 = applicationContext.getBean(&quot;&amp;colorFactoryBean&quot;); // &#x5DE5;&#x5382;bean&#x8C03;&#x7528;&#x7684;&#x662F;getClass()&#x65B9;&#x6CD5; System.out.println(&quot;colorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: &quot; + bean2.getClass());} &#x6B64;&#x65F6;&#x8F93;&#x51FA; 12colorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: class com.cuzz.bean.ColorcolorFactoryBean&#x7684;&#x7C7B;&#x578B;&#x662F;: class com.cuzz.bean.ColorFactoryBean &#x603B;&#x7ED3;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x6CE8;&#x518C;&#x7EC4;&#x4EF6;&#xFF1A; &#x5305;&#x626B;&#x63CF; + &#x7EC4;&#x4EF6;&#x7EC4;&#x4EF6;&#xFF08;@Controller / @Service / @Repository / @Component&#xFF09; @Bean[&#x5BFC;&#x5165;&#x7B2C;&#x4E09;&#x65B9;&#x5305;&#x7EC4;&#x4EF6;] @Import[&#x5FEB;&#x901F;&#x7ED9;&#x5BB9;&#x5668;&#x4E2D;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x7EC4;&#x4EF6;] @Import&#xFF08;&#x8981;&#x5BFC;&#x5165;&#x5230;&#x5BB9;&#x5668;&#x4E2D;&#x7684;&#x7EC4;&#x4EF6;&#xFF09;&#xFF0C;&#x5BB9;&#x5668;&#x4E2D;&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x6CE8;&#x518C;&#x8FD9;&#x4E2A;&#x7EC4;&#x4EF6;&#xFF0C;id &#x9ED8;&#x8BA4;&#x662F;&#x5168;&#x7C7B;&#x540D; ImportSelector&#xFF0C;&#x8FD4;&#x56DE;&#x9700;&#x8981;&#x5BFC;&#x5165;&#x7684;&#x7EC4;&#x4EF6;&#x7684;&#x5168;&#x7C7B;&#x540D;&#x6570;&#x7EC4; ImportBeanDefinitionRegistrar&#xFF0C;&#x624B;&#x52A8;&#x6CE8;&#x518C;bean&#x5230;&#x5BB9;&#x5668;&#x4E2D; &#x4F7F;&#x7528; Spring &#x63D0;&#x4F9B;&#x7684; FactoryBean &#xFF08;&#x5DE5;&#x5382;Bean&#xFF09; &#x9ED8;&#x8BA4;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x662F;&#x5DE5;&#x5382; bean &#x8C03;&#x7528;&#x7684; getObject &#x521B;&#x5EFA;&#x7684;&#x5BF9;&#x8C61; &#x8981;&#x83B7;&#x53D6;&#x5DE5;&#x5382; Bean &#x672C;&#x8EAB;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E2A; id &#x524D;&#x9762;&#x52A0;&#x4E00;&#x4E2A; &amp; &#x7B26;&#x53F7;&#xFF0C;&#x5982; &amp;colorFactoryBean]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习结束篇]]></title>
    <url>%2F2018%2F09%2F10%2F%E5%AE%9E%E4%B9%A0%E7%BB%93%E6%9D%9F%E7%AF%87%2F</url>
    <content type="text"><![CDATA[&#x5E38;&#x6000;&#x611F;&#x6069;&#x7684;&#x5FC3; &#x6628;&#x5929;&#x63D0;&#x4EA4;&#x4E86;&#x79BB;&#x804C;&#x4FE1;&#xFF0C;&#x5B8C;&#x4E86;&#x6210;&#x4E86;&#x4E00;&#x7CFB;&#x5217;&#x8F9E;&#x804C;&#x624B;&#x7EED; &#x603B;&#x7ECF;&#x7406;&#x627E;&#x6211;&#x804A;&#x4E86;&#x4E00;&#x4F1A;&#xFF0C;&#x8C08;&#x4E86;&#x8C08;&#x4EBA;&#x751F;&#x89C4;&#x5212;&#xFF0C;&#x5F88;&#x611F;&#x8C22;&#x4ED6;&#x80FD;&#x7ED9;&#x4E88;&#x6211;&#x5EFA;&#x8BAE;&#xFF0C;&#x4E5F;&#x5E0C;&#x671B;&#x6211;&#x6BD5;&#x4E1A;&#x540E;&#x80FD;&#x518D;&#x56DE;&#x516C;&#x53F8; &#x5148;&#x662F;&#x548C;&#x6211;&#x5E08;&#x7236;&#x544A;&#x522B;&#xFF0C;&#x5E08;&#x7236;&#x5148;&#x662F;&#x8BE2;&#x95EE;&#x4E86;&#x6211;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x540E;&#x6765;&#x628A;&#x6211;&#x5E26;&#x5230;&#x516C;&#x53F8;&#x697C;&#x4E0B;&#x804A;&#x4E86;&#x4E00;&#x4F1A;&#xFF0C;&#x8BE2;&#x95EE;&#x4E86;&#x6211;&#x4E00;&#x4E0B;&#x89C4;&#x5212;&#xFF0C;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x4ED6;&#x7ED9;&#x6211;&#x63D0;&#x7684;&#x610F;&#x89C1; &#x6BD5;&#x4E1A;&#x521A;&#x51FA;&#x53BB;&#xFF0C;&#x5148;&#x53BB;&#x4E00;&#x7EBF;&#x4E92;&#x8054;&#x7F51;&#x57CE;&#x5E02;&#xFF0C;&#x9996;&#x5148;&#x9009;&#x62E9;&#x5927;&#x5382;&#xFF0C;&#x524D;&#x4E09;&#x5E74;&#x4E0D;&#x8981;&#x592A;&#x5728;&#x610F;&#x5DE5;&#x8D44;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x773C;&#x754C; &#x4E0D;&#x8981;&#x672C;&#x672B;&#x5012;&#x7F6E;&#xFF0C;&#x73B0;&#x5728;&#x4E0D;&#x8981;&#x5929;&#x5929;&#x53BB;&#x80CC;&#x90A3;&#x4E9B;&#x9762;&#x8BD5;&#x9898;&#x548C;&#x5237;&#x9898;&#xFF0C;&#x5F53;&#x524D;&#x91CD;&#x8981;&#x7684;&#x662F;&#x77E5;&#x8BC6;&#x7684;&#x6C89;&#x6DC0;&#xFF0C;&#x628A;&#x516C;&#x53F8;&#x7528;&#x5230;&#x7684;&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#x597D;&#x597D;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#xFF0C;&#x4E0D;&#x8981;&#x53EA;&#x662F;&#x770B;&#x770B;&#xFF0C;&#x800C;&#x8981;&#x52A8;&#x624B;&#x53BB;&#x642D;&#x5EFA; &#x4E0D;&#x662F;&#x79D1;&#x73ED;&#x51FA;&#x8EAB;&#x7684;&#xFF0C;&#x8EAB;&#x8FB9;&#x7F3A;&#x5C11;&#x8FD9;&#x79CD;&#x6280;&#x672F;&#x7684;&#x6C1B;&#x56F4;&#xFF0C;&#x5E73;&#x65F6;&#x591A;&#x52AA;&#x529B;&#x52AA;&#x529B;&#xFF0C;&#x591A;&#x8BA4;&#x8BC6;&#x8BA4;&#x8BC6;&#x670B;&#x53CB; &#x5B66;&#x6821;&#x6709;&#x9879;&#x76EE;&#xFF0C;&#x5373;&#x4F7F;&#x6CA1;&#x62A5;&#x916C;&#xFF0C;&#x4E5F;&#x8981;&#x53BB;&#x53C2;&#x4E0E;&#xFF0C;&#x591A;&#x79EF;&#x7D2F;&#x7ECF;&#x9A8C; &#x7136;&#x540E;&#x662F;&#x8DDF;&#x5916;&#x5356;&#x7EC4;&#x7684;&#x4EBA;&#x544A;&#x522B;&#xFF0C;&#x611F;&#x8C22;&#x7EC4;&#x957F;CJG&#xFF0C;&#x5C0F;&#x5E08;&#x5144;HL&#xFF0C;&#x4EE5;&#x53CA;CWZ&#xFF0C;BW&#xFF0C;NZ&#x8FD9;&#x4E9B;&#x4EBA;&#x5BF9;&#x6211;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x8FD9;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5728;&#x8FD9;&#x91CC;&#x5B66;&#x4E60;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#xFF0C;&#x611F;&#x8C22;&#x8FD9;&#x4E9B;&#x4EBA; HL&#x5C0F;&#x5E08;&#x5144;&#xFF0C;&#x4E5F;&#x5355;&#x72EC;&#x548C;&#x6211;&#x804A;&#x4E86;&#x804A;&#xFF0C;&#x8BE2;&#x95EE;&#x4E86;&#x6211;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4E5F;&#x7ED9;&#x6211;&#x4E00;&#x4E9B;&#x5DE5;&#x4F5C;&#x7ECF;&#x9A8C;&#xFF0C;&#x4E0D;&#x80FD;&#x88AB;&#x4EBA;&#x5F71;&#x54CD;&#x5230;&#x81EA;&#x5DF1;&#xFF0C;&#x5E73;&#x65F6;&#x505A;&#x4E8B;&#x8BA4;&#x771F;&#x4E00;&#x70B9;&#xFF0C;&#x4E0D;&#x8981;&#x62C5;&#x5FC3;&#x72AF;&#x9519;&#x7B49; &#x5C0F;&#x5E08;&#x5144;&#x8FD8;&#x9001;&#x6211;&#x4E0B;&#x697C;&#xFF0C;&#x6700;&#x540E;&#x5C0F;&#x5E08;&#x5144;&#x62E5;&#x62B1;&#x4E00;&#x4E2A;&#x5C31;&#x544A;&#x522B;&#x4E86; &#x8D70;&#x5230;&#x5730;&#x94C1;&#x7AD9;&#x53D1;&#x73B0;&#x8EAB;&#x4E0A;&#x8FD8;&#x6709;&#x4E00;&#x5F20;48&#x7684;&#x7684;&#x58EB;&#x7968;&#x8FD8;&#x6CA1;&#x62A5;&#xFF0C;&#x53C8;&#x56DE;&#x516C;&#x53F8;&#x4E86; &#x7136;&#x540E;&#x53C8;&#x8DDF;&#x540C;&#x4E8B;&#x544A;&#x522B;&#x4E86;&#x4E00;&#x6CE2;]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习记录]]></title>
    <url>%2F2018%2F07%2F23%2F%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[&#x5B9E;&#x4E60;&#x7ED9;&#x4E86;&#x6211;&#x5F88;&#x5927;&#x4FE1;&#x5FC3; &#x5B9E;&#x4E60;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x4E86;&#xFF0C;&#x8BF4;&#x8BF4;&#x6700;&#x8FD1;&#x7684;&#x611F;&#x53D7;&#x5427; &#x6211;&#x662F;&#x8F6C;&#x884C;&#x7684;&#xFF0C;&#x73B0;&#x5728;&#x662F;&#x4E00;&#x540D;&#x6750;&#x6599;&#x8BA1;&#x7B97;&#x7684;&#x7814;&#x7A76;&#x751F;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x8BF4;&#x6750;&#x6599;&#x8BA1;&#x7B97;&#x5462;&#xFF0C;&#x6211;&#x662F;&#x5E0C;&#x671B;&#x53BB;&#x9762;&#x8BD5;&#x7684;&#x65F6;&#x5019;&#x81F3;&#x5C11;&#x6709;&#x8BA1;&#x7B97;&#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#xFF0C;HR&#x81F3;&#x5C11;&#x4F1A;&#x89C9;&#x5F97;&#x6211;&#x8DDF;&#x8BA1;&#x7B97;&#x673A;&#x6709;&#x70B9;&#x9760;&#x8FB9;&#xFF0C;&#x51CF;&#x5C11;&#x88AB;HR&#x7ED9;&#x8FC7;&#x6EE4;&#x6389; &#x5B66;java&#x5927;&#x6982;&#x534A;&#x5E74;&#x4E86;&#xFF0C;&#x628A;java&#x57FA;&#x7840;&#x5B66;&#x5B8C;&#xFF0C;&#x5728;&#x6155;&#x8BFE;&#x7F51;&#x4E0A;&#x627E;&#x4E86;&#x4E00;&#x4E2A;&#x5B9E;&#x6218;&#x8BFE;&#x7A0B;&#xFF0C;&#x8FD9;&#x662F;&#x6211;&#x90E8;&#x7F72;&#x4E0A;&#x7EBF;&#x7684;&#x7F51;&#x7AD9;&#xFF08;&#x8FD8;&#x6CA1;&#x5199;&#x5B8C;&#xFF09;&#xFF0C;&#x5C31;&#x53BB;&#x627E;&#x5B9E;&#x4E60;&#x4E86; &#x7531;&#x4E8E;&#x662F;&#x6691;&#x5047;&#xFF0C;&#x8001;&#x5E08;&#x7BA1;&#x7684;&#x4E5F;&#x6CA1;&#x90A3;&#x4E48;&#x4E25;&#xFF0C;&#x4E0D;&#x7528;&#x53BB;&#x5B9E;&#x9A8C;&#x5BA4; &#x521A;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x662F;&#x5F88;&#x81EA;&#x4FE1;&#xFF0C;&#x5728;&#x62C9;&#x94A9;&#x3001;Boss&#x76F4;&#x8058;&#x548C;&#x667A;&#x8054;&#x6295;&#x7B80;&#x5386;&#xFF0C;&#x5927;&#x6982;&#x6295;&#x4E86;100&#x6765;&#x4EFD;&#xFF0C;&#x6536;&#x5230;5-6&#x4E2A;&#x9762;&#x8BD5;&#xFF0C;&#x6B66;&#x6C49;&#x7684;&#x590F;&#x5929;&#x771F;&#x7684;&#x70ED;&#xFF0C;&#x6700;&#x6C14;&#x6124;&#x7684;&#x662F;&#xFF0C;&#x9047;&#x5230;&#x4E00;&#x4E24;&#x4E2A;&#x57F9;&#x8BAD;&#x673A;&#x6784;&#xFF0C;&#x6D6A;&#x8D39;&#x65F6;&#x95F4;&#xFF0C;&#x540E;&#x6765;&#x53BB;&#x9762;&#x8BD5;&#x90FD;&#x4F1A;&#x5728;&#x7F51;&#x4E0A;&#x5148;&#x67E5;&#x67E5;&#xFF0C;&#x521A;&#x5F00;&#x59CB;&#x9762;&#x8BD5;&#x7684;&#x90FD;&#x662F;&#x4E00;&#x4E9B;&#x5C0F;&#x516C;&#x53F8;&#xFF0C;&#x5C0F;&#x516C;&#x53F8;&#x57FA;&#x672C;&#x90FD;&#x662F;&#x95EE;&#x4F60;&#x9879;&#x76EE;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x9879;&#x76EE;&#x7ECF;&#x9A8C;&#x53C8;&#x4E0D;&#x591A;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x90FD;&#x662F;&#x56DE;&#x53BB;&#x7B49;&#x6D88;&#x606F; &#x63A5;&#x7740;&#x9762;&#x8BD5;&#x4E86;&#x53E6;&#x4E00;&#x5BB6;&#x5C0F;&#x516C;&#x53F8;&#xFF0C;&#x516C;&#x53F8;&#x7684;&#x8001;&#x677F;&#x548C;&#x6211;&#x662F;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#x7684;&#xFF0C;&#x8DDF;&#x6211;&#x804A;&#x7684;&#x4E5F;&#x5F88;&#x4E0D;&#x9519;&#xFF0C;&#x672C;&#x6765;&#x6253;&#x7B97;&#x5728;&#x8FD9;&#x91CC;&#x5B9E;&#x4E60;&#x7684;&#xFF0C;&#x540E;&#x6765;&#x6536;&#x5230;&#x826F;&#x54C1;&#x7684;&#x5B9E;&#x4E60;offer&#xFF0C;&#x5C31;&#x6CA1;&#x53BB;&#x4E86;&#xFF0C;&#x4E5F;&#x8DDF;&#x8FD9;&#x4F4D;&#x5B66;&#x957F;&#x6C9F;&#x901A;&#x4E86;&#xFF0C;&#x4ED6;&#x4E5F;&#x652F;&#x6301;&#x6211; &#x540E;&#x6765;&#x826F;&#x54C1;&#x94FA;&#x5B50;&#x6253;&#x7535;&#x8BDD;&#x7ED9;&#x6211;&#xFF0C;&#x8BA9;&#x6211;&#x53BB;&#x9762;&#x8BD5;&#xFF0C;&#x826F;&#x54C1;&#x94FA;&#x5B50;&#x5728;&#x6B66;&#x6C49;&#x6765;&#x8BF4;&#x7B97;&#x6BD4;&#x8F83;&#x5927;&#x7684;&#x4F01;&#x4E1A;&#xFF0C;&#x9762;&#x8BD5;&#x6211;&#x7684;&#x662F;&#x4E00;&#x540D;&#x67B6;&#x6784;&#x5E08;&#xFF0C;&#x5927;&#x516C;&#x53F8;&#x6BD4;&#x8F83;&#x559C;&#x6B22;&#x95EE;&#x57FA;&#x7840;&#xFF0C;&#x6211;&#x5BF9;java&#x57FA;&#x7840;&#x638C;&#x63E1;&#x7684;&#x8FD8;&#x4E0D;&#x9519;&#xFF0C;&#x7B54;&#x7684;&#x4E5F;&#x8FD8;&#x53EF;&#x4EE5;&#xFF0C;&#x5F97;&#x5230;&#x4E86;&#x4ED6;&#x7684;&#x8BA4;&#x53EF;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x9762;&#x8BD5;&#x5C31;&#x5F88;&#x8F7B;&#x677E;&#xFF0C;&#x4ED6;&#x8FD8;&#x4E3B;&#x52A8;&#x8981;&#x5E2E;&#x6211;&#x52A0;&#x5DE5;&#x8D44;&#xFF0C;&#x540E;&#x6765;&#x6211;&#x5C31;&#x8BA4;&#x4ED6;&#x5F53;&#x6211;&#x5E08;&#x5085;&#xFF0C;&#x771F;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x5F88;&#x611F;&#x8C22;&#x4ED6; &#x4ED6;&#x8FD8;&#x5938;&#x6211;&#x57FA;&#x7840;&#x633A;&#x597D;&#x7684;&#xFF0C;&#x540E;&#x6765;&#x88AB;&#x6211;&#x5206;&#x914D;&#x5230;&#x5916;&#x5356;&#x7EC4;&#xFF0C;&#x4E5F;&#x662F;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x7EC4;&#xFF0C;&#x5C5E;&#x4E8E;&#x7535;&#x5546;&#xFF0C;&#x6240;&#x7528;&#x7684;&#x6280;&#x672F;&#x4E5F;&#x662F;&#x6BD4;&#x8F83;&#x65B0; &#x6765;&#x7EC4;&#x91CC;&#x53C8;&#x78B0;&#x5230;&#x4E86;&#x540C;&#x4E00;&#x4E2A;&#x5B66;&#x6821;&#x7684;&#x5C0F;&#x5E08;&#x5144;&#x8FD8;&#x662F;&#x8001;&#x4E61;&#xFF0C;&#x771F;&#x662F;&#x592A;&#x5E78;&#x8FD0;&#x4E86;&#xFF0C;&#x8FD8;&#x6709;&#x6211;&#x7EC4;&#x957F;&#xFF0C;&#x4EBA;&#x90FD;&#x8D85;&#x7EA7;nice&#xFF0C;&#x4E5F;&#x4ECE;&#x4ED6;&#x4EEC;&#x90A3;&#x91CC;&#x5B66;&#x5230;&#x5F88;&#x591A; &#x5E73;&#x65F6;&#x628A;&#x9700;&#x6C42;&#x505A;&#x5B8C;&#xFF0C;&#x81EA;&#x5DF1;&#x770B;&#x770B;&#x535A;&#x5BA2;&#xFF0C;&#x770B;&#x770B;&#x4E66;&#xFF0C;&#x5B66;&#x5B66;&#x516C;&#x53F8;&#x6240;&#x6709;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x53D1;&#x73B0;&#x516C;&#x53F8;&#x7528;&#x7684;&#x6846;&#x67B6;&#x5F88;&#x591A;&#x90FD;&#x662F;&#x963F;&#x91CC;&#x7684;&#xFF0C;&#x6BD4;&#x8D77;&#x4EE5;&#x524D;&#x5728;&#x5DE5;&#x5382;&#x5B9E;&#x4E60;&#x7B80;&#x76F4;&#x592A;&#x723D;&#x4E86; &#x5B9E;&#x4E60;&#x8FD9;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x81EA;&#x5DF1;&#x7684;&#x63D0;&#x5347;&#x771F;&#x7684;&#x5F88;&#x591A;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#x673A;&#x4F1A;&#x4E00;&#x5B9A;&#x8981;&#x51FA;&#x53BB;&#x5B9E;&#x4E60;&#xFF0C;&#x5E73;&#x65F6;&#x6211;&#x4EEC;&#x90E8;&#x95E8;&#x8FD8;&#x4F1A;&#x7EC4;&#x7EC7;&#x6280;&#x672F;&#x5206;&#x4EAB;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x589E;&#x52A0;&#x81EA;&#x5DF1;&#x7684;&#x773C;&#x754C;&#xFF0C;&#x5E73;&#x65F6;&#x9047;&#x5230;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x5BFB;&#x6C42;&#x5E2E;&#x52A9;&#xFF0C;&#x5FEB;&#x901F;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x77E5;&#x9053;&#x4E00;&#x4E2A;&#x516C;&#x53F8;&#x662F;&#x600E;&#x4E48;&#x5F00;&#x53D1;&#x4EA7;&#x54C1;&#x7684; &#x6700;&#x540E;&#x6536;&#x83B7;&#x6700;&#x591A;&#x7684;&#x8FD8;&#x662F;&#x81EA;&#x4FE1;&#xFF0C;&#x521A;&#x5F00;&#x59CB;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x4E0D;&#x662F;&#x79D1;&#x73ED;&#x7684;&#x6709;&#x70B9;&#x4E0D;&#x592A;&#x81EA;&#x4FE1;&#xFF0C;&#x5B9E;&#x4E60;&#x6C47;&#x62A5;&#x5B8C;&#x540E;&#x5C0F;&#x5E08;&#x5144;&#x8BF4;&#x6211;&#x5B66;&#x4E60;&#x80FD;&#x529B;&#x6BD4;&#x8F83;&#x5F3A;&#xFF0C;&#x4E0A;&#x624B;&#x5FEB;&#xFF0C;&#x4E0D;&#x7528;&#x8BA9;&#x4ED6;&#x64CD;&#x5FC3;&#xFF0C;&#x6211;&#x7684;&#x7EC4;&#x957F;&#x5BF9;&#x6211;&#x7684;&#x8BC4;&#x4EF7;&#x8BF4;&#x6211;&#x8FBE;&#x5230;2&#x5E74;&#x7684;&#x6C34;&#x5E73;&#xFF0C;&#x54C8;&#x54C8;&#xFF0C;&#x771F;&#x7684;&#x628A;&#x6211;&#x9AD8;&#x5174;&#x574F;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x7EC4;&#x957F;&#x7684;boss&#x4E5F;&#x7ED9;&#x6211;&#x7684;&#x8BC4;&#x4EF7;&#x4E5F;&#x4E0D;&#x9519;&#xFF0C;&#x6211;&#x4E0D;&#x662F;&#x6765;&#x70AB;&#x8000;&#x8FD9;&#x4E9B;&#xFF0C;&#x53EA;&#x662F;&#x8FD9;&#x4E9B;&#x80AF;&#x5B9A;&#x7ED9;&#x6211;&#x5F88;&#x5927;&#x7684;&#x4FE1;&#x5FC3;&#xFF0C;&#x8BA9;&#x6211;&#x5728;&#x8F6C;&#x884C;&#x7684;&#x9053;&#x8DEF;&#x4E0A;&#x8D8A;&#x8D70;&#x8D8A;&#x6709;&#x52C7;&#x6C14;&#xFF0C;&#x6700;&#x540E;&#x8FD8;&#x662F;&#x8981;&#x9760;&#x81EA;&#x5DF1;&#x52AA;&#x529B;&#xFF0C;&#x5E73;&#x65F6;&#x591A;&#x5199;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x591A;&#x770B;&#x770B;&#x4E66; &#x6700;&#x540E;&#x611F;&#x8C22;&#x5728;&#x6211;&#x8F6C;&#x884C;&#x65F6;&#x6240;&#x9047;&#x89C1;&#x7684;&#x8FD9;&#x4E9B;&#x4EBA;&#x3002;]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习]]></title>
    <url>%2F2018%2F06%2F24%2FjQuery%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[jQuery&#x662F;&#x4E00;&#x4E2A;&#x5FEB;&#x901F;&#x3001;&#x7B80;&#x6D01;&#x7684;JavaScript&#x6846;&#x67B6; jQuery&#x8BBE;&#x8BA1;&#x7684;&#x5B97;&#x65E8;&#x662F;&#x201C;write Less&#xFF0C;Do More&#x201D; &#x521D;&#x8BC6;jQueryjQuery&#x662F;&#x4E00;&#x4E2A;&#x5FEB;&#x901F;&#x3001;&#x7B80;&#x6D01;&#x7684;JavaScript&#x6846;&#x67B6;&#xFF0C;&#x662F;&#x7EE7;Prototype&#x4E4B;&#x540E;&#x53C8;&#x4E00;&#x4E2A;&#x4F18;&#x79C0;&#x7684;JavaScript&#x4EE3;&#x7801;&#x5E93;&#xFF08;&#x6216;JavaScript&#x6846;&#x67B6;&#xFF09;&#x3002;jQuery&#x8BBE;&#x8BA1;&#x7684;&#x5B97;&#x65E8;&#x662F;&#x201C;write Less&#xFF0C;Do More&#x201D;&#xFF0C;&#x5373;&#x5021;&#x5BFC;&#x5199;&#x66F4;&#x5C11;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x505A;&#x66F4;&#x591A;&#x7684;&#x4E8B;&#x60C5;&#x3002;&#x5B83;&#x5C01;&#x88C5;JavaScript&#x5E38;&#x7528;&#x7684;&#x529F;&#x80FD;&#x4EE3;&#x7801;&#xFF0C;&#x63D0;&#x4F9B;&#x4E00;&#x79CD;&#x7B80;&#x4FBF;&#x7684;JavaScript&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#xFF0C;&#x4F18;&#x5316;HTML&#x6587;&#x6863;&#x64CD;&#x4F5C;&#x3001;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x3001;&#x52A8;&#x753B;&#x8BBE;&#x8BA1;&#x548C;Ajax&#x4EA4;&#x4E92; &#x603B;&#x7ED3;&#x6765;&#x8BF4;&#x4E3A;&#x4E0B;&#x9762;&#x4E09;&#x70B9;&#xFF1A; jQuery &#x662F;&#x4E00;&#x4E2A; JavaScript jQuery &#x6781;&#x5927;&#x5730;&#x7B80;&#x5316;&#x4E86; JavaScript &#x7F16;&#x7A0B; jQuery &#x5F88;&#x5BB9;&#x6613;&#x5B66;&#x4E60; &#x4F7F;&#x7528;jQuery&#x7F16;&#x5199;HelloWorld &#x4E0B;&#x8F7D;jQuery&#x5E93; &#x5F15;&#x5165;jQuery 12345&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;01-&#x521D;&#x8BC6;jQuery&lt;/title&gt; &lt;script src=&quot;js/jquery-1.11.3/jquery.js&quot;&gt;&lt;/script&gt;&lt;/head&gt; &#x7F16;&#x5199;helloWorld 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;02-jQuery-HelloWorld&lt;/title&gt; &lt;script src=&quot;js/jquery-1.11.3/jquery.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // &#x539F;&#x751F;js&#x7684;&#x56FA;&#x5B9A;&#x5199;&#x6CD5; window.onload = function(ev) { }; // jQuery&#x7684;&#x56FA;&#x5B9A;&#x5199;&#x6CD5; $(document).ready(function () { alert(&quot;Hello World&quot;); }); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; jQuery&#x548C;js&#x5165;&#x53E3;&#x51FD;&#x6570;&#x7684;&#x533A;&#x522B;12345678910111213141516171819&lt;script&gt; window.onload = function (ev) { // &#x901A;&#x8FC7;&#x539F;&#x751F;&#x7684;js&#x5165;&#x53E3;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x62FF;&#x5230;Dom&#x5143;&#x7D20; var img = document.getElementsByTagName(&quot;img&quot;)[0]; console.log(img); // &#x901A;&#x8FC7;&#x539F;&#x751F;&#x7684;js&#x5165;&#x53E3;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x62FF;&#x5230;dom&#x5143;&#x7D20;&#x7684;&#x5BBD;&#x9AD8; var width = window.getComputedStyle(img).width; console.log(width); }; $(document).ready(function () { // &#x901A;&#x8FC7;jQuery&#x5165;&#x53E3;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x62FF;&#x5230;Dom&#x5143;&#x7D20; var $img = $(&quot;img&quot;)[0]; console.log($img); // &#x901A;&#x8FC7;jQuery&#x5165;&#x53E3;&#x51FD;&#x6570;&#x4E0D;&#x80FD;&#x62FF;&#x5230;dom&#x5143;&#x7D20;&#x7684;&#x5BBD;&#x9AD8; var $width = $img.width(); console.log($width); });&lt;/script&gt; &#x533A;&#x522B;: &#x539F;&#x751F;jQuery&#x5165;&#x53E3;&#x51FD;&#x6570;&#x7684;&#x52A0;&#x8F7D;&#x6A21;&#x5F0F;&#x4E0D;&#x540C; &#x539F;&#x751F;js&#x4F1A;&#x7B49;&#x5230;dom&#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;&#xFF0C;&#x5E76;&#x4E14;&#x56FE;&#x7247;&#x4E5F;&#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;&#x624D;&#x4F1A;&#x6267;&#x884C; jQuery&#x4F1A;&#x7B49;&#x5230;dom&#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;&#xFF0C;&#x4F46;&#x4E0D;&#x4F1A;&#x7B49;&#x5230;&#x56FE;&#x7247;&#x4E5F;&#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;&#x5C31;&#x4F1A;&#x6267;&#x884C; 12345678910111213141516&lt;script&gt; window.onload = function (ev) { alert(&quot;hello cuzz&quot;); // &#x4E0D;&#x4F1A;&#x663E;&#x793A; }; window.onload = function (ev) { alert(&quot;hello cuxx&quot;); // &#x4F1A;&#x663E;&#x793A; };&lt;/script&gt;&lt;script&gt; $(document).ready(function () { alert(&quot;hello cuzz&quot;); // &#x4F1A;&#x663E;&#x793A; }); $(document).ready(function () { alert(&quot;hello cuxx&quot;); // &#x4F1A;&#x663E;&#x793A; });&lt;/script&gt; &#x533A;&#x522B;&#xFF1A; &#x591A;&#x4E2A;window.onload&#x53EA;&#x4F1A;&#x6267;&#x884C;&#x4E00;&#x6B21;, &#x540E;&#x9762;&#x7684;&#x4F1A;&#x8986;&#x76D6;&#x524D;&#x9762;&#x7684; &#x591A;&#x4E2A;$(document).ready()&#x4F1A;&#x6267;&#x884C;&#x591A;&#x6B21;,&#x540E;&#x9762;&#x7684;&#x4E0D;&#x4F1A;&#x8986;&#x76D6;&#x524D;&#x9762;&#x7684; &#x539F;&#x56E0;&#xFF1A;jQuery&#x6846;&#x67B6;&#x672C;&#x8D28;&#x662F;&#x4E00;&#x4E2A;&#x95ED;&#x5305;&#xFF0C;&#x6BCF;&#x6B21;&#x6267;&#x884C;&#x6211;&#x4EEC;&#x90FD;&#x4F1A;&#x7ED9;ready&#x51FD;&#x6570;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4E0D;&#x540C;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x4F1A;&#x76F8;&#x4E92;&#x5E72;&#x6270; 1234567891011&lt;script&gt; // &#x76F8;&#x5F53;&#x4E8E;&#x8FD9;&#x6837;&#x5199; var test1 = function () { alert(&quot;hello cuzz&quot;); } var test2 = function () { alert(&quot;hello cuxx&quot;); } $(document).ready(test1); $(document).ready(test2);&lt;/script&gt; &#x5BF9;&#x6BD4;&#xFF1A; window.onload $(document).ready() &#x6267;&#x884C;&#x65F6;&#x673A; &#x5FC5;&#x987B;&#x7B49;&#x5F85;&#x7F51;&#x9875;&#x5168;&#x90E8;&#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;(&#x5305;&#x62EC; &#x56FE;&#x7247;&#x7B49;),&#x7136;&#x540E;&#x518D;&#x6267;&#x884C;&#x5305;&#x88F9;&#x4EE3;&#x7801; &#x53EA;&#x9700;&#x8981;&#x7B49;&#x5F85;&#x7F51;&#x9875;&#x4E2D;&#x7684;DOM&#x7ED3;&#x6784; &#x52A0;&#x8F7D;&#x5B8C;&#x6BD5;,&#x5C31;&#x80FD;&#x6267;&#x884C;&#x5305;&#x88F9;&#x7684;&#x4EE3;&#x7801; &#x6267;&#x884C;&#x6B21;&#x6570; &#x53EA;&#x80FD;&#x6267;&#x884C;&#x4E00;&#x6B21;,&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x6B21;,&#x90A3;&#x4E48; &#x7B2C;&#x4E00;&#x6B21;&#x7684;&#x6267;&#x884C;&#x4F1A;&#x88AB;&#x8986;&#x76D6; &#x53EF;&#x4EE5;&#x6267;&#x884C;&#x591A;&#x6B21;,&#x7B2C;N&#x6B21;&#x90FD;&#x4E0D;&#x4F1A;&#x88AB;&#x4E0A; &#x4E00;&#x6B21;&#x8986;&#x76D6; &#x7B80;&#x5199;&#x65B9;&#x6848; &#x65E0; $(function () { }); jQuery&#x7684;&#x56DB;&#x79CD;&#x5199;&#x6CD5;123456789101112131415161718&lt;script&gt; // &#x7B2C;&#x4E00;&#x79CD;&#x5199;&#x6CD5; $(document).ready(function () { alert(&quot;hello cuzz&quot;); }); // &#x7B2C;&#x4E8C;&#x79CD;&#x5199;&#x6CD5; jQuery(document).ready(function () { alert(&quot;hello cuzz&quot;); }); // &#x7B2C;&#x4E09;&#x79CD;&#x5199;&#x6CD5; $(function () { alert(&quot;hello cuzz&quot;); }); // &#x7B2C;&#x56DB;&#x79CD;&#x5199;&#x6CD5; jQuery(function () { alert(&quot;hello cuzz&quot;); });&lt;/script&gt; &#x63A8;&#x8350;&#x4F7F;&#x7528;&#x7B2C;&#x4E09;&#x79CD;&#x5199;&#x6CD5; jQuery&#x7684;&#x6838;&#x5FC3;&#x51FD;&#x6570; jQuery(callback)&#xFF0C;&#x5F53;dom&#x52A0;&#x8F7D;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#x6267;&#x884C;&#x4F20;&#x5165;&#x7684;&#x56DE;&#x8C03;&#x51FD;&#x6570; 12345&lt;script&gt; $(function () { alert(&quot;123&quot;); });&lt;/script&gt; jQuery([sel,[context]])&#xFF0C;&#x63A5;&#x6536;&#x4E00;&#x4E2A;&#x5305;&#x542B; CSS &#x9009;&#x62E9;&#x5668;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x53BB;&#x5339;&#x914D;&#x4E00;&#x7EC4;&#x5143;&#x7D20;,&#x5E76;&#x5305;&#x88C5;&#x6210;jQuery&#x5BF9;&#x8C61; 1234567891011&lt;script&gt; $(function () { // &#x5229;&#x7528;jQuery&#x83B7;&#x53D6;&#x7684;div,&#x5F97;&#x5230;&#x7684;&#x662F;&#x4E00;&#x4E2A;jQuery&#x5BF9;&#x8C61; var $box = $(&quot;div&quot;); console.log($box); // &#x5229;&#x7528;&#x539F;&#x751F;js&#x8BED;&#x6CD5;&#x83B7;&#x53D6;&#x7684;div,&#x5F97;&#x5230;&#x7684;&#x662F;&#x4E00;&#x4E2A;js&#x5BF9;&#x8C61; var box = document.getElementsByTagName(&quot;div&quot;); console.log(box); });&lt;/script&gt; &#x539F;&#x751F;JS&#x5BF9;&#x8C61;&#x548C;jQuery&#x5BF9;&#x8C61;&#x76F8;&#x4E92;&#x8F6C;&#x6362; jQuery(html, [ownerDoc]) &#x6839;&#x636E; HTML &#x6807;&#x8BB0;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x52A8;&#x6001;&#x521B;&#x5EFA;DOM &#x5143;&#x7D20;123456789&lt;script&gt; $(function () { var $eles = $(&quot;&lt;p&gt;&#x6211;&#x662F;span&lt;/p&gt;&lt;u&gt;&#x6211;&#x662F;u&lt;/u&gt;&quot;); // &#x65E0;&#x8BBA;&#x662F;jQuery&#x627E;&#x5230;&#x7684;&#x8FD8;&#x662F;&#x521B;&#x5EFA;&#x7684;,&#x6211;&#x4EEC;&#x6700;&#x7EC8;&#x62FF;&#x5230;&#x7684;&#x6C38;&#x8FDC;&#x90FD;&#x662F;jQuery&#x5BF9;&#x8C61; console.log($eles); // &#x5C06;&#x521B;&#x5EFA;&#x597D;&#x7684;DOM&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5230;body&#x4E2D; $(&quot;body&quot;).append($eles); });&lt;/script&gt; jQuery&#x7684;&#x672C;&#x8D28;&#x662F;&#x4E00;&#x4E2A;&#x4F2A;&#x6570;&#x7EC4;&#xFF0C;&#x6709;0&#x5230;length-1&#x7684;&#x5C5E;&#x6027; jQuery&#x9759;&#x6001;&#x65B9;&#x6CD5; &#x9759;&#x6001;&#x65B9;&#x6CD5; 12345678910111213&lt;script&gt; // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7C7B; function AClass() { }; // &#x7ED9;&#x8FD9;&#x4E2A;&#x7C7B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5; AClass.staticMethod = function () { alert(&quot;staticMethod&quot;) }; // &#x9759;&#x6001;&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528; AClass.staticMethod();&lt;/script&gt; &#x5B9E;&#x4F8B;&#x65B9;&#x6CD5; 123456789101112131415&lt;script&gt; // &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7C7B; function AClass() { } // &#x7ED9;&#x8FD9;&#x4E2A;&#x7C7B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x65B9;&#x6CD5; AClass.prototype.instanceMethod = function () { alert(&quot;instanceMethod&quot;); } // &#x5B9E;&#x4F8B;&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528; var a = new AClass(); a.instanceMethod();&lt;/script&gt; &#x5E38;&#x7528;&#x9759;&#x6001;&#x65B9;&#x6CD5; $.each(object, [callback]) 1234567891011121314151617181920212223242526272829303132$(function () { // &#x904D;&#x5386;&#x6570;&#x7EC4; var arr = [1, 3, 5, 7, 9]; // &#x901A;&#x8FC7;&#x539F;&#x751F;&#x65B9;&#x6CD5;&#x904D;&#x5386;&#x6570;&#x7EC4; // &#x7B2C;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x662F;&#x904D;&#x5386;&#x5230;&#x7684;&#x5143;&#x7D20; // &#x7B2C;&#x4E8C;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x662F;&#x5F53;&#x524D;&#x904D;&#x5386;&#x7684;&#x7D22;&#x5F15; // &#x8FD4;&#x56DE;&#x503C;: &#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#x503C; var res = arr.forEach(function (ele, idx) { console.log(idx, ele); }); console.log(res); // &#x901A;&#x8FC7;jQuery&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x904D;&#x5386;&#x6570;&#x7EC4; // &#x7B2C;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x662F;&#x5F53;&#x524D;&#x904D;&#x5386;&#x7684;&#x7D22;&#x5F15; // &#x7B2C;&#x4E8C;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x662F;&#x904D;&#x5386;&#x5230;&#x7684;&#x5143;&#x7D20; // &#x8FD4;&#x56DE;&#x503C;: &#x88AB;&#x904D;&#x5386;&#x7684;&#x6570;&#x7EC4; var $res2 = $.each(arr, function (idx, ele) { console.log(idx, ele); }); console.log($res2); // &#x904D;&#x5386;&#x5BF9;&#x8C61; var obj = {name: &quot;&quot;, age:&quot;33&quot;, gender:&quot;male&quot;}; // js&#x5BF9;&#x8C61;&#x6CA1;&#x6709;forEach&#x65B9;&#x6CD5;,&#x6240;&#x4EE5;&#x901A;&#x8FC7;forin&#x65B9;&#x6CD5;&#x904D;&#x5386;&#x5BF9;&#x8C61; for(var key in obj){ console.log(key, obj[key]); } // &#x901A;&#x8FC7;jQuery&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x904D;&#x5386;&#x5BF9;&#x8C61; $.each(obj,function (key, value) { console.log(key, value); });}); $.holdReady(hold)&#xFF0C;&#x4F20;&#x5165;true&#x6216;false&#x6765;&#x6682;&#x505C;&#x6216;&#x5219;&#x6062;&#x590D;ready()&#x4E8B;&#x4EF6; $.trim(str) &#x53BB;&#x6389;&#x5B57;&#x7B26;&#x4E32;&#x8D77;&#x59CB;&#x548C;&#x7ED3;&#x5C3E;&#x7684;&#x7A7A;&#x683C; $.isArray(obj) &#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;&#x6570;&#x7EC4; $.isFunction(obj)&#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;&#x51FD;&#x6570; $.isWindow(obj)&#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;window&#x5BF9;&#x8C61;&#x5B66;&#x4E60;&#x7F51;&#x7AD9;&#x5728;&#x7F51;&#x4E0A;&#xFF0C;&#x53D1;&#x73B0;&#x83DC;&#x9E1F;&#x6559;&#x7A0B;&#x6BD4;&#x8F83;&#x8BE6;&#x7EC6;&#xFF0C;&#x6392;&#x7248;&#x4E5F;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;&#x4E0D;&#x518D;&#x66F4;&#x65B0;jQuery]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python零基础入门笔记]]></title>
    <url>%2F2018%2F01%2F02%2FPython%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&#x590D;&#x4E60;&#x662F;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x5B66;&#x4E60;&#x66F4;&#x65B0;&#x7684;&#x77E5;&#x8BC6;&#x3002; &#x5B66;&#x4E60;python&#x6709;&#x4E00;&#x5E74;&#x591A;&#x4E86;&#xFF0C;&#x5E0C;&#x671B;&#x901A;&#x8FC7;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;&#x6765;&#x590D;&#x4E60;&#x4E86;&#xFF0C;&#x4E5F;&#x80FD;&#x8BA9;&#x540E;&#x6765;&#x8005;&#x5C11;&#x8D70;&#x4E00;&#x70B9;&#x5F2F;&#x8DEF;&#x3002;&#x5728;&#x8BFE;&#x7A0B;&#x7B14;&#x8BB0;&#x7684;&#x540C;&#x65F6;&#x52A0;&#x5165;&#x4E86;&#x4E00;&#x90E8;&#x5206;&#x81EA;&#x5DF1;&#x7684;&#x7ECF;&#x9A8C;&#x8865;&#x5145;&#x3002; [&#x221A;] &#x5ED6;&#x96EA;&#x5CF0;&#x8001;&#x5E08;&#x5728;&#x6155;&#x8BFE;&#x7F51;&#x7684;&#x8BFE;&#x7A0B;: Python&#x5165;&#x95E8; Python&#x7684;&#x521D;&#x6B21;&#x4F53;&#x9A8C;python&#x8BED;&#x8A00;&#x4ECB;&#x7ECD;&#x5168;&#x4E16;&#x754C;&#x6709;&#x51E0;&#x767E;&#x79CD;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#xFF0C;&#x4F46;&#x662F;&#x6D41;&#x884C;&#x7684;&#x53EA;&#x6709;&#x5341;&#x51E0;&#x79CD;&#xFF0C;python&#x5C31;&#x662F;&#x5176;&#x4E2D;&#x4E00;&#x79CD;&#x3002;&#x8377;&#x5170;&#x4EBA;&#x9F9F;&#x53D4;&#x4E8E;1989&#x5E74;&#x5723;&#x8BDE;&#x8282;&#x521B;&#x7ACB;&#x3002; &#x7279;&#x70B9;&#xFF1A;&#x4F18;&#x96C5;&#xFF0C;&#x660E;&#x786E;&#xFF0C;&#x7B80;&#x5355;&#x3002; &#x9002;&#x5408;&#x7684;&#x9886;&#x57DF;&#xFF1A; web&#x7F51;&#x7AD9;&#x548C;&#x5404;&#x79CD;&#x7F51;&#x7EDC;&#x670D;&#x52A1;&#xFF1B; &#x7CFB;&#x7EDF;&#x5DE5;&#x5177;&#x548C;&#x811A;&#x672C;&#xFF1B; &#x4F5C;&#x4E3A;&#x80F6;&#x6C34;&#x8BED;&#x8A00;&#x628A;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x5F00;&#x53D1;&#x7684;&#x6A21;&#x5757;&#x5305;&#x88C5;&#x8D77;&#x6765;&#x65B9;&#x4FBF;&#x4F7F;&#x7528;&#x3002; Python&#x662F;&#x4E00;&#x95E8;&#x9AD8;&#x7EA7;&#x8BED;&#x8A00;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9002;&#x5408;&#x8D34;&#x8FD1;&#x786C;&#x4EF6;&#x7684;&#x4EE3;&#x7801;: &#x6BD4;&#x5982;&#x9A71;&#x52A8;&#x7A0B;&#x5E8F;&#xFF08;&#x9996;&#x9009;C&#xFF09; &#x79FB;&#x52A8;&#x5F00;&#x53D1;&#xFF0C;&#x6709;&#x5404;&#x81EA;&#x7684;&#x8BED;&#x8A00;&#xFF0C;&#xFF08;objectC&#xFF0C;swift/java&#xFF09; &#x6E38;&#x620F;&#x5F00;&#x53D1;&#xFF08;&#x9996;&#x9009;C/C++&#xFF09;&#x3002; Python&#x5B9E;&#x9645;&#x5E94;&#x7528;&#xFF1A; YouTube&#xFF0C;&#x8C46;&#x74E3;&#xFF0C;&#x641C;&#x72D0;&#x90AE;&#x7BB1;&#xFF1B;Openstack&#x5F00;&#x6E90;&#x4E91;&#x8BA1;&#x7B97;&#x5E73;&#x53F0;&#x3002;Google&#xFF0C;Yahoo&#xFF0C;NASA&#x3002; &#x8BED;&#x8A00;&#x4E4B;&#x95F4;&#x7684;&#x5BF9;&#x6BD4;&#xFF1A; C&#x7F16;&#x8BD1;&#x4E3A;&#x673A;&#x5668;&#x7801;&#xFF1B;JAVA&#x7F16;&#x8BD1;&#x4E3A;&#x5B57;&#x8282;&#x7801;&#xFF1B;python&#x4E3A;&#x89E3;&#x91CA;&#x6267;&#x884C;&#x3002; &#x7F3A;&#x70B9;&#xFF1A; &#x8FD0;&#x884C;&#x6162;&#xFF0C;Python&#x6E90;&#x7801;&#x4E0D;&#x80FD;&#x52A0;&#x5BC6;&#x3002; Python&#x7248;&#x672C;&#x7684;&#x9009;&#x62E9;&#x535A;&#x4E3B;&#x5EFA;&#x8BAE;&#x9009;&#x62E9;&#x5B89;&#x88C5;&#x73AF;&#x5883;&#x7BC7;&#x7684;&#x8FDB;&#x9636;&#x7248;&#xFF1A;2.7&#x7248;&#x672C;&#x4E0E;3.x&#x7248;&#x672C;&#x5171;&#x5B58;&#x3002; 3.x&#x7248;&#x672C;&#x5EFA;&#x8BAE;&#x9009;&#x62E9;Python 3.5.1 |Anaconda 4.1.0 (64-bit)&#x4EE5;&#x540E;&#x5982;&#x679C;&#x8981;&#x4F7F;&#x7528;python&#x8FDB;&#x884C;TensorFlow windows&#x7248;&#x7684;&#x914D;&#x7F6E;&#x53EF;&#x4EE5;&#x7701;&#x4E0B;&#x65F6;&#x95F4;&#x3002; windows&#x4E0B;&#x5B89;&#x88C5;python&#x53C2;&#x8003;&#xFF1A;&#x642D;&#x5EFA;Python&#x5F00;&#x53D1;&#x73AF;&#x5883; &#x7B2C;&#x4E00;&#x4E2A;python&#x7A0B;&#x5E8F;cmd&#x4E0B;&#x8F93;&#x5165;python&#x3002;&#x8FDB;&#x5165;&#x4EA4;&#x4E92;&#x5F0F;&#x73AF;&#x5883;&#x3002; &#x547D;&#x4EE4;&#x884C;&#x6A21;&#x5F0F;&#x542F;&#x52A8;python:python &#x547D;&#x4EE4;&#x884C;&#x6A21;&#x5F0F;&#x6267;&#x884C;python&#x6587;&#x4EF6;python &#x76EE;&#x5F55;/xxx.py &#x547D;&#x4EE4;&#x884C;&#x6A21;&#x5F0F;&#x5173;&#x95ED;python&#xFF1A;exit() &#x6CE8;&#x610F;&#xFF1A;&#x4E0D;&#x8981;&#x4F7F;&#x7528;word&#xFF0C;&#x6216;&#x8005;windows&#x4E0B;&#x81EA;&#x5E26;&#x7684;&#x8BB0;&#x4E8B;&#x672C;&#x6765;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x7F16;&#x5199;&#x3002; &#x63A8;&#x8350;&#x4F7F;&#x7528;&#xFF1A; &#x8F7B;&#x91CF;&#x7EA7;&#xFF1A;sublime Text &#x6216; editplus &#x91CD;&#x91CF;&#x7EA7;(&#x8F83;&#x5927;&#x5DE5;&#x7A0B;) : pycharm Professional 2.7&#x7248;&#x672C;&#x4E13;&#x5C5E;&#xFF1A; print &apos;hello,world!&apos; 3.x&#x7248;&#x672C;(2.7&#x7248;&#x672C;&#x4E5F;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x8FD0;&#x884C;)&#xFF1A; print (&quot;hello,world!&quot;) Python&#x53D8;&#x91CF;&#x548C;&#x6570;&#x636E;&#x7C7B;&#x578B; &#x8BB2;&#x89E3;Python&#x57FA;&#x672C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;.&#x5305;&#x62EC;&#x6574;&#x6570;&#x3001;&#x6D6E;&#x70B9;&#x6570;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x548C;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#xFF0C;&#x4EE5;&#x53CA;&#x53D8;&#x91CF;&#x7684;&#x6982;&#x5FF5;&#x548C;&#x57FA;&#x672C;&#x7684;&#x6570;&#x636E;&#x8FD0;&#x7B97;&#x3002; &#x6570;&#x636E;&#x7C7B;&#x578B;&#x6574;&#x6570;&#x5728;Python&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x6574;&#x6570;&#x7684;&#x8868;&#x793A;&#x65B9;&#x6CD5;&#x548C;&#x6570;&#x5B66;&#x4E0A;&#x7684;&#x5199;&#x6CD5;&#x4E00;&#x6A21;&#x4E00;&#x6837;. &#x4F8B;&#x5982;&#xFF1A;1&#xFF0C;100&#xFF0C;-8080&#xFF0C;0&#xFF0C;&#x7B49;&#x7B49;&#x3002;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x7528;0x&#x524D;&#x7F00;&#x548C;0-9&#xFF0C;a-f&#x8868;&#x793A;. &#x4F8B;&#x5982;&#xFF1A;0xff00&#xFF0C;0xa5b4c3d2&#xFF0C;&#x7B49;&#x7B49;&#x3002; &#x6D6E;&#x70B9;&#x6570;&#x6D6E;&#x70B9;&#x6570;&#x4E5F;&#x5C31;&#x662F;&#x5C0F;&#x6570;&#xFF0C;&#x4E4B;&#x6240;&#x4EE5;&#x79F0;&#x4E3A;&#x6D6E;&#x70B9;&#x6570;: &#x56E0;&#x4E3A;&#x6309;&#x7167;&#x79D1;&#x5B66;&#x8BB0;&#x6570;&#x6CD5;&#x8868;&#x793A;&#x65F6;&#xFF0C;&#x4E00;&#x4E2A;&#x6D6E;&#x70B9;&#x6570;&#x7684;&#x5C0F;&#x6570;&#x70B9;&#x4F4D;&#x7F6E;&#x662F;&#x53EF;&#x53D8;&#x7684; &#x6BD4;&#x5982;&#xFF0C;1.23x10^9&#x548C;12.3x10^8&#x662F;&#x76F8;&#x7B49;&#x7684;&#x3002; &#x6D6E;&#x70B9;&#x6570;&#x53EF;&#x4EE5;&#x7528;&#x6570;&#x5B66;&#x5199;&#x6CD5;: &#x5982;1.23&#xFF0C;3.14&#xFF0C;-9.01&#xFF0C;&#x7B49;&#x7B49;&#x3002;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x5F88;&#x5927;&#x6216;&#x5F88;&#x5C0F;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x7528;&#x79D1;&#x5B66;&#x8BA1;&#x6570;&#x6CD5;&#x8868;&#x793A;&#xFF0C;&#x628A;10&#x7528;e&#x66FF;&#x4EE3;&#xFF0C;1.23x10^9&#x5C31;&#x662F;1.23e9&#xFF0C;&#x6216;&#x8005;12.3e8&#xFF0C;0.000012&#x53EF;&#x4EE5;&#x5199;&#x6210;1.2e-5&#xFF0C;&#x7B49;&#x7B49;&#x3002; &#x6574;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x6570;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x90E8;&#x5B58;&#x50A8;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x6C38;&#x8FDC;&#x662F;&#x7CBE;&#x786E;&#x7684;&#xFF08;&#x9664;&#x6CD5;&#x96BE;&#x9053;&#x4E5F;&#x662F;&#x7CBE;&#x786E;&#x7684;&#xFF1F;&#x662F;&#x7684;&#xFF01;&#xFF09;&#xFF0C;&#x800C;&#x6D6E;&#x70B9;&#x6570;&#x8FD0;&#x7B97;&#x5219;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x56DB;&#x820D;&#x4E94;&#x5165;&#x7684;&#x8BEF;&#x5DEE;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;python2&#x4E0E;3&#x4E0D;&#x540C;&#x6574;&#x9664; python2.7&#x4E0B;&#xFF1A;/ &#x548C; // &#x90FD;&#x662F;&#x6574;&#x6570;&#x9664;&#x6CD5;&#x3002; &#x4F8B;: 1/2&#x7ED3;&#x679C;&#x4E3A;0.&#x540E;&#x9762;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x4F1A;&#x76F4;&#x63A5;&#x53BB;&#x9664;&#x6389;&#x3002; python3.x&#x4E0B;&#xFF1A; / &#x4E3A;&#x6D6E;&#x70B9;&#x6570;&#x9664;&#x6CD5;(&#x5982;&#xFF1A;1/2=0.5) //&#x4E3A;&#x6574;&#x6570;&#x9664;&#x6CD5;(&#x5982;: 1//2 = 0&#xFF09; 12345a = 1 b = 2print a+b#python2.7&#x4E0B;&#x60F3;&#x8981;&#x6D6E;&#x70B9;&#x6570;&#x9664;&#x6CD5;&#x5C31;&#x5F97;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x3002;print float(a)/b &#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x4EE5;&#x2019;&#x2019;&#x6216;&#x201D;&#x201D;&#x62EC;&#x8D77;&#x6765;&#x7684;&#x4EFB;&#x610F;&#x6587;&#x672C;&#xFF0C;&#x6BD4;&#x5982;&#x2019;abc&#x2019;&#xFF0C;&#x201D;xyz&#x201D;&#x7B49;&#x7B49;&#x3002;&#x8BF7;&#x6CE8;&#x610F;&#xFF0C;&#x2019;&#x2019;&#x6216;&#x201D;&#x201D;&#x672C;&#x8EAB;&#x53EA;&#x662F;&#x4E00;&#x79CD;&#x8868;&#x793A;&#x65B9;&#x5F0F;&#xFF0C;&#x4E0D;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x4E00;&#x90E8;&#x5206;. &#x56E0;&#x6B64;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x2019;abc&#x2019;&#x53EA;&#x6709;a&#xFF0C;b&#xFF0C;c&#x8FD9;3&#x4E2A;&#x5B57;&#x7B26;&#x3002; &#x5E03;&#x5C14;&#x503C;&#x5E03;&#x5C14;&#x503C;&#x548C;&#x5E03;&#x5C14;&#x4EE3;&#x6570;&#x7684;&#x8868;&#x793A;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#xFF0C;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x503C;&#x53EA;&#x6709;True&#x3001;False&#x4E24;&#x79CD;&#x503C;&#xFF0C;&#x8981;&#x4E48;&#x662F;True&#xFF0C;&#x8981;&#x4E48;&#x662F;False&#xFF0C;&#x5728;Python&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x7528;True&#x3001;False&#x8868;&#x793A;&#x5E03;&#x5C14;&#x503C;&#xFF08;&#x8BF7;&#x6CE8;&#x610F;&#x5927;&#x5C0F;&#x5199;&#xFF09;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5E03;&#x5C14;&#x8FD0;&#x7B97;&#x8BA1;&#x7B97;&#x51FA;&#x6765;&#x3002; &#x5E03;&#x5C14;&#x503C;&#x53EF;&#x4EE5;&#x7528;and&#x3001;or&#x548C;not&#x8FD0;&#x7B97;&#x3002; and&#x8FD0;&#x7B97;&#x662F;&#x4E0E;&#x8FD0;&#x7B97;&#xFF0C;&#x53EA;&#x6709;&#x6240;&#x6709;&#x90FD;&#x4E3A; True&#xFF0C;and&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x624D;&#x662F; True&#x3002; or&#x8FD0;&#x7B97;&#x662F;&#x6216;&#x8FD0;&#x7B97;&#xFF0C;&#x53EA;&#x8981;&#x5176;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x4E3A; True&#xFF0C;or &#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x5C31;&#x662F; True&#x3002; not&#x8FD0;&#x7B97;&#x662F;&#x975E;&#x8FD0;&#x7B97;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5355;&#x76EE;&#x8FD0;&#x7B97;&#x7B26;&#xFF0C;&#x628A; True &#x53D8;&#x6210; False&#xFF0C;False &#x53D8;&#x6210; True&#x3002; &#x7A7A;&#x503C;&#x7A7A;&#x503C;&#x662F;Python&#x91CC;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x503C;&#xFF0C;&#x7528;None&#x8868;&#x793A;&#x3002; None&#x4E0D;&#x80FD;&#x7406;&#x89E3;&#x4E3A;0&#xFF0C;&#x56E0;&#x4E3A;0&#x662F;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x800C;None&#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x7A7A;&#x503C;&#x3002; &#x7F16;&#x7A0B;&#x5C0F;&#x4EFB;&#x52A1;&#xFF1A; &#x8BA1;&#x7B97;&#x5341;&#x8FDB;&#x5236;&#x6574;&#x6570; 45678 &#x548C;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x6574;&#x6570; 0x12fd2 &#x4E4B;&#x548C;&#x3002; &#x8BF7;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x51FA;Learn Python in imooc&#x3002; &#x8BF7;&#x8BA1;&#x7B97;&#x4EE5;&#x4E0B;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5E03;&#x5C14;&#x503C;&#xFF08;&#x6CE8;&#x610F;==&#x8868;&#x793A;&#x5224;&#x65AD;&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF09;&#xFF1A;12100 &lt; 990xff == 255 &#x9898;&#x76EE;&#x7B54;&#x6848;&#xFF1A; 1234print 45678+0x12fd2print &quot;Learn Python in imooc&quot; print 100&lt;99 print 0xff == 255 &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1234123456Learn Python in imoocFalseTrue print&#x8BED;&#x53E5;print&#x8BED;&#x53E5;&#x53EF;&#x4EE5;&#x5411;&#x5C4F;&#x5E55;&#x4E0A;&#x8F93;&#x51FA;&#x6307;&#x5B9A;&#x7684;&#x6587;&#x5B57;&#x3002;&#x6BD4;&#x5982;&#x8F93;&#x51FA;&#x2019;hello, world&#x2019;&#xFF0C;&#x7528;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; 1print &apos;hello, world&apos; &#x6CE8;&#x610F;&#xFF1A; &#x5F53;&#x6211;&#x4EEC;&#x5728;Python&#x4EA4;&#x4E92;&#x5F0F;&#x73AF;&#x5883;&#x4E0B;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#x65F6;&#xFF0C;&gt;&gt;&gt;&#x662F;Python&#x89E3;&#x91CA;&#x5668;&#x7684;&#x63D0;&#x793A;&#x7B26;&#xFF0C;&#x4E0D;&#x662F;&#x4EE3;&#x7801;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x3002; &#x5F53;&#x6211;&#x4EEC;&#x5728;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x4E2D;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#x65F6;&#xFF0C;&#x5343;&#x4E07;&#x4E0D;&#x8981;&#x81EA;&#x5DF1;&#x6DFB;&#x52A0; &gt;&gt;&gt;&#x3002; print&#x8BED;&#x53E5;&#x4E5F;&#x53EF;&#x4EE5;&#x8DDF;&#x4E0A;&#x591A;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7528;&#x9017;&#x53F7;,&#x9694;&#x5F00;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FDE;&#x6210;&#x4E00;&#x4E32;&#x8F93;&#x51FA;&#xFF1A; 1print &apos;The quick brown fox&apos;, &apos;jumps over&apos;, &apos;the lazy dog&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1The quick brown fox jumps over the lazy dog print&#x4F1A;&#x4F9D;&#x6B21;&#x6253;&#x5370;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x9047;&#x5230;&#x9017;&#x53F7;,&#x4F1A;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;. print&#x4E5F;&#x53EF;&#x4EE5;&#x6253;&#x5370;&#x6574;&#x6570;&#xFF0C;&#x6216;&#x8005;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#xFF1A; 1234&gt;&gt;&gt; print 300300 #&#x8FD0;&#x884C;&#x7ED3;&#x679C;&gt;&gt;&gt; print 100 + 200300 #&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x6F02;&#x4EAE;&#x505A;&#x6CD5;&#xFF1A; 12&gt;&gt;&gt; print &apos;100 + 200 =&apos;, 100 + 200100 + 200 = 300 #&#x8FD0;&#x884C;&#x7ED3;&#x679C; &#x6CE8;&#x610F;: &#x5BF9;&#x4E8E;100 + 200&#xFF0C;Python&#x89E3;&#x91CA;&#x5668;&#x81EA;&#x52A8;&#x8BA1;&#x7B97;&#x51FA;&#x7ED3;&#x679C;300.&#x4F46;&#x662F;&#xFF0C;&#x2019;100 + 200 =&#x2019;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x800C;&#x975E;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#xFF0C;Python&#x628A;&#x5B83;&#x89C6;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;. &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A;&#x8BF7;&#x7528;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x6253;&#x5370;&#x51FA; hello, python.&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 123#input codeprint &apos;hello, python.&apos;print &apos;hello,&apos;,&apos;python.&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 12hello, python.hello, python. &#x6CE8;&#x91CA;Python&#x7684;&#x6CE8;&#x91CA;&#x4EE5;#&#x5F00;&#x5934;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x6587;&#x5B57;&#x76F4;&#x5230;&#x884C;&#x5C3E;&#x90FD;&#x7B97;&#x6CE8;&#x91CA; 12345# &#x8FD9;&#x4E00;&#x884C;&#x5168;&#x90E8;&#x90FD;&#x662F;&#x6CE8;&#x91CA;...print &apos;hello&apos; # &#x8FD9;&#x4E5F;&#x662F;&#x6CE8;&#x91CA;# &#x6682;&#x65F6;&#x4E0D;&#x60F3;&#x8FD0;&#x884C;&#x4E0B;&#x9762;&#x4E00;&#x884C;&#x4EE3;&#x7801;:# print &apos;hello, python.&apos; &#x6CE8;&#x91CA;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5DE7;&#x5999;&#x7684;&#x7528;&#x9014;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x6211;&#x4EEC;&#x4E0D;&#x60F3;&#x8FD0;&#x884C;&#xFF0C;&#x4F46;&#x53C8;&#x4E0D;&#x60F3;&#x5220;&#x9664;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x6CE8;&#x91CA;&#x6682;&#x65F6;&#x5C4F;&#x853D;&#x6389;&#xFF1A; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;:&#x5C06;&#x4EE3;&#x7801;&#x7F16;&#x8F91;&#x5668;&#x4E2D;&#x7684; &#x201C;print &#x2018;hello&#x2019;&#x201D; &#x8BED;&#x53E5;&#x4FEE;&#x6539;&#x6210;&#x6CE8;&#x91CA;&#x8BED;&#x53E5; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 1# print &apos;hello&apos; &#x6CE8;&#x91CA;&#xFF1A;&#x591A;&#x884C;&#x6CE8;&#x91CA;1234&apos;&apos;&apos;&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x884C;&#x88AB;&#x6CE8;&#x91CA;&#x4EE3;&#x7801;&#x4E0B;&#x9762;&#x662F;&#x4E24;&#x884C;&#x88AB;&#x6CE8;&#x91CA;&#x4EE3;&#x7801;&apos;&apos;&apos; &#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;&#x5728;Python&#x4E2D;&#xFF0C;&#x53D8;&#x91CF;&#x7684;&#x6982;&#x5FF5;&#x57FA;&#x672C;&#x4E0A;&#x548C;&#x521D;&#x4E2D;&#x4EE3;&#x6570;&#x7684;&#x65B9;&#x7A0B;&#x53D8;&#x91CF;&#x662F;&#x4E00;&#x81F4;&#x7684;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x5BF9;&#x4E8E;&#x65B9;&#x7A0B;&#x5F0F;y=x*x &#xFF0C;x&#x5C31;&#x662F;&#x53D8;&#x91CF;&#x3002; &#x5F53;x=2&#x65F6;&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x662F;4&#x3002;&#x5F53;x=5&#x65F6;&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x662F;25&#x3002; &#x53EA;&#x662F;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x53D8;&#x91CF;&#x4E0D;&#x4EC5;&#x53EF;&#x4EE5;&#x662F;&#x6570;&#x5B57;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x610F;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002; &#x5728;Python&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x53D8;&#x91CF;&#x662F;&#x7528;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x540D;&#x8868;&#x793A;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x53D8;&#x91CF;&#x540D;&#x5FC5;&#x987B;&#x662F;&#x5927;&#x5C0F;&#x5199;&#x82F1;&#x6587;&#x3001;&#x6570;&#x5B57;&#x548C;&#x4E0B;&#x5212;&#x7EBF; _ &#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x4E14;&#x4E0D;&#x80FD;&#x7528;&#x6570;&#x5B57;&#x5F00;&#x5934;&#x3002;&#x6BD4;&#x5982;&#xFF1A; 12a = 1t_007 = &apos;T007&apos; &#x53D8;&#x91CF;a&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x3002;&#x53D8;&#x91CF;t_007&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x5728;Python&#x4E2D;&#xFF0C;&#x7B49;&#x53F7;=&#x662F;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x4EFB;&#x610F;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x8D4B;&#x503C;&#x7ED9;&#x53D8;&#x91CF;&#xFF0C;&#x540C;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x53CD;&#x590D;&#x8D4B;&#x503C;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x4EE5;&#x662F;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A; 1234a = 123 # a&#x662F;&#x6574;&#x6570;print aa = &apos;imooc&apos; # a&#x53D8;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;print a &#x77E5;&#x8BC6;&#x70B9;: &#x8FD9;&#x79CD;&#x53D8;&#x91CF;&#x672C;&#x8EAB;&#x7C7B;&#x578B;&#x4E0D;&#x56FA;&#x5B9A;&#x7684;&#x8BED;&#x8A00;&#x79F0;&#x4E4B;&#x4E3A;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#xFF0C;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;&#x662F;&#x9759;&#x6001;&#x8BED;&#x8A00;&#x3002; &#x9759;&#x6001;&#x8BED;&#x8A00;&#x5728;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#x65F6;&#x5FC5;&#x987B;&#x6307;&#x5B9A;&#x53D8;&#x91CF;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x8D4B;&#x503C;&#x7684;&#x65F6;&#x5019;&#x7C7B;&#x578B;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#x3002;&#x4F8B;&#x5982;Java&#x662F;&#x9759;&#x6001;&#x8BED;&#x8A00;&#xFF0C;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#x5982;&#x4E0B;&#xFF08;// &#x8868;&#x793A;&#x6CE8;&#x91CA;&#xFF09;&#xFF1A; 123//&#x8FD9;&#x4E9B;&#x662F;java&#x4EE3;&#x7801;int a = 123; // a&#x662F;&#x6574;&#x6570;&#x7C7B;&#x578B;&#x53D8;&#x91CF;a = &quot;mooc&quot;; // &#x9519;&#x8BEF;&#xFF1A;&#x4E0D;&#x80FD;&#x628A;&#x5B57;&#x7B26;&#x4E32;&#x8D4B;&#x7ED9;&#x6574;&#x578B;&#x53D8;&#x91CF; &#x548C;&#x9759;&#x6001;&#x8BED;&#x8A00;&#x76F8;&#x6BD4;&#xFF0C;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#x66F4;&#x7075;&#x6D3B;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x539F;&#x56E0;&#x3002;&#x8BF7;&#x4E0D;&#x8981;&#x628A;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#x7684;&#x7B49;&#x53F7;&#x7B49;&#x540C;&#x4E8E;&#x6570;&#x5B66;&#x7684;&#x7B49;&#x53F7;&#x3002;&#x6BD4;&#x5982;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 12x = 10x = x + 2 &#x5982;&#x679C;&#x4ECE;&#x6570;&#x5B66;&#x4E0A;&#x7406;&#x89E3;x = x + 2&#x90A3;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#x662F;&#x4E0D;&#x6210;&#x7ACB;&#x7684;. &#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#x5148;&#x8BA1;&#x7B97;&#x53F3;&#x4FA7;&#x7684;&#x8868;&#x8FBE;&#x5F0F;x + 2&#xFF0C;&#x5F97;&#x5230;&#x7ED3;&#x679C;12&#xFF0C;&#x518D;&#x8D4B;&#x7ED9;&#x53D8;&#x91CF;x&#x3002;&#x7531;&#x4E8E;x&#x4E4B;&#x524D;&#x7684;&#x503C;&#x662F;10&#xFF0C;&#x91CD;&#x65B0;&#x8D4B;&#x503C;&#x540E;&#xFF0C;x&#x7684;&#x503C;&#x53D8;&#x6210;12&#x3002; &#x6700;&#x540E;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: &#x7406;&#x89E3;&#x53D8;&#x91CF;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x8868;&#x793A;&#x4E5F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x3002;&#x5F53;&#x6211;&#x4EEC;&#x5199;&#xFF1A;a = &#x2018;ABC&#x2019;&#x65F6;&#xFF0C;Python&#x89E3;&#x91CA;&#x5668;&#x5E72;&#x4E86;&#x4E24;&#x4EF6;&#x4E8B;&#x60C5;&#xFF1A; &#x5728;&#x5185;&#x5B58;&#x4E2D;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x2019;ABC&#x2019;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF1B; &#x5728;&#x5185;&#x5B58;&#x4E2D;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;a&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5E76;&#x628A;&#x5B83;&#x6307;&#x5411;&#x2019;ABC&#x2019;&#x3002; &#x4E5F;&#x53EF;&#x4EE5;&#x628A;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;a&#x8D4B;&#x503C;&#x7ED9;&#x53E6;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;b&#xFF0C;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x628A;&#x53D8;&#x91CF;b&#x6307;&#x5411;&#x53D8;&#x91CF;a&#x6240;&#x6307;&#x5411;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4F8B;&#x5982;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 1234a = &apos;ABC&apos;b = aa = &apos;XYZ&apos;print b &#x6700;&#x540E;&#x4E00;&#x884C;&#x6253;&#x5370;&#x51FA;&#x53D8;&#x91CF;b&#x7684;&#x5185;&#x5BB9;&#x5230;&#x5E95;&#x662F;&#x2019;ABC&#x2019;&#x5462;&#x8FD8;&#x662F;&#x2019;XYZ&#x2019;&#xFF1F;&#x5982;&#x679C;&#x4ECE;&#x6570;&#x5B66;&#x610F;&#x4E49;&#x4E0A;&#x7406;&#x89E3;&#xFF0C;&#x5C31;&#x4F1A;&#x9519;&#x8BEF;&#x5730;&#x5F97;&#x51FA;b&#x548C;a&#x76F8;&#x540C;&#xFF0C;&#x4E5F;&#x5E94;&#x8BE5;&#x662F;&#x2019;XYZ&#x2019;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;b&#x7684;&#x503C;&#x662F;&#x2019;ABC&#x2019;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x4E00;&#x884C;&#x4E00;&#x884C;&#x5730;&#x6267;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5230;&#x5E95;&#x53D1;&#x751F;&#x4E86;&#x4EC0;&#x4E48;&#x4E8B;&#xFF1A; &#x6267;&#x884C;a = &apos;ABC&apos;&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x521B;&#x5EFA;&#x4E86;&#x5B57;&#x7B26;&#x4E32; &apos;ABC&apos;&#x548C;&#x53D8;&#x91CF; a&#xFF0C;&#x5E76;&#x628A;a&#x6307;&#x5411; &apos;ABC&apos;&#xFF1A; &#x6267;&#x884C;b = a&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x521B;&#x5EFA;&#x4E86;&#x53D8;&#x91CF; b&#xFF0C;&#x5E76;&#x628A;b&#x6307;&#x5411; a &#x6307;&#x5411;&#x7684;&#x5B57;&#x7B26;&#x4E32;&apos;ABC&apos;&#xFF1A; &#x6267;&#x884C;a = &apos;XYZ&apos;&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x521B;&#x5EFA;&#x4E86;&#x5B57;&#x7B26;&#x4E32;&apos;XYZ&apos;&#xFF0C;&#x5E76;&#x628A;a&#x7684;&#x6307;&#x5411;&#x6539;&#x4E3A;&#x2019;XYZ&#x2019;&#xFF0C;&#x4F46;b&#x5E76;&#x6CA1;&#x6709;&#x66F4;&#x6539;&#xFF1A; &#x6240;&#x4EE5;&#xFF0C;&#x6700;&#x540E;&#x6253;&#x5370;&#x53D8;&#x91CF;b&#x7684;&#x7ED3;&#x679C;&#x81EA;&#x7136;&#x662F;&#x2019;ABC&#x2019;&#x4E86;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A; &#x7B49;&#x5DEE;&#x6570;&#x5217;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x4E3A;&#x6BCF;&#x4E00;&#x9879;&#x4E0E;&#x5B83;&#x7684;&#x524D;&#x4E00;&#x9879;&#x7684;&#x5DEE;&#x7B49;&#x4E8E;&#x4E00;&#x4E2A;&#x5E38;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x53D8;&#x91CF; x1 &#x8868;&#x793A;&#x7B49;&#x5DEE;&#x6570;&#x5217;&#x7684;&#x7B2C;&#x4E00;&#x9879;&#xFF0C;&#x7528; d &#x8868;&#x793A;&#x516C;&#x5DEE;&#xFF0C;&#x8BF7;&#x8BA1;&#x7B97;&#x6570;&#x5217; 1 4 7 10 13 16 19 &#x2026; &#x524D; 100 &#x9879;&#x7684;&#x548C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 1234567x1 = 1d = 3n = 100x100 = x1+(100-1)*ds2 = (x1+x100)*100/2s = n*x1+n*(n-1)*d/2print s,s2 &#x7B49;&#x5DEE;&#x6570;&#x5217;&#x516C;&#x5F0F;&#xFF1A; &#xFF08;&#x9996;&#x9879;+&#x5C3E;&#x9879;&#xFF09;*&#x9879;&#x6570;/2 &#x9879;&#x6570;*&#x9996;&#x9879;+&#x9879;&#x6570;*(&#x9879;&#x6570;-1)*&#x516C;&#x5DEE;/2 &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 114950 14950 &#x5B9A;&#x4E49;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x7B26;&#x4E32;&#x53EF;&#x4EE5;&#x7528;&apos;&apos;&#x6216;&#x8005;&quot;&quot;&#x62EC;&#x8D77;&#x6765;&#x8868;&#x793A;&#x3002; &#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x672C;&#x8EAB;&#x5305;&#x542B;&apos;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x8981;&#x8868;&#x793A;&#x5B57;&#x7B26;&#x4E32; I&apos;m OK&#xFF0C;&#x8FD9;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&quot; &quot;&#x62EC;&#x8D77;&#x6765;&#x8868;&#x793A;&#xFF1A; 12&quot;I&apos;m OK&quot;&apos;Learn &quot;Python&quot; in imooc&apos; &#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: &#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x5305;&#x542B;&quot;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&apos; &apos;&#x62EC;&#x8D77;&#x6765;&#x8868;&#x793A;&#xFF1A; &#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x65E2;&#x5305;&#x542B;&apos;&#x53C8;&#x5305;&#x542B;&quot;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x8F6C;&#x4E49; &#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x5B57;&#x7B26;&#x8FDB;&#x884C;&#x8F6C;&#x4E49;&#xFF0C;Python&#x5B57;&#x7B26;&#x4E32;&#x7528;\&#x8FDB;&#x884C;&#x8F6C;&#x4E49;&#x3002; &#x8981;&#x8868;&#x793A;&#x5B57;&#x7B26;&#x4E32; Bob said &quot;I&apos;m OK&quot;.&#x7531;&#x4E8E; &apos; &#x548C;&quot;&#x4F1A;&#x5F15;&#x8D77;&#x6B67;&#x4E49;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x5B83;&#x524D;&#x9762;&#x63D2;&#x5165;&#x4E00;&#x4E2A;\&#x8868;&#x793A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x5B57;&#x7B26;&#xFF0C;&#x4E0D;&#x4EE3;&#x8868;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8D77;&#x59CB;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x53C8;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A; 12&apos;Bob said \&quot;I\&apos;m OK\&quot;.&apos;# &#x5728;&#x8981;&#x4FDD;&#x7559;&#x539F;&#x72B6;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x9762;&#x52A0;&#x4E0A;&#x53F3;&#x659C;&#x6760; &#x6CE8;&#x610F;&#xFF1A;&#x8F6C;&#x4E49;&#x5B57;&#x7B26; \&#x4E0D;&#x8BA1;&#x5165;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5185;&#x5BB9;&#x4E2D;&#x3002; &#x5E38;&#x7528;&#x7684;&#x8F6C;&#x4E49;&#x5B57;&#x7B26;&#x8FD8;&#x6709;&#xFF1A; \n&#x8868;&#x793A;&#x6362;&#x884C; \t &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5236;&#x8868;&#x7B26; \\ &#x8868;&#x793A; \ &#x5B57;&#x7B26;&#x672C;&#x8EAB; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A; &#x8BF7;&#x5C06;&#x4E0B;&#x9762;&#x4E24;&#x884C;&#x5185;&#x5BB9;&#x7528;Python&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x5E76;&#x6253;&#x5370;&#x51FA;&#x6765;&#xFF1A; 12&#x3000;&#x3000;Python was started in 1989 by &quot;Guido&quot;.&#x3000;&#x3000;Python is free and easy to learn. 12s = &apos;Python was started in 1989 by&quot;Guido&quot;.\nPython is free and easy to learn.&apos;print s raw&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x591A;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5305;&#x542B;&#x5F88;&#x591A;&#x9700;&#x8981;&#x8F6C;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x90FD;&#x8FDB;&#x884C;&#x8F6C;&#x4E49;&#x4F1A;&#x5F88;&#x9EBB;&#x70E6;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x9762;&#x52A0;&#x4E2A;&#x524D;&#x7F00; r &#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A; raw &#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x91CC;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8F6C;&#x4E49;&#x4E86;&#x3002;&#x4F8B;&#x5982;&#xFF1A; 1r&apos;\(~_~)/ \(~_~)/&apos; &#x89E3;&#x91CA;&#xFF1A; &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E3E;&#x5F97;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x51FA;raw&#x52A0;&#x4E0A;&#x4E4B;&#x540E;&#x3002;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x8BEF;&#x4F1A;&#x7684;\&#x88AB;&#x4FEE;&#x6539;&#x4E3A;\\(\\ &#x8868;&#x793A; \ &#x5B57;&#x7B26;&#x672C;&#x8EAB;) &#x4E0D;&#x52A0;&#x4E0A;r &#x53EA;&#x6709;\&#x548C;(&#x5E76;&#x6CA1;&#x6709;&#x5408;&#x6210;&#x8F6C;&#x4E49;&#x5B57;&#x7B26;&#x3002; &#x52A0;&#x4E0A;r&#x3002;\&#x9700;&#x8981;&#x88AB;&#x8F6C;&#x4E49;&#xFF0C;&#x7ECF;&#x8FC7;&#x8F6C;&#x4E49;&#x540E;&#x663E;&#x793A;&#x51FA;&#x6765;&#x8FD8;&#x662F;&#x81EA;&#x5DF1;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x4E2A;&#x4EBA;&#x5C0F;&#x9898;(r&#x7684;&#x5F3A;&#x5927;&#x4F5C;&#x7528;) &#x4E0A;&#x56FE;&#x6548;&#x679C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;r&#x7684;&#x5F3A;&#x5927;&#x4F5C;&#x7528;&#x3002; &#x4F46;&#x662F;r&apos;&#x6211;&#x662F;&#x4E00;&#x6BB5;&#x5B57;&#x7B26;&apos;&#x8868;&#x793A;&#x6CD5;&#x4E0D;&#x80FD;&#x8868;&#x793A;&#x591A;&#x884C;&#x5B57;&#x7B26;&#x4E32;(r&apos;&apos;&apos;&#x4E00;&#x6BB5;&#x5B57;&#x7B26;&apos;&apos;&apos;)&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x8868;&#x793A;&#x5305;&#x542B;&apos;&#x548C; &quot;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#xFF09; &#x56E0;&#x4E3A;&#x5982;&#x679C;r&apos;mtian&apos;yan&apos; r&#x9047;&#x5230;&#x5DE6;&#x8FB9;&#x7B2C;&#x4E00;&#x4E2A;&apos;,&#x4F1A;&#x7EE7;&#x7EED;&#x5F80;&#x540E;&#x627E;&#x95ED;&#x5408;&#x7684;&#x6807;&#x5FD7;&apos;&#x7136;&#x540E;&#x627E;&#x5230;mtian&#x7684;&#x5730;&#x65B9;&#x3002;&#x5B83;&#x4EFB;&#x52A1;&#x7ED3;&#x675F;&#x4E86;&#x3002;&#x4EE3;&#x7801;&#x7EE7;&#x7EED;&#x5F80;&#x4E0B;&#x6267;&#x884C;&#x3002;&#x5F53;&#x626B;&#x5230;yan&#x8FD9;&#x91CC;&#x4ED6;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#x3002; ???(&#x66F4;&#x6DF1;&#x5C42;&#x5F85;&#x7EED;) &#x6216;&#x8005;r&quot;mtian&quot;yan&quot; &#x6216;&#x5BFC;&#x81F4;r&#x63D0;&#x524D;&#x7ED3;&#x675F;&#x6389;&#x3002;&#x540E;&#x9762;&#x7684;&#x5C31;&#x65E0;&#x6CD5;&#x7EE7;&#x7EED;&#x5339;&#x914D;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x591A;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&apos;&apos;&apos;...&apos;&apos;&apos;&#x8868;&#x793A;&#xFF1A; 12345&apos;&apos;&apos;Line 1Line 2Line 3&apos;&apos;&apos;#&#x4E0A;&#x9762;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8868;&#x793A;&#x65B9;&#x6CD5;&#x548C;&#x4E0B;&#x9762;&#x7684;&#x662F;&#x5B8C;&#x5168;&#x4E00;&#x6837;&#x7684;&#xFF1A;&apos;Line 1\nLine 2\nLine 3&apos; &#x8FD8;&#x53EF;&#x4EE5;&#x5728;&#x591A;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x9762;&#x6DFB;&#x52A0; r &#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x591A;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#x4E5F;&#x53D8;&#x6210;&#x4E00;&#x4E2A;raw&#x5B57;&#x7B26;&#x4E32;&#xFF1A; 123r&apos;&apos;&apos;Python is created by &quot;Guido&quot;.It is free and easy to learn.Let&apos;s start learn Python in imooc!&apos;&apos;&apos; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A;&#x8BF7;&#x628A;&#x4E0B;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x7528;r&apos;&apos;&apos;...&apos;&apos;&apos;&#x7684;&#x5F62;&#x5F0F;&#x6539;&#x5199;&#xFF0C;&#x5E76;&#x7528;print&#x6253;&#x5370;&#x51FA;&#x6765;&#xFF1A; 1&apos;\&quot;To be, or not to be\&quot;: that is the question.\nWhether it\&apos;s nobler in the mind to suffer.&apos; 12print r&apos;&apos;&apos;&quot;To be,or not to be&quot;:that is the question.Whether it&apos;s nobler in the mind to suffer.&apos;&apos;&apos; &#x77E5;&#x8BC6;&#x70B9;: Unicode&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x7B26;&#x4E32;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x7F16;&#x7801;&#x95EE;&#x9898;&#x3002; &#x56E0;&#x4E3A;&#x8BA1;&#x7B97;&#x673A;&#x53EA;&#x80FD;&#x5904;&#x7406;&#x6570;&#x5B57;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5904;&#x7406;&#x6587;&#x672C;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x5148;&#x628A;&#x6587;&#x672C;&#x8F6C;&#x6362;&#x4E3A;&#x6570;&#x5B57;&#x624D;&#x80FD;&#x5904;&#x7406;&#x3002;&#x6700;&#x65E9;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x5728;&#x8BBE;&#x8BA1;&#x65F6;&#x91C7;&#x7528;8&#x4E2A;&#x6BD4;&#x7279;&#xFF08;bit&#xFF09;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#xFF08;byte&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x80FD;&#x8868;&#x793A;&#x7684;&#x6700;&#x5927;&#x7684;&#x6574;&#x6570;&#x5C31;&#x662F;255&#xFF08;&#x4E8C;&#x8FDB;&#x5236;11111111=&#x5341;&#x8FDB;&#x5236;255&#xFF09;&#xFF0C;0 - 255&#x88AB;&#x7528;&#x6765;&#x8868;&#x793A;&#x5927;&#x5C0F;&#x5199;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#x3001;&#x6570;&#x5B57;&#x548C;&#x4E00;&#x4E9B;&#x7B26;&#x53F7;&#xFF0C;&#x8FD9;&#x4E2A;&#x7F16;&#x7801;&#x8868;&#x88AB;&#x79F0;&#x4E3A;ASCII&#x7F16;&#x7801;&#xFF0C;&#x6BD4;&#x5982;&#x5927;&#x5199;&#x5B57;&#x6BCD; A &#x7684;&#x7F16;&#x7801;&#x662F;65&#xFF0C;&#x5C0F;&#x5199;&#x5B57;&#x6BCD; z &#x7684;&#x7F16;&#x7801;&#x662F;122&#x3002; &#x5982;&#x679C;&#x8981;&#x8868;&#x793A;&#x4E2D;&#x6587;&#xFF0C;&#x663E;&#x7136;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x662F;&#x4E0D;&#x591F;&#x7684;&#xFF0C;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x4E0D;&#x80FD;&#x548C;ASCII&#x7F16;&#x7801;&#x51B2;&#x7A81;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x4E2D;&#x56FD;&#x5236;&#x5B9A;&#x4E86;GB2312&#x7F16;&#x7801;&#xFF0C;&#x7528;&#x6765;&#x628A;&#x4E2D;&#x6587;&#x7F16;&#x8FDB;&#x53BB;&#x3002; &#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x65E5;&#x6587;&#x548C;&#x97E9;&#x6587;&#x7B49;&#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x4E5F;&#x6709;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x4E3A;&#x4E86;&#x7EDF;&#x4E00;&#x6240;&#x6709;&#x6587;&#x5B57;&#x7684;&#x7F16;&#x7801;&#xFF0C;Unicode&#x5E94;&#x8FD0;&#x800C;&#x751F;&#x3002;Unicode&#x628A;&#x6240;&#x6709;&#x8BED;&#x8A00;&#x90FD;&#x7EDF;&#x4E00;&#x5230;&#x4E00;&#x5957;&#x7F16;&#x7801;&#x91CC;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x4F1A;&#x518D;&#x6709;&#x4E71;&#x7801;&#x95EE;&#x9898;&#x4E86;&#x3002; Unicode&#x901A;&#x5E38;&#x7528;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x539F;&#x6709;&#x7684;&#x82F1;&#x6587;&#x7F16;&#x7801;&#x4ECE;&#x5355;&#x5B57;&#x8282;&#x53D8;&#x6210;&#x53CC;&#x5B57;&#x8282;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x628A;&#x9AD8;&#x5B57;&#x8282;&#x5168;&#x90E8;&#x586B;&#x4E3A;0&#x5C31;&#x53EF;&#x4EE5;&#x3002; &#x56E0;&#x4E3A;Python&#x7684;&#x8BDE;&#x751F;&#x6BD4;Unicode&#x6807;&#x51C6;&#x53D1;&#x5E03;&#x7684;&#x65F6;&#x95F4;&#x8FD8;&#x8981;&#x65E9;&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x65E9;&#x7684;Python&#x53EA;&#x652F;&#x6301;ASCII&#x7F16;&#x7801;&#xFF0C;&#x666E;&#x901A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x2019;ABC&#x2019;&#x5728;Python&#x5185;&#x90E8;&#x90FD;&#x662F;ASCII&#x7F16;&#x7801;&#x7684;&#x3002; Python&#x5728;&#x540E;&#x6765;&#x6DFB;&#x52A0;&#x4E86;&#x5BF9;Unicode&#x7684;&#x652F;&#x6301;&#xFF0C;&#x4EE5;Unicode&#x8868;&#x793A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x7528;u&#x2019;&#x2026;&#x2019;&#x8868;&#x793A;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A; 123print u&apos;&#x4E2D;&#x6587;&apos;&#x4E2D;&#x6587;&#x6CE8;&#x610F;: &#x4E0D;&#x52A0; u &#xFF0C;&#x4E2D;&#x6587;&#x5C31;&#x4E0D;&#x80FD;&#x6B63;&#x5E38;&#x663E;&#x793A;&#x3002;(&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x662F;&#x5F88;&#x65E9;&#x7248;&#x672C;&#x624D;&#x4F1A;&#x3002;&#x7B14;&#x8005;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x65E0;&#x6CD5;&#x590D;&#x73B0;) &#x8F6C;&#x8F7D;: http://blog.csdn.net/lxdcyh/article/details/4018054 &#x5B57;&#x7B26;&#x4E32;&#x5728;Python&#x5185;&#x90E8;&#x7684;&#x8868;&#x793A;&#x662F;unicode&#x7F16;&#x7801;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x505A;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#x65F6;&#xFF0C;&#x901A;&#x5E38;&#x9700;&#x8981;&#x4EE5;unicode&#x4F5C;&#x4E3A;&#x4E2D;&#x95F4;&#x7F16;&#x7801;&#xFF0C;&#x5373;&#x5148;&#x5C06;&#x5176;&#x4ED6;&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x89E3;&#x7801;decode&#x6210;unicode&#xFF0C;&#x518D;&#x4ECE;unicode&#x7F16;&#x7801;encode&#x6210;&#x53E6;&#x4E00;&#x79CD;&#x7F16;&#x7801;&#x3002; decode&#x7684;&#x4F5C;&#x7528;&#x662F;&#x5C06;&#x5176;&#x4ED6;&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;unicode&#x7F16;&#x7801;&#xFF0C;&#x5982;str1.decode(&apos;gb2312&apos;)&#xFF0C;&#x8868;&#x793A;&#x5C06;gb2312&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;str1&#x8F6C;&#x6362;&#x6210;unicode&#x7F16;&#x7801;&#x3002; encode&#x7684;&#x4F5C;&#x7528;&#x662F;&#x5C06;unicode&#x7F16;&#x7801;&#x8F6C;&#x6362;&#x6210;&#x5176;&#x4ED6;&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5982;str2.encode(&#x2018;gb2312&#x2019;)&#xFF0C;&#x8868;&#x793A;&#x5C06;unicode&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;str2&#x8F6C;&#x6362;&#x6210;gb2312&#x7F16;&#x7801; &#x4EE3;&#x7801;&#x4E2D;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x9ED8;&#x8BA4;&#x7F16;&#x7801;&#x4E0E;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#x672C;&#x8EAB;&#x7684;&#x7F16;&#x7801;&#x4E00;&#x81F4;&#x3002; &#x5982;&#xFF1A;s=&#x2019;&#x4E2D;&#x6587;&#x2019; &#x5982;&#x679C;&#x662F;&#x5728;utf8&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x8BE5;&#x5B57;&#x7B26;&#x4E32;&#x5C31;&#x662F;utf8&#x7F16;&#x7801;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5728;gb2312&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x5219;&#x5176;&#x7F16;&#x7801;&#x4E3A;gb2312&#x3002;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8981;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#xFF0C;&#x90FD;&#x9700;&#x8981;&#x5148;&#x7528;decode&#x65B9;&#x6CD5;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x6210;unicode&#x7F16;&#x7801;&#xFF0C;&#x518D;&#x4F7F;&#x7528;encode&#x65B9;&#x6CD5;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x6210;&#x5176;&#x4ED6;&#x7F16;&#x7801;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x5728;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x7279;&#x5B9A;&#x7684;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x65F6;&#xFF0C;&#x90FD;&#x662F;&#x4F7F;&#x7528;&#x7684;&#x7CFB;&#x7EDF;&#x9ED8;&#x8BA4;&#x7F16;&#x7801;&#x521B;&#x5EFA;&#x7684;&#x4EE3;&#x7801;&#x6587;&#x4EF6; &#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x8FD9;&#x6837;&#x5B9A;&#x4E49;&#xFF1A;s=u&#x2019;&#x4E2D;&#x6587;&#x2019; &#x5219;&#x8BE5;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x7F16;&#x7801;&#x5C31;&#x88AB;&#x6307;&#x5B9A;&#x4E3A;unicode&#x4E86;&#xFF0C;&#x5373;python&#x7684;&#x5185;&#x90E8;&#x7F16;&#x7801;&#xFF0C;&#x800C;&#x4E0E;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#x672C;&#x8EAB;&#x7684;&#x7F16;&#x7801;&#x65E0;&#x5173;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x505A;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x76F4;&#x63A5;&#x4F7F;&#x7528;encode&#x65B9;&#x6CD5;&#x5C06;&#x5176;&#x8F6C;&#x6362;&#x6210;&#x6307;&#x5B9A;&#x7F16;&#x7801;&#x5373;&#x53EF;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5DF2;&#x7ECF;&#x662F;unicode&#x4E86;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x89E3;&#x7801;&#x5219;&#x5C06;&#x51FA;&#x9519;&#xFF0C;&#x56E0;&#x6B64;&#x901A;&#x5E38;&#x8981;&#x5BF9;&#x5176;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x662F;&#x5426;&#x4E3A;unicode&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF1A; 12isinstance(s, unicode) #&#x7528;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;unicode &#x7528;&#x975E;unicode&#x7F16;&#x7801;&#x5F62;&#x5F0F;&#x7684;str&#x6765;encode&#x4F1A;&#x62A5;&#x9519; &#x5982;&#x4F55;&#x83B7;&#x5F97;&#x7CFB;&#x7EDF;&#x7684;&#x9ED8;&#x8BA4;&#x7F16;&#x7801;&#xFF1F; 1234#!/usr/bin/env python#coding=utf-8import sysprint sys.getdefaultencoding() &#x8BE5;&#x6BB5;&#x7A0B;&#x5E8F;&#x5728;Win10(1079)&#x4E0A;&#x8F93;&#x51FA;&#x4E3A;&#xFF1A;ascii &#x5728;&#x67D0;&#x4E9B;IDE&#x4E2D;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8F93;&#x51FA;&#x603B;&#x662F;&#x51FA;&#x73B0;&#x4E71;&#x7801;&#xFF0C;&#x751A;&#x81F3;&#x9519;&#x8BEF;&#xFF0C;&#x5176;&#x5B9E;&#x662F;&#x7531;&#x4E8E;IDE&#x7684;&#x7ED3;&#x679C;&#x8F93;&#x51FA;&#x63A7;&#x5236;&#x53F0;&#x81EA;&#x8EAB;&#x4E0D;&#x80FD;&#x663E;&#x793A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x7A0B;&#x5E8F;&#x672C;&#x8EAB;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5982;&#x5728;UliPad(&#x6CE8;:UliPad&#x662F;wxPython&#x7684;&#x52A8;&#x529B;&#xFF0C;&#x5BFC;&#x5411;&#x548C;&#x7075;&#x6D3B;&#x7684;&#x7F16;&#x7A0B;&#x5668;)&#x4E2D;&#x8FD0;&#x884C;&#x5982;&#x4E0B;&#x4EE3;&#x7801;&#xFF1A; 12s=u&quot;&#x4E2D;&#x6587;&quot;print s &#x4F1A;&#x63D0;&#x793A;&#xFF1A;UnicodeEncodeError: &#x2018;ascii&#x2019; codec can&#x2019;t encode characters in position 0-1: ordinal not in range(128)&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;UliPad&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#x7A97;&#x53E3;&#x662F;&#x6309;&#x7167;ascii&#x7F16;&#x7801;&#x8F93;&#x51FA;&#x7684;&#xFF08;&#x7CFB;&#x7EDF;&#x7684;&#x9ED8;&#x8BA4;&#x7F16;&#x7801;&#x662F;ascii&#xFF09;&#xFF0C;&#x800C;&#x4E0A;&#x9762;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x662F;Unicode&#x7F16;&#x7801;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8F93;&#x51FA;&#x65F6;&#x4EA7;&#x751F;&#x4E86;&#x9519;&#x8BEF;&#x3002; &#x5C06;&#x6700;&#x540E;&#x4E00;&#x53E5;&#x6539;&#x4E3A;&#xFF1A;print s.encode(&apos;gb2312&apos;) &#x5219;&#x80FD;&#x6B63;&#x786E;&#x8F93;&#x51FA;&#x201C;&#x4E2D;&#x6587;&#x201D;&#x4E24;&#x4E2A;&#x5B57;&#x3002; &#x82E5;&#x6700;&#x540E;&#x4E00;&#x53E5;&#x6539;&#x4E3A;&#xFF1A;print s.encode(&apos;utf8&apos;) &#x5219;&#x8F93;&#x51FA;&#xFF1A;/xe4/xb8/xad/xe6/x96/x87&#xFF0C;&#x8FD9;&#x662F;&#x63A7;&#x5236;&#x53F0;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#x7A97;&#x53E3;&#x6309;&#x7167;ascii&#x7F16;&#x7801;&#x8F93;&#x51FA;utf8&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x7ED3;&#x679C;&#x3002; unicode(str,&apos;gb2312&apos;)&#x4E0E;str.decode(&apos;gb2312&apos;)&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x90FD;&#x662F;&#x5C06;gb2312&#x7F16;&#x7801;&#x7684;str&#x8F6C;&#x4E3A;unicode&#x7F16;&#x7801; &#x4F7F;&#x7528;str.__class__&#x53EF;&#x4EE5;&#x67E5;&#x770B;str&#x7684;&#x7F16;&#x7801;&#x5F62;&#x5F0F;&#x4E3A;str&#x7C7B;&#x578B;&#x3002; window&#x9ED8;&#x8BA4;&#x7F16;&#x7801;gbk&#xFF1B;linux&#x9ED8;&#x8BA4;&#x7F16;&#x7801;utf8 &#x539F;&#x7406;&#x8BF4;&#x4E86;&#x534A;&#x5929;&#xFF0C;&#x6700;&#x540E;&#x6765;&#x4E2A;&#x5305;&#x6CBB;&#x767E;&#x75C5;&#x7684;&#x5427;&#xFF1A;(&#x5929;&#x6DAF;)&#xFF1A;&#x4E0B;&#x9762;&#x4EE3;&#x7801; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!/usr/bin/env python #coding=utf-8def getCoding(strInput): &apos;&apos;&apos; &#x83B7;&#x53D6;&#x7F16;&#x7801;&#x683C;&#x5F0F; &apos;&apos;&apos; if isinstance(strInput, unicode): return &quot;unicode&quot; try: strInput.decode(&quot;utf8&quot;) return &apos;utf8&apos; except: pass try: strInput.decode(&quot;gbk&quot;) return &apos;gbk&apos; except: pass def tran2UTF8(strInput): &apos;&apos;&apos; &#x8F6C;&#x5316;&#x4E3A;utf8&#x683C;&#x5F0F; &apos;&apos;&apos; strCodingFmt = getCoding(strInput) if strCodingFmt == &quot;utf8&quot;: return strInput elif strCodingFmt == &quot;unicode&quot;: return strInput.encode(&quot;utf8&quot;) elif strCodingFmt == &quot;gbk&quot;: return strInput.decode(&quot;gbk&quot;).encode(&quot;utf8&quot;)def tran2GBK(strInput): &apos;&apos;&apos; &#x8F6C;&#x5316;&#x4E3A;gbk&#x683C;&#x5F0F; &apos;&apos;&apos; strCodingFmt = getCoding(strInput) if strCodingFmt == &quot;gbk&quot;: return strInput elif strCodingFmt == &quot;unicode&quot;: return strInput.encode(&quot;gbk&quot;) elif strCodingFmt == &quot;utf8&quot;: return strInput.decode(&quot;utf8&quot;).encode(&quot;gbk&quot;)s = &quot;&#x4E2D;&#x6587;&quot;if isinstance(s, unicode): #s=u&quot;&#x4E2D;&#x6587;&quot; print s.encode(&apos;gb2312&apos;) print &quot;&#x6211;&#x662F;Unicode&#x7F16;&#x7801;&#x7684;&quot;elif getCoding(s) == &quot;utf8&quot;: #s=&quot;&#x4E2D;&#x6587;&quot; print s.decode(&apos;utf-8&apos;).encode(&apos;gb2312&apos;) print &quot;&#x6211;&#x662F;utf-8&#x7F16;&#x7801;&#x7684;&quot;else: print s.decode(&apos;gbk&apos;).encode(&apos;gbk&apos;) print &quot;&#x6211;&#x662F;gbk&#x7F16;&#x7801;&#x7684;&quot; &#x4E0A;&#x56FE;&#x7ED3;&#x679C;&#x4E00;&#xFF1A;&#x4EE5;utf-8&#x683C;&#x5F0F;&#x4FDD;&#x5B58;&#x7684;py&#x6587;&#x4EF6;&#x3002;&#x56FE;&#x4E8C;&#xFF1A;&#x4EE5;ascii&#x683C;&#x5F0F;&#x4FDD;&#x5B58;&#x7684;py&#x6587;&#x4EF6;&#x3002; &#x7F16;&#x7801;&#x68C0;&#x6D4B;&#x5305; chardet &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x56E0;&#x6B64;&#xFF0C;&#x8F6C;&#x7801;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5B9A;&#x8981;&#x5148;&#x641E;&#x660E;&#x767D;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;str&#x662F;&#x4EC0;&#x4E48;&#x7F16;&#x7801;&#xFF0C;&#x7136;&#x540E;decode&#x6210;unicode&#xFF0C;&#x7136;&#x540E;&#x518D;encode&#x6210;&#x5176;&#x4ED6;&#x7F16;&#x7801; &#x63D2;&#x5165;&#x6570;&#x636E;&#x5E93;&#x62A5;&#x9519;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;:UnicodeDecodeError: &#x2018;ascii&#x2019; codec can&#x2019;t decode byte 123import sysreload(sys)sys.setdefaultencoding(&apos;utf8&apos;) Unicode&#x5B57;&#x7B26;&#x4E32;&#x9664;&#x4E86;&#x591A;&#x4E86;&#x4E00;&#x4E2A; u &#x4E4B;&#x5916;&#xFF0C;&#x4E0E;&#x666E;&#x901A;&#x5B57;&#x7B26;&#x4E32;&#x6CA1;&#x5565;&#x533A;&#x522B;&#xFF0C;&#x8F6C;&#x4E49;&#x5B57;&#x7B26;&#x548C;&#x591A;&#x884C;&#x8868;&#x793A;&#x6CD5;&#x4ECD;&#x7136;&#x6709;&#x6548;&#xFF1A; &#x8F6C;&#x4E49;&#xFF1A; 1234567891011u&apos;&#x4E2D;&#x6587;\n&#x65E5;&#x6587;\n&#x97E9;&#x6587;&apos;#&#x591A;&#x884C;&#xFF1A;u&apos;&apos;&apos;&#x7B2C;&#x4E00;&#x884C;&#x7B2C;&#x4E8C;&#x884C;&apos;&apos;&apos;#raw+&#x591A;&#x884C;&#xFF1A;ur&apos;&apos;&apos;Python&#x7684;Unicode&#x5B57;&#x7B26;&#x4E32;&#x652F;&#x6301;&quot;&#x4E2D;&#x6587;&quot;,&quot;&#x65E5;&#x6587;&quot;,&quot;&#x97E9;&#x6587;&quot;&#x7B49;&#x591A;&#x79CD;&#x8BED;&#x8A00;&apos;&apos;&apos; &#x5982;&#x679C;&#x4E2D;&#x6587;&#x5B57;&#x7B26;&#x4E32;&#x5728;Python&#x73AF;&#x5883;&#x4E0B;&#x9047;&#x5230; UnicodeDecodeError&#xFF0C;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;.py&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x7684;&#x683C;&#x5F0F;&#x6709;&#x95EE;&#x9898;&#x3002;&#x53EF;&#x4EE5;&#x5728;&#x7B2C;&#x4E00;&#x884C;&#x6DFB;&#x52A0;&#x6CE8;&#x91CA; 1234# -*- coding: utf-8 -*-#&#x7B80;&#x6D01;&#x7248;#coding=utf-8 &#x76EE;&#x7684;&#x662F;&#x544A;&#x8BC9;Python&#x89E3;&#x91CA;&#x5668;&#xFF0C;&#x7528;UTF-8&#x7F16;&#x7801;&#x8BFB;&#x53D6;&#x6E90;&#x4EE3;&#x7801;&#x3002;&#x7136;&#x540E;&#x7528;Notepad++ &#x53E6;&#x5B58;&#x4E3A;&#x2026; &#x5E76;&#x9009;&#x62E9;UTF-8&#x683C;&#x5F0F;&#x4FDD;&#x5B58;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A;&#x7528;&#x591A;&#x884C;Unicode&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x4E0B;&#x9762;&#x7684;&#x5510;&#x8BD7;&#x5E76;&#x6253;&#x5370;&#xFF1A; &#x9759;&#x591C;&#x601D; &#x5E8A;&#x524D;&#x660E;&#x6708;&#x5149;&#xFF0C;&#x7591;&#x662F;&#x5730;&#x4E0A;&#x971C;&#x3002;&#x4E3E;&#x5934;&#x671B;&#x660E;&#x6708;&#xFF0C;&#x4F4E;&#x5934;&#x601D;&#x6545;&#x4E61;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: https://www.python.org/dev/peps/pep-0263/ python&#x5B9A;&#x4E49;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x5230;&#x5E95;&#x7528;&#x54EA;&#x79CD;&#xFF1F; 12345# coding=&lt;encoding name&gt; #!/usr/bin/python# -*- coding: &lt;encoding name&gt; -*-#!/usr/bin/python# vim: set fileencoding=&lt;encoding name&gt; : &#x8FD9;&#x4E9B;&#x90FD;&#x53EF;&#x4EE5;&#x53EA;&#x8981;&#x7B2C;&#x4E00;&#x4E8C;&#x884C;&#x80FD;&#x6EE1;&#x8DB3;&#x5982;&#x4E0B;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F; 1^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+) 12345678910# -*- coding: utf-8 -*-# This Python file uses the following encoding: utf-8# &#x82B1;&#x5F0F;&#x6807;&#x660E;print &apos;&apos;&apos;&#x9759;&#x591C;&#x601D;&#x5E8A;&#x524D;&#x660E;&#x6708;&#x5149;&#xFF0C;&#x7591;&#x662F;&#x5730;&#x4E0A;&#x971C;&#x3002;&#x4E3E;&#x5934;&#x671B;&#x660E;&#x6708;&#xFF0C;&#x4F4E;&#x5934;&#x601D;&#x6545;&#x4E61;&#x3002;&apos;&apos;&apos; &#x5982;&#x679C;&#x4E0D;&#x6807;&#x660E;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x6216;&#x627E;&#x4E0D;&#x5230;&#x3002;python&#x4F1A;&#x9ED8;&#x8BA4;&#x4F60;&#x662F;ASCII &#x6574;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x6570;Python&#x652F;&#x6301;&#x5BF9;&#x6574;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x6570;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x56DB;&#x5219;&#x6DF7;&#x5408;&#x8FD0;&#x7B97;&#xFF0C;&#x8FD0;&#x7B97;&#x89C4;&#x5219;&#x548C;&#x6570;&#x5B66;&#x4E0A;&#x7684;&#x56DB;&#x5219;&#x8FD0;&#x7B97;&#x89C4;&#x5219;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x3002; &#x57FA;&#x672C;&#x7684;&#x8FD0;&#x7B97;&#xFF1A; 1231 + 2 + 3 # ==&gt; 64 * 5 - 6 # ==&gt; 147.5 / 8 + 2.1 # ==&gt; 3.0375 &#x4F7F;&#x7528;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x63D0;&#x5347;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x8FD9;&#x548C;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#xFF0C;&#x6CE8;&#x610F;&#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x5C0F;&#x62EC;&#x53F7;&#xFF0C;&#x4F46;&#x662F;&#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x5D4C;&#x5957;&#x5F88;&#x591A;&#x5C42;&#xFF1A; 12(1 + 2) * 3 # ==&gt; 9(2.2 + 3.3) / (1.5 * (9 - 0.3)) # ==&gt; 0.42145593869731807 &#x548C;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x4E0D;&#x540C;&#x7684;&#x5730;&#x65B9;&#x662F;&#xFF0C;Python&#x7684;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x4ECD;&#x7136;&#x662F;&#x6574;&#x6570;&#xFF0C;&#x6D6E;&#x70B9;&#x6570;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x4ECD;&#x7136;&#x662F;&#x6D6E;&#x70B9;&#x6570;&#xFF1A; 121 + 2 # ==&gt; &#x6574;&#x6570; 31.0 + 2.0 # ==&gt; &#x6D6E;&#x70B9;&#x6570; 3.0 &#x4F46;&#x662F;&#x6574;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x6570;&#x6DF7;&#x5408;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x5C31;&#x53D8;&#x6210;&#x6D6E;&#x70B9;&#x6570;&#x4E86;&#xFF1A; 11 + 2.0 # ==&gt; &#x6D6E;&#x70B9;&#x6570; 3.0 &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x533A;&#x5206;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x548C;&#x6D6E;&#x70B9;&#x6570;&#x8FD0;&#x7B97;&#x5462;&#xFF1F; &#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x6C38;&#x8FDC;&#x662F;&#x7CBE;&#x786E;&#x7684;&#xFF0C;&#x800C;&#x6D6E;&#x70B9;&#x6570;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x4E0D;&#x4E00;&#x5B9A;&#x7CBE;&#x786E;&#xFF0C;&#x56E0;&#x4E3A;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x5B58;&#x518D;&#x5927;&#xFF0C;&#x4E5F;&#x65E0;&#x6CD5;&#x7CBE;&#x786E;&#x8868;&#x793A;&#x51FA;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#xFF0C;&#x6BD4;&#x5982; 0.1 &#x6362;&#x6210;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x5C31;&#x662F;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#x3002; &#x90A3;&#x6574;&#x6570;&#x7684;&#x9664;&#x6CD5;&#x8FD0;&#x7B97;&#x9047;&#x5230;&#x9664;&#x4E0D;&#x5C3D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7ED3;&#x679C;&#x96BE;&#x9053;&#x4E0D;&#x662F;&#x6D6E;&#x70B9;&#x6570;&#x5417;&#xFF1F;&#x6211;&#x4EEC;&#x6765;&#x8BD5;&#x4E00;&#x4E0B;&#xFF1A; 111 / 4 # ==&gt; 2 &#x4EE4;&#x5F88;&#x591A;&#x521D;&#x5B66;&#x8005;&#x60CA;&#x8BB6;&#x7684;&#x662F;&#xFF0C;Python&#x7684;&#x6574;&#x6570;&#x9664;&#x6CD5;&#xFF0C;&#x5373;&#x4F7F;&#x9664;&#x4E0D;&#x5C3D;&#xFF0C;&#x7ED3;&#x679C;&#x4ECD;&#x7136;&#x662F;&#x6574;&#x6570;&#xFF0C;&#x4F59;&#x6570;&#x76F4;&#x63A5;&#x88AB;&#x6254;&#x6389;&#x3002;&#x4E0D;&#x8FC7;&#xFF0C;Python&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x6C42;&#x4F59;&#x7684;&#x8FD0;&#x7B97; % &#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x4F59;&#x6570;&#xFF1A; 111 % 4 # ==&gt; 3 &#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x8BA1;&#x7B97; 11 / 4 &#x7684;&#x7CBE;&#x786E;&#x7ED3;&#x679C;&#xFF0C;&#x6309;&#x7167;&#x201C;&#x6574;&#x6570;&#x548C;&#x6D6E;&#x70B9;&#x6570;&#x6DF7;&#x5408;&#x8FD0;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x6D6E;&#x70B9;&#x6570;&#x201D;&#x7684;&#x6CD5;&#x5219;&#xFF0C;&#x628A;&#x4E24;&#x4E2A;&#x6570;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x53D8;&#x6210;&#x6D6E;&#x70B9;&#x6570;&#x518D;&#x8FD0;&#x7B97;&#x5C31;&#x6CA1;&#x95EE;&#x9898;&#x4E86;&#xFF1A; 111.0 / 4 # ==&gt; 2.75 &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A;&#x8BF7;&#x8BA1;&#x7B97; 2.5 + 10 / 4 ,&#x5E76;&#x89E3;&#x91CA;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x662F;&#x671F;&#x671B;&#x7684; 5.0 ? &#x8BF7;&#x4FEE;&#x590D;&#x4E0A;&#x8FF0;&#x8FD0;&#x7B97;&#xFF0C;&#x4F7F;&#x5F97;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x662F; 5.0 1print 2.5 + 10.0 / 4 &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 15.0 &#x5E03;&#x5C14;&#x7C7B;&#x578B;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x4E86;&#x89E3;&#x4E86;Python&#x652F;&#x6301;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#x53EA;&#x6709;True&#x548C;False&#x4E24;&#x79CD;&#x503C;&#xFF0C;&#x4F46;&#x662F;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x8FD0;&#x7B97;&#xFF1A; &#x4E0E;&#x8FD0;&#x7B97;&#xFF1A;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x5E03;&#x5C14;&#x503C;&#x90FD;&#x4E3A; True &#x65F6;&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x624D;&#x4E3A; True&#x3002; 1234True and True # ==&gt; TrueTrue and False # ==&gt; FalseFalse and True # ==&gt; FalseFalse and False # ==&gt; False &#x6216;&#x8FD0;&#x7B97;&#xFF1A;&#x53EA;&#x8981;&#x6709;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x503C;&#x4E3A; True&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x5C31;&#x662F; True&#x3002; 1234True or True # ==&gt; TrueTrue or False # ==&gt; TrueFalse or True # ==&gt; TrueFalse or False # ==&gt; False &#x975E;&#x8FD0;&#x7B97;&#xFF1A;&#x628A;True&#x53D8;&#x4E3A;False&#xFF0C;&#x6216;&#x8005;&#x628A;False&#x53D8;&#x4E3A;True&#xFF1A; 12not True # ==&gt; Falsenot False # ==&gt; True &#x5E03;&#x5C14;&#x8FD0;&#x7B97;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x7528;&#x6765;&#x505A;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#xFF0C;&#x6839;&#x636E;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4E3A;True&#x6216;&#x8005;False&#xFF0C;&#x8BA1;&#x7B97;&#x673A;&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x4E0D;&#x540C;&#x7684;&#x540E;&#x7EED;&#x4EE3;&#x7801;&#x3002; &#x5728;Python&#x4E2D;&#xFF0C;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#x8FD8;&#x53EF;&#x4EE5;&#x4E0E;&#x5176;&#x4ED6;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x505A; and&#x3001;or&#x548C;not&#x8FD0;&#x7B97;&#xFF0C;&#x8BF7;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;Python&#x628A;0&#x3001;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x2019;&#x2019;&#x548C;None&#x770B;&#x6210; False&#xFF0C;&#x5176;&#x4ED6;&#x6570;&#x503C;&#x548C;&#x975E;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x770B;&#x6210; True&#x3002;&#x77ED;&#x8DEF;&#x8FD0;&#x7B97; 12a = Trueprint a and &apos;a=T&apos; or &apos;a=F&apos; &#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4E0D;&#x662F;&#x5E03;&#x5C14;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x662F;&#x5B57;&#x7B26;&#x4E32; &apos;a=T&apos;&#xFF0C;&#x8FD9;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5462;&#xFF1F; &#x56E0;&#x4E3A;Python&#x628A;0&#x3001;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x2019;&#x2019;&#x548C;None&#x770B;&#x6210; False&#xFF0C;&#x5176;&#x4ED6;&#x6570;&#x503C;&#x548C;&#x975E;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x770B;&#x6210; True&#xFF0C;&#x6240;&#x4EE5;&#xFF1A; True and &#x2018;a=T&#x2019; &#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x662F; &#x2018;a=T&#x2019;&#x7EE7;&#x7EED;&#x8BA1;&#x7B97; &#x2018;a=T&#x2019; or &#x2018;a=F&#x2019; &#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x8FD8;&#x662F; &#x2018;a=T&#x2019;&#x8981;&#x89E3;&#x91CA;&#x4E0A;&#x8FF0;&#x7ED3;&#x679C;&#xFF0C;&#x53C8;&#x6D89;&#x53CA;&#x5230; and &#x548C; or &#x8FD0;&#x7B97;&#x7684;&#x4E00;&#x6761;&#x91CD;&#x8981;&#x6CD5;&#x5219;&#xFF1A;&#x77ED;&#x8DEF;&#x8BA1;&#x7B97;&#x3002; &#x5728;&#x8BA1;&#x7B97; a and b&#x65F6;&#xFF0C;&#x5982;&#x679C; a &#x662F; False&#xFF0C;&#x5219;&#x6839;&#x636E;&#x4E0E;&#x8FD0;&#x7B97;&#x6CD5;&#x5219;&#xFF0C;&#x6574;&#x4E2A;&#x7ED3;&#x679C;&#x5FC5;&#x5B9A;&#x4E3A; False&#xFF0C;&#x56E0;&#x6B64;&#x8FD4;&#x56DE; a&#xFF1B;&#x5982;&#x679C; a &#x662F; True&#xFF0C;&#x5219;&#x6574;&#x4E2A;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x5FC5;&#x5B9A;&#x53D6;&#x51B3;&#x4E0E; b&#xFF0C;&#x56E0;&#x6B64;&#x8FD4;&#x56DE; b&#x3002; &#x5728;&#x8BA1;&#x7B97; a or b &#x65F6;&#xFF0C;&#x5982;&#x679C; a &#x662F; True&#xFF0C;&#x5219;&#x6839;&#x636E;&#x6216;&#x8FD0;&#x7B97;&#x6CD5;&#x5219;&#xFF0C;&#x6574;&#x4E2A;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x5FC5;&#x5B9A;&#x4E3A; True&#xFF0C;&#x56E0;&#x6B64;&#x8FD4;&#x56DE; a&#xFF1B;&#x5982;&#x679C; a &#x662F; False&#xFF0C;&#x5219;&#x6574;&#x4E2A;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x5FC5;&#x5B9A;&#x53D6;&#x51B3;&#x4E8E; b&#xFF0C;&#x56E0;&#x6B64;&#x8FD4;&#x56DE; b&#x3002; &#x6240;&#x4EE5;Python&#x89E3;&#x91CA;&#x5668;&#x5728;&#x505A;&#x5E03;&#x5C14;&#x8FD0;&#x7B97;&#x65F6;&#xFF0C;&#x53EA;&#x8981;&#x80FD;&#x63D0;&#x524D;&#x786E;&#x5B9A;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#xFF0C;&#x5B83;&#x5C31;&#x4E0D;&#x4F1A;&#x5F80;&#x540E;&#x7B97;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x3002; &#x7F16;&#x7801;&#x4EFB;&#x52A1;&#xFF1A;&#x8BF7;&#x8FD0;&#x884C;&#x5982;&#x4E0B;&#x4EE3;&#x7801;&#xFF0C;&#x5E76;&#x89E3;&#x91CA;&#x6253;&#x5370;&#x7684;&#x7ED3;&#x679C;&#xFF1A; 1234a = &apos;python&apos;print &apos;hello,&apos;, a or &apos;world&apos;b = &apos;&apos;print &apos;hello,&apos;, b or &apos;world&apos; 1234567# -*- coding: utf-8 -*-a = &apos;python&apos;print &apos;hello,&apos;, a or &apos;world&apos;#a&#x4E3A;&#x975E;&#x7A7A;&#xFF0C;&#x5219;&#x8F93;&#x51FA;ab = &apos;&apos;#b&#x4E3A;&#x7A7A;&#xFF0C;&#x8F93;&#x51FA;worldprint &apos;hello,&apos;, b or &apos;world&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 12hello, pythonhello, world Python&#x96C6;&#x5408;&#x7C7B;&#x578B;:list&#x548C;tuple&#x521B;&#x5EFA;listPython&#x5185;&#x7F6E;&#x7684;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x662F;&#x5217;&#x8868;&#xFF1A;list&#x3002;list&#x662F;&#x4E00;&#x79CD;&#x6709;&#x5E8F;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x53EF;&#x4EE5;&#x968F;&#x65F6;&#x6DFB;&#x52A0;&#x548C;&#x5220;&#x9664;&#x5176;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x3002; &#x6BD4;&#x5982;&#xFF0C;&#x5217;&#x51FA;&#x73ED;&#x91CC;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;list&#x8868;&#x793A;&#xFF1A; 12&gt;&gt;&gt; [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;][&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] list&#x662F;&#x6570;&#x5B66;&#x610F;&#x4E49;&#x4E0A;&#x7684;&#x6709;&#x5E8F;&#x96C6;&#x5408;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;list&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x662F;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x6392;&#x5217;&#x7684;&#x3002; &#x6784;&#x9020;list&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x6309;&#x7167;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x76F4;&#x63A5;&#x7528; [ ]&#x628A;list&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x62EC;&#x8D77;&#x6765;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;list&#x5BF9;&#x8C61;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x628A;list&#x8D4B;&#x503C;&#x7ED9;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53D8;&#x91CF;&#x6765;&#x5F15;&#x7528;list&#xFF1A; 123&gt;&gt;&gt; classmates = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]&gt;&gt;&gt; classmates # &#x6253;&#x5370;classmates&#x53D8;&#x91CF;&#x7684;&#x5185;&#x5BB9;[&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] &#x7531;&#x4E8E;Python&#x662F;&#x52A8;&#x6001;&#x8BED;&#x8A00;&#xFF0C;&#x6240;&#x4EE5;list&#x4E2D;&#x5305;&#x542B;&#x7684;&#x5143;&#x7D20;&#x5E76;&#x4E0D;&#x8981;&#x6C42;&#x90FD;&#x5FC5;&#x987B;&#x662F;&#x540C;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;&#x6211;&#x4EEC;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x5728;list&#x4E2D;&#x5305;&#x542B;&#x5404;&#x79CD;&#x6570;&#x636E;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Michael&apos;, 100, True] &#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E5F;&#x6CA1;&#x6709;&#x7684;list&#xFF0C;&#x5C31;&#x662F;&#x7A7A;list&#xFF1A; 1&gt;&gt;&gt; empty_list = [] &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5047;&#x8BBE;&#x73ED;&#x91CC;&#x6709;3&#x540D;&#x540C;&#x5B66;&#xFF1A;Adam&#xFF0C;Lisa&#x548C;Bart&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x6210;&#x7EE9;&#x5206;&#x522B;&#x662F; 95.5&#xFF0C;85 &#x548C; 59&#xFF0C;&#x8BF7;&#x6309;&#x7167; &#x540D;&#x5B57;, &#x5206;&#x6570;, &#x540D;&#x5B57;, &#x5206;&#x6570;&#x2026; &#x7684;&#x987A;&#x5E8F;&#x6309;&#x7167;&#x5206;&#x6570;&#x4ECE;&#x9AD8;&#x5230;&#x4F4E;&#x7528;&#x4E00;&#x4E2A;list&#x8868;&#x793A;&#xFF0C;&#x7136;&#x540E;&#x6253;&#x5370;&#x51FA;&#x6765;&#x3002; 12L = [&apos;Adam&apos;, 95.5,&apos;Lisa&apos;, 85, &apos;Bart&apos;, 59]print L &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1[&apos;Adam&apos;, 95.5, &apos;Lisa&apos;, 85, &apos;Bart&apos;, 59] &#x6CE8;&#xFF1A;list&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x6253;&#x5370;&#x5373;&#x53EF;&#x3002; Python&#x6309;&#x7167;&#x7D22;&#x5F15;&#x8BBF;&#x95EE;list&#x7531;&#x4E8E;list&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x96C6;&#x5408;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;list&#x6309;&#x5206;&#x6570;&#x4ECE;&#x9AD8;&#x5230;&#x4F4E;&#x8868;&#x793A;&#x51FA;&#x73ED;&#x91CC;&#x7684;3&#x4E2A;&#x540C;&#x5B66;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x90A3;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x4ECE;list&#x4E2D;&#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x7B2C; N &#x540D;&#x7684;&#x540C;&#x5B66;&#x5462;&#xFF1F;&#x65B9;&#x6CD5;&#x662F;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x6765;&#x83B7;&#x53D6;list&#x4E2D;&#x7684;&#x6307;&#x5B9A;&#x5143;&#x7D20;&#x3002; &#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x7D22;&#x5F15;&#x4ECE; 0 &#x5F00;&#x59CB;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x662F;0&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x662F;1&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x8981;&#x6253;&#x5370;&#x7B2C;&#x4E00;&#x540D;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x7528; L[0]: 12345678910&gt;&gt;&gt; print L[0]Adam#&#x8981;&#x6253;&#x5370;&#x7B2C;&#x4E8C;&#x540D;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x7528; L[1]:&gt;&gt;&gt; print L[1]Lisa#&#x8981;&#x6253;&#x5370;&#x7B2C;&#x4E09;&#x540D;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x7528; L[2]:&gt;&gt;&gt; print L[2]Bart &#x8981;&#x6253;&#x5370;&#x7B2C;&#x56DB;&#x540D;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x7528; L[3]: 1234&gt;&gt;&gt; print L[3]Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;IndexError: list index out of range &#x62A5;&#x9519;&#x4E86;&#xFF01;IndexError&#x610F;&#x601D;&#x5C31;&#x662F;&#x7D22;&#x5F15;&#x8D85;&#x51FA;&#x4E86;&#x8303;&#x56F4;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0A;&#x9762;&#x7684;list&#x53EA;&#x6709;3&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6709;&#x6548;&#x7684;&#x7D22;&#x5F15;&#x662F; 0&#xFF0C;1&#xFF0C;2&#x3002; &#x6240;&#x4EE5;&#xFF0C;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x65F6;&#xFF0C;&#x5343;&#x4E07;&#x6CE8;&#x610F;&#x4E0D;&#x8981;&#x8D8A;&#x754C;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x4E09;&#x540D;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;list&#x8868;&#x793A;&#xFF1A;L = [95.5, 85, 59] &#x8BF7;&#x6309;&#x7167;&#x7D22;&#x5F15;&#x5206;&#x522B;&#x6253;&#x5370;&#x51FA;&#x7B2C;&#x4E00;&#x540D;&#x3001;&#x7B2C;&#x4E8C;&#x540D;&#x3001;&#x7B2C;&#x4E09;&#x540D;&#xFF0C;&#x540C;&#x65F6;&#x6D4B;&#x8BD5; print L[3]&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12345L = [95.5,85,59]print L[0]print L[1]print L[2]print L[3] &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1234567Traceback (most recent call last): File &quot;index.py&quot;, line 5, in print L[3]IndexError: list index out of range95.58559 &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x6B63;&#x5E8F;&#x4ECE;0&#x5F00;&#x59CB;&#xFF0C;&#x9006;&#x5E8F;&#x4ECE;-1&#x5F00;&#x59CB;&#x662F;&#x6700;&#x597D;&#x4E00;&#x4E2A;list&#x5185;&#x5BB9;&#x3002; &#x5F53;&#x7D22;&#x5F15;&#x6570;&#x5B57;&#x4E3A;&#x8D1F;&#x6570;&#x65F6;&#xFF0C;&#x8868;&#x793A;&#x9006;&#x5E8F;&#x8BFB;&#x51FA;List&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x8BB0;&#x4F4F;List&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7A7A;&#x95F4;&#x7684;&#x7F16;&#x53F7;&#x4E3A;-1&#x5F00;&#x59CB; &#x5012;&#x5E8F;&#x8BBF;&#x95EE;list&#x6211;&#x4EEC;&#x8FD8;&#x662F;&#x7528;&#x4E00;&#x4E2A;list&#x6309;&#x5206;&#x6570;&#x4ECE;&#x9AD8;&#x5230;&#x4F4E;&#x8868;&#x793A;&#x51FA;&#x73ED;&#x91CC;&#x7684;3&#x4E2A;&#x540C;&#x5B66;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x8FD9;&#x65F6;&#xFF0C;&#x8001;&#x5E08;&#x8BF4;&#xFF0C;&#x8BF7;&#x5206;&#x6570;&#x6700;&#x4F4E;&#x7684;&#x540C;&#x5B66;&#x7AD9;&#x51FA;&#x6765;&#x3002; &#x8981;&#x5199;&#x4EE3;&#x7801;&#x5B8C;&#x6210;&#x8FD9;&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;&#x6570;&#x4E00;&#x6570;&#x8FD9;&#x4E2A; list&#xFF0C;&#x53D1;&#x73B0;&#x5B83;&#x5305;&#x542B;3&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x662F;2&#xFF1A; 12&gt;&gt;&gt; print L[2]Bart Bart&#x540C;&#x5B66;&#x662F;&#x6700;&#x540E;&#x4E00;&#x540D;&#xFF0C;&#x4FD7;&#x79F0;&#x5012;&#x6570;&#x7B2C;&#x4E00;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528; -1 &#x8FD9;&#x4E2A;&#x7D22;&#x5F15;&#x6765;&#x8868;&#x793A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF1A; 12&gt;&gt;&gt; print L[-1]Bart Bart&#x540C;&#x5B66;&#x8868;&#x793A;&#x8EBA;&#x67AA;&#x3002; &#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x7528; -2 &#x8868;&#x793A;&#xFF0C;&#x5012;&#x6570;&#x7B2C;&#x4E09;&#x7528; -3 &#x8868;&#x793A;&#xFF0C;&#x5012;&#x6570;&#x7B2C;&#x56DB;&#x7528; -4 &#x8868;&#x793A;&#xFF1A; 123456789&gt;&gt;&gt; print L[-2]Lisa&gt;&gt;&gt; print L[-3]Adam&gt;&gt;&gt; print L[-4]Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;IndexError: list index out of rangeL[-4] &#x62A5;&#x9519;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x5012;&#x6570;&#x7B2C;&#x56DB;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x4E00;&#x5171;&#x53EA;&#x6709;3&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x4F7F;&#x7528;&#x5012;&#x5E8F;&#x7D22;&#x5F15;&#x65F6;&#xFF0C;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x4E0D;&#x8981;&#x8D8A;&#x754C;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x4E09;&#x540D;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;list&#x8868;&#x793A;&#xFF1A;L = [95.5, 85, 59] &#x8BF7;&#x6309;&#x7167;&#x5012;&#x5E8F;&#x7D22;&#x5F15;&#x5206;&#x522B;&#x6253;&#x5370;&#x51FA;&#x5012;&#x6570;&#x7B2C;&#x4E00;&#x3001;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x3001;&#x5012;&#x6570;&#x7B2C;&#x4E09;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12345L = [95.5, 85, 59]print L[-1]print L[-2]print L[-3]print L[-4] &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1234567Traceback (most recent call last): File &quot;index.py&quot;, line 5, in print L[-4]IndexError: list index out of range598595.5 list&#x6DFB;&#x52A0;&#x65B0;&#x5143;&#x7D20;(append insert)&#x73B0;&#x5728;&#xFF0C;&#x73ED;&#x91CC;&#x6709;3&#x540D;&#x540C;&#x5B66;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x4ECA;&#x5929;&#xFF0C;&#x73ED;&#x91CC;&#x8F6C;&#x6765;&#x4E00;&#x540D;&#x65B0;&#x540C;&#x5B66; Paul&#xFF0C;&#x5982;&#x4F55;&#x628A;&#x65B0;&#x540C;&#x5B66;&#x6DFB;&#x52A0;&#x5230;&#x73B0;&#x6709;&#x7684; list &#x4E2D;&#x5462;&#xFF1F; &#x7B2C;&#x4E00;&#x4E2A;&#x529E;&#x6CD5;&#x662F;&#x7528; list &#x7684; append() &#x65B9;&#x6CD5;&#xFF0C;&#x628A;&#x65B0;&#x540C;&#x5B66;&#x8FFD;&#x52A0;&#x5230; list &#x7684;&#x672B;&#x5C3E;&#xFF1A; 1234&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]&gt;&gt;&gt; L.append(&apos;Paul&apos;)&gt;&gt;&gt; print L[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] append()&#x603B;&#x662F;&#x628A;&#x65B0;&#x7684;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5230; list &#x7684;&#x5C3E;&#x90E8;&#x3002; &#x5982;&#x679C; Paul &#x540C;&#x5B66;&#x8868;&#x793A;&#x81EA;&#x5DF1;&#x603B;&#x662F;&#x8003;&#x6EE1;&#x5206;&#xFF0C;&#x8981;&#x6C42;&#x6DFB;&#x52A0;&#x5230;&#x7B2C;&#x4E00;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x65B9;&#x6CD5;&#x662F;&#x7528;list&#x7684; insert()&#x65B9;&#x6CD5;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x7D22;&#x5F15;&#x53F7;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x5F85;&#x6DFB;&#x52A0;&#x7684;&#x65B0;&#x5143;&#x7D20;&#xFF1A; 1234&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]&gt;&gt;&gt; L.insert(0, &apos;Paul&apos;)&gt;&gt;&gt; print L[&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] L.insert(0, &apos;Paul&apos;) &#x7684;&#x610F;&#x601D;&#x662F;&#xFF0C;&#x2019;Paul&#x2019;&#x5C06;&#x88AB;&#x6DFB;&#x52A0;&#x5230;&#x7D22;&#x5F15;&#x4E3A; 0 &#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#xFF08;&#x4E5F;&#x5C31;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#xFF09;&#xFF0C;&#x800C;&#x539F;&#x6765;&#x7D22;&#x5F15;&#x4E3A; 0 &#x7684;Adam&#x540C;&#x5B66;&#xFF0C;&#x4EE5;&#x53CA;&#x540E;&#x9762;&#x7684;&#x6240;&#x6709;&#x540C;&#x5B66;&#xFF0C;&#x90FD;&#x81EA;&#x52A8;&#x5411;&#x540E;&#x79FB;&#x52A8;&#x4E00;&#x4F4D;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5047;&#x8BBE;&#x65B0;&#x6765;&#x4E00;&#x540D;&#x5B66;&#x751F;Paul&#xFF0C;Paul &#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x6BD4;Bart&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x6BD4;Lisa&#x5DEE;&#xFF0C;&#x4ED6;&#x5E94;&#x8BE5;&#x6392;&#x5230;&#x7B2C;&#x4E09;&#x540D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8BF7;&#x7528;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; &#x4EE3;&#x7801;&#x5B9E;&#x73B0;: 123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L.insert(2,&apos;paul&apos;)print L &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;paul&apos;, &apos;Bart&apos;] &#x6B63;&#x5411;&#x7B2C;&#x4E09;&#x540D;&#x7D22;&#x5F15;&#x53F7;&#x4E3A;2.&#x5012;&#x6570;&#x7B2C;&#x4E09;&#x540D;&#x7D22;&#x5F15;&#x53F7;&#x4E3A;-3 list&#x5220;&#x9664;&#x5143;&#x7D20;(pop)Paul&#x540C;&#x5B66;&#x521A;&#x6765;&#x51E0;&#x5929;&#x53C8;&#x8981;&#x8F6C;&#x8D70;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x628A;Paul &#x4ECE;&#x73B0;&#x6709;&#x7684;list&#x4E2D;&#x5220;&#x9664;&#x5462;&#xFF1F; &#x5982;&#x679C;Paul&#x540C;&#x5B66;&#x6392;&#x5728;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;list&#x7684;pop()&#x65B9;&#x6CD5;&#x5220;&#x9664;&#xFF1A; 12345&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]&gt;&gt;&gt; L.pop()&apos;Paul&apos;&gt;&gt;&gt; print L[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] pop()&#x65B9;&#x6CD5;&#x603B;&#x662F;&#x5220;&#x6389;list&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x4E14;&#x5B83;&#x8FD8;&#x8FD4;&#x56DE;&#x8FD9;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6267;&#x884C; L.pop() &#x540E;&#xFF0C;&#x4F1A;&#x6253;&#x5370;&#x51FA; &#x2018;Paul&#x2019;&#x3002; &#x5982;&#x679C;Paul&#x540C;&#x5B66;&#x4E0D;&#x662F;&#x6392;&#x5728;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x6BD4;&#x5982;Paul&#x540C;&#x5B66;&#x6392;&#x5728;&#x7B2C;&#x4E09;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;] &#x8981;&#x628A;Paul&#x8E22;&#x51FA;list&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x5FC5;&#x987B;&#x5148;&#x5B9A;&#x4F4D;Paul&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x7531;&#x4E8E;Paul&#x7684;&#x7D22;&#x5F15;&#x662F;2&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x7528; pop(2)&#x628A;Paul&#x5220;&#x6389;&#xFF1A; 1234&gt;&gt;&gt; L.pop(2)&apos;Paul&apos;&gt;&gt;&gt; print L[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;&#x76F4;&#x63A5;pop()&#x9ED8;&#x8BA4;&#x5220;&#x9664;&#x7B2C;&#x4E00;&#x4E2A;&#xFF0C;&#x62EC;&#x53F7;&#x5185;&#x6307;&#x5B9A;&#x53C2;&#x6570;&#xFF1A;&#x7D22;&#x5F15;&#xFF0C;&#x5220;&#x9664;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x4E0A;&#x3002; &#x7F16;&#x7801;&#x4EFB;&#x52A1;1L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;] Paul&#x7684;&#x7D22;&#x5F15;&#x662F;2&#xFF0C;Bart&#x7684;&#x7D22;&#x5F15;&#x662F;3&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x628A;Paul&#x548C;Bart&#x90FD;&#x5220;&#x6389;&#xFF0C;&#x8BF7;&#x89E3;&#x91CA;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x80FD;&#x6B63;&#x786E;&#x8FD0;&#x884C;&#xFF1A; 12L.pop(2)L.pop(3) &#x600E;&#x6837;&#x8C03;&#x6574;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x628A;Paul&#x548C;Bart&#x90FD;&#x6B63;&#x786E;&#x5220;&#x9664;&#x6389;&#xFF1F; &#x89E3;&#x91CA;&#xFF1A;&#x56E0;&#x4E3A;&#x8BED;&#x53E5;&#x662F;&#x6309;&#x987A;&#x5E8F;&#x6267;&#x884C;&#x7684;&#x5220;&#x9664;&#x4E86;Paul&#x4E4B;&#x540E;&#x3002;&#x7D22;&#x5F15;&#x53F7;3&#x5DF2;&#x7ECF;&#x8D8A;&#x754C;&#x3002;&#x6211;&#x4EEC;&#x8981;&#x5220;&#x9664;&#x7684;Bart&#x5DF2;&#x7ECF;&#x53D8;&#x6210;2&#x4E86;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x8FD9;&#x6559;&#x80B2;&#x6211;&#x4EEC;&#x5220;&#x9664;list&#x65F6;&#x8981;&#x79C9;&#x7740;&#x4ECE;&#x524D;&#x5230;&#x540E;&#x987A;&#x5E8F;&#x3002; List&#x66FF;&#x6362;&#x5143;&#x7D20;&#x5047;&#x8BBE;&#x73B0;&#x5728;&#x73ED;&#x91CC;&#x4ECD;&#x7136;&#x662F;3&#x540D;&#x540C;&#x5B66;&#xFF1A; &gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x73B0;&#x5728;&#xFF0C;Bart&#x540C;&#x5B66;&#x8981;&#x8F6C;&#x5B66;&#x8D70;&#x4E86;&#xFF0C;&#x78B0;&#x5DE7;&#x6765;&#x4E86;&#x4E00;&#x4E2A;Paul&#x540C;&#x5B66;&#xFF0C;&#x8981;&#x66F4;&#x65B0;&#x73ED;&#x7EA7;&#x6210;&#x5458;&#x540D;&#x5355;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5148;&#x628A;Bart&#x5220;&#x6389;&#xFF0C;&#x518D;&#x628A;Paul&#x6DFB;&#x52A0;&#x8FDB;&#x6765;&#x3002; &#x53E6;&#x4E00;&#x4E2A;&#x529E;&#x6CD5;&#x662F;&#x76F4;&#x63A5;&#x7528;Paul&#x628A;Bart&#x7ED9;&#x66FF;&#x6362;&#x6389;&#xFF1A; 123&gt;&gt;&gt; L[2] = &apos;Paul&apos;&gt;&gt;&gt; print LL = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;] &#x5BF9;list&#x4E2D;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x8D4B;&#x503C;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x7528;&#x65B0;&#x7684;&#x5143;&#x7D20;&#x66FF;&#x6362;&#x6389;&#x539F;&#x6765;&#x7684;&#x5143;&#x7D20;&#xFF0C;list&#x5305;&#x542B;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;&#x3002; &#x7531;&#x4E8E;Bart&#x8FD8;&#x53EF;&#x4EE5;&#x7528; -1 &#x505A;&#x7D22;&#x5F15;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4E5F;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x540C;&#x6837;&#x7684;&#x66FF;&#x6362;&#x5DE5;&#x4F5C;&#xFF1A; &gt;&gt;&gt; L[-1] = &apos;Paul&apos; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x73ED;&#x91CC;&#x7684;&#x540C;&#x5B66;&#x6309;&#x7167;&#x5206;&#x6570;&#x6392;&#x540D;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;L = [&#x2018;Adam&#x2019;, &#x2018;Lisa&#x2019;, &#x2018;Bart&#x2019;]&#x4F46;&#x662F;&#xFF0C;&#x5728;&#x4E00;&#x6B21;&#x8003;&#x8BD5;&#x540E;&#xFF0C;Bart&#x540C;&#x5B66;&#x610F;&#x5916;&#x53D6;&#x5F97;&#x7B2C;&#x4E00;&#xFF0C;&#x800C;Adam&#x540C;&#x5B66;&#x8003;&#x4E86;&#x5012;&#x6570;&#x7B2C;&#x4E00;&#x3002; &#x8BF7;&#x901A;&#x8FC7;&#x5BF9;list&#x7684;&#x7D22;&#x5F15;&#x8D4B;&#x503C;&#xFF0C;&#x751F;&#x6210;&#x65B0;&#x7684;&#x6392;&#x540D;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 1234L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L[0]=&apos;Bart&apos;L[-1]=&apos;Adam&apos;print L &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1[&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;] &#x521B;&#x5EFA;tupletuple&#x662F;&#x53E6;&#x4E00;&#x79CD;&#x6709;&#x5E8F;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x4E2D;&#x6587;&#x7FFB;&#x8BD1;&#x4E3A;&#x201C; &#x5143;&#x7EC4; &#x201D;&#x3002;tuple &#x548C; list &#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;tuple&#x4E00;&#x65E6;&#x521B;&#x5EFA;&#x5B8C;&#x6BD5;&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x4FEE;&#x6539;&#x4E86;&#x3002; &#x540C;&#x6837;&#x662F;&#x8868;&#x793A;&#x73ED;&#x91CC;&#x540C;&#x5B66;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x7528;tuple&#x8868;&#x793A;&#x5982;&#x4E0B;&#xFF1A; 1&gt;&gt;&gt; t = (&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;) &#x521B;&#x5EFA;tuple&#x548C;&#x521B;&#x5EFA;list&#x552F;&#x4E00;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x662F;&#x7528;( )&#x66FF;&#x4EE3;&#x4E86;[ ]&#x3002; &#x73B0;&#x5728;&#xFF0C;&#x8FD9;&#x4E2A; t &#x5C31;&#x4E0D;&#x80FD;&#x6539;&#x53D8;&#x4E86;&#xFF0C;tuple&#x6CA1;&#x6709; append()&#x65B9;&#x6CD5;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;insert()&#x548C;pop()&#x65B9;&#x6CD5;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x65B0;&#x540C;&#x5B66;&#x6CA1;&#x6CD5;&#x76F4;&#x63A5;&#x5F80; tuple &#x4E2D;&#x6DFB;&#x52A0;&#xFF0C;&#x8001;&#x540C;&#x5B66;&#x60F3;&#x9000;&#x51FA; tuple &#x4E5F;&#x4E0D;&#x884C;&#x3002; &#x83B7;&#x53D6; tuple &#x5143;&#x7D20;&#x7684;&#x65B9;&#x5F0F;&#x548C; list &#x662F;&#x4E00;&#x6A21;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x4F7F;&#x7528; t[0]&#xFF0C;t[-1]&#x7B49;&#x7D22;&#x5F15;&#x65B9;&#x5F0F;&#x8BBF;&#x95EE;&#x5143;&#x7D20;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x8D4B;&#x503C;&#x6210;&#x522B;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x4FE1;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#xFF1A; 1234&gt;&gt;&gt; t[0] = &apos;Paul&apos;Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;TypeError: &apos;tuple&apos; object does not support item assignment &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x521B;&#x5EFA;&#x4E00;&#x4E2A;tuple&#xFF0C;&#x987A;&#x5E8F;&#x5305;&#x542B;0 - 9&#x8FD9;10&#x4E2A;&#x6570;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12t = (0,1,2,3,4,5,6,7,8,9)print t &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) &#x521B;&#x5EFA;&#x5355;&#x5143;&#x7D20;tupletuple&#x548C;list&#x4E00;&#x6837;&#xFF0C;&#x53EF;&#x4EE5;&#x5305;&#x542B; 0 &#x4E2A;&#x3001;1&#x4E2A;&#x548C;&#x4EFB;&#x610F;&#x591A;&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x5305;&#x542B;&#x591A;&#x4E2A;&#x5143;&#x7D20;&#x7684; tuple&#xFF0C;&#x524D;&#x9762;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x8FC7;&#x4E86;&#x3002; &#x5305;&#x542B; 0 &#x4E2A;&#x5143;&#x7D20;&#x7684; tuple&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7A7A;tuple&#xFF0C;&#x76F4;&#x63A5;&#x7528; ()&#x8868;&#x793A;&#xFF1A; 123&gt;&gt;&gt; t = ()&gt;&gt;&gt; print t() &#x521B;&#x5EFA;&#x5305;&#x542B;1&#x4E2A;&#x5143;&#x7D20;&#x7684; tuple &#x5462;&#xFF1F;&#x6765;&#x8BD5;&#x8BD5;&#xFF1A; 123&gt;&gt;&gt; t = (1)&gt;&gt;&gt; print t1 &#x597D;&#x50CF;&#x54EA;&#x91CC;&#x4E0D;&#x5BF9;&#xFF01;t &#x4E0D;&#x662F; tuple &#xFF0C;&#x800C;&#x662F;&#x6574;&#x6570;1&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x5462;&#xFF1F; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x5355;&#x5143;&#x7D20;tuple&#x7684;()&#x88AB;&#x5F53;&#x505A;&#x4F18;&#x5148;&#x7EA7;&#x3002;(1)&#x53D8;&#x6210;&#x6574;&#x6570;1.&#x5355;&#x5143;&#x7D20;&#x62EC;&#x53F7;&#x7ED3;&#x5C3E;&#x52A0;, &#x56E0;&#x4E3A;()&#x65E2;&#x53EF;&#x4EE5;&#x8868;&#x793A;tuple&#xFF0C;&#x53C8;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x62EC;&#x53F7;&#x8868;&#x793A;&#x8FD0;&#x7B97;&#x65F6;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x7ED3;&#x679C; (1) &#x88AB;Python&#x89E3;&#x91CA;&#x5668;&#x8BA1;&#x7B97;&#x51FA;&#x7ED3;&#x679C; 1&#xFF0C;&#x5BFC;&#x81F4;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#x7684;&#x4E0D;&#x662F;tuple&#xFF0C;&#x800C;&#x662F;&#x6574;&#x6570; 1&#x3002; &#x6B63;&#x662F;&#x56E0;&#x4E3A;&#x7528;()&#x5B9A;&#x4E49;&#x5355;&#x5143;&#x7D20;&#x7684;tuple&#x6709;&#x6B67;&#x4E49;&#xFF0C;&#x6240;&#x4EE5; Python &#x89C4;&#x5B9A;&#xFF0C;&#x5355;&#x5143;&#x7D20; tuple &#x8981;&#x591A;&#x52A0;&#x4E00;&#x4E2A;&#x9017;&#x53F7;,&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x907F;&#x514D;&#x4E86;&#x6B67;&#x4E49;&#xFF1A; 123&gt;&gt;&gt; t = (1,)&gt;&gt;&gt; print t(1,) Python&#x5728;&#x6253;&#x5370;&#x5355;&#x5143;&#x7D20;tuple&#x65F6;&#xFF0C;&#x4E5F;&#x81EA;&#x52A8;&#x6DFB;&#x52A0;&#x4E86;&#x4E00;&#x4E2A;,&#xFF0C;&#x4E3A;&#x4E86;&#x66F4;&#x660E;&#x786E;&#x5730;&#x544A;&#x8BC9;&#x4F60;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;tuple&#x3002; &#x591A;&#x5143;&#x7D20; tuple &#x52A0;&#x4E0D;&#x52A0;&#x8FD9;&#x4E2A;&#x989D;&#x5916;&#x7684;,&#x6548;&#x679C;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF1A; 123&gt;&gt;&gt; t = (1, 2, 3,)&gt;&gt;&gt; print t(1, 2, 3) &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x4E3A;&#x4EC0;&#x4E48;&#x6CA1;&#x6709;&#x521B;&#x5EFA;&#x51FA;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#x7684; tuple&#xFF1A; 12t = (&apos;Adam&apos;)print t &#x8BF7;&#x4FEE;&#x6539;&#x4EE3;&#x7801;&#xFF0C;&#x786E;&#x4FDD; t &#x662F;&#x4E00;&#x4E2A;tuple&#x3002; &#x56E0;&#x4E3A;&#x5355;&#x5143;&#x7D20;tuple&#x7684;&#x62EC;&#x53F7;&#x88AB;&#x5F53;&#x505A;&#x662F;&#x4F18;&#x5148;&#x7EA7;&#x6807;&#x5FD7;&#x3002;&#x8981;&#x52A0;&#x4E0A;&#x989D;&#x5916;,&#x6807;&#x8BC6;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5143;&#x7EC4;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12t = (&apos;Adam&apos;,)print t &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1(&apos;Adam&apos;,) &#x201C;&#x53EF;&#x53D8;&#x201D;&#x7684;tuple(&#x6307;&#x5411;&#x4E0D;&#x53D8;&#x3002;&#x6307;&#x5411;&#x7684;&#x4E1C;&#x897F;&#x53EF;&#x4EE5;&#x53D8;)&#x524D;&#x9762;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E86;tuple&#x4E00;&#x65E6;&#x521B;&#x5EFA;&#x5C31;&#x4E0D;&#x80FD;&#x4FEE;&#x6539;&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x4E00;&#x4E2A;&#x53EF;&#x53D8;&#x7684;tuple&#xFF1A; 1&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;]) &#x6CE8;&#x610F;&#x5230; t &#x6709; 3 &#x4E2A;&#x5143;&#x7D20;&#xFF1A;&apos;a&apos;&#xFF0C;&apos;b&apos;&#x548C;&#x4E00;&#x4E2A;list&#xFF1A;[&apos;A&apos;, &apos;B&apos;]&#x3002;list&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x4F53;&#x662F;tuple&#x7684;&#x7B2C;3&#x4E2A;&#x5143;&#x7D20;&#x3002;list&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; t[2] &#x62FF;&#x5230;&#xFF1A; 12345&gt;&gt;&gt; L = t[2]# &#x7136;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x628A;list&#x7684;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x6539;&#x4E00;&#x6539;&#xFF1A;&gt;&gt;&gt; L[0] = &apos;X&apos;&gt;&gt;&gt; L[1] = &apos;Y&apos; &#x518D;&#x770B;&#x770B;tuple&#x7684;&#x5185;&#x5BB9;&#xFF1A; 12&gt;&gt;&gt; print t(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;]) &#x4E0D;&#x662F;&#x8BF4;tuple&#x4E00;&#x65E6;&#x5B9A;&#x4E49;&#x540E;&#x5C31;&#x4E0D;&#x53EF;&#x53D8;&#x4E86;&#x5417;&#xFF1F;&#x600E;&#x4E48;&#x73B0;&#x5728;&#x53C8;&#x53D8;&#x4E86;&#xFF1F; &#x522B;&#x6025;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x770B;&#x770B;&#x5B9A;&#x4E49;&#x7684;&#x65F6;&#x5019;tuple&#x5305;&#x542B;&#x7684;3&#x4E2A;&#x5143;&#x7D20;&#xFF1A; &#x5F53;&#x6211;&#x4EEC;&#x628A;list&#x7684;&#x5143;&#x7D20;&#x2019;A&#x2019;&#x548C;&#x2019;B&#x2019;&#x4FEE;&#x6539;&#x4E3A;&#x2019;X&#x2019;&#x548C;&#x2019;Y&#x2019;&#x540E;&#xFF0C;tuple&#x53D8;&#x4E3A;&#xFF1A; &#x8868;&#x9762;&#x4E0A;&#x770B;&#xFF0C;tuple&#x7684;&#x5143;&#x7D20;&#x786E;&#x5B9E;&#x53D8;&#x4E86;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x53D8;&#x7684;&#x4E0D;&#x662F; tuple &#x7684;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x662F;list&#x7684;&#x5143;&#x7D20;&#x3002; tuple&#x4E00;&#x5F00;&#x59CB;&#x6307;&#x5411;&#x7684;list&#x5E76;&#x6CA1;&#x6709;&#x6539;&#x6210;&#x522B;&#x7684;list&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;tuple&#x6240;&#x8C13;&#x7684;&#x201C;&#x4E0D;&#x53D8;&#x201D;&#x662F;&#x8BF4;&#xFF0C;tuple&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6307;&#x5411;&#x6C38;&#x8FDC;&#x4E0D;&#x53D8;&#x3002;&#x5373;&#x6307;&#x5411;&#x2019;a&#x2019;&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x6539;&#x6210;&#x6307;&#x5411;&#x2019;b&#x2019;&#xFF0C;&#x6307;&#x5411;&#x4E00;&#x4E2A;list&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x6539;&#x6210;&#x6307;&#x5411;&#x5176;&#x4ED6;&#x5BF9;&#x8C61;&#xFF0C;&#x4F46;&#x6307;&#x5411;&#x7684;&#x8FD9;&#x4E2A;list&#x672C;&#x8EAB;&#x662F;&#x53EF;&#x53D8;&#x7684;&#xFF01; &#x7406;&#x89E3;&#x4E86;&#x6307;&#x5411;&#x4E0D;&#x53D8;&#x540E;&#xFF0C;&#x8981;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5185;&#x5BB9;&#x4E5F;&#x4E0D;&#x53D8;&#x7684;tuple&#x600E;&#x4E48;&#x505A;&#xFF1F;&#x90A3;&#x5C31;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;tuple&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#x4E5F;&#x4E0D;&#x80FD;&#x53D8;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#xFF1A; &#x5B9A;&#x4E49;&#x4E86;tuple&#xFF1A;t = (&#x2018;a&#x2019;, &#x2018;b&#x2019;, [&#x2018;A&#x2019;, &#x2018;B&#x2019;]) &#x7531;&#x4E8E; t &#x5305;&#x542B;&#x4E00;&#x4E2A;list&#x5143;&#x7D20;&#xFF0C;&#x5BFC;&#x81F4;tuple&#x7684;&#x5185;&#x5BB9;&#x662F;&#x53EF;&#x53D8;&#x7684;&#x3002;&#x80FD;&#x5426;&#x4FEE;&#x6539;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#xFF0C;&#x8BA9;tuple&#x5185;&#x5BB9;&#x4E0D;&#x53EF;&#x53D8;&#xFF1F; &#x89E3;&#x7B54;&#xFF1A;&#x5C06;&#x91CC;&#x9762;&#x7684;list&#x66FF;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x4E0D;&#x53EF;&#x53D8;&#x7684;&#x5143;&#x7D20;&#x3002;&#x6BD4;&#x5982;tuple&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12t = (&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;))print t &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1(&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;)) Python&#x7684;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x548C;&#x5FAA;&#x73AF;&#x8BED;&#x53E5;if&#x8BED;&#x53E5;&#x8BA1;&#x7B97;&#x673A;&#x4E4B;&#x6240;&#x4EE5;&#x80FD;&#x505A;&#x5F88;&#x591A;&#x81EA;&#x52A8;&#x5316;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x505A;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x3002; &#x6BD4;&#x5982;&#xFF0C;&#x8F93;&#x5165;&#x7528;&#x6237;&#x5E74;&#x9F84;&#xFF0C;&#x6839;&#x636E;&#x5E74;&#x9F84;&#x6253;&#x5370;&#x4E0D;&#x540C;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x5728;Python&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;if&#x8BED;&#x53E5;&#x5B9E;&#x73B0;&#xFF1A; 12345age = 20if age &gt;= 18: print &apos;your age is&apos;, age print &apos;adult&apos;print &apos;END&apos; &#x6CE8;&#x610F;: Python&#x4EE3;&#x7801;&#x7684;&#x7F29;&#x8FDB;&#x89C4;&#x5219;&#x3002;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7F29;&#x8FDB;&#x7684;&#x4EE3;&#x7801;&#x88AB;&#x89C6;&#x4E3A;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x4E0A;&#x9762;&#x7684;3&#xFF0C;4&#x884C; print &#x8BED;&#x53E5;&#x5C31;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x4EE3;&#x7801;&#x5757;&#xFF08;&#x4F46;&#x4E0D;&#x5305;&#x62EC;&#x7B2C;5&#x884C;&#x7684;print&#xFF09;&#x3002;&#x5982;&#x679C; if &#x8BED;&#x53E5;&#x5224;&#x65AD;&#x4E3A; True&#xFF0C;&#x5C31;&#x4F1A;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x5757;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x7F29;&#x8FDB;&#x8BF7;&#x4E25;&#x683C;&#x6309;&#x7167;Python&#x7684;&#x4E60;&#x60EF;&#x5199;&#x6CD5;&#xFF1A;4&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x4E0D;&#x8981;&#x4F7F;&#x7528;Tab&#xFF0C;&#x66F4;&#x4E0D;&#x8981;&#x6DF7;&#x5408;Tab&#x548C;&#x7A7A;&#x683C;&#xFF0C;&#x5426;&#x5219;&#x5F88;&#x5BB9;&#x6613;&#x9020;&#x6210;&#x56E0;&#x4E3A;&#x7F29;&#x8FDB;&#x5F15;&#x8D77;&#x7684;&#x8BED;&#x6CD5;&#x9519;&#x8BEF;&#x3002; &#x6CE8;&#x610F;: if &#x8BED;&#x53E5;&#x540E;&#x63A5;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x7136;&#x540E;&#x7528;:&#x8868;&#x793A;&#x4EE3;&#x7801;&#x5757;&#x5F00;&#x59CB;&#x3002; &#x5982;&#x679C;&#x4F60;&#x5728;Python&#x4EA4;&#x4E92;&#x73AF;&#x5883;&#x4E0B;&#x6572;&#x4EE3;&#x7801;&#xFF0C;&#x8FD8;&#x8981;&#x7279;&#x522B;&#x7559;&#x610F;&#x7F29;&#x8FDB;&#xFF0C;&#x5E76;&#x4E14;&#x9000;&#x51FA;&#x7F29;&#x8FDB;&#x9700;&#x8981;&#x591A;&#x6572;&#x4E00;&#x884C;&#x56DE;&#x8F66;&#xFF1A; 12345&gt;&gt;&gt; age = 20&gt;&gt;&gt; if age &gt;= 18:... print &apos;your age is&apos;, age... print &apos;adult&apos;... 12your age is 20adult &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5982;&#x679C;&#x6210;&#x7EE9;&#x8FBE;&#x5230;60&#x5206;&#x6216;&#x4EE5;&#x4E0A;&#xFF0C;&#x89C6;&#x4E3A;passed&#x3002; &#x5047;&#x8BBE;Bart&#x540C;&#x5B66;&#x7684;&#x5206;&#x6570;&#x662F;75&#xFF0C;&#x8BF7;&#x7528;if&#x8BED;&#x53E5;&#x5224;&#x65AD;&#x662F;&#x5426;&#x80FD;&#x6253;&#x5370;&#x51FA; passed: &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123score = 75if score&gt;=60: print &apos;passed&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1passed if-else&#x5F53; if &#x8BED;&#x53E5;&#x5224;&#x65AD;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7ED3;&#x679C;&#x4E3A; True &#x65F6;&#xFF0C;&#x5C31;&#x4F1A;&#x6267;&#x884C; if &#x5305;&#x542B;&#x7684;&#x4EE3;&#x7801;&#x5757;&#xFF1A; 12if age &gt;= 18: print &apos;adult&apos; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x60F3;&#x5224;&#x65AD;&#x5E74;&#x9F84;&#x5728;18&#x5C81;&#x4EE5;&#x4E0B;&#x65F6;&#xFF0C;&#x6253;&#x5370;&#x51FA; &#x2018;teenager&#x2019;&#xFF0C;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x65B9;&#x6CD5;&#x662F;&#x518D;&#x5199;&#x4E00;&#x4E2A; if: 12if age &lt; 18: print &apos;teenager&apos; &#x6216;&#x8005;&#x7528; not &#x8FD0;&#x7B97;&#xFF1A; 12if not age &gt;= 18: print &apos;teenager&apos; &#x7EC6;&#x5FC3;&#x7684;&#x540C;&#x5B66;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E24;&#x79CD;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x662F;&#x201C;&#x975E;&#x6B64;&#x5373;&#x5F7C;&#x201D;&#x7684;&#xFF0C;&#x8981;&#x4E48;&#x7B26;&#x5408;&#x6761;&#x4EF6;1&#xFF0C;&#x8981;&#x4E48;&#x7B26;&#x5408;&#x6761;&#x4EF6;2&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A; if ... else ... &#x8BED;&#x53E5;&#x628A;&#x5B83;&#x4EEC;&#x7EDF;&#x4E00;&#x8D77;&#x6765;&#xFF1A; 1234if age &gt;= 18: print &apos;adult&apos;else: print &apos;teenager&apos; &#x5229;&#x7528; if ... else ...&#x8BED;&#x53E5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x4E3A; True &#x6216;&#x8005; False &#xFF0C;&#x5206;&#x522B;&#x6267;&#x884C; if &#x4EE3;&#x7801;&#x5757;&#x6216;&#x8005; else &#x4EE3;&#x7801;&#x5757;&#x3002; &#x6CE8;&#x610F;: else &#x540E;&#x9762;&#x6709;&#x4E2A;:&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5982;&#x679C;&#x6210;&#x7EE9;&#x8FBE;&#x5230;60&#x5206;&#x6216;&#x4EE5;&#x4E0A;&#xFF0C;&#x89C6;&#x4E3A;passed&#xFF0C;&#x5426;&#x5219;&#x89C6;&#x4E3A;failed&#x3002; &#x5047;&#x8BBE;Bart&#x540C;&#x5B66;&#x7684;&#x5206;&#x6570;&#x662F;55&#xFF0C;&#x8BF7;&#x7528;if&#x8BED;&#x53E5;&#x6253;&#x5370;&#x51FA; passed &#x6216;&#x8005; failed: &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12345score = 55if score&gt;=60: print &apos;passed&apos;else: print &apos;failed&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1failed if-elif-else&#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E00;&#x4E2A; if &#x2026; else &#x2026; &#x8FD8;&#x4E0D;&#x591F;&#x7528;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x6839;&#x636E;&#x5E74;&#x9F84;&#x7684;&#x5212;&#x5206;&#xFF1A; &#x6761;&#x4EF6;1&#xFF1A;18&#x5C81;&#x6216;&#x4EE5;&#x4E0A;&#xFF1A;adult &#x6761;&#x4EF6;2&#xFF1A;6&#x5C81;&#x6216;&#x4EE5;&#x4E0A;&#xFF1A;teenager &#x6761;&#x4EF6;3&#xFF1A;6&#x5C81;&#x4EE5;&#x4E0B;&#xFF1A;kid &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A; if age &gt;= 18 &#x5224;&#x65AD;&#x662F;&#x5426;&#x7B26;&#x5408;&#x6761;&#x4EF6;1&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x7B26;&#x5408;&#xFF0C;&#x518D;&#x901A;&#x8FC7;&#x4E00;&#x4E2A; if &#x5224;&#x65AD; age &gt;= 6 &#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x7B26;&#x5408;&#x6761;&#x4EF6;2&#xFF0C;&#x5426;&#x5219;&#xFF0C;&#x6267;&#x884C;&#x6761;&#x4EF6;3&#xFF1A; 1234567if age &gt;= 18: print &apos;adult&apos;else: if age &gt;= 6: print &apos;teenager&apos; else: print &apos;kid&apos; &#x8FD9;&#x6837;&#x5199;&#x51FA;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x4E24;&#x5C42;&#x5D4C;&#x5957;&#x7684; if &#x2026; else &#x2026; &#x8BED;&#x53E5;&#x3002;&#x8FD9;&#x4E2A;&#x903B;&#x8F91;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x7EE7;&#x7EED;&#x589E;&#x52A0;&#x6761;&#x4EF6;&#xFF0C;&#x6BD4;&#x5982;3&#x5C81;&#x4EE5;&#x4E0B;&#x662F; baby&#xFF1A; 12345678910if age &gt;= 18: print &apos;adult&apos;else: if age &gt;= 6: print &apos;teenager&apos; else: if age &gt;= 3: print &apos;kid&apos; else: print &apos;baby&apos; &#x8FD9;&#x79CD;&#x7F29;&#x8FDB;&#x53EA;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#xFF0C;&#x4EE3;&#x7801;&#x4E5F;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x96BE;&#x770B;&#x3002; &#x8981;&#x907F;&#x514D;&#x5D4C;&#x5957;&#x7ED3;&#x6784;&#x7684; if &#x2026; else &#x2026;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528; if &#x2026; &#x591A;&#x4E2A;elif &#x2026; else &#x2026; &#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x4E00;&#x6B21;&#x5199;&#x5B8C;&#x6240;&#x6709;&#x7684;&#x89C4;&#x5219;&#xFF1A; 12345678if age &gt;= 18: print &apos;adult&apos;elif age &gt;= 6: print &apos;teenager&apos;elif age &gt;= 3: print &apos;kid&apos;else: print &apos;baby&apos; elif &#x610F;&#x601D;&#x5C31;&#x662F; else if&#x3002;&#x8FD9;&#x6837;&#x4E00;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x5199;&#x51FA;&#x4E86;&#x7ED3;&#x6784;&#x975E;&#x5E38;&#x6E05;&#x6670;&#x7684;&#x4E00;&#x7CFB;&#x5217;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x3002; &#x7279;&#x522B;&#x6CE8;&#x610F;: &#x8FD9;&#x4E00;&#x7CFB;&#x5217;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x4F1A;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x4F9D;&#x6B21;&#x5224;&#x65AD;&#xFF0C;&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x5224;&#x65AD;&#x4E3A; True&#xFF0C;&#x6267;&#x884C;&#x5B8C;&#x5BF9;&#x5E94;&#x7684;&#x4EE3;&#x7801;&#x5757;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x5C31;&#x76F4;&#x63A5;&#x5FFD;&#x7565;&#xFF0C;&#x4E0D;&#x518D;&#x6267;&#x884C;&#x4E86;&#x3002; &#x8BF7;&#x601D;&#x8003;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 1234567age = 8if age &gt;= 6: print &apos;teenager&apos;elif age &gt;= 18: print &apos;adult&apos;else: print &apos;kid&apos; &#x5F53; age = 8 &#x65F6;&#xFF0C;&#x7ED3;&#x679C;&#x6B63;&#x786E;&#xFF0C;&#x4F46; age = 20 &#x65F6;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x6CA1;&#x6709;&#x6253;&#x5370;&#x51FA; adult&#xFF1F; &#x5982;&#x679C;&#x8981;&#x4FEE;&#x590D;&#xFF0C;&#x5E94;&#x8BE5;&#x5982;&#x4F55;&#x4FEE;&#x590D;&#xFF1F; &#x77E5;&#x8BC6;&#x70B9;&#x89E3;&#x7B54;: &#x56E0;&#x4E3A;&#x5F53;age=20.&#x7B2C;&#x4E00;&#x4E2A;&#x6761;&#x4EF6;&gt;=6&#x6EE1;&#x8DB3;&#x5C31;&#x77ED;&#x8DEF;&#x4E86;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x5728;&#x8BBE;&#x7F6E;&#x6761;&#x4EF6;&#x5E94;&#x8BE5;&#x4ECE;&#x4E25;&#x683C;&#x5230;&#x677E;&#x6CDB;. 1234567age = 20if age &gt;= 18: print &apos;teenager&apos;elif age &gt;= 6: print &apos;adult&apos;else: print &apos;kid&apos; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5982;&#x679C;&#x6309;&#x7167;&#x5206;&#x6570;&#x5212;&#x5B9A;&#x7ED3;&#x679C;&#xFF1A; 90&#x5206;&#x6216;&#x4EE5;&#x4E0A;&#xFF1A;excellent 80&#x5206;&#x6216;&#x4EE5;&#x4E0A;&#xFF1A;good 60&#x5206;&#x6216;&#x4EE5;&#x4E0A;&#xFF1A;passed 60&#x5206;&#x4EE5;&#x4E0B;&#xFF1A;failed &#x8BF7;&#x7F16;&#x5199;&#x7A0B;&#x5E8F;&#x6839;&#x636E;&#x5206;&#x6570;&#x6253;&#x5370;&#x7ED3;&#x679C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678910score = 85if score&gt;=90: print &apos;excellent&apos;elif score&gt;=80: print &apos;good&apos;elif score&gt;=60: print &apos;passed&apos;else: print &apos;failed&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1good for&#x5FAA;&#x73AF;list&#x6216;tuple&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x96C6;&#x5408;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x60F3;&#x4F9D;&#x6B21;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;list&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5462;&#xFF1F;&#x6BD4;&#x5982; list&#xFF1A; 1234L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]print L[0]print L[1]print L[2] &#x5982;&#x679C;list&#x53EA;&#x5305;&#x542B;&#x51E0;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x8FD9;&#x6837;&#x5199;&#x8FD8;&#x884C;&#xFF0C;&#x5982;&#x679C;list&#x5305;&#x542B;1&#x4E07;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x53EF;&#x80FD;&#x5199;1&#x4E07;&#x884C;print&#x3002; &#x8FD9;&#x65F6;&#xFF0C;&#x5FAA;&#x73AF;&#x5C31;&#x6D3E;&#x4E0A;&#x7528;&#x573A;&#x4E86;&#x3002; Python&#x7684; for &#x5FAA;&#x73AF;&#x5C31;&#x53EF;&#x4EE5;&#x4F9D;&#x6B21;&#x628A;list&#x6216;tuple&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x8FED;&#x4EE3;&#x51FA;&#x6765;&#xFF1A; 123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]for name in L: print name &#x6CE8;&#x610F;: name &#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x662F;&#x5728; for &#x5FAA;&#x73AF;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;(&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#x540D;&#x5B57;&#x53EF;&#x81EA;&#x5B9A;&#x4E49;)&#xFF0C;&#x610F;&#x601D;&#x662F;&#xFF0C;&#x4F9D;&#x6B21;&#x53D6;&#x51FA;list&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E76;&#x628A;&#x5143;&#x7D20;&#x8D4B;&#x503C;&#x7ED9; name&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;for&#x5FAA;&#x73AF;&#x4F53;&#xFF08;&#x5C31;&#x662F;&#x7F29;&#x8FDB;&#x7684;&#x4EE3;&#x7801;&#x5757;&#xFF09;&#x3002; &#x8FD9;&#x6837;&#x4E00;&#x6765;&#xFF0C;&#x904D;&#x5386;&#x4E00;&#x4E2A;list&#x6216;tuple&#x5C31;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x4E86;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x73ED;&#x91CC;&#x8003;&#x8BD5;&#x540E;&#xFF0C;&#x8001;&#x5E08;&#x8981;&#x7EDF;&#x8BA1;&#x5E73;&#x5747;&#x6210;&#x7EE9;&#xFF0C;&#x5DF2;&#x77E5;4&#x4F4D;&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x7528;list&#x8868;&#x793A;&#x5982;&#x4E0B;&#xFF1A;L = [75, 92, 59, 68] &#x8BF7;&#x5229;&#x7528;for&#x5FAA;&#x73AF;&#x8BA1;&#x7B97;&#x51FA;&#x5E73;&#x5747;&#x6210;&#x7EE9;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345L = [75, 92, 59, 68]sum = 0.0for x in L: sum =sum+xprint sum / 4 &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 173.5 while&#x5FAA;&#x73AF;&#x548C; for &#x5FAA;&#x73AF;&#x4E0D;&#x540C;&#x7684;&#x53E6;&#x4E00;&#x79CD;&#x5FAA;&#x73AF;&#x662F; while &#x5FAA;&#x73AF;&#xFF0C;while &#x5FAA;&#x73AF;&#x4E0D;&#x4F1A;&#x8FED;&#x4EE3; list &#x6216; tuple &#x7684;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x662F;&#x6839;&#x636E;&#x8868;&#x8FBE;&#x5F0F;&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x662F;&#x5426;&#x7ED3;&#x675F;&#x3002; &#x6BD4;&#x5982;&#x8981;&#x4ECE; 0 &#x5F00;&#x59CB;&#x6253;&#x5370;&#x4E0D;&#x5927;&#x4E8E; N &#x7684;&#x6574;&#x6570;&#xFF1A; 12345N = 10x = 0while x &lt; N: print x x = x + 1 while&#x5FAA;&#x73AF;&#x6BCF;&#x6B21;&#x5148;&#x5224;&#x65AD; x &lt; N&#xFF0C;&#x5982;&#x679C;&#x4E3A;True&#xFF0C;&#x5219;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x4F53;&#x7684;&#x4EE3;&#x7801;&#x5757;,&#x5426;&#x5219;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x3002; &#x5728;&#x5FAA;&#x73AF;&#x4F53;&#x5185;&#xFF0C;x = x + 1 &#x4F1A;&#x8BA9; x &#x4E0D;&#x65AD;&#x589E;&#x52A0;&#xFF0C;&#x6700;&#x7EC8;&#x56E0;&#x4E3A; x &lt; N &#x4E0D;&#x6210;&#x7ACB;&#x800C;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x3002; &#x5982;&#x679C;&#x6CA1;&#x6709;&#x8FD9;&#x4E00;&#x4E2A;&#x8BED;&#x53E5;&#xFF0C;while&#x5FAA;&#x73AF;&#x5728;&#x5224;&#x65AD; x &lt; N &#x65F6;&#x603B;&#x662F;&#x4E3A;True&#xFF0C;&#x5C31;&#x4F1A;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x4E0B;&#x53BB;&#xFF0C;&#x53D8;&#x6210;&#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7279;&#x522B;&#x7559;&#x610F;while&#x5FAA;&#x73AF;&#x7684;&#x9000;&#x51FA;&#x6761;&#x4EF6;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5229;&#x7528;while&#x5FAA;&#x73AF;&#x8BA1;&#x7B97;100&#x4EE5;&#x5185;&#x5947;&#x6570;&#x7684;&#x548C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123456sum = 0x = 1while x&lt;=100: sum=sum+x x=x+2print sum &#x77E5;&#x8BC6;&#x70B9;: &#x5947;&#x6570;&#x53EA;&#x9700;&#x8981;&#x4ECE;1&#x5F00;&#x59CB;&#x4E0D;&#x65AD;&#x52A0;2&#x90FD;&#x662F;&#x5947;&#x6570;&#x3002; &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 12500 break&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x7528;for &#x5FAA;&#x73AF;&#x6216;&#x8005; while &#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5728;&#x5FAA;&#x73AF;&#x4F53;&#x5185;&#x76F4;&#x63A5;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; break &#x8BED;&#x53E5;&#x3002; &#x6BD4;&#x5982;&#x8BA1;&#x7B97;1&#x81F3;100&#x7684;&#x6574;&#x6570;&#x548C;&#xFF0C;&#x6211;&#x4EEC;&#x7528;while&#x6765;&#x5B9E;&#x73B0;&#xFF1A; 12345678sum = 0x = 1while True: sum = sum + x x = x + 1 if x &gt; 100: breakprint sum &#x548B;&#x4E00;&#x770B;&#xFF0C; while True &#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5FAA;&#x73AF;&#x4F53;&#x5185;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x5224;&#x65AD;&#x4E86; x &gt; 100 &#x6761;&#x4EF6;&#x6210;&#x7ACB;&#x65F6;&#xFF0C;&#x7528;break&#x8BED;&#x53E5;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5FAA;&#x73AF;&#x7684;&#x7ED3;&#x675F;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5229;&#x7528; while True &#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x914D;&#x5408; break &#x8BED;&#x53E5;&#xFF0C;&#x8BA1;&#x7B97; 1 + 2 + 4 + 8 + 16 + &#x2026; &#x7684;&#x524D;20&#x9879;&#x7684;&#x548C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678910sum = 0x = 1n = 1while True: sum =sum+x x =2*x n =n+1 if n &gt;20: breakprint sum &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 11048575 continue&#x7EE7;&#x7EED;&#x5FAA;&#x73AF;&#x5728;&#x5FAA;&#x73AF;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;break&#x9000;&#x51FA;&#x5F53;&#x524D;&#x5FAA;&#x73AF;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x7528;continue&#x8DF3;&#x8FC7;&#x540E;&#x7EED;&#x5FAA;&#x73AF;&#x4EE3;&#x7801;&#xFF0C;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x6B21;&#x5FAA;&#x73AF;&#x3002; &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5199;&#x597D;&#x4E86;&#x5229;&#x7528;for&#x5FAA;&#x73AF;&#x8BA1;&#x7B97;&#x5E73;&#x5747;&#x5206;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 1234567L = [75, 98, 59, 81, 66, 43, 69, 85]sum = 0.0n = 0for x in L: sum = sum + x n = n + 1print sum / n &#x73B0;&#x5728;&#x8001;&#x5E08;&#x53EA;&#x60F3;&#x7EDF;&#x8BA1;&#x53CA;&#x683C;&#x5206;&#x6570;&#x7684;&#x5E73;&#x5747;&#x5206;&#xFF0C;&#x5C31;&#x8981;&#x628A; x &lt; 60 &#x7684;&#x5206;&#x6570;&#x5254;&#x9664;&#x6389;&#xFF0C;&#x8FD9;&#x65F6;&#xFF0C;&#x5229;&#x7528;continue&#xFF0C;&#x53EF;&#x4EE5;&#x505A;&#x5230;&#x5F53; x &lt; 60&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x4F53;&#x7684;&#x540E;&#x7EED;&#x4EE3;&#x7801;&#xFF0C;&#x76F4;&#x63A5;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x6B21;&#x5FAA;&#x73AF;&#xFF1A; 12345for x in L: if x &lt; 60: continue sum = sum + x n = n + 1 coutinue: &#x8DF3;&#x8FC7;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x5F00;&#x59CB;&#x4E0B;&#x4E00;&#x6B21;&#x5FAA;&#x73AF;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5BF9;&#x5DF2;&#x6709;&#x7684;&#x8BA1;&#x7B97; 0 - 100 &#x7684;while&#x5FAA;&#x73AF;&#x8FDB;&#x884C;&#x6539;&#x9020;&#xFF0C;&#x901A;&#x8FC7;&#x589E;&#x52A0; continue &#x8BED;&#x53E5;&#xFF0C;&#x4F7F;&#x5F97;&#x53EA;&#x8BA1;&#x7B97;&#x5947;&#x6570;&#x7684;&#x548C;&#xFF1A; 12345678sum = 0x = 1while True: sum = sum + x x = x + 1 if x &gt; 100: breakprint sum &#x601D;&#x8DEF;: if&#x5224;&#x65AD;&#x5230;&#x662F;&#x5076;&#x6570;&#xFF0C;continue&#x8DF3;&#x8FC7;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 1234567891011sum = 0x = 0while True: x = x + 1 if x &gt; 100: break if x%2==0: continue sum = sum+x print sum &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 12500 &#x591A;&#x91CD;&#x5FAA;&#x73AF;(&#x5D4C;&#x5957;&#x5FAA;&#x73AF;)&#x5728;&#x5FAA;&#x73AF;&#x5185;&#x90E8;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x5D4C;&#x5957;&#x5FAA;&#x73AF;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 123for x in [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]: for y in [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]: print x + y x &#x6BCF;&#x5FAA;&#x73AF;&#x4E00;&#x6B21;&#xFF0C;y&#x5C31;&#x4F1A;&#x5FAA;&#x73AF; 3 &#x6B21;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6253;&#x5370;&#x51FA;&#x4E00;&#x4E2A;&#x5168;&#x6392;&#x5217;&#xFF1A; 123456789A1A2A3B1B2B3C1C2C3 &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5BF9;100&#x4EE5;&#x5185;&#x7684;&#x4E24;&#x4F4D;&#x6570;&#xFF0C;&#x8BF7;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x4E24;&#x91CD;&#x5FAA;&#x73AF;&#x6253;&#x5370;&#x51FA;&#x6240;&#x6709;&#x5341;&#x4F4D;&#x6570;&#x6570;&#x5B57;&#x6BD4;&#x4E2A;&#x4F4D;&#x6570;&#x6570;&#x5B57;&#x5C0F;&#x7684;&#x6570;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;23&#xFF08;2 &lt; 3&#xFF09;&#x3002; &#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x3002; 123456tens_place = [1,2,3,4,5,6,7,8,9]ones_place = [0,1,2,3,4,5,6,7,8,9]for x in tens_place: for y in ones_place: if x&lt;y: print x*10 + y &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 12345678910121314151617181923&#x7565; &#x91CD;&#x8981;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;Dict&#x548C;Set&#x4EC0;&#x4E48;&#x662F;dict&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x77E5;&#x9053;&#xFF0C;list &#x548C; tuple &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x8868;&#x793A;&#x987A;&#x5E8F;&#x96C6;&#x5408;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x73ED;&#x91CC;&#x540C;&#x5B66;&#x7684;&#x540D;&#x5B57;&#xFF1A; 1[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x6216;&#x8005;&#x8003;&#x8BD5;&#x7684;&#x6210;&#x7EE9;&#x5217;&#x8868;&#xFF1A; 1[95, 85, 59] &#x4F46;&#x662F;&#xFF0C;&#x8981;&#x6839;&#x636E;&#x540D;&#x5B57;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x6210;&#x7EE9;&#xFF0C;&#x7528;&#x4E24;&#x4E2A; list &#x8868;&#x793A;&#x5C31;&#x4E0D;&#x65B9;&#x4FBF;&#x3002; &#x5982;&#x679C;&#x628A;&#x540D;&#x5B57;&#x548C;&#x5206;&#x6570;&#x5173;&#x8054;&#x8D77;&#x6765;&#xFF0C;&#x7EC4;&#x6210;&#x7C7B;&#x4F3C;&#x7684;&#x67E5;&#x627E;&#x8868;&#xFF1A; 123&apos;Adam&apos; ==&gt; 95&apos;Lisa&apos; ==&gt; 85&apos;Bart&apos; ==&gt; 59 &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x67E5;&#x5230;&#x5206;&#x6570;&#x3002; Python&#x7684; dict &#x5C31;&#x662F;&#x4E13;&#x95E8;&#x5E72;&#x8FD9;&#x4EF6;&#x4E8B;&#x7684;&#x3002;&#x7528; dict &#x8868;&#x793A;&#x540D;&#x5B57;-&#x6210;&#x7EE9;&#x7684;&#x67E5;&#x627E;&#x8868;&#x5982;&#x4E0B;&#xFF1A; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x6211;&#x4EEC;&#x628A;&#x540D;&#x5B57;&#x79F0;&#x4E3A;key&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x6210;&#x7EE9;&#x79F0;&#x4E3A;value&#xFF0C;dict&#x5C31;&#x662F;&#x901A;&#x8FC7; key&#x6765;&#x67E5;&#x627E; value&#x3002; &#x82B1;&#x62EC;&#x53F7; {} &#x8868;&#x793A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;dict&#xFF0C;&#x7136;&#x540E;&#x6309;&#x7167; key: value, &#x5199;&#x51FA;&#x6765;&#x5373;&#x53EF;&#x3002;&#x6700;&#x540E;&#x4E00;&#x4E2A; key: value &#x7684;&#x9017;&#x53F7;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A; &#x533A;&#x522B;&#x5C0F;&#x8BFE;&#x5802; &#x5355;&#x5143;&#x7D20;&#x7684;tuple&#x5FC5;&#x987B;&#x5728;&#x540E;&#x9762;&#x591A;&#x52A0;&#x4E00;&#x4E2A;&#x9017;&#x53F7;&#x3002; dict&#x6700;&#x540E;&#x7684;&#x9017;&#x53F7;&#x53EF;&#x4EE5;&#x7701;&#x7565; &#x7531;&#x4E8E;dict&#x4E5F;&#x662F;&#x96C6;&#x5408;&#xFF0C;len() &#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x4EFB;&#x610F;&#x96C6;&#x5408;&#x7684;&#x5927;&#x5C0F;&#xFF1A; 12&gt;&gt;&gt; len(d)3 &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x6CE8;&#x610F;: &#x4E00;&#x4E2A; key-value &#x7B97;&#x4E00;&#x4E2A;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;dict&#x5927;&#x5C0F;&#x4E3A;3&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x65B0;&#x6765;&#x7684;Paul&#x540C;&#x5B66;&#x6210;&#x7EE9;&#x662F; 75 &#x5206;&#xFF0C;&#x8BF7;&#x7F16;&#x5199;&#x4E00;&#x4E2A;dict&#xFF0C;&#x628A;Paul&#x540C;&#x5B66;&#x7684;&#x6210;&#x7EE9;&#x4E5F;&#x52A0;&#x8FDB;&#x53BB;&#x3002; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 1234567d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59, &apos;Paul&apos;: 75 } &#x8BBF;&#x95EE;dict&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x80FD;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;dict&#xFF0C;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x540D;&#x5B57;&#x548C;&#x6210;&#x7EE9;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#xFF1A; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x90A3;&#x4E48;&#xFF0C;&#x5982;&#x4F55;&#x6839;&#x636E;&#x540D;&#x5B57;&#x6765;&#x67E5;&#x627E;&#x5BF9;&#x5E94;&#x7684;&#x6210;&#x7EE9;&#x5462;&#xFF1F; &#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x4F7F;&#x7528; d[key] &#x7684;&#x5F62;&#x5F0F;&#x6765;&#x67E5;&#x627E;&#x5BF9;&#x5E94;&#x7684; value&#xFF0C;&#x8FD9;&#x548C; list &#x5F88;&#x50CF;&#xFF0C;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x662F;&#xFF0C;list &#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x8FD4;&#x56DE;&#x5BF9;&#x5E94;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x800C;dict&#x4F7F;&#x7528;key&#xFF1A; 1234567&gt;&gt;&gt; print d[&apos;Adam&apos;]95&gt;&gt;&gt; print d[&apos;Paul&apos;]Traceback (most recent call last): File &quot;index.py&quot;, line 11, in &lt;module&gt; print d[&apos;Paul&apos;]KeyError: &apos;Paul&apos; &#x6CE8;&#x610F;: &#x901A;&#x8FC7; key &#x8BBF;&#x95EE; dict &#x7684;value&#xFF0C;&#x53EA;&#x8981; key &#x5B58;&#x5728;&#xFF0C;dict&#x5C31;&#x8FD4;&#x56DE;&#x5BF9;&#x5E94;&#x7684;value&#x3002;&#x5982;&#x679C;key&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x4F1A;&#x76F4;&#x63A5;&#x62A5;&#x9519;&#xFF1A;KeyError&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x907F;&#x514D; KeyError &#x53D1;&#x751F;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x529E;&#x6CD5;&#xFF1A; &#x662F;&#x5148;&#x5224;&#x65AD;&#x4E00;&#x4E0B; key &#x662F;&#x5426;&#x5B58;&#x5728;&#xFF0C;&#x7528; in &#x64CD;&#x4F5C;&#x7B26;&#xFF1A; 12if &apos;Paul&apos; in d: print d[&apos;Paul&apos;] &#x5982;&#x679C; &#x2018;Paul&#x2019; &#x4E0D;&#x5B58;&#x5728;&#xFF0C;if&#x8BED;&#x53E5;&#x5224;&#x65AD;&#x4E3A;False&#xFF0C;&#x81EA;&#x7136;&#x4E0D;&#x4F1A;&#x6267;&#x884C; print d[&#x2018;Paul&#x2019;] &#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D;&#x4E86;&#x9519;&#x8BEF;&#x3002; &#x662F;&#x4F7F;&#x7528;dict&#x672C;&#x8EAB;&#x63D0;&#x4F9B;&#x7684;&#x4E00;&#x4E2A;get&#x65B9;&#x6CD5;&#xFF0C;&#x5728;Key&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD4;&#x56DE;None&#xFF1A; 1234&gt;&gt;&gt; print d.get(&apos;Bart&apos;)59&gt;&gt;&gt; print d.get(&apos;Paul&apos;)None &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;&#x6839;&#x636E;&#x5982;&#x4E0B;dict&#xFF1A;12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x8BF7;&#x6253;&#x5370;&#x51FA;&#xFF1A;Adam: 95Lisa: 85Bart: 59 &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59}print &apos;Adam:&apos;,d[&apos;Adam&apos;]print &apos;Lisa:&apos;,d.get(&apos;Lisa&apos;)print &apos;Bart:&apos;,d[&apos;Bart&apos;] &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 123Adam: 95Lisa: 85Bart: 59 dict&#x7684;&#x7279;&#x70B9;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;dict&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x5FEB;&#x3002;list&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x968F;&#x7740;&#x5143;&#x7D20;&#x589E;&#x52A0;&#x800C;&#x9010;&#x6E10;&#x4E0B;&#x964D;&#x3002;&#x7F3A;&#x70B9;&#xFF1A;&#x5185;&#x5B58;&#x5360;&#x7528;&#x5927;&#x3002;list&#x6162;&#x4F46;&#x5185;&#x5B58;&#x5360;&#x7528;&#x5C0F;&#x3002; dict&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7279;&#x70B9;&#x662F;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x65E0;&#x8BBA;dict&#x6709;10&#x4E2A;&#x5143;&#x7D20;&#x8FD8;&#x662F;10&#x4E07;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x90FD;&#x4E00;&#x6837;&#x3002;&#x800C;list&#x7684;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x968F;&#x7740;&#x5143;&#x7D20;&#x589E;&#x52A0;&#x800C;&#x9010;&#x6E10;&#x4E0B;&#x964D;&#x3002; &#x4E0D;&#x8FC7;dict&#x7684;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x5FEB;&#x4E0D;&#x662F;&#x6CA1;&#x6709;&#x4EE3;&#x4EF7;&#x7684;&#xFF0C;dict&#x7684;&#x7F3A;&#x70B9;&#x662F;&#x5360;&#x7528;&#x5185;&#x5B58;&#x5927;&#xFF0C;&#x8FD8;&#x4F1A;&#x6D6A;&#x8D39;&#x5F88;&#x591A;&#x5185;&#x5BB9;&#xFF0C;list&#x6B63;&#x597D;&#x76F8;&#x53CD;&#xFF0C;&#x5360;&#x7528;&#x5185;&#x5B58;&#x5C0F;&#xFF0C;&#x4F46;&#x662F;&#x67E5;&#x627E;&#x901F;&#x5EA6;&#x6162;&#x3002; &#x7531;&#x4E8E;dict&#x662F;&#x6309; key &#x67E5;&#x627E;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;dict&#x4E2D;&#xFF0C;key&#x4E0D;&#x80FD;&#x91CD;&#x590D;&#x3002; dict&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x7279;&#x70B9;&#x5C31;&#x662F;&#x5B58;&#x50A8;&#x7684;key-value&#x5E8F;&#x5BF9;&#x662F;&#x6CA1;&#x6709;&#x987A;&#x5E8F;&#x7684;&#xFF01;&#x8FD9;&#x548C;list&#x4E0D;&#x4E00;&#x6837;&#xFF1A; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x5F53;&#x6211;&#x4EEC;&#x8BD5;&#x56FE;&#x6253;&#x5370;&#x8FD9;&#x4E2A;dict&#x65F6;&#xFF1A; 12&gt;&gt;&gt; print d{&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59} &#x6253;&#x5370;&#x7684;&#x987A;&#x5E8F;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6211;&#x4EEC;&#x521B;&#x5EFA;&#x65F6;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x800C;&#x4E14;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x673A;&#x5668;&#x6253;&#x5370;&#x7684;&#x987A;&#x5E8F;&#x90FD;&#x53EF;&#x80FD;&#x4E0D;&#x540C;&#xFF0C;&#x8FD9;&#x8BF4;&#x660E; &#x77E5;&#x8BC6;&#x70B9;:dict&#x5185;&#x90E8;&#x662F;&#x65E0;&#x5E8F;&#x7684;&#xFF0C;&#x4E0D;&#x80FD;&#x7528;dict&#x5B58;&#x50A8;&#x6709;&#x5E8F;&#x7684;&#x96C6;&#x5408;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;dict&#x7684;&#x7B2C;&#x4E09;&#x4E2A;&#x7279;&#x70B9;&#x662F;&#x4F5C;&#x4E3A; key &#x7684;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x4E0D;&#x53EF;&#x53D8;&#xFF0C;Python&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5982;&#x5B57;&#x7B26;&#x4E32;&#x3001;&#x6574;&#x6570;&#x3001;&#x6D6E;&#x70B9;&#x6570;&#x90FD;&#x662F;&#x4E0D;&#x53EF;&#x53D8;&#x7684;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A; key&#x3002; &#x4F46;&#x662F;list&#x662F;&#x53EF;&#x53D8;&#x7684;&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x4F5C;&#x4E3A; key&#x3002; &#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x7528;list&#x4F5C;&#x4E3A;key&#x65F6;&#x4F1A;&#x62A5;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x9519;&#x8BEF;&#x3002; &#x4E0D;&#x53EF;&#x53D8;&#x8FD9;&#x4E2A;&#x9650;&#x5236;&#x4EC5;&#x4F5C;&#x7528;&#x4E8E;key&#xFF0C;value&#x662F;&#x5426;&#x53EF;&#x53D8;&#x65E0;&#x6240;&#x8C13;&#xFF1A; 12345{ &apos;123&apos;: [1, 2, 3], # key &#x662F; str&#xFF0C;value&#x662F;list 123: &apos;123&apos;, # key &#x662F; int&#xFF0C;value &#x662F; str (&apos;a&apos;, &apos;b&apos;): True # key &#x662F; tuple&#xFF0C;&#x5E76;&#x4E14;tuple&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x4E0D;&#x53EF;&#x53D8;&#x5BF9;&#x8C61;&#xFF0C;value&#x662F; boolean} &#x6700;&#x5E38;&#x7528;&#x7684;key&#x8FD8;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x56E0;&#x4E3A;&#x7528;&#x8D77;&#x6765;&#x6700;&#x65B9;&#x4FBF;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;dict&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5206;&#x6570;&#x6765;&#x67E5;&#x627E;&#x540D;&#x5B57;&#xFF0C;&#x5DF2;&#x77E5;&#x6210;&#x7EE9;&#x5982;&#x4E0B;&#xFF1A; 123Adam: 95,Lisa: 85,Bart: 59. &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345d = { 95:&apos;Adam&apos;, 85:&apos;Lisa&apos;, 59:&apos;Bart&apos;} &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A;&#x65E0; &#x66F4;&#x65B0;dictdict&#x662F;&#x53EF;&#x53D8;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x968F;&#x65F6;&#x5F80;dict&#x4E2D;&#x6DFB;&#x52A0;&#x65B0;&#x7684; key-value&#x3002;&#x6BD4;&#x5982;&#x5DF2;&#x6709;dict&#xFF1A; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x8981;&#x628A;&#x65B0;&#x540C;&#x5B66;&#x2019;Paul&#x2019;&#x7684;&#x6210;&#x7EE9; 72 &#x52A0;&#x8FDB;&#x53BB;&#xFF0C;&#x7528;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#xFF1A; 1&gt;&gt;&gt; d[&apos;Paul&apos;] = 72 &#x518D;&#x770B;&#x770B;dict&#x7684;&#x5185;&#x5BB9;&#xFF1A; 12&gt;&gt;&gt; print d{&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59} &#x5982;&#x679C; key &#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#xFF0C;&#x5219;&#x8D4B;&#x503C;&#x4F1A;&#x7528;&#x65B0;&#x7684; value &#x66FF;&#x6362;&#x6389;&#x539F;&#x6765;&#x7684; value&#xFF1A; 123&gt;&gt;&gt; d[&apos;Bart&apos;] = 60&gt;&gt;&gt; print d{&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60} &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x6839;&#x636E;Paul&#x7684;&#x6210;&#x7EE9; 72 &#x66F4;&#x65B0;&#x4E0B;&#x9762;&#x7684;dict&#xFF1A;123456789d = { 95: &apos;Adam&apos;, 85: &apos;Lisa&apos;, 59: &apos;Bart&apos;} &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 1234567d = { 95: &apos;Adam&apos;, 85: &apos;Lisa&apos;, 59: &apos;Bart&apos;}d[72] = &apos;Paul&apos;print d &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1{72: &apos;Paul&apos;, 59: &apos;Bart&apos;, 85: &apos;Lisa&apos;, 95: &apos;Adam&apos;} &#x904D;&#x5386;dict&#x7531;&#x4E8E;dict&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x904D;&#x5386;dict&#x548C;&#x904D;&#x5386;list&#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; for &#x5FAA;&#x73AF;&#x5B9E;&#x73B0;&#x3002; &#x76F4;&#x63A5;&#x4F7F;&#x7528;for&#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x904D;&#x5386; dict &#x7684; key&#xFF1A; 1234567&gt;&gt;&gt; d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 }&gt;&gt;&gt; for key in d:... print key... LisaAdamBart &#x7531;&#x4E8E;&#x901A;&#x8FC7; key &#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x5BF9;&#x5E94;&#x7684; value&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x5FAA;&#x73AF;&#x4F53;&#x5185;&#xFF0C;&#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x5230;value&#x7684;&#x503C;&#x3002; &#x6CE8;&#xFF1A;&#x8FD9;&#x91CC;&#x7684;key&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x7EA6;&#x5B9A;&#x4FD7;&#x79F0;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x6539;&#x4E3A;&#x5176;&#x4ED6;&#x540D;&#x5B57;&#x3002;&#x4F46;&#x662F;&#x63A8;&#x8350;&#x7528;key&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7528; for &#x5FAA;&#x73AF;&#x904D;&#x5386;&#x5982;&#x4E0B;&#x7684;dict&#xFF0C;&#x6253;&#x5370;&#x51FA; name: score &#x6765;&#x3002; 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59} &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 1234567d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59}for key in d: print key+&quot;:&quot;,d[key] &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 123Lisa: 85Adam: 95Bart: 59 &#x4EC0;&#x4E48;&#x662F;setdict&#x7684;&#x4F5C;&#x7528;&#x662F;&#x5EFA;&#x7ACB;&#x4E00;&#x7EC4; key &#x548C;&#x4E00;&#x7EC4; value &#x7684;&#x6620;&#x5C04;&#x5173;&#x7CFB;&#xFF0C;dict&#x7684;key&#x662F;&#x4E0D;&#x80FD;&#x91CD;&#x590D;&#x7684;&#x3002; &#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x60F3;&#x8981; dict &#x7684; key&#xFF0C;&#x4E0D;&#x5173;&#x5FC3; key &#x5BF9;&#x5E94;&#x7684; value&#xFF0C;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x4FDD;&#x8BC1;&#x8FD9;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x4F1A;&#x91CD;&#x590D;&#xFF0C;&#x8FD9;&#x65F6;&#xFF0C;set&#x5C31;&#x6D3E;&#x4E0A;&#x7528;&#x573A;&#x4E86;&#x3002; set &#x6301;&#x6709;&#x4E00;&#x7CFB;&#x5217;&#x5143;&#x7D20;&#xFF0C;&#x8FD9;&#x4E00;&#x70B9;&#x548C; list &#x5F88;&#x50CF;&#xFF0C;&#x4F46;&#x662F;set&#x7684;&#x5143;&#x7D20;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#xFF0C;&#x800C;&#x4E14;&#x662F;&#x65E0;&#x5E8F;&#x7684;&#xFF0C;&#x8FD9;&#x70B9;&#x548C; dict &#x7684; key&#x5F88;&#x50CF;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x521B;&#x5EFA; set &#x7684;&#x65B9;&#x5F0F;&#x662F;&#x8C03;&#x7528; set() &#x5E76;&#x4F20;&#x5165;&#x4E00;&#x4E2A; list&#xFF0C;list&#x7684;&#x5143;&#x7D20;&#x5C06;&#x4F5C;&#x4E3A;set&#x7684;&#x5143;&#x7D20;&#xFF1A; 12345&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])&#x53EF;&#x4EE5;&#x67E5;&#x770B; set &#x7684;&#x5185;&#x5BB9;&#xFF1A;&gt;&gt;&gt; print sset([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;]) &#x8BF7;&#x6CE8;&#x610F;&#xFF0C;&#x4E0A;&#x8FF0;&#x6253;&#x5370;&#x7684;&#x5F62;&#x5F0F;&#x7C7B;&#x4F3C; list&#xFF0C; &#x4F46;&#x5B83;&#x4E0D;&#x662F; list&#xFF0C;&#x4ED4;&#x7EC6;&#x770B;&#x8FD8;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x6253;&#x5370;&#x7684;&#x987A;&#x5E8F;&#x548C;&#x539F;&#x59CB; list &#x7684;&#x987A;&#x5E8F;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;set&#x5185;&#x90E8;&#x5B58;&#x50A8;&#x7684;&#x5143;&#x7D20;&#x662F;&#x65E0;&#x5E8F;&#x7684;&#x3002; &#x56E0;&#x4E3A;set&#x4E0D;&#x80FD;&#x5305;&#x542B;&#x91CD;&#x590D;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x4F20;&#x5165;&#x5305;&#x542B;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x7684; list &#x4F1A;&#x600E;&#x4E48;&#x6837;&#x5462;&#xFF1F; 12345&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])&gt;&gt;&gt; print sset([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])&gt;&gt;&gt; len(s)3 &#x7ED3;&#x679C;&#x663E;&#x793A;&#xFF0C;set&#x4F1A;&#x81EA;&#x52A8;&#x53BB;&#x6389;&#x91CD;&#x590D;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x539F;&#x6765;&#x7684;list&#x6709;4&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x4F46;set&#x53EA;&#x6709;3&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7528;set&#x8868;&#x793A;&#x73ED;&#x91CC;&#x7684;4&#x4F4D;&#x540C;&#x5B66;&#xFF1A;Adam, Lisa, Bart, Paul &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])print s &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1set([&apos;Lisa&apos;, &apos;Paul&apos;, &apos;Adam&apos;, &apos;Bart&apos;]) &#x8BBF;&#x95EE;set&#x7531;&#x4E8E;set&#x5B58;&#x50A8;&#x7684;&#x662F;&#x65E0;&#x5E8F;&#x96C6;&#x5408;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6CA1;&#x6CD5;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x6765;&#x8BBF;&#x95EE;&#x3002; &#x8BBF;&#x95EE; set&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;set&#x4E2D;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x5B58;&#x50A8;&#x4E86;&#x73ED;&#x91CC;&#x540C;&#x5B66;&#x540D;&#x5B57;&#x7684;set&#xFF1A; 1&gt;&gt;&gt; s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]) &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528; in &#x64CD;&#x4F5C;&#x7B26;&#x5224;&#x65AD;&#xFF1A; Bart&#x662F;&#x8BE5;&#x73ED;&#x7684;&#x540C;&#x5B66;&#x5417;&#xFF1F; 12345678910&gt;&gt;&gt; &apos;Bart&apos; in sTrueBill&#x662F;&#x8BE5;&#x73ED;&#x7684;&#x540C;&#x5B66;&#x5417;&#xFF1F;&gt;&gt;&gt; &apos;Bill&apos; in sFalsebart&#x662F;&#x8BE5;&#x73ED;&#x7684;&#x540C;&#x5B66;&#x5417;&#xFF1F;&gt;&gt;&gt; &apos;bart&apos; in sFalse &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x5927;&#x5C0F;&#x5199;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x2019;Bart&#x2019; &#x548C; &#x2018;bart&#x2019;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5143;&#x7D20;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x7531;&#x4E8E;&#x4E0A;&#x8FF0;set&#x4E0D;&#x80FD;&#x8BC6;&#x522B;&#x5C0F;&#x5199;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x8BF7;&#x6539;&#x8FDB;set&#xFF0C;&#x4F7F;&#x5F97; &#x2018;adam&#x2019; &#x548C; &#x2018;bart&#x2019;&#x90FD;&#x80FD;&#x8FD4;&#x56DE;True&#x3002; &#x65E2;&#x7136;&#x5927;&#x5C0F;&#x5199;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x3002;&#x90A3;&#x6211;&#x4EEC;&#x7684;set&#x4E2D;&#x5C31;&#x628A;&#x5927;&#x5C0F;&#x5199;&#x90FD;&#x5305;&#x542B;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;,&apos;adam&apos;, &apos;lisa&apos;, &apos;bart&apos;, &apos;paul&apos;])print &apos;adam&apos; in sprint &apos;bart&apos; in s &#x8FD0;&#x884C;&#x7ED3;&#x679C;. 12TrueTrue set&#x7684;&#x7279;&#x70B9;set&#x7684;&#x5185;&#x90E8;&#x7ED3;&#x6784;&#x548C;dict&#x5F88;&#x50CF;&#xFF0C;&#x552F;&#x4E00;&#x533A;&#x522B;&#x662F;&#x4E0D;&#x5B58;&#x50A8;value&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5728;set&#x4E2D;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#x3002; set&#x5B58;&#x50A8;&#x7684;&#x5143;&#x7D20;&#x548C;dict&#x7684;key&#x7C7B;&#x4F3C;&#xFF0C;&#x5FC5;&#x987B;&#x662F;&#x4E0D;&#x53D8;&#x5BF9;&#x8C61;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x4EFB;&#x4F55;&#x53EF;&#x53D8;&#x5BF9;&#x8C61;&#x662F;&#x4E0D;&#x80FD;&#x653E;&#x5165;set&#x4E2D;&#x7684;&#x3002; &#x6700;&#x540E;&#xFF0C;set&#x5B58;&#x50A8;&#x7684;&#x5143;&#x7D20;&#x4E5F;&#x662F;&#x6CA1;&#x6709;&#x987A;&#x5E8F;&#x7684;&#x3002; set&#x7684;&#x8FD9;&#x4E9B;&#x7279;&#x70B9;&#xFF0C;&#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x5728;&#x54EA;&#x4E9B;&#x5730;&#x65B9;&#x5462;&#xFF1F; &#x661F;&#x671F;&#x4E00;&#x5230;&#x661F;&#x671F;&#x65E5;&#x53EF;&#x4EE5;&#x7528;&#x5B57;&#x7B26;&#x4E32;&apos;MON&apos;, &apos;TUE&apos;, ... &apos;SUN&apos;&#x8868;&#x793A;&#x3002; &#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x8BA9;&#x7528;&#x6237;&#x8F93;&#x5165;&#x661F;&#x671F;&#x4E00;&#x81F3;&#x661F;&#x671F;&#x65E5;&#x7684;&#x67D0;&#x5929;&#xFF0C;&#x5982;&#x4F55;&#x5224;&#x65AD;&#x7528;&#x6237;&#x7684;&#x8F93;&#x5165;&#x662F;&#x5426;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x661F;&#x671F;&#x5462;&#xFF1F; &#x53EF;&#x4EE5;&#x7528; if &#x8BED;&#x53E5;&#x5224;&#x65AD;&#xFF0C;&#x4F46;&#x8FD9;&#x6837;&#x505A;&#x975E;&#x5E38;&#x7E41;&#x7410;&#xFF1A; 12345x = &apos;???&apos; # &#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;if x!= &apos;MON&apos; and x!= &apos;TUE&apos; and x!= &apos;WED&apos; ... and x!= &apos;SUN&apos;: print &apos;input error&apos;else: print &apos;input ok&apos; &#x6CE8;&#x610F;&#xFF1A;if &#x8BED;&#x53E5;&#x4E2D;&#x7684;&#x2026;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x5217;&#x51FA;&#x7684;&#x5176;&#x5B83;&#x661F;&#x671F;&#x540D;&#x79F0;&#xFF0C;&#x6D4B;&#x8BD5;&#x65F6;&#xFF0C;&#x8BF7;&#x8F93;&#x5165;&#x5B8C;&#x6574;&#x3002; &#x5982;&#x679C;&#x4E8B;&#x5148;&#x521B;&#x5EFA;&#x597D;&#x4E00;&#x4E2A;set&#xFF0C;&#x5305;&#x542B;&apos;MON&apos; ~ &apos;SUN&apos;&#xFF1A; 1weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;]) &#x518D;&#x5224;&#x65AD;&#x8F93;&#x5165;&#x662F;&#x5426;&#x6709;&#x6548;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x8BE5;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5728;set&#x4E2D;&#xFF1A; 123456x = &apos;???&apos; # &#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;if x in weekdays: print &apos;input ok&apos;else: print &apos;input error&apos;&#x8FD9;&#x6837;&#x4E00;&#x6765;&#xFF0C;&#x4EE3;&#x7801;&#x5C31;&#x7B80;&#x5355;&#x591A;&#x4E86;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x6708;&#x4EFD;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;set&#x8868;&#x793A;&#xFF0C;&#x8BF7;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;set&#x5E76;&#x5224;&#x65AD;&#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x6708;&#x4EFD;&#x662F;&#x5426;&#x6709;&#x6548;&#x3002;&#x6708;&#x4EFD;&#x53EF;&#x4EE5;&#x7528;&#x5B57;&#x7B26;&#x4E32;&apos;Jan&apos;, &apos;Feb&apos;, ...&#x8868;&#x793A;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678910111213months = set([&apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;Apr&apos;, &apos;May&apos;, &apos;Jun&apos;, &apos;Jul&apos;,&apos;Aug&apos;,&apos;Sep&apos;,&apos;Oct&apos;,&apos;Nov&apos;,&apos;Dec&apos;])x1 = &apos;Feb&apos;x2 = &apos;Sun&apos;if x1 in months: print &apos;x1: ok&apos;else: print &apos;x1: error&apos;if x2 in months: print &apos;x2: ok&apos;else: print &apos;x2: error&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 12x1: okx2: error &#x904D;&#x5386;set&#x7531;&#x4E8E; set &#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x904D;&#x5386; set &#x548C;&#x904D;&#x5386; list &#x7C7B;&#x4F3C;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; for &#x5FAA;&#x73AF;&#x5B9E;&#x73B0;&#x3002; &#x76F4;&#x63A5;&#x4F7F;&#x7528; for &#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x904D;&#x5386; set &#x7684;&#x5143;&#x7D20;&#xFF1A; 1234567&gt;&gt;&gt; s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;])&gt;&gt;&gt; for name in s:... print name... LisaAdamBart &#x6CE8;&#x610F;: &#x89C2;&#x5BDF; for &#x5FAA;&#x73AF;&#x5728;&#x904D;&#x5386;set&#x65F6;&#xFF0C;&#x5143;&#x7D20;&#x7684;&#x987A;&#x5E8F;&#x548C;list&#x7684;&#x987A;&#x5E8F;&#x5F88;&#x53EF;&#x80FD;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x540C;&#x7684;&#x673A;&#x5668;&#x4E0A;&#x8FD0;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4E5F;&#x53EF;&#x80FD;&#x4E0D;&#x540C;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7528; for &#x5FAA;&#x73AF;&#x904D;&#x5386;&#x5982;&#x4E0B;&#x7684;set&#xFF0C;&#x6253;&#x5370;&#x51FA; name: score &#x6765;&#x3002; 1s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)]) &#x4E0A;&#x9762;&#x8FD9;&#x4E2A;set&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x53C8;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x3002; set([ ])&#x662F;&#x58F3;&#x5B50;&#x3002; (&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)&#x624D;&#x662F;&#x771F;&#x6B63;&#x7684;&#x5185;&#x5BB9; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 123s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])for name,score in s: print name,&apos;:&apos;,score &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 123Lisa : 85Adam : 95Bart : 59 &#x66F4;&#x65B0;set(add remove)&#x7531;&#x4E8E;set&#x5B58;&#x50A8;&#x7684;&#x662F;&#x4E00;&#x7EC4;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x65E0;&#x5E8F;&#x5143;&#x7D20;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x66F4;&#x65B0;set&#x4E3B;&#x8981;&#x505A;&#x4E24;&#x4EF6;&#x4E8B;&#xFF1A; &#x662F;&#x628A;&#x65B0;&#x7684;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5230;set&#x4E2D; &#x662F;&#x628A;&#x5DF2;&#x6709;&#x5143;&#x7D20;&#x4ECE;set&#x4E2D;&#x5220;&#x9664;&#x3002;(&#x524D;&#x63D0;&#x662F;&#x5982;&#x679C;&#x6709;) &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x7528;set&#x7684;add()&#x65B9;&#x6CD5;&#xFF1A; 1234&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; print sset([1, 2, 3, 4]) &#x5982;&#x679C;&#x6DFB;&#x52A0;&#x7684;&#x5143;&#x7D20;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x4E8E;set&#x4E2D;&#xFF0C;add()&#x4E0D;&#x4F1A;&#x62A5;&#x9519;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4F1A;&#x52A0;&#x8FDB;&#x53BB;&#x4E86;&#xFF1A; 1234&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s.add(3)&gt;&gt;&gt; print sset([1, 2, 3]) &#x5220;&#x9664;set&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x7528;set&#x7684;remove()&#x65B9;&#x6CD5;&#xFF1A; 1234&gt;&gt;&gt; s = set([1, 2, 3, 4])&gt;&gt;&gt; s.remove(4)&gt;&gt;&gt; print sset([1, 2, 3]) &#x5982;&#x679C;&#x5220;&#x9664;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x5B58;&#x5728;set&#x4E2D;&#xFF0C;remove()&#x4F1A;&#x62A5;&#x9519;&#xFF1A; 12345&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s.remove(4)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;KeyError: 4 &#x6240;&#x4EE5;&#x7528;add()&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6DFB;&#x52A0;&#xFF0C;&#x800C;remove()&#x524D;&#x9700;&#x8981;&#x5224;&#x65AD;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x9488;&#x5BF9;&#x4E0B;&#x9762;&#x7684;set&#xFF0C;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;list&#xFF0C;&#x5BF9;list&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x5728;set&#x4E2D;&#xFF0C;&#x5C31;&#x5C06;&#x5176;&#x5220;&#x9664;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5728;set&#x4E2D;&#xFF0C;&#x5C31;&#x6DFB;&#x52A0;&#x8FDB;&#x53BB;&#x3002; 12s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12345678s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]for name in L: if name in s: s.remove(name) else: s.add(name)print s &#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x4E0E;&#x8C03;&#x7528;&#x4EC0;&#x4E48;&#x662F;&#x51FD;&#x6570;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x5706;&#x7684;&#x9762;&#x79EF;&#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x4E3A;&#xFF1A; S = &#x3C0;r&#xB2; &#x5F53;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x534A;&#x5F84;r&#x7684;&#x503C;&#x65F6;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x516C;&#x5F0F;&#x8BA1;&#x7B97;&#x51FA;&#x9762;&#x79EF;&#x3002;&#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BA1;&#x7B97;3&#x4E2A;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x5706;&#x7684;&#x9762;&#x79EF;&#xFF1A; 123456r1 = 12.34r2 = 9.08r3 = 73.1s1 = 3.14 * r1 * r1s2 = 3.14 * r2 * r2s3 = 3.14 * r3 * r3 &#x5F53;&#x4EE3;&#x7801;&#x51FA;&#x73B0;&#x6709;&#x89C4;&#x5F8B;&#x7684;&#x91CD;&#x590D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F60;&#x5C31;&#x9700;&#x8981;&#x5F53;&#x5FC3;&#x4E86;&#xFF0C;&#x6BCF;&#x6B21;&#x5199;3.14 * x * x&#x4E0D;&#x4EC5;&#x5F88;&#x9EBB;&#x70E6;&#xFF0C;&#x800C;&#x4E14;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x628A;3.14&#x6539;&#x6210;3.14159265359&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F97;&#x5168;&#x90E8;&#x66FF;&#x6362;&#x3002; &#x6709;&#x4E86;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x518D;&#x6BCF;&#x6B21;&#x5199;s = 3.14 * x * x&#xFF0C;&#x800C;&#x662F;&#x5199;&#x6210;&#x66F4;&#x6709;&#x610F;&#x4E49;&#x7684;&#x51FD;&#x6570;&#x8C03;&#x7528; s = area_of_circle(x)&#xFF0C;&#x800C;&#x51FD;&#x6570; area_of_circle&#x672C;&#x8EAB;&#x53EA;&#x9700;&#x8981;&#x5199;&#x4E00;&#x6B21;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x591A;&#x6B21;&#x8C03;&#x7528;&#x3002; &#x62BD;&#x8C61;&#x662F;&#x6570;&#x5B66;&#x4E2D;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x7684;&#x6982;&#x5FF5;&#x3002;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; &#x8BA1;&#x7B97;&#x6570;&#x5217;&#x7684;&#x548C;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A;1 + 2 + 3 + &#x2026; + 100&#xFF0C;&#x5199;&#x8D77;&#x6765;&#x5341;&#x5206;&#x4E0D;&#x65B9;&#x4FBF;&#xFF0C;&#x4E8E;&#x662F;&#x6570;&#x5B66;&#x5BB6;&#x53D1;&#x660E;&#x4E86;&#x6C42;&#x548C;&#x7B26;&#x53F7;&#x2211;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;1 + 2 + 3 + &#x2026; + 100&#x8BB0;&#x4F5C;&#xFF1A; 123100&#x2211;nn=1 &#x8FD9;&#x79CD;&#x62BD;&#x8C61;&#x8BB0;&#x6CD5;&#x975E;&#x5E38;&#x5F3A;&#x5927;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x2211;&#x5C31;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x6210;&#x6C42;&#x548C;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x8FD8;&#x539F;&#x6210;&#x4F4E;&#x7EA7;&#x7684;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;&#x3002; &#x800C;&#x4E14;&#xFF0C;&#x8FD9;&#x79CD;&#x62BD;&#x8C61;&#x8BB0;&#x6CD5;&#x662F;&#x53EF;&#x6269;&#x5C55;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A; 123100&#x2211;(n&#xB2;+1)n=1 &#x8FD8;&#x539F;&#x6210;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#xFF1A; (1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)&#x53EF;&#x89C1;&#xFF0C;&#x501F;&#x52A9;&#x62BD;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x624D;&#x80FD;&#x4E0D;&#x5173;&#x5FC3;&#x5E95;&#x5C42;&#x7684;&#x5177;&#x4F53;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#xFF0C;&#x800C;&#x76F4;&#x63A5;&#x5728;&#x66F4;&#x9AD8;&#x7684;&#x5C42;&#x6B21;&#x4E0A;&#x601D;&#x8003;&#x95EE;&#x9898;&#x3002; &#x5199;&#x8BA1;&#x7B97;&#x673A;&#x7A0B;&#x5E8F;&#x4E5F;&#x662F;&#x4E00;&#x6837;&#xFF0C;&#x51FD;&#x6570;&#x5C31;&#x662F;&#x6700;&#x57FA;&#x672C;&#x7684;&#x4E00;&#x79CD;&#x4EE3;&#x7801;&#x62BD;&#x8C61;&#x7684;&#x65B9;&#x5F0F;&#x3002; Python&#x4E0D;&#x4F46;&#x80FD;&#x975E;&#x5E38;&#x7075;&#x6D3B;&#x5730;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x672C;&#x8EAB;&#x5185;&#x7F6E;&#x4E86;&#x5F88;&#x591A;&#x6709;&#x7528;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5199;&#x4E00;&#x4E2A;&#x51FD;&#x6570; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12s = area_of_circle(x)area_of_circle(x) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; &#x8C03;&#x7528;&#x51FD;&#x6570;,&#x5185;&#x7F6E;&#x51FD;&#x6570;Python&#x5185;&#x7F6E;&#x4E86;&#x5F88;&#x591A;&#x6709;&#x7528;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x3002; &#x8981;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x9700;&#x8981;&#x77E5;&#x9053;&#x51FD;&#x6570;&#x7684;&#x540D;&#x79F0;&#x548C;&#x53C2;&#x6570;&#xFF0C;&#x6BD4;&#x5982;&#x6C42;&#x7EDD;&#x5BF9;&#x503C;&#x7684;&#x51FD;&#x6570; abs&#xFF0C;&#x5B83;&#x63A5;&#x6536;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002; &#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4ECE;Python&#x7684;&#x5B98;&#x65B9;&#x7F51;&#x7AD9;&#x67E5;&#x770B;&#x6587;&#x6863;&#xFF1A;http://docs.python.org/2/library/functions.html#abs &#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x4EA4;&#x4E92;&#x5F0F;&#x547D;&#x4EE4;&#x884C;&#x901A;&#x8FC7; help(abs)&#x67E5;&#x770B;abs&#x51FD;&#x6570;&#x7684;&#x5E2E;&#x52A9;&#x4FE1;&#x606F;&#x3002; &#x8C03;&#x7528; abs &#x51FD;&#x6570;&#xFF1A; 123456&gt;&gt;&gt; abs(100)100&gt;&gt;&gt; abs(-20)20&gt;&gt;&gt; abs(12.34)12.34 &#x8C03;&#x7528;&#x51FD;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x6570;&#x91CF;&#x4E0D;&#x5BF9;&#xFF0C;&#x4F1A;&#x62A5;TypeError&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x5E76;&#x4E14;Python&#x4F1A;&#x660E;&#x786E;&#x5730;&#x544A;&#x8BC9;&#x4F60;&#xFF1A;abs()&#x6709;&#x4E14;&#x4EC5;&#x6709;1&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4F46;&#x7ED9;&#x51FA;&#x4E86;&#x4E24;&#x4E2A;&#xFF1A; 1234&gt;&gt;&gt; abs(1, 2)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;TypeError: abs() takes exactly one argument (2 given) &#x5982;&#x679C;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x6570;&#x91CF;&#x662F;&#x5BF9;&#x7684;&#xFF0C;&#x4F46;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x88AB;&#x51FD;&#x6570;&#x6240;&#x63A5;&#x53D7;&#xFF0C;&#x4E5F;&#x4F1A;&#x62A5;TypeError&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x5E76;&#x4E14;&#x7ED9;&#x51FA;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#xFF1A;str&#x662F;&#x9519;&#x8BEF;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF1A; 1234&gt;&gt;&gt; abs(&apos;a&apos;)Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;TypeError: bad operand type for abs(): &apos;str&apos; &#x800C;&#x6BD4;&#x8F83;&#x51FD;&#x6570; cmp(x, y) &#x5C31;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C; x&lt;y&#xFF0C;&#x8FD4;&#x56DE; -1&#xFF0C;&#x5982;&#x679C; x==y&#xFF0C;&#x8FD4;&#x56DE;0&#xFF0C;&#x5982;&#x679C; x&gt;y&#xFF0C;&#x8FD4;&#x56DE; 1&#xFF1A; 123456&gt;&gt;&gt; cmp(1, 2)-1&gt;&gt;&gt; cmp(2, 1)1&gt;&gt;&gt; cmp(3, 3)0 Python&#x5185;&#x7F6E;&#x7684;&#x5E38;&#x7528;&#x51FD;&#x6570;&#x8FD8;&#x5305;&#x62EC;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982; int()&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x628A;&#x5176;&#x4ED6;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4E3A;&#x6574;&#x6570;&#xFF1A; 1234&gt;&gt;&gt; int(&apos;123&apos;)123&gt;&gt;&gt; int(12.34)12 str()&#x51FD;&#x6570;&#x628A;&#x5176;&#x4ED6;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x6210; str&#xFF1A; 1234&gt;&gt;&gt; str(123)&apos;123&apos;&gt;&gt;&gt; str(1.23)&apos;1.23&apos; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; sum()&#x51FD;&#x6570;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;list&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;list&#x6240;&#x6709;&#x5143;&#x7D20;&#x4E4B;&#x548C;&#x3002;&#x8BF7;&#x8BA1;&#x7B97; 1*1 + 2*2 + 3*3 + ... + 100*100&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 1234567L = []L = []x = 1while x &lt;= 100: L.append(x * x) x = x + 1print sum(L) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1338350 &#x7F16;&#x5199;&#x51FD;&#x6570;&#x5728;Python&#x4E2D;&#xFF0C;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8981;&#x4F7F;&#x7528; def &#x8BED;&#x53E5;&#xFF0C;&#x4F9D;&#x6B21;&#x5199;&#x51FA;&#x51FD;&#x6570;&#x540D;&#x3001;&#x62EC;&#x53F7;&#x3001;&#x62EC;&#x53F7;&#x4E2D;&#x7684;&#x53C2;&#x6570;&#x548C;&#x5192;&#x53F7;:&#xFF0C;&#x7136;&#x540E;&#xFF0C;&#x5728;&#x7F29;&#x8FDB;&#x5757;&#x4E2D;&#x7F16;&#x5199;&#x51FD;&#x6570;&#x4F53;&#xFF0C;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x7528; return&#x8BED;&#x53E5;&#x8FD4;&#x56DE;&#x3002; &#x6211;&#x4EEC;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6C42;&#x7EDD;&#x5BF9;&#x503C;&#x7684; my_abs &#x51FD;&#x6570;&#x4E3A;&#x4F8B;&#xFF1A; 12345def my_abs(x): if x &gt;= 0: return x else: return -x &#x8BF7;&#x6CE8;&#x610F;&#xFF0C;&#x51FD;&#x6570;&#x4F53;&#x5185;&#x90E8;&#x7684;&#x8BED;&#x53E5;&#x5728;&#x6267;&#x884C;&#x65F6;&#xFF0C;&#x4E00;&#x65E6;&#x6267;&#x884C;&#x5230;return&#x65F6;&#xFF0C;&#x51FD;&#x6570;&#x5C31;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#xFF0C;&#x5E76;&#x5C06;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x51FD;&#x6570;&#x5185;&#x90E8;&#x901A;&#x8FC7;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x548C;&#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x903B;&#x8F91;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1B; &#x5982;&#x679C;&#x6CA1;&#x6709;return&#x8BED;&#x53E5;&#xFF0C;&#x51FD;&#x6570;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#x4E5F;&#x4F1A;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#xFF0C;&#x53EA;&#x662F;&#x7ED3;&#x679C;&#x4E3A; None&#x3002;return None&#x53EF;&#x4EE5;&#x7B80;&#x5199;&#x4E3A;return&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A; square_of_sum &#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;list&#xFF0C;&#x8FD4;&#x56DE;list&#x4E2D;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5E73;&#x65B9;&#x7684;&#x548C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678def square_of_sum(L): sum = 0 for x in L: sum = x*x+sum return sumprint square_of_sum([1, 2, 3, 4, 5])print square_of_sum([-5, 0, 5, 15, 25]) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1255900 &#x51FD;&#x6570;&#x4E4B;&#x8FD4;&#x56DE;&#x201D;&#x591A;&#x503C;&#x201D;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x591A;&#x4E2A;&#x503C;&#x5417;&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x80AF;&#x5B9A;&#x7684;&#x3002; &#x6BD4;&#x5982;&#x5728;&#x6E38;&#x620F;&#x4E2D;&#x7ECF;&#x5E38;&#x9700;&#x8981;&#x4ECE;&#x4E00;&#x4E2A;&#x70B9;&#x79FB;&#x52A8;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x7ED9;&#x51FA;&#x5750;&#x6807;&#x3001;&#x4F4D;&#x79FB;&#x548C;&#x89D2;&#x5EA6;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x65B0;&#x7684;&#x5750;&#x6807;&#xFF1A; math&#x5305;&#x63D0;&#x4F9B;&#x4E86;sin()&#x548C; cos()&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x7528;import&#x5F15;&#x7528;&#x5B83;&#xFF1A; 12345import mathdef move(x, y, step, angle): nx = x + step * math.cos(angle) ny = y - step * math.sin(angle) return nx, ny &#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x83B7;&#x5F97;&#x8FD4;&#x56DE;&#x503C;&#xFF1A; 123&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)&gt;&gt;&gt; print x, y151.961524227 70.0 &#x4F46;&#x5176;&#x5B9E;&#x8FD9;&#x53EA;&#x662F;&#x4E00;&#x79CD;&#x5047;&#x8C61;&#xFF0C;Python&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7684;&#x4ECD;&#x7136;&#x662F;&#x5355;&#x4E00;&#x503C;&#xFF1A; 123&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)&gt;&gt;&gt; print r(151.96152422706632, 70.0) &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x7528;print&#x6253;&#x5370;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#xFF0C;&#x539F;&#x6765;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;tuple&#xFF01; &#x4F46;&#x662F;&#xFF0C;&#x5728;&#x8BED;&#x6CD5;&#x4E0A;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;tuple&#x53EF;&#x4EE5;&#x7701;&#x7565;&#x62EC;&#x53F7;&#xFF0C;&#x800C;&#x591A;&#x4E2A;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x63A5;&#x6536;&#x4E00;&#x4E2A;tuple&#xFF0C;&#x6309;&#x4F4D;&#x7F6E;&#x8D4B;&#x7ED9;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;Python&#x7684;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x591A;&#x503C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;tuple&#xFF0C;&#x4F46;&#x5199;&#x8D77;&#x6765;&#x66F4;&#x65B9;&#x4FBF;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x4E00;&#x5143;&#x4E8C;&#x6B21;&#x65B9;&#x7A0B;&#x7684;&#x5B9A;&#x4E49;&#x662F;&#xFF1A;ax&#xB2; + bx + c = 0 &#x8BF7;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x5143;&#x4E8C;&#x6B21;&#x65B9;&#x7A0B;&#x7684;&#x4E24;&#x4E2A;&#x89E3;&#x3002; &#x6CE8;&#x610F;&#xFF1A;Python&#x7684;math&#x5305;&#x63D0;&#x4F9B;&#x4E86;sqrt()&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x5E73;&#x65B9;&#x6839;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678import mathdef quadratic_equation(a, b, c): t = math.sqrt(b*b - 4*a*c) return (-b + t) / (2 * a),( -b - t )/ (2 * a)print quadratic_equation(2, 3, 0)print quadratic_equation(1, -6, 5) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 12(0.0, -1.5)(5.0, 1.0) &#x9012;&#x5F52;&#x51FD;&#x6570;&#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#xFF0C;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x5176;&#x4ED6;&#x51FD;&#x6570;&#x3002;&#x77E5;&#x8BC6;&#x70B9;: &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5728;&#x5185;&#x90E8;&#x8C03;&#x7528;&#x81EA;&#x8EAB;&#x672C;&#x8EAB;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x5C31;&#x662F;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x8BA1;&#x7B97;&#x9636;&#x4E58; n! = 1 * 2 * 3 * ... * n&#xFF0C;&#x7528;&#x51FD;&#x6570; fact(n)&#x8868;&#x793A;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A; fact(n) = n! = 1 * 2 * 3 * ... * (n-1) * n = (n-1)! * n = fact(n-1) * n&#x6240;&#x4EE5;&#xFF0C;fact(n)&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A; n * fact(n-1)&#xFF0C;&#x53EA;&#x6709;n=1&#x65F6;&#x9700;&#x8981;&#x7279;&#x6B8A;&#x5904;&#x7406;&#x3002; &#x4E8E;&#x662F;&#xFF0C;fact(n)&#x7528;&#x9012;&#x5F52;&#x7684;&#x65B9;&#x5F0F;&#x5199;&#x51FA;&#x6765;&#x5C31;&#x662F;&#xFF1A; 1234def fact(n): if n==1: return 1 return n * fact(n - 1) &#x4E0A;&#x9762;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x3002;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#xFF1A; 123456&gt;&gt;&gt; fact(1)1&gt;&gt;&gt; fact(5)120&gt;&gt;&gt; fact(100)93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000 &#x5982;&#x679C;&#x6211;&#x4EEC;&#x8BA1;&#x7B97;fact(5)&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x51FD;&#x6570;&#x5B9A;&#x4E49;&#x770B;&#x5230;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x5982;&#x4E0B;&#xFF1A; 12345678910===&gt; fact(5)===&gt; 5 * fact(4)===&gt; 5 * (4 * fact(3))===&gt; 5 * (4 * (3 * fact(2)))===&gt; 5 * (4 * (3 * (2 * fact(1))))===&gt; 5 * (4 * (3 * (2 * 1)))===&gt; 5 * (4 * (3 * 2))===&gt; 5 * (4 * 6)===&gt; 5 * 24===&gt; 120 &#x9012;&#x5F52;&#x51FD;&#x6570;&#x7684;&#x4F18;&#x70B9;&#x662F;&#x5B9A;&#x4E49;&#x7B80;&#x5355;&#xFF0C;&#x903B;&#x8F91;&#x6E05;&#x6670;&#x3002;&#x77E5;&#x8BC6;&#x70B9;: &#x7406;&#x8BBA;&#x4E0A;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x5199;&#x6210;&#x5FAA;&#x73AF;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x5FAA;&#x73AF;&#x7684;&#x903B;&#x8F91;&#x4E0D;&#x5982;&#x9012;&#x5F52;&#x6E05;&#x6670;&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x4F7F;&#x7528;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x9632;&#x6B62;&#x6808;&#x6EA2;&#x51FA;&#x3002;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x662F;&#x901A;&#x8FC7;&#x6808;&#xFF08;stack&#xFF09;&#x8FD9;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x6BCF;&#x5F53;&#x8FDB;&#x5165;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#xFF0C;&#x6808;&#x5C31;&#x4F1A;&#x52A0;&#x4E00;&#x5C42;&#x6808;&#x5E27;&#xFF0C;&#x6BCF;&#x5F53;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#xFF0C;&#x6808;&#x5C31;&#x4F1A;&#x51CF;&#x4E00;&#x5C42;&#x6808;&#x5E27;&#x3002;&#x7531;&#x4E8E;&#x6808;&#x7684;&#x5927;&#x5C0F;&#x4E0D;&#x662F;&#x65E0;&#x9650;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x7684;&#x6B21;&#x6570;&#x8FC7;&#x591A;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x6808;&#x6EA2;&#x51FA;&#x3002;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x8BA1;&#x7B97; fact(10000)&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;(&#x5929;&#x6DAF;) &#x6C49;&#x8BFA;&#x5854; (http://baike.baidu.com/view/191666.htm) &#x7684;&#x79FB;&#x52A8;&#x4E5F;&#x53EF;&#x4EE5;&#x770B;&#x505A;&#x662F;&#x9012;&#x5F52;&#x51FD;&#x6570;&#x3002; &#x6211;&#x4EEC;&#x5BF9;&#x67F1;&#x5B50;&#x7F16;&#x53F7;&#x4E3A;a, b, c&#xFF0C;&#x5C06;&#x6240;&#x6709;&#x5706;&#x76D8;&#x4ECE;a&#x79FB;&#x5230;c&#x53EF;&#x4EE5;&#x63CF;&#x8FF0;&#x4E3A;&#xFF1A; &#x5982;&#x679C;a&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5706;&#x76D8;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x79FB;&#x52A8;&#x5230;c&#xFF1B; &#x5982;&#x679C;a&#x6709;N&#x4E2A;&#x5706;&#x76D8;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x6210;a&#x6709;1&#x4E2A;&#x5706;&#x76D8;&#xFF08;&#x5E95;&#x76D8;&#xFF09; + (N-1)&#x4E2A;&#x5706;&#x76D8;&#xFF0C;&#x9996;&#x5148;&#x9700;&#x8981;&#x628A; (N-1) &#x4E2A;&#x5706;&#x76D8;&#x79FB;&#x52A8;&#x5230; b&#xFF0C;&#x7136;&#x540E;&#xFF0C;&#x5C06; a&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5706;&#x76D8;&#x79FB;&#x52A8;&#x5230;c&#xFF0C;&#x518D;&#x5C06;b&#x7684;(N-1)&#x4E2A;&#x5706;&#x76D8;&#x79FB;&#x52A8;&#x5230;c&#x3002; &#x8BF7;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x7ED9;&#x5B9A;&#x8F93;&#x5165; n, a, b, c&#xFF0C;&#x6253;&#x5370;&#x51FA;&#x79FB;&#x52A8;&#x7684;&#x6B65;&#x9AA4;&#xFF1A; 1move(n, a, b, c) &#x4F8B;&#x5982;&#xFF0C;&#x8F93;&#x5165; move(2, &#x2018;A&#x2019;, &#x2018;B&#x2019;, &#x2018;C&#x2019;)&#xFF0C;&#x6253;&#x5370;&#x51FA;&#xFF1A; 123A --&gt; BA --&gt; CB --&gt; C &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 12345678def move(n, a, b, c): if n ==1: print a, &apos;--&gt;&apos;, c return move(n-1, a, c, b) print a, &apos;--&gt;&apos;, c move(n-1, b, a, c)move(4, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 123456789101112131415A --&gt; BA --&gt; CB --&gt; CA --&gt; BC --&gt; AC --&gt; BA --&gt; BA --&gt; CB --&gt; CB --&gt; AC --&gt; AB --&gt; CA --&gt; BA --&gt; CB --&gt; C &#x5B9A;&#x4E49;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x6709;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x3002; &#x4F8B;&#x5982;Python&#x81EA;&#x5E26;&#x7684; int() &#x51FD;&#x6570;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x65E2;&#x53EF;&#x4EE5;&#x4F20;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x53C8;&#x53EF;&#x4EE5;&#x4F20;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF1A; 1234&gt;&gt;&gt; int(&apos;123&apos;)123&gt;&gt;&gt; int(&apos;123&apos;, 8)83 &#x77E5;&#x8BC6;&#x70B9;: int()&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x8F6C;&#x6362;&#x8FDB;&#x5236;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4F20;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x5341;&#x8FDB;&#x5236; (base=10)&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x4E86;&#xFF0C;&#x5C31;&#x7528;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x3002; &#x53EF;&#x89C1;&#xFF0C;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;&#x7B80;&#x5316;&#x8C03;&#x7528;&#xFF0C;&#x4F60;&#x53EA;&#x9700;&#x8981;&#x628A;&#x5FC5;&#x987B;&#x7684;&#x53C2;&#x6570;&#x4F20;&#x8FDB;&#x53BB;&#x3002;&#x4F46;&#x662F;&#x5728;&#x9700;&#x8981;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53C8;&#x53EF;&#x4EE5;&#x4F20;&#x5165;&#x989D;&#x5916;&#x7684;&#x53C2;&#x6570;&#x6765;&#x8986;&#x76D6;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x503C;&#x3002; &#x6211;&#x4EEC;&#x6765;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x8BA1;&#x7B97; x &#x7684;N&#x6B21;&#x65B9;&#x7684;&#x51FD;&#x6570;: 123456def power(x, n): s = 1 while n &gt; 0: n = n - 1 s = s * x return s &#x5047;&#x8BBE;&#x8BA1;&#x7B97;&#x5E73;&#x65B9;&#x7684;&#x6B21;&#x6570;&#x6700;&#x591A;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x628A; n &#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x8BBE;&#x5B9A;&#x4E3A; 2&#xFF1A; 123456def power(x, n=2): s = 1 while n &gt; 0: n = n - 1 s = s * x return s &#x8FD9;&#x6837;&#x4E00;&#x6765;&#xFF0C;&#x8BA1;&#x7B97;&#x5E73;&#x65B9;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x4F20;&#x5165;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x4E86;&#xFF1A; 12&gt;&gt;&gt; power(5)25 &#x77E5;&#x8BC6;&#x70B9;: &#x7531;&#x4E8E;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;&#x6309;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x987A;&#x5E8F;&#x5339;&#x914D;&#xFF0C;&#x6240;&#x4EE5;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x53EA;&#x80FD;&#x5B9A;&#x4E49;&#x5728;&#x5FC5;&#x9700;&#x53C2;&#x6570;&#x7684;&#x540E;&#x9762;&#xFF1A; 123456# OK:def fn1(a, b=1, c=2): pass# Error:def fn2(a=1, b): pass &#x4E2A;&#x4EBA;: &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x81EA;&#x5DF1;&#x60F3;&#x8C61;&#x6210;&#x8BA1;&#x7B97;&#x673A;&#x3002;&#x5728;&#x81EA;&#x5DF1;&#x611F;&#x5230;&#x4E3A;&#x96BE;&#x4E0D;&#x77E5;&#x9053;&#x54EA;&#x4E2A;&#x662F;&#x54EA;&#x4E2A;&#x7684;&#x65F6;&#x5019;&#x3002;&#x90A3;&#x4E48;&#x606D;&#x559C;&#x4F60;&#xFF0C;&#x8BA1;&#x7B97;&#x673A;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A; greet()&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4F20;&#x5165;&#xFF0C;&#x6253;&#x5370; &apos;Hello, world.&apos;&#xFF0C;&#x5982;&#x679C;&#x4F20;&#x5165;&#xFF0C;&#x6253;&#x5370; &apos;Hello, xxx.&apos; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345def greet(x = &apos;World&apos;): print &apos;Hello,&apos;+x+&apos;.&apos;greet()greet(&apos;mtianyan&apos;) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 12Hello,World.Hello,mtianyan. &#x77E5;&#x8BC6;&#x70B9;: &#x5B9A;&#x4E49;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#x5982;&#x679C;&#x60F3;&#x8BA9;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x80FD;&#x63A5;&#x53D7;&#x4EFB;&#x610F;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#xFF1A; 12def fn(*args): print args &#x53EF;&#x53D8;&#x53C2;&#x6570;&#x7684;&#x540D;&#x5B57;&#x524D;&#x9762;&#x6709;&#x4E2A; * &#x53F7;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F20;&#x5165;0&#x4E2A;&#x3001;1&#x4E2A;&#x6216;&#x591A;&#x4E2A;&#x53C2;&#x6570;&#x7ED9;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#xFF1A; 12345678&gt;&gt;&gt; fn()()&gt;&gt;&gt; fn(&apos;a&apos;)(&apos;a&apos;,)&gt;&gt;&gt; fn(&apos;a&apos;, &apos;b&apos;)(&apos;a&apos;, &apos;b&apos;)&gt;&gt;&gt; fn(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) &#x53EF;&#x53D8;&#x53C2;&#x6570;&#x4E5F;&#x4E0D;&#x662F;&#x5F88;&#x795E;&#x79D8;&#xFF0C;Python&#x89E3;&#x91CA;&#x5668;&#x4F1A;&#x628A;&#x4F20;&#x5165;&#x7684;&#x4E00;&#x7EC4;&#x53C2;&#x6570;&#x7EC4;&#x88C5;&#x6210;&#x4E00;&#x4E2A;tuple&#x4F20;&#x9012;&#x7ED9;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x51FD;&#x6570;&#x5185;&#x90E8;&#xFF0C;&#x76F4;&#x63A5;&#x628A;&#x53D8;&#x91CF; args &#x770B;&#x6210;&#x4E00;&#x4E2A; tuple &#x5C31;&#x597D;&#x4E86;&#x3002; &#x5B9A;&#x4E49;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#x7684;&#x76EE;&#x7684;&#x4E5F;&#x662F;&#x4E3A;&#x4E86;&#x7B80;&#x5316;&#x8C03;&#x7528;&#x3002;&#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x8981;&#x8BA1;&#x7B97;&#x4EFB;&#x610F;&#x4E2A;&#x6570;&#x7684;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#xFF1A; 12def average(*args): ... &#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x8C03;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x5199;&#xFF1A; 123456&gt;&gt;&gt; average()0&gt;&gt;&gt; average(1, 2)1.5&gt;&gt;&gt; average(1, 2, 2, 3, 4)2.4 &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7F16;&#x5199;&#x63A5;&#x53D7;&#x53EF;&#x53D8;&#x53C2;&#x6570;&#x7684; average() &#x51FD;&#x6570;&#x3002; 12345678910def average(*args): sum = 0.0 if len(args) == 0: return sum for x in args: sum = sum + x return sum / len(args)print average()print average(1, 2)print average(1, 2, 2, 3, 4) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1230.01.52.4 &#x5207;&#x7247;&#x64CD;&#x4F5C;&#x5BF9;list&#x8FDB;&#x884C;&#x5207;&#x7247;&#x53D6;&#x4E00;&#x4E2A;list&#x7684;&#x90E8;&#x5206;&#x5143;&#x7D20;&#x662F;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x4E00;&#x4E2A;list&#x5982;&#x4E0B;&#xFF1A; 1&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] &#x53D6;&#x524D;3&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5E94;&#x8BE5;&#x600E;&#x4E48;&#x505A;&#xFF1F; &#x7B28;&#x529E;&#x6CD5;&#xFF1A; 12&gt;&gt;&gt; [L[0], L[1], L[2]][&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x4E4B;&#x6240;&#x4EE5;&#x662F;&#x7B28;&#x529E;&#x6CD5;&#x662F;&#x56E0;&#x4E3A;&#x6269;&#x5C55;&#x4E00;&#x4E0B;&#xFF0C;&#x53D6;&#x524D;N&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x6CA1;&#x8F99;&#x4E86;&#x3002; &#x53D6;&#x524D;N&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7D22;&#x5F15;&#x4E3A;0-(N-1)&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5FAA;&#x73AF;&#xFF1A; 1234567&gt;&gt;&gt; r = []&gt;&gt;&gt; n = 3&gt;&gt;&gt; for i in range(n):... r.append(L[i])... &gt;&gt;&gt; r[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x5BF9;&#x8FD9;&#x79CD;&#x7ECF;&#x5E38;&#x53D6;&#x6307;&#x5B9A;&#x7D22;&#x5F15;&#x8303;&#x56F4;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x7528;&#x5FAA;&#x73AF;&#x5341;&#x5206;&#x7E41;&#x7410;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;Python&#x63D0;&#x4F9B;&#x4E86;&#x5207;&#x7247;&#xFF08;Slice&#xFF09;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x80FD;&#x5927;&#x5927;&#x7B80;&#x5316;&#x8FD9;&#x79CD;&#x64CD;&#x4F5C;&#x3002; &#x5BF9;&#x5E94;&#x4E0A;&#x9762;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x53D6;&#x524D;3&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x7528;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x5207;&#x7247;&#xFF1A; 123&gt;&gt;&gt; L[0:3][&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]L[0:3]&#x8868;&#x793A;&#xFF0C;&#x4ECE;&#x7D22;&#x5F15;0&#x5F00;&#x59CB;&#x53D6;&#xFF0C;&#x76F4;&#x5230;&#x7D22;&#x5F15;3&#x4E3A;&#x6B62;&#xFF0C;&#x4F46;&#x4E0D;&#x5305;&#x62EC;&#x7D22;&#x5F15;3&#x3002;&#x5373;&#x7D22;&#x5F15;0&#xFF0C;1&#xFF0C;2&#xFF0C;&#x6B63;&#x597D;&#x662F;3&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A; [0:3]&#x8868;&#x793A;&#xFF0C;&#x4ECE;&#x7D22;&#x5F15;0&#x5F00;&#x59CB;&#x53D6;&#xFF0C;&#x76F4;&#x5230;&#x7D22;&#x5F15;3&#x4E3A;&#x6B62;&#xFF0C;&#x4F46;&#x4E0D;&#x5305;&#x62EC;&#x7D22;&#x5F15;3&#x3002;&#x5373;&#x7D22;&#x5F15;0&#xFF0C;1&#xFF0C;2&#xFF0C;&#x6B63;&#x597D;&#x662F;3&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x662F;0&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#xFF1A; 12&gt;&gt;&gt; L[:3][&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;] &#x4E5F;&#x53EF;&#x4EE5;&#x4ECE;&#x7D22;&#x5F15;1&#x5F00;&#x59CB;&#xFF0C;&#x53D6;&#x51FA;2&#x4E2A;&#x5143;&#x7D20;&#x51FA;&#x6765;&#xFF1A; 12&gt;&gt;&gt; L[1:3][&apos;Lisa&apos;, &apos;Bart&apos;] &#x53EA;&#x7528;&#x4E00;&#x4E2A; : &#xFF0C;&#x8868;&#x793A;&#x4ECE;&#x5934;&#x5230;&#x5C3E;&#xFF1A; 12&gt;&gt;&gt; L[:][&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] &#x56E0;&#x6B64;&#xFF0C;L[:]&#x5B9E;&#x9645;&#x4E0A;&#x590D;&#x5236;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;list&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x5207;&#x7247;&#x64CD;&#x4F5C;&#x8FD8;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;&#x7B2C;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#xFF1A; 12&gt;&gt;&gt; L[::2][&apos;Adam&apos;, &apos;Bart&apos;] &#x7B2C;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x6BCF;N&#x4E2A;&#x53D6;&#x4E00;&#x4E2A;&#xFF0C;&#x4E0A;&#x9762;&#x7684; L[::2] &#x4F1A;&#x6BCF;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x6765;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x9694;&#x4E00;&#x4E2A;&#x53D6;&#x4E00;&#x4E2A;&#x3002; &#x628A;list&#x6362;&#x6210;tuple&#xFF0C;&#x5207;&#x7247;&#x64CD;&#x4F5C;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#xFF0C;&#x53EA;&#x662F;&#x5207;&#x7247;&#x7684;&#x7ED3;&#x679C;&#x4E5F;&#x53D8;&#x6210;&#x4E86;tuple&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; range()&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6570;&#x5217;&#xFF1A; 12&gt;&gt;&gt; range(1, 101)[1, 2, 3, ..., 100] &#x8BF7;&#x5229;&#x7528;&#x5207;&#x7247;&#xFF0C;&#x53D6;&#x51FA;&#xFF1A; &#x524D;10&#x4E2A;&#x6570;&#xFF1B; 3&#x7684;&#x500D;&#x6570;&#xFF1B; &#x4E0D;&#x5927;&#x4E8E;50&#x7684;5&#x7684;&#x500D;&#x6570;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345L = range(1, 101)print L[:10]print L[2::3]print L[4:50:5] &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 123[1, 2, 3, 4, 5, 6, 7, 8, 9, 10][3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99][5, 10, 15, 20, 25, 30, 35, 40, 45, 50] &#x5012;&#x5E8F;&#x5207;&#x7247;&#x5BF9;&#x4E8E;list&#xFF0C;&#x65E2;&#x7136;Python&#x652F;&#x6301;L[-1]&#x53D6;&#x5012;&#x6570;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x540C;&#x6837;&#x652F;&#x6301;&#x5012;&#x6570;&#x5207;&#x7247;&#xFF0C;&#x8BD5;&#x8BD5;&#xFF1A; 12345678910111213&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]&gt;&gt;&gt; L[-2:][&apos;Bart&apos;, &apos;Paul&apos;]&gt;&gt;&gt; L[:-2][&apos;Adam&apos;, &apos;Lisa&apos;]&gt;&gt;&gt; L[-3:-1][&apos;Lisa&apos;, &apos;Bart&apos;]&gt;&gt;&gt; L[-4:-1:2][&apos;Adam&apos;, &apos;Bart&apos;] &#x8BB0;&#x4F4F;&#x5012;&#x6570;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x662F;-1&#x3002;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x5012;&#x5E8F;&#x5207;&#x7247;&#x5305;&#x542B;&#x8D77;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;&#x4E0D;&#x5305;&#x542B;&#x7ED3;&#x675F;&#x7D22;&#x5F15;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5229;&#x7528;&#x5012;&#x5E8F;&#x5207;&#x7247;&#x5BF9; 1 - 100 &#x7684;&#x6570;&#x5217;&#x53D6;&#x51FA;&#xFF1A; &#x6700;&#x540E;10&#x4E2A;&#x6570;&#xFF1B; &#x6700;&#x540E;10&#x4E2A;5&#x7684;&#x500D;&#x6570;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 123L = range(1, 101)print L[-10:]print L[-46::5] &#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x5207;&#x7247;&#x5B57;&#x7B26;&#x4E32; &apos;xxx&apos;&#x548C; Unicode&#x5B57;&#x7B26;&#x4E32; u&apos;xxx&apos;&#x4E5F;&#x53EF;&#x4EE5;&#x770B;&#x6210;&#x662F;&#x4E00;&#x79CD;list&#xFF0C;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x5207;&#x7247;&#x64CD;&#x4F5C;&#xFF0C;&#x53EA;&#x662F;&#x64CD;&#x4F5C;&#x7ED3;&#x679C;&#x4ECD;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#xFF1A; 123456&gt;&gt;&gt; &apos;ABCDEFG&apos;[:3]&apos;ABC&apos;&gt;&gt;&gt; &apos;ABCDEFG&apos;[-3:]&apos;EFG&apos;&gt;&gt;&gt; &apos;ABCDEFG&apos;[::2]&apos;ACEG&apos; &#x5728;&#x5F88;&#x591A;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x9488;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x63D0;&#x4F9B;&#x4E86;&#x5F88;&#x591A;&#x5404;&#x79CD;&#x622A;&#x53D6;&#x51FD;&#x6570;&#xFF0C;&#x5176;&#x5B9E;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x5207;&#x7247;&#x3002;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;Python&#x6CA1;&#x6709;&#x9488;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x622A;&#x53D6;&#x51FD;&#x6570;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5207;&#x7247;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x5C31;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#xFF0C;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x5B57;&#x7B26;&#x4E32;&#x6709;&#x4E2A;&#x65B9;&#x6CD5; upper() &#x53EF;&#x4EE5;&#x628A;&#x5B57;&#x7B26;&#x53D8;&#x6210;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#xFF1A; 12&gt;&gt;&gt; &apos;abc&apos;.upper()&apos;ABC&apos; &#x4F46;&#x5B83;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x5B57;&#x6BCD;&#x90FD;&#x53D8;&#x6210;&#x5927;&#x5199;&#x3002;&#x8BF7;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7136;&#x540E;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x4EC5;&#x9996;&#x5B57;&#x6BCD;&#x53D8;&#x6210;&#x5927;&#x5199;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x63D0;&#x793A;&#xFF1A;&#x5229;&#x7528;&#x5207;&#x7247;&#x64CD;&#x4F5C;&#x7B80;&#x5316;&#x5B57;&#x7B26;&#x4E32;&#x64CD;&#x4F5C;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123456def firstCharUpper(s): return s[0].upper() + s[1:]print firstCharUpper(&apos;hello&apos;)print firstCharUpper(&apos;sunday&apos;)print firstCharUpper(&apos;september&apos;) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 123HelloSundaySeptember &#x5404;&#x79CD;&#x8FED;&#x4EE3;&#x65B9;&#x5F0F;&#x4EC0;&#x4E48;&#x662F;&#x8FED;&#x4EE3;&#x5728;Python&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;list&#x6216;tuple&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;for&#x5FAA;&#x73AF;&#x6765;&#x904D;&#x5386;&#x8FD9;&#x4E2A;list&#x6216;tuple&#xFF0C;&#x8FD9;&#x79CD;&#x904D;&#x5386;&#x6211;&#x4EEC;&#x79F0;&#x4E3A;&#x8FED;&#x4EE3;&#xFF08;Iteration&#xFF09;&#x3002; &#x5728;Python&#x4E2D;&#xFF0C;&#x8FED;&#x4EE3;&#x662F;&#x901A;&#x8FC7; for ... in &#x6765;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x800C;&#x5F88;&#x591A;&#x8BED;&#x8A00;&#x6BD4;&#x5982;C&#x6216;&#x8005;Java&#xFF0C;&#x8FED;&#x4EE3;list&#x662F;&#x901A;&#x8FC7;&#x4E0B;&#x6807;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x6BD4;&#x5982;Java&#x4EE3;&#x7801;&#xFF1A; 123for (i=0; i&lt;list.length; i++) { n = list[i];} &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;Python&#x7684;for&#x5FAA;&#x73AF;&#x62BD;&#x8C61;&#x7A0B;&#x5EA6;&#x8981;&#x9AD8;&#x4E8E;Java&#x7684;for&#x5FAA;&#x73AF;&#x3002; &#x56E0;&#x4E3A; Python &#x7684; for&#x5FAA;&#x73AF;&#x4E0D;&#x4EC5;&#x53EF;&#x4EE5;&#x7528;&#x5728;list&#x6216;tuple&#x4E0A;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x4F5C;&#x7528;&#x5728;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x4E0A;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x8FED;&#x4EE3;&#x64CD;&#x4F5C;&#x5C31;&#x662F;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF0C;&#x65E0;&#x8BBA;&#x8BE5;&#x96C6;&#x5408;&#x662F;&#x6709;&#x5E8F;&#x8FD8;&#x662F;&#x65E0;&#x5E8F;&#xFF0C;&#x6211;&#x4EEC;&#x7528; for &#x5FAA;&#x73AF;&#x603B;&#x662F;&#x53EF;&#x4EE5;&#x4F9D;&#x6B21;&#x53D6;&#x51FA;&#x96C6;&#x5408;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x6CE8;&#x610F;: &#x96C6;&#x5408;&#x662F;&#x6307;&#x5305;&#x542B;&#x4E00;&#x7EC4;&#x5143;&#x7D20;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#x7684;&#x5305;&#x62EC;&#xFF1A; &#x6709;&#x5E8F;&#x96C6;&#x5408;&#xFF1A;list&#xFF0C;tuple&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: str&#x548C;unicode&#xFF1B; &#x65E0;&#x5E8F;&#x96C6;&#x5408;&#xFF1A;set &#x65E0;&#x5E8F;&#x96C6;&#x5408;&#x5E76;&#x4E14;&#x5177;&#x6709; key-value &#x5BF9;&#xFF1A;dict &#x800C;&#x8FED;&#x4EE3;&#x662F;&#x4E00;&#x4E2A;&#x52A8;&#x8BCD;&#xFF0C;&#x5B83;&#x6307;&#x7684;&#x662F;&#x4E00;&#x79CD;&#x64CD;&#x4F5C;&#xFF0C;&#x5728;Python&#x4E2D;&#xFF0C;&#x5C31;&#x662F; for &#x5FAA;&#x73AF;&#x3002; &#x8FED;&#x4EE3;&#x4E0E;&#x6309;&#x4E0B;&#x6807;&#x8BBF;&#x95EE;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x7684;&#x4E0D;&#x540C;&#x662F;&#xFF0C;&#x540E;&#x8005;&#x662F;&#x4E00;&#x79CD;&#x5177;&#x4F53;&#x7684;&#x8FED;&#x4EE3;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF0C;&#x800C;&#x524D;&#x8005;&#x53EA;&#x5173;&#x5FC3;&#x8FED;&#x4EE3;&#x7ED3;&#x679C;&#xFF0C;&#x6839;&#x672C;&#x4E0D;&#x5173;&#x5FC3;&#x8FED;&#x4EE3;&#x5185;&#x90E8;&#x662F;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7528;for&#x5FAA;&#x73AF;&#x8FED;&#x4EE3;&#x6570;&#x5217; 1-100 &#x5E76;&#x6253;&#x5370;&#x51FA;7&#x7684;&#x500D;&#x6570;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123for i in range(1, 101): if i % 7 == 0: print i &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1234567891011121314714212835424956637077849198 &#x7D22;&#x5F15;&#x8FED;&#x4EE3;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;Python&#x4E2D;&#xFF0C;&#x8FED;&#x4EE3;&#x6C38;&#x8FDC;&#x662F;&#x53D6;&#x51FA;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#xFF0C;&#x800C;&#x975E;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x3002; &#x5BF9;&#x4E8E;&#x6709;&#x5E8F;&#x96C6;&#x5408;&#xFF0C;&#x5143;&#x7D20;&#x786E;&#x5B9E;&#x662F;&#x6709;&#x7D22;&#x5F15;&#x7684;&#x3002;&#x6709;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x786E;&#x5B9E;&#x60F3;&#x5728; for &#x5FAA;&#x73AF;&#x4E2D;&#x62FF;&#x5230;&#x7D22;&#x5F15;&#xFF0C;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528; enumerate()&#x51FD;&#x6570;&#xFF1A; 12345678&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]&gt;&gt;&gt; for index, name in enumerate(L):... print index, &apos;-&apos;, name... 0 - Adam1 - Lisa2 - Bart3 - Paul &#x4F7F;&#x7528; enumerate()&#x51FD;&#x6570;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;for&#x5FAA;&#x73AF;&#x4E2D;&#x540C;&#x65F6;&#x7ED1;&#x5B9A;&#x7D22;&#x5F15;index&#x548C;&#x5143;&#x7D20;name&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x8FD9;&#x4E0D;&#x662F; enumerate() &#x7684;&#x7279;&#x6B8A;&#x8BED;&#x6CD5;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;enumerate() &#x51FD;&#x6570;&#x628A;&#xFF1A; 1[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;] &#x53D8;&#x6210;&#x4E86;&#x7C7B;&#x4F3C;&#xFF1A; 1[(0, &apos;Adam&apos;), (1, &apos;Lisa&apos;), (2, &apos;Bart&apos;), (3, &apos;Paul&apos;)] &#x56E0;&#x6B64;&#xFF0C;&#x8FED;&#x4EE3;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;tuple&#xFF1A; 1234for t in enumerate(L): index = t[0] name = t[1] print index, &apos;-&apos;, name &#x5982;&#x679C;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x6BCF;&#x4E2A;tuple&#x5143;&#x7D20;&#x90FD;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;for&#x5FAA;&#x73AF;&#x53C8;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x7B80;&#x5199;&#x4E3A;&#xFF1A; 12for index, name in enumerate(L): print index, &apos;-&apos;, name &#x8FD9;&#x6837;&#x4E0D;&#x4F46;&#x4EE3;&#x7801;&#x66F4;&#x7B80;&#x5355;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x5C11;&#x4E86;&#x4E24;&#x6761;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#x3002; &#x53EF;&#x89C1;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: &#x7D22;&#x5F15;&#x8FED;&#x4EE3;&#x4E5F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x6309;&#x7D22;&#x5F15;&#x8BBF;&#x95EE;&#xFF0C;&#x800C;&#x662F;&#x7531; enumerate() &#x51FD;&#x6570;&#x81EA;&#x52A8;&#x628A;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x53D8;&#x6210; (index, element) &#x8FD9;&#x6837;&#x7684;tuple&#xFF0C;&#x518D;&#x8FED;&#x4EE3;&#xFF0C;&#x5C31;&#x540C;&#x65F6;&#x83B7;&#x5F97;&#x4E86;&#x7D22;&#x5F15;&#x548C;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;(&#x5929;&#x6DAF;) zip()&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x628A;&#x4E24;&#x4E2A; list &#x53D8;&#x6210;&#x4E00;&#x4E2A; list&#xFF1A; 12&gt;&gt;&gt; zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])[(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)] &#x5728;&#x8FED;&#x4EE3; [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x60F3;&#x6253;&#x5370;&#x51FA;&#x540D;&#x6B21; - &#x540D;&#x5B57;&#xFF08;&#x540D;&#x6B21;&#x4ECE;1&#x5F00;&#x59CB;)&#xFF0C;&#x8BF7;&#x8003;&#x8651;&#x5982;&#x4F55;&#x5728;&#x8FED;&#x4EE3;&#x4E2D;&#x6253;&#x5370;&#x51FA;&#x6765;&#x3002; &#x63D0;&#x793A;&#xFF1A;&#x8003;&#x8651;&#x4F7F;&#x7528;zip()&#x51FD;&#x6570;&#x548C;range()&#x51FD;&#x6570; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]for index, name in zip(range(1, len(L)+1), L): print index, &apos;-&apos;, name &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 12341 - Adam2 - Lisa3 - Bart4 - Paul &#x8FED;&#x4EE3;dict&#x7684;value&#x8FED;&#x4EE3;dict&#x7684;value&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x4E86;&#x89E3;&#x4E86;dict&#x5BF9;&#x8C61;&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x7528; for &#x5FAA;&#x73AF;&#x76F4;&#x63A5;&#x8FED;&#x4EE3; dict&#xFF0C;&#x53EF;&#x4EE5;&#x6BCF;&#x6B21;&#x62FF;&#x5230;dict&#x7684;&#x4E00;&#x4E2A;key&#x3002; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x8FED;&#x4EE3; dict &#x5BF9;&#x8C61;&#x7684;value&#xFF0C;&#x5E94;&#x8BE5;&#x600E;&#x4E48;&#x505A;&#xFF1F; &#x77E5;&#x8BC6;&#x70B9;&#xFF1A;values()&#x628A;dict&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x6240;&#x6709;value&#x7684;listdict &#x5BF9;&#x8C61;&#x6709;&#x4E00;&#x4E2A; values() &#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x628A;dict&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x6240;&#x6709;value&#x7684;list&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x8FED;&#x4EE3;&#x7684;&#x5C31;&#x662F; dict&#x7684;&#x6BCF;&#x4E00;&#x4E2A; value&#xFF1A; 12345678d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 }print d.values()# [85, 95, 59]for v in d.values(): print v# 85# 95# 59 &#x5982;&#x679C;&#x4ED4;&#x7EC6;&#x9605;&#x8BFB;Python&#x7684;&#x6587;&#x6863;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;dict&#x9664;&#x4E86;values()&#x65B9;&#x6CD5;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A; itervalues() &#x65B9;&#x6CD5;&#xFF0C;&#x7528; itervalues() &#x65B9;&#x6CD5;&#x66FF;&#x4EE3; values() &#x65B9;&#x6CD5;&#xFF0C;&#x8FED;&#x4EE3;&#x6548;&#x679C;&#x5B8C;&#x5168;&#x4E00;&#x6837;&#xFF1A; 12345678d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 }print d.itervalues()# &lt;dictionary-valueiterator object at 0x106adbb50&gt;for v in d.itervalues(): print v# 85# 95# 59 &#x90A3;&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x6709;&#x4F55;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x5462;&#xFF1F; values() &#x65B9;&#x6CD5;&#x5B9E;&#x9645;&#x4E0A;&#x628A;&#x4E00;&#x4E2A; dict &#x8F6C;&#x6362;&#x6210;&#x4E86;&#x5305;&#x542B; value &#x7684;list&#x3002; &#x4F46;&#x662F; itervalues() &#x65B9;&#x6CD5;&#x4E0D;&#x4F1A;&#x8F6C;&#x6362;&#xFF0C;&#x5B83;&#x4F1A;&#x5728;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F9D;&#x6B21;&#x4ECE; dict &#x4E2D;&#x53D6;&#x51FA; value&#xFF0C;&#x6240;&#x4EE5; itervalues() &#x65B9;&#x6CD5;&#x6BD4; values() &#x65B9;&#x6CD5;&#x8282;&#x7701;&#x4E86;&#x751F;&#x6210; list &#x6240;&#x9700;&#x7684;&#x5185;&#x5B58;&#x3002; &#x6253;&#x5370; itervalues() &#x53D1;&#x73B0;&#x5B83;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; &#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x8BF4;&#x660E;&#x5728;Python&#x4E2D;&#xFF0C;for &#x5FAA;&#x73AF;&#x53EF;&#x4F5C;&#x7528;&#x7684;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x8FDC;&#x4E0D;&#x6B62; list&#xFF0C;tuple&#xFF0C;str&#xFF0C;unicode&#xFF0C;dict&#x7B49;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: &#x4EFB;&#x4F55;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x90FD;&#x53EF;&#x4EE5;&#x4F5C;&#x7528;&#x4E8E;for&#x5FAA;&#x73AF;&#xFF0C;&#x800C;&#x5185;&#x90E8;&#x5982;&#x4F55;&#x8FED;&#x4EE3;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x5E76;&#x4E0D;&#x7528;&#x5173;&#x5FC3;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x8BF4;&#x81EA;&#x5DF1;&#x53EF;&#x8FED;&#x4EE3;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5C31;&#x76F4;&#x63A5;&#x7528; for &#x5FAA;&#x73AF;&#x53BB;&#x8FED;&#x4EE3;&#x5B83;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;: &#x53EF;&#x89C1;&#xFF0C;&#x8FED;&#x4EE3;&#x662F;&#x4E00;&#x79CD;&#x62BD;&#x8C61;&#x7684;&#x6570;&#x636E;&#x64CD;&#x4F5C;&#xFF0C;&#x5B83;&#x4E0D;&#x5BF9;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x5185;&#x90E8;&#x7684;&#x6570;&#x636E;&#x6709;&#x4EFB;&#x4F55;&#x8981;&#x6C42;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;dict&#xFF1A;d = { &#x2018;Adam&#x2019;: 95, &#x2018;Lisa&#x2019;: 85, &#x2018;Bart&#x2019;: 59, &#x2018;Paul&#x2019;: 74 } &#x8BF7;&#x8BA1;&#x7B97;&#x6240;&#x6709;&#x540C;&#x5B66;&#x7684;&#x5E73;&#x5747;&#x5206;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59, &apos;Paul&apos;: 74 }sum = 0.0for v in d.itervalues(): sum = sum + vprint sum / len(d) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 178.25 &#x8FED;&#x4EE3;dict&#x7684;key&#x548C;value&#x6211;&#x4EEC;&#x4E86;&#x89E3;&#x4E86;&#x5982;&#x4F55;&#x8FED;&#x4EE3; dict &#x7684;key&#x548C;value&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x5728;&#x4E00;&#x4E2A; for &#x5FAA;&#x73AF;&#x4E2D;&#xFF0C;&#x80FD;&#x5426;&#x540C;&#x65F6;&#x8FED;&#x4EE3; key&#x548C;value&#xFF1F;&#x7B54;&#x6848;&#x662F;&#x80AF;&#x5B9A;&#x7684;&#x3002; &#x9996;&#x5148;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x770B; dict &#x5BF9;&#x8C61;&#x7684; items()&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x7684;&#x503C;&#xFF1A; 123&gt;&gt;&gt; d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 }&gt;&gt;&gt; print d.items()[(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)] &#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;items() &#x65B9;&#x6CD5;&#x628A;dict&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x6210;&#x4E86;&#x5305;&#x542B;tuple&#x7684;list&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;&#x8FD9;&#x4E2A;list&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x83B7;&#x5F97;key&#x548C;value&#xFF1A; 123456&gt;&gt;&gt; for key, value in d.items():... print key, &apos;:&apos;, value... Lisa : 85Adam : 95Bart : 59 &#x548C; values()&#x6709;&#x4E00;&#x4E2A; itervalues() &#x7C7B;&#x4F3C;&#xFF0C;items() &#x4E5F;&#x6709;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684; iteritems()&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A; iteritems() &#x4E0D;&#x628A;dict&#x8F6C;&#x6362;&#x6210;list&#xFF0C;&#x800C;&#x662F;&#x5728;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x65AD;&#x7ED9;&#x51FA; tuple&#xFF0C;&#x6240;&#x4EE5;&#xFF0C; iteritems() &#x4E0D;&#x5360;&#x7528;&#x989D;&#x5916;&#x7684;&#x5185;&#x5B58;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x6839;&#x636E;dict&#xFF1A;d = { &#x2018;Adam&#x2019;: 95, &#x2018;Lisa&#x2019;: 85, &#x2018;Bart&#x2019;: 59, &#x2018;Paul&#x2019;: 74 } &#x6253;&#x5370;&#x51FA; name : score&#xFF0C;&#x6700;&#x540E;&#x518D;&#x6253;&#x5370;&#x51FA;&#x5E73;&#x5747;&#x5206; average : score&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 123456d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59, &apos;Paul&apos;: 74 }sum = 0.0for k, v in d.iteritems(): sum = sum + v print k, &apos;:&apos;, vprint &apos;average&apos;, &apos;:&apos;, sum / len(d) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 12345Lisa : 85Paul : 74Adam : 95Bart : 59average : 78.25 &#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;:&#x5FEB;&#x901F;&#x751F;&#x6210;&#x5217;&#x8868;&#x751F;&#x6210;&#x5217;&#x8868;&#x8981;&#x751F;&#x6210;list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;range(1, 11)&#xFF1A; 12&gt;&gt;&gt; range(1, 11)[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] &#x4F46;&#x5982;&#x679C;&#x8981;&#x751F;&#x6210;[1x1, 2x2, 3x3, ..., 10x10]&#x600E;&#x4E48;&#x505A;&#xFF1F; &#x65B9;&#x6CD5;&#x4E00;&#x662F;&#x5FAA;&#x73AF;&#xFF1A; 123456&gt;&gt;&gt; L = []&gt;&gt;&gt; for x in range(1, 11):... L.append(x * x)... &gt;&gt;&gt; L[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &#x4F46;&#x662F;&#x5FAA;&#x73AF;&#x592A;&#x7E41;&#x7410;&#xFF0C;&#x800C;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x5219;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x884C;&#x8BED;&#x53E5;&#x4EE3;&#x66FF;&#x5FAA;&#x73AF;&#x751F;&#x6210;&#x4E0A;&#x9762;&#x7684;list&#xFF1A; 12&gt;&gt;&gt; [x * x for x in range(1, 11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &#x8FD9;&#x79CD;&#x5199;&#x6CD5;&#x5C31;&#x662F;Python&#x7279;&#x6709;&#x7684;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x3002;&#x5229;&#x7528;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x4EE5;&#x975E;&#x5E38;&#x7B80;&#x6D01;&#x7684;&#x4EE3;&#x7801;&#x751F;&#x6210; list&#x3002; &#x77E5;&#x8BC6;&#x70B9;: &#x5199;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x65F6;&#xFF0C;&#x628A;&#x8981;&#x751F;&#x6210;&#x7684;&#x5143;&#x7D20; x * x&#x653E;&#x5230;&#x524D;&#x9762;&#xFF0C;&#x540E;&#x9762;&#x8DDF; for &#x5FAA;&#x73AF;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x628A;list&#x521B;&#x5EFA;&#x51FA;&#x6765;&#xFF0C;&#x5341;&#x5206;&#x6709;&#x7528;&#xFF0C;&#x591A;&#x5199;&#x51E0;&#x6B21;&#xFF0C;&#x5F88;&#x5FEB;&#x5C31;&#x53EF;&#x4EE5;&#x719F;&#x6089;&#x8FD9;&#x79CD;&#x8BED;&#x6CD5;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x5229;&#x7528;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x751F;&#x6210;&#x5217;&#x8868; [1x2, 3x4, 5x6, 7x8, ..., 99x100] &#x63D0;&#x793A;&#xFF1A;range(1, 100, 2)&#x53EF;&#x4EE5;&#x751F;&#x6210;list [1, 3, 5, 7, 9,...] &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A; 1print [x * (x + 1) for x in range(1, 100, 2)] &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1[2, 12, 30, 56, 90, 132, 182, 240, 306, 380, 462, 552, 650, 756, 870, 992, 1122, 1260, 1406, 1560, 1722, 1892, 2070, 2256, 2450, 2652, 2862, 3080, 3306, 3540, 3782, 4032, 4290, 4556, 4830, 5112, 5402, 5700, 6006, 6320, 6642, 6972, 7310, 7656, 8010, 8372, 8742, 9120, 9506, 9900] &#x590D;&#x6742;&#x8868;&#x8FBE;&#x5F0F;&#x4F7F;&#x7528;for&#x5FAA;&#x73AF;&#x7684;&#x8FED;&#x4EE3;&#x4E0D;&#x4EC5;&#x53EF;&#x4EE5;&#x8FED;&#x4EE3;&#x666E;&#x901A;&#x7684;list&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x8FED;&#x4EE3;dict&#x3002; &#x5047;&#x8BBE;&#x6709;&#x5982;&#x4E0B;&#x7684;dict&#xFF1A; 1d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 } &#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x628A;&#x5B83;&#x53D8;&#x6210;&#x4E00;&#x4E2A; HTML &#x8868;&#x683C;&#xFF1A; 12345tds = [&apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score) for name, score in d.iteritems()]print &apos;&lt;table&gt;&apos;print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;print &apos;\n&apos;.join(tds)print &apos;&lt;/table&gt;&apos; &#x4E2A;&#x4EBA;&#xFF1A;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt; &#x4E2D;&#xFF1A; &#x7B2C;&#x4E00;&#x4E2A;%s&#x662F;name&#x7684;&#x586B;&#x5145;&#x4F4D;&#x7F6E;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;%s&#x4E3A;score&#x7684;&#x586B;&#x5145;&#x4F4D;&#x7F6E;&#x3002; &#x6709;&#x591A;&#x5C11;&#x4E2A;name&#x548C;score&#xFF0C;&#x4F1A;&#x901A;&#x8FC7;&#x5FAA;&#x73AF;&#x751F;&#x6210;&#x591A;&#x5C11;&#x4E2A;&#x3002;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&#x8BBE;&#x7F6E;&#x8868;&#x683C;&#x5934;print &#x2018;\n&#x2019;.join(tds)&#x3002;&#x5217;&#x8868;&#x91CC;&#x7684;&#x9879;&#x901A;&#x8FC7;\n&#x8FDE;&#x63A5;&#x6210;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x6CE8;&#xFF1A;&#x5B57;&#x7B26;&#x4E32;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;%&#x8FDB;&#x884C;&#x683C;&#x5F0F;&#x5316;&#xFF0C;&#x7528;&#x6307;&#x5B9A;&#x7684;&#x53C2;&#x6570;&#x66FF;&#x4EE3; %s&#x3002;&#x5B57;&#x7B26;&#x4E32;&#x7684;join()&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x628A;&#x4E00;&#x4E2A; list&#x62FC;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x628A;&#x6253;&#x5370;&#x51FA;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x4FDD;&#x5B58;&#x4E3A;&#x4E00;&#x4E2A;html&#x6587;&#x4EF6;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x770B;&#x5230;&#x6548;&#x679C;&#x4E86;&#xFF1A; 123456&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&lt;tr&gt;&lt;td&gt;Lisa&lt;/td&gt;&lt;td&gt;85&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Adam&lt;/td&gt;&lt;td&gt;95&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bart&lt;/td&gt;&lt;td&gt;59&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;(&#x5929;&#x6DAF;) &#x5728;&#x751F;&#x6210;&#x7684;&#x8868;&#x683C;&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x6CA1;&#x6709;&#x53CA;&#x683C;&#x7684;&#x540C;&#x5B66;&#xFF0C;&#x8BF7;&#x628A;&#x5206;&#x6570;&#x6807;&#x8BB0;&#x4E3A;&#x7EA2;&#x8272;&#x3002; &#x63D0;&#x793A;&#xFF1A;&#x7EA2;&#x8272;&#x53EF;&#x4EE5;&#x7528; &lt;td style=&quot;color:red&quot;&gt; &#x5B9E;&#x73B0;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 12345678910d = { &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 }def generate_tr(name, score): if score &lt; 60: return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score) return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score)tds = [generate_tr(name, score) for name, score in d.iteritems()]print &apos;&lt;table border=&quot;1&quot;&gt;&apos;print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;print &apos;\n&apos;.join(tds)print &apos;&lt;/table&gt;&apos; &#x8FD0;&#x884C;&#x7ED3;&#x679C;: &#x6761;&#x4EF6;&#x8FC7;&#x6EE4;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x7684; for &#x5FAA;&#x73AF;&#x540E;&#x9762;&#x8FD8;&#x53EF;&#x4EE5;&#x52A0;&#x4E0A; if &#x5224;&#x65AD;&#x3002;&#x4F8B;&#x5982;&#xFF1A; 12&gt;&gt;&gt; [x * x for x in range(1, 11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100] &#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EA;&#x60F3;&#x8981;&#x5076;&#x6570;&#x7684;&#x5E73;&#x65B9;&#xFF0C;&#x4E0D;&#x6539;&#x52A8; range()&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x52A0;&#x4E0A; if &#x6765;&#x7B5B;&#x9009;&#xFF1A; 12&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100] &#x6709;&#x4E86; if &#x6761;&#x4EF6;&#xFF0C;&#x53EA;&#x6709; if &#x5224;&#x65AD;&#x4E3A; True &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x624D;&#x628A;&#x5FAA;&#x73AF;&#x7684;&#x5F53;&#x524D;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5230;&#x5217;&#x8868;&#x4E2D;&#x3002; &#x7F16;&#x7A0B;&#x4EFB;&#x52A1; &#x8BF7;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A; list&#xFF0C;&#x7136;&#x540E;&#x628A;list&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x4E32;&#x53D8;&#x6210;&#x5927;&#x5199;&#x540E;&#x8FD4;&#x56DE;&#xFF0C;&#x975E;&#x5B57;&#x7B26;&#x4E32;&#x5143;&#x7D20;&#x5C06;&#x88AB;&#x5FFD;&#x7565;&#x3002; &#x63D0;&#x793A;&#xFF1A; isinstance(x, str) &#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x53D8;&#x91CF; x &#x662F;&#x5426;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#xFF1B; &#x5B57;&#x7B26;&#x4E32;&#x7684; upper() &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x5927;&#x5199;&#x7684;&#x5B57;&#x6BCD;&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 123def toUppers(L): return [x.upper() for x in L if isinstance(x, str)]print toUppers([&apos;Hello&apos;, &apos;world&apos;, 101]) &#x8FD0;&#x884C;&#x7ED3;&#x679C;: 1[&apos;HELLO&apos;, &apos;WORLD&apos;] &#x591A;&#x5C42;&#x8868;&#x8FBE;&#x5F0F;(&#x77E5;&#x8BC6;&#x70B9;)for&#x5FAA;&#x73AF;&#x53EF;&#x4EE5;&#x5D4C;&#x5957;&#xFF0C;&#x77E5;&#x8BC6;&#x70B9;&#xFF1A;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#x4E2D;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x591A;&#x5C42; for &#x5FAA;&#x73AF;&#x6765;&#x751F;&#x6210;&#x5217;&#x8868;&#x3002; &#x5BF9;&#x4E8E;&#x5B57;&#x7B26;&#x4E32; &apos;ABC&apos; &#x548C; &apos;123&apos;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E24;&#x5C42;&#x5FAA;&#x73AF;&#xFF0C;&#x751F;&#x6210;&#x5168;&#x6392;&#x5217;&#xFF1A; 12&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;123&apos;][&apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;] &#x7FFB;&#x8BD1;&#x6210;&#x5FAA;&#x73AF;&#x4EE3;&#x7801;&#x5C31;&#x50CF;&#x4E0B;&#x9762;&#x8FD9;&#x6837;&#xFF1A; 1234L = []for m in &apos;ABC&apos;: for n in &apos;123&apos;: L.append(m + n) &#x7F16;&#x7A0B;&#x4EFB;&#x52A1;(&#x5929;&#x6DAF;) &#x5229;&#x7528; 3 &#x5C42;for&#x5FAA;&#x73AF;&#x7684;&#x5217;&#x8868;&#x751F;&#x6210;&#x5F0F;&#xFF0C;&#x627E;&#x51FA;&#x5BF9;&#x79F0;&#x7684; 3 &#x4F4D;&#x6570;&#x3002;&#x4F8B;&#x5982;&#xFF0C;121 &#x5C31;&#x662F;&#x5BF9;&#x79F0;&#x6570;&#xFF0C;&#x56E0;&#x4E3A;&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x5012;&#x8FC7;&#x6765;&#x8FD8;&#x662F; 121&#x3002; &#x5B9E;&#x73B0;&#x4EE3;&#x7801;: 1print [100 * n1 + 10 * n2 + n3 for n1 in range(1, 10) for n2 in range(10) for n3 in range(10) if n1==n3] &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A; 1101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]]]></content>
      <categories>
        <category>python从入门到精通</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>零基础入门</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
